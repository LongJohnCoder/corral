var {:scalar} alloc: int;

var {:scalar} s: int;

var {:scalar} yogi_error: int;

var {:scalar} forward_state: int;

var {:pointer} SLAM_guard_S_0: int;

var {:scalar} Mem_T.CompletionRoutine__IO_STACK_LOCATION: [int]int;

procedure corral_nondet() returns ({:scalar} x: int);



procedure boogie_si_record_li2bpl_int(x: int);



const alloc_init: int;

procedure {:allocator} __HAVOC_malloc(size: int) returns (ret: int);
  free requires size >= 0;
  modifies alloc;
  free ensures ret == old(alloc);
  free ensures alloc >= old(alloc) + size;



procedure {:allocator "full"} __HAVOC_malloc_or_null(size: int) returns (ret: int);
  free requires size >= 0;
  modifies alloc;
  free ensures ret == old(alloc) || ret == 0;
  free ensures alloc >= old(alloc) + size;



const {:allocated} NULL: int;

axiom NULL == 0;

function BAND(a: int, b: int) : int;

function BOR(a: int, b: int) : int;

function BNOT(a: int) : int;

function INTDIV(a: int, b: int) : int;

function INTMOD(a: int, b: int) : int;

const KeTickCount: int;

const WHEA_ERROR_PACKET_SECTION_GUID: int;

const Globals: int;

const pwParameters: int;

const pwPollingIterations: int;

const pwPollingIterationsMaximum: int;

const ScanCodeToUCharCount: int;

const pwResendIterations: int;

const pwDebugEnable: int;

const pwOverrideKeyboardSubtype: int;

const pwPowerCaps: int;

const KdDebuggerNotPresent: int;

const KdDebuggerEnabled: int;

const pwPollStatusIterations: int;

const ScanCodeToUCharCount_1: int;

const pwOverrideKeyboardType: int;

const pwKeyboardDataQueueSize: int;

const ScanCodeToUCharCount_2: int;

const ScanCodeToUCharCount_3: int;

const GUID_PCMCIA_BUS_INTERFACE_STANDARD: int;

const GUID_BUS_TYPE_PCMCIA: int;

const GUID_TRANSLATOR_INTERFACE_STANDARD: int;

const GUID_PCI_VIRTUALIZATION_INTERFACE: int;

const GUID_ARBITER_INTERFACE_STANDARD: int;

const GUID_QUERY_CRASHDUMP_FUNCTIONS: int;

const GUID_ACPI_CMOS_INTERFACE_STANDARD: int;

const GUID_BUS_TYPE_1394: int;

const GUID_AGP_TARGET_BUS_INTERFACE_STANDARD: int;

const GUID_TARGET_DEVICE_REMOVE_CANCELLED: int;

const GUID_BUS_TYPE_ISAPNP: int;

const GUID_MF_ENUMERATION_INTERFACE: int;

const GUID_LEGACY_DEVICE_DETECTION_STANDARD: int;

const GUID_PCC_INTERFACE_STANDARD: int;

const GUID_BUS_INTERFACE_STANDARD: int;

const GUID_PNP_POWER_SETTING_CHANGE: int;

const GUID_BUS_TYPE_ACPI: int;

const GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE: int;

const GUID_BUS_TYPE_DOT4PRT: int;

const GUID_BUS_TYPE_EISA: int;

const GUID_ACPI_REGS_INTERFACE_STANDARD: int;

const ScanCodeToUCharCount_4: int;

const GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED: int;

const GUID_ACPI_INTERFACE_STANDARD2: int;

const GUID_PARTITION_UNIT_INTERFACE_STANDARD: int;

const GUID_BUS_TYPE_IRDA: int;

const GUID_PCI_BUS_INTERFACE_STANDARD2: int;

const GUID_WUDF_DEVICE_HOST_PROBLEM: int;

const GUID_DEVICE_INTERFACE_REMOVAL: int;

const GUID_BUS_TYPE_SERENUM: int;

const GUID_PCI_DEVICE_PRESENT_INTERFACE: int;

const GUID_BUS_TYPE_MCA: int;

const GUID_POWER_DEVICE_TIMEOUTS: int;

const GUID_THERMAL_COOLING_INTERFACE: int;

const GUID_HWPROFILE_CHANGE_CANCELLED: int;

const GUID_PNP_LOCATION_INTERFACE: int;

const GUID_MSIX_TABLE_CONFIG_INTERFACE: int;

const GUID_BUS_TYPE_INTERNAL: int;

const GUID_BUS_TYPE_LPTENUM: int;

const GUID_HWPROFILE_CHANGE_COMPLETE: int;

const GUID_DEVICE_INTERFACE_ARRIVAL: int;

const GUID_BUS_TYPE_AVC: int;

const GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD: int;

const GUID_BUS_TYPE_USB: int;

const GUID_INT_ROUTE_INTERFACE_STANDARD: int;

const GUID_PROCESSOR_PCC_INTERFACE_STANDARD: int;

const GUID_BUS_TYPE_USBPRINT: int;

const GUID_BUS_TYPE_PCI: int;

const GUID_TARGET_DEVICE_QUERY_REMOVE: int;

const GUID_PCI_BUS_INTERFACE_STANDARD: int;

const GUID_HWPROFILE_QUERY_CHANGE: int;

const GUID_BUS_TYPE_SW_DEVICE: int;

const GUID_POWER_DEVICE_ENABLE: int;

const GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE: int;

const GUID_PNP_CUSTOM_NOTIFICATION: int;

const GUID_BUS_TYPE_SD: int;

const GUID_PNP_POWER_NOTIFICATION: int;

const GUID_PCC_INTERFACE_INTERNAL: int;

const GUID_D3COLD_SUPPORT_INTERFACE: int;

const GUID_REENUMERATE_SELF_INTERFACE_STANDARD: int;

const GUID_BUS_TYPE_HID: int;

const GUID_TARGET_DEVICE_REMOVE_COMPLETE: int;

const GUID_ACPI_INTERFACE_STANDARD: int;

const GUID_POWER_DEVICE_WAKE_ENABLE: int;

const GUID_DEVICE_SYS_BUTTON: int;

const ScanCodeToUCharCount_5: int;

const pwMouseSynchIn100ns: int;

const pwMouseDataQueueSize: int;

const pwEnableWheelDetection: int;

const pwSampleRate: int;

const ScanCodeToUCharCount_6: int;

const pwNumberOfButtons: int;

const pwMouseResolution: int;

const ScanCodeToUCharCount_7: int;

const pDumpWideString: int;

const pwDebugFlags: int;

const pFncMousePeripheral: int;

const pFncInitializeMouse: int;

const pDumpExpecting: int;

const pIsrKb: int;

const pDumpHex: int;

const pDriverName: int;

const pType: int;

const pwForwardSlash: int;

const pBus: int;

const pController: int;

const pIsrMou: int;

const pFncServiceParameters: int;

const pDumpExpectingIdAck: int;

const pwPointerDeviceBaseName: int;

const pFncKeyboardConfiguration: int;

const pwKeyboardDeviceBaseName: int;

const pNumber: int;

const pwIsrDebugFlags: int;

const pDumpExpectingAck: int;

const pwDevice: int;

const pEnter: int;

const pPeripheral: int;

const ScanCodeToUCharCount_8: int;

const pInfo: int;

const pFncMouseEnable: int;

const pDumpDecimal: int;

const pFncFindWheelMouse: int;

const pExit: int;

const pFncDriverEntry: int;

const pFncMouseInterrupt: int;

const sdv_IoBuildSynchronousFsdRequest_irp: int;

const sdv_harnessStackLocation_next: int;

const sdv_other_irp: int;

const sdv_IoBuildDeviceIoControlRequest_irp: int;

const sdv_harnessDeviceExtension_two: int;

const sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock: int;

const sdv_pv3: int;

const sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX: int;

const p_sdv_fx_dev_object: int;

const sdv_IoBuildAsynchronousFsdRequest_harnessIrp: int;

const sdv_p_devobj_pdo: int;

const sdv_kinterrupt: int;

const sdv_start_irp_already_issued: int;

const sdv_IoGetDeviceToVerify_DEVICE_OBJECT: int;

const sdv_p_devobj_child_pdo: int;

const sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next: int;

const sdv_IoBuildAsynchronousFsdRequest_irp: int;

const sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock: int;

const sdv_ControllerIrp: int;

const sdv_devobj_pdo: int;

const sdv_IoGetDmaAdapter_DMA_ADAPTER: int;

const sdv_IoInitializeIrp_harnessIrp: int;

const sdv_ke_dpc: int;

const sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT: int;

const sdv_irp: int;

const sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next: int;

const sdv_IoCreateSynchronizationEvent_KEVENT: int;

const sdv_ControllerPirp: int;

const sdv_other_harnessStackLocation_next: int;

const sdv_harnessStackLocation: int;

const sdv_IoCreateController_CONTROLLER_OBJECT: int;

const sdv_devobj_top: int;

const sdv_pv2: int;

const sdv_kdpc_val3: int;

const sdv_IoBuildSynchronousFsdRequest_harnessIrp: int;

const sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT: int;

const sdv_MapRegisterBase_val: int;

const sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING: int;

const sdv_IoMakeAssociatedIrp_harnessIrp: int;

const sdv_power_irp: int;

const sdv_devobj_child_pdo: int;

const sdv_harnessIrp: int;

const sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next: int;

const sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock: int;

const sdv_io_dpc: int;

const sdv_kinterrupt_val: int;

const sdv_StartIopirp: int;

const sdv_fx_dev_object: int;

const sdv_devobj_fdo: int;

const sdv_harnessDeviceExtension: int;

const sdv_DpcContext: int;

const sdv_StartIoIrp: int;

const igdoe: int;

const sdv_p_devobj_fdo: int;

const sdv_MapRegisterBase: int;

const sdv_apc_disabled: int;

const sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock: int;

const sdv_p_devobj_top: int;

const sicrni: int;

const sdv_PowerIrp: int;

const sdv_IoBuildDeviceIoControlRequest_harnessIrp: int;

const sdv_io_create_device_called: int;

const sdv_IoMakeAssociatedIrp_irp: int;

const sdv_other_harnessIrp: int;

const sdv_IoBuildSynchronousFsdRequest_IoStatusBlock: int;

const sdv_IoInitializeIrp_irp: int;

const sdv_inside_init_entrypoint: int;

const sdv_IoCreateNotificationEvent_KEVENT: int;

const sdv_other_harnessStackLocation: int;

const sdv_maskedEflags: int;

const sdv_MmMapIoSpace_int: int;

const sdv_cancelFptr: int;

const SLAM_guard_S_0_init: int;

const GUID_DEVICE_THERMAL_ZONE: int;

const GUID_DEVICE_PROCESSOR: int;

const GUID_DEVICE_ACPI_TIME: int;

const GUID_DEVICE_BATTERY: int;

const GUID_DEVICE_MEMORY: int;

const GUID_DEVICE_APPLICATIONLAUNCH_BUTTON: int;

const GUID_DEVICE_LID: int;

const GUID_DEVICE_FAN: int;

const PROCESSOR_NUMBER_PKEY: int;

const GUID_CLASS_INPUT: int;

const ScanCodeToUCharCount_9: int;

const GUID_DEVICE_MESSAGE_INDICATOR: int;

const ScanCodeToUCharCount_10: int;

const MSRedbook_DriverInformationGuid: int;

const GUID_PCIEXPRESS_SETTINGS_SUBGROUP: int;

const MSNdis_VendorID_GUID: int;

const MSMCAEvent_PCIComponentError_GUID: int;

const MSSerial_CommInfo_GUID: int;

const MSDiskDriver_Geometry_GUID: int;

const MSNdis_CurrentPacketFilter_GUID: int;

const MSNdis_WmiTcpIpChecksumOffload_IPv6TransmitReceive_GUID: int;

const MSNdis_80211_DesiredDataRates_GUID: int;

const GUID_NON_ADAPTIVE_INPUT_TIMEOUT: int;

const GUID_ALLOW_RTC_WAKE: int;

const MSNdis_EthernetCurrentAddress_GUID: int;

const MSNdis_TcpOffloadHardwareConfig_GUID: int;

const MSNdis_80211_ConfigurationFH_GUID: int;

const GUID_BATTERY_DISCHARGE_LEVEL_2: int;

const MSNdis_PMCapabilities_GUID: int;

const MSRedbook_PerformanceGuid: int;

const GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD: int;

const MSNdis_StatusDot11RoamingStart_GUID: int;

const WHEA_TLBCHECK_GUID: int;

const MSMouse_ClassInformation_GUID: int;

const MSNdis_80211_NetworkTypesSupported_GUID: int;

const MSNdis_80211_NetworkInfrastructure_GUID: int;

const MSNdis_NotifyVcArrival_GUID: int;

const MSNdis_AtmMaxAal5PacketSize_GUID: int;

const IPF_PROCESSOR_ERROR_SECTION_GUID: int;

const MSNdis_FddiLConnectionState_GUID: int;

const GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD: int;

const MSMCAEvent_CPUError_GUID: int;

const GUID_DISK_IDLE_TIMEOUT: int;

const GUID_ACDC_POWER_SOURCE: int;

const MSNdis_MaximumLookahead_GUID: int;

const MSNdis_StatusMediaConnect_GUID: int;

const MSStorageDriver_ScsiInfoExceptions_GUID: int;

const MSNdis_ReceiveFilterInfoArray_GUID: int;

const MSNdis_CurrentLookahead_GUID: int;

const FIRMWARE_ERROR_RECORD_REFERENCE_GUID: int;

const MSStorageDriver_ATAPISmartData_GUID: int;

const MSNdis_AtmMaxActiveVciBits_GUID: int;

const MSNdis_80211_NetworkTypeInUse_GUID: int;

const ProcessorPerformance_GUID: int;

const MouPointerPortGuid: int;

const MSNdis_80211_Configuration_GUID: int;

const MSMCAEvent_BusError_GUID: int;

const MSNdis_MaximumTotalSize_GUID: int;

const MSNdis_StatusPacketFilterChange_GUID: int;

const GUID_SYSTEM_COOLING_POLICY: int;

const WHEA_RECORD_CREATOR_GUID: int;

const GUID_BATTERY_DISCHARGE_LEVEL_3: int;

const MSNdis_AtmHardwareCurrentAddress_GUID: int;

const MSChangerProblemDeviceError_GUID: int;

const GUID_LOCK_CONSOLE_ON_WAKE: int;

const MSNdis_TcpOffloadParameters_GUID: int;

const GUID_VIDEO_POWERDOWN_TIMEOUT: int;

const MSNdis_HDSplitParameters_GUID: int;

const GUID_PROCESSOR_IDLESTATE_POLICY: int;

const MSMCAEvent_TLBError_GUID: int;

const MSPower_DeviceEnable_GUID: int;

const MSNdis_MacOptions_GUID: int;

const KernelIdleStateChange_GUID: int;

const GUID_UNATTEND_SLEEP_TIMEOUT: int;

const MSNdis_CoMediaSupported_GUID: int;

const MSChangerParameters_GUID: int;

const GENERIC_SECTION_GUID: int;

const MSParallel_DeviceBytesTransferred_GUID: int;

const GUID_CRITICAL_POWER_TRANSITION: int;

const BOOT_NOTIFY_TYPE_GUID: int;

const GUID_SLEEP_IDLE_THRESHOLD: int;

const GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY: int;

const GUID_PROCESSOR_THROTTLE_MAXIMUM: int;

const MSNdis_StatusDot11Disassociation_GUID: int;

const MSNdis_LinkSpeed_GUID: int;

const MSNdis_StatusDevicePowerOnEx_GUID: int;

const GUID_PROCESSOR_PERF_LATENCY_HINT: int;

const MSNdis_TokenRingCurrentRingStatus_GUID: int;

const IdleStateBucketEx_GUID: int;

const GUID_STANDBY_TIMEOUT: int;

const GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD: int;

const MSNdis_StatusProtocolBind_GUID: int;

const MSNdis_FddiFramesLost_GUID: int;

const PCIEXPRESS_ERROR_SECTION_GUID: int;

const KernelIdleStates_GUID: int;

const MSNdis_WmiTcpLargeSendOffloadV1_IPv4_GUID: int;

const MSNdis_HardwareStatus_GUID: int;

const MSNdis_WmiTcpLargeSendOffloadV2_IPv4_GUID: int;

const MSNdis_PMAdminConfigParam_GUID: int;

const MSNdis_EthernetReceiveErrorAlignment_GUID: int;

const MSNdis_80211_BaseServiceSetIdentifier_GUID: int;

const MSNdis_80211_PrivacyFilter_GUID: int;

const GUID_TYPICAL_POWER_SAVINGS: int;

const MSNdis_WmiOutputInfo_GUID: int;

const GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR: int;

const MSChangerProblemEvent_GUID: int;

const GUID_PROCESSOR_SETTINGS_SUBGROUP: int;

const WHEA_BUSCHECK_GUID: int;

const GUID_BATTERY_DISCHARGE_FLAGS_2: int;

const WmiMonitorColorCharacteristics_GUID: int;

const GUID_HIBERNATE_TIMEOUT: int;

const MSNdis_DriverVersion_GUID: int;

const MSNdis_StatusDot11AssociationCompletion_GUID: int;

const GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME: int;

const MSNdis_MediaSupported_GUID: int;

const MSNdis_QueryReceiveFilterCurrentCapabilities_GUID: int;

const MSNdis_CoTransmitPdusOk_GUID: int;

const MSNdis_SetLinkParameters_GUID: int;

const MSNdis_StatusNetworkChange_GUID: int;

const PCIXBUS_ERROR_SECTION_GUID: int;

const MSNdis_VendorDescription_GUID: int;

const KernelThermalPolicyChange_GUID: int;

const MSNdis_FddiLongMaximumListSize_GUID: int;

const IdleAccountingEx_GUID: int;

const GUID_BATTERY_DISCHARGE_ACTION_3: int;

const GUID_PROCESSOR_CORE_PARKING_MIN_CORES: int;

const MSNdis_StatusExternalConnectivityChange_GUID: int;

const MSDiskDriver_Performance_GUID: int;

const MSNdis_NotifyFilterRemoval_GUID: int;

const MSNdis_TransmitBlockSize_GUID: int;

const MSNdis_MediaConnectStatus_GUID: int;

const MSNdis_CoReceivePdusOk_GUID: int;

const IdleAccounting_GUID: int;

const MSNdis_AtmSupportedAalTypes_GUID: int;

const MSNdis_StatusDot11ScanConfirm_GUID: int;

const MSNdis_TokenRingCurrentAddress_GUID: int;

const MSNdis_CoMediaInUse_GUID: int;

const KernelPerfState_GUID: int;

const GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING: int;

const MSNdis_WmiIPSecOffloadV1_Supported_GUID: int;

const MSNdis_PMAdminConfigState_GUID: int;

const GUID_POWERBUTTON_ACTION: int;

const GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY: int;

const MSNdis_NotifyAdapterRemoval_GUID: int;

const MSNdis_FddiShortMaximumListSize_GUID: int;

const GUID_AUDIO_PLAYBACK: int;

const IPF_SAL_RECORD_SECTION_GUID: int;

const GUID_PROCESSOR_THROTTLE_POLICY: int;

const MSNdis_StatisticsInfo_GUID: int;

const MSNdis_QueryNicSwitchHardwareCapabilities_GUID: int;

const MSNdis_FddiLongPermanentAddress_GUID: int;

const MSNdis_DeviceWakeOnMagicPacketOnly_GUID: int;

const MSNdis_PortAuthParameters_GUID: int;

const GUID_BATTERY_PERCENTAGE_REMAINING: int;

const INIT_NOTIFY_TYPE_GUID: int;

const PCIXDEVICE_ERROR_SECTION_GUID: int;

const MSNdis_StatusDot11ConnectionStart_GUID: int;

const GUID_GLOBAL_USER_PRESENCE: int;

const MSAcpiInfo_GUID: int;

const MSNdis_FddiLctFailures_GUID: int;

const GUID_BATTERY_DISCHARGE_ACTION_2: int;

const GUID_APPLAUNCH_BUTTON: int;

const GUID_PROCESSOR_ALLOW_THROTTLING: int;

const MSNdis_AtmMaxActiveVcs_GUID: int;

const WmiMonitorDescriptorMethods_GUID: int;

const MSNdis_CoReceivePduErrors_GUID: int;

const MSNdis_AtmReceiveCellsDropped_GUID: int;

const MSNdis_EnumeratePorts_GUID: int;

const MSNdis_TokenRingCurrentRingState_GUID: int;

const MSNdis_WmiMethodHeader_GUID: int;

const MSNdis_TcpConnectionOffloadCurrentConfig_GUID: int;

const GUID_IDLE_RESILIENCY_PERIOD: int;

const GUID_PROCESSOR_DISTRIBUTE_UTILITY: int;

const MSMCAEvent_MemoryHierarchyError_GUID: int;

const MSNdis_PortChar_GUID: int;

const GUID_SLEEPBUTTON_ACTION: int;

const MSNdis_ReceiveQueueInfoArray_GUID: int;

const GUID_PROCESSOR_PERF_LATENCY_HINT_PERF: int;

const MCE_NOTIFY_TYPE_GUID: int;

const MSNdis_80211_RemoveWEP_GUID: int;

const GUID_PROCESSOR_IDLE_DISABLE: int;

const MSNdis_StatusDot11ConnectionCompletion_GUID: int;

const MSMCAEvent_SMBIOSError_GUID: int;

const MSKeyboard_ClassInformation_GUID: int;

const IdleStateAccounting_GUID: int;

const MSNdis_NetworkDirectAdapterInfo_GUID: int;

const GUID_CONSOLE_DISPLAY_STATE: int;

const GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP: int;

const GUID_BATTERY_DISCHARGE_FLAGS_0: int;

const GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD: int;

const MSNdis_EthernetMoreTransmitCollisions_GUID: int;

const MSNdis_StatusDot11TkipmicFailure_GUID: int;

const MSNdis_AtmMaxAal0PacketSize_GUID: int;

const MSDiskDriver_PerformanceData_GUID: int;

const MSNdis_EnumerateReceiveQueues_GUID: int;

const GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS: int;

const MSNdis_NotifyAdapterArrival_GUID: int;

const MSMouse_PortInformation_GUID: int;

const NMI_SECTION_GUID: int;

const MSMCAEvent_PlatformSpecificError_GUID: int;

const MSMCAEvent_SwitchToCMCPolling_GUID: int;

const MSAcpi_ThermalZoneTemperature_GUID: int;

const MSDeviceUI_FirmwareRevision_GUID: int;

const KernelPerfStateDomainChange_GUID: int;

const GUID_INTSTEER_TIME_UNPARK_TRIGGER: int;

const MSVerifierIrpLogEntry_GUID: int;

const MSNdis_CoVendorDescription_GUID: int;

const MSNdis_NetworkDirectState_GUID: int;

const MSNdis_QueryReceiveQueueParameters_GUID: int;

const GUID_LIDSWITCH_STATE_CHANGE: int;

const GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS: int;

const MSWmi_Guid_GUID: int;

const GUID_SESSION_DISPLAY_STATUS: int;

const MSNdis_TokenRingLastOpenStatus_GUID: int;

const CPE_NOTIFY_TYPE_GUID: int;

const MSTapeProblemDeviceError_GUID: int;

const WmiMonitorListedSupportedSourceModes_GUID: int;

const MSNdis_FddiFrameErrors_GUID: int;

const MSNdis_NetworkDirectAdapterCapabilities_GUID: int;

const GUID_PROCESSOR_PERF_INCREASE_THRESHOLD: int;

const GUID_PROCESSOR_IDLE_STATE_MAXIMUM: int;

const GUID_VIDEO_ANNOYANCE_TIMEOUT: int;

const GUID_BATTERY_DISCHARGE_FLAGS_3: int;

const GUID_PROCESSOR_CORE_PARKING_MAX_CORES: int;

const MSNdis_FddiLemRejects_GUID: int;

const IdleStateAccountingEx_GUID: int;

const GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE: int;

const MSNdis_80211_WLanBssId_GUID: int;

const GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD: int;

const MSNdis_QueryReceiveFilterGlobalParameters_GUID: int;

const GUID_MIN_POWER_SAVINGS: int;

const GUID_DEVICE_IDLE_POLICY: int;

const MSNdis_StatusLinkSpeedChange_GUID: int;

const MSNdis_AtmMaxActiveVpiBits_GUID: int;

const MSNdis_80211_NetworkType_GUID: int;

const MSSerial_HardwareConfiguration_GUID: int;

const MSMCAEvent_Header_GUID: int;

const WHEAErrorInjectionMethods_GUID: int;

const MSNdis_NetworkLinkSpeed_GUID: int;

const MSNdis_StatusMediaSpecificIndication_GUID: int;

const MSTapeSymbolicName_GUID: int;

const GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT: int;

const GUID_SLEEP_SUBGROUP: int;

const MSNdis_NetworkDirectCapabilities_GUID: int;

const MSNdis_StatusResetStart_GUID: int;

const GUID_DEVINTERFACE_MOUSE: int;

const MSNdis_WmiSetHeader_GUID: int;

const MSNdis_80211_ConfigurationInfo_GUID: int;

const MSNdis_80211_ServiceSetIdentifier_GUID: int;

const MSSerial_PerformanceInformation_GUID: int;

const WmiMonitorSupportedDisplayFeatures_GUID: int;

const MSNdis_EthernetMaximumMulticastListSize_GUID: int;

const MSNdis_SetHDSplitParameters_GUID: int;

const MSNdis_WmiIPSecOffloadV1_IPv4AH_GUID: int;

const MSNdis_TcpOffloadCurrentConfig_GUID: int;

const MSNdis_RSSEnabled_GUID: int;

const MSKeyboard_PortInformation_GUID: int;

const MSAgp_Information_GUID: int;

const MSNdis_ReceivesOk_GUID: int;

const MSWmi_MofData_GUID: int;

const MSNdis_EnumerateAdapterEx_GUID: int;

const MSNdis_80211_PowerMode_GUID: int;

const MSNdis_StatusDot11AssociationStart_GUID: int;

const GUID_DISK_SUBGROUP: int;

const MSSerial_CommProperties_GUID: int;

const MSNdis_StatusDot11PhyStateChange_GUID: int;

const GUID_BATTERY_DISCHARGE_LEVEL_1: int;

const MSNdis_ReceiveBlockSize_GUID: int;

const MSNdis_TransmitsOk_GUID: int;

const MSNdis_TokenRingPermanentAddress_GUID: int;

const MSNdis_SetInterruptModeration_GUID: int;

const GUID_BATTERY_DISCHARGE_ACTION_0: int;

const MSNdis_WmiOffload_GUID: int;

const GUID_INTSTEER_LOAD_PER_PROC_TRIGGER: int;

const MSNdis_WmiIPSecOffloadV1_IPv4ESP_GUID: int;

const GUID_BATTERY_DISCHARGE_LEVEL_0: int;

const MSNdis_WmiHDSplitCurrentConfig_GUID: int;

const WmiMonitorAnalogVideoInputParams_GUID: int;

const GUID_VIDEO_DIM_TIMEOUT: int;

const MSNdis_FddiLongMulticastList_GUID: int;

const GUID_PROCESSOR_PERF_TIME_CHECK: int;

const MSNdis_EthernetMacOptions_GUID: int;

const MSWmi_PnPDeviceId_GUID: int;

const MSNdis_80211_BSSIList_GUID: int;

const MSNdis_TokenRingLostFrames_GUID: int;

const GUID_LIDOPEN_POWERSTATE: int;

const GUID_PROCESSOR_PARKING_CORE_OVERRIDE: int;

const MSNdis_FddiUpstreamNodeLong_GUID: int;

const MSNdis_PortArray_GUID: int;

const MSNdis_QueryPortState_GUID: int;

const GUID_PROCESSOR_PERF_INCREASE_TIME: int;

const MSNdis_StatusDot11PmkidCandidateList_GUID: int;

const MSNdis_FddiLongCurrentAddress_GUID: int;

const MSNdis_QueryReceiveFilterHardwareCapabilities_GUID: int;

const MSSerial_PortName_GUID: int;

const MSNdis_NotifyVcRemoval_GUID: int;

const MSNdis_LinkParameters_GUID: int;

const MSNdis_MaximumSendPackets_GUID: int;

const MSMCAInfo_Entry_GUID: int;

const MSNdis_GroupAffinity_GUID: int;

const MSNdis_StatusDot11RoamingCompletion_GUID: int;

const KernelPerfStateChange_GUID: int;

const KbKeyboardPortGuid: int;

const GUID_MONITOR_POWER_ON: int;

const MSNdis_FddiShortMulticastList_GUID: int;

const MSNdis_80211_ReceivedSignalStrengthEventTrigger_GUID: int;

const XPF_MCA_SECTION_GUID: int;

const MSNdis_StatusDevicePowerOn_GUID: int;

const MSKeyboard_ExtendedID_GUID: int;

const WHEAErrorSourceMethods_GUID: int;

const MSNdis_AtmMaxAal34PacketSize_GUID: int;

const MSNdis_TokenRingCurrentGroup_GUID: int;

const MSWmi_ProviderInfo_GUID: int;

const WHEA_MSCHECK_GUID: int;

const MSNdis_FddiAttachmentType_GUID: int;

const MSNdis_ReceiveFilterParameters_GUID: int;

const MSMCAEvent_PCIBusError_GUID: int;

const MSNdis_MediaInUse_GUID: int;

const WmiMonitorID_GUID: int;

const MSMCAInfo_RawCorrectedPlatformEvent_GUID: int;

const GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME: int;

const MSNdis_QueryPhysicalMediumTypeEx_GUID: int;

const GUID_PROCESSOR_THROTTLE_MINIMUM: int;

const GUID_ALLOW_AWAYMODE: int;

const GUID_DISK_ADAPTIVE_POWERDOWN: int;

const GUID_SYSTEM_BUTTON_SUBGROUP: int;

const WmiMonitorBasicDisplayParams_GUID: int;

const MSNdis_ReceiveBufferSpace_GUID: int;

const MSPower_DeviceWakeEnable_GUID: int;

const MSNdis_CoVendorId_GUID: int;

const GUID_ALLOW_SYSTEM_REQUIRED: int;

const MSNdis_WmiTcpIpChecksumOffload_IPv4TransmitReceive_GUID: int;

const MSNdis_NdisEnumerateVc_GUID: int;

const MSNdis_CoMacOptions_GUID: int;

const MSNdis_FddiShortCurrentAddress_GUID: int;

const MSNdis_80211_RTSThreshold_GUID: int;

const MSNdis_80211_BssIdListScan_GUID: int;

const GUID_ALLOW_DISPLAY_REQUIRED: int;

const MSNdis_AtmTransmitCellsOk_GUID: int;

const GENERIC_NOTIFY_TYPE_GUID: int;

const MSSmBios_Sysid1394List_GUID: int;

const MSNdis_TransmitsError_GUID: int;

const MSNdis_CoMinimumLinkSpeed_GUID: int;

const MSNdis_QueryReceiveFilterParameters_GUID: int;

const MSNdis_QueryNicSwitchCurrentCapabilities_GUID: int;

const GUID_PROCESSOR_PARKING_PERF_STATE: int;

const MSNdis_NetworkDirectVersion_GUID: int;

const GUID_PROCESSOR_PERF_DECREASE_POLICY: int;

const MSNdis_80211_Disassociate_GUID: int;

const MSStorageDriver_FailurePredictStatus_GUID: int;

const MSNdis_WmiReceiveScaleCapabilities_GUID: int;

const MSNdis_80211_AddWEP_GUID: int;

const GUID_ALLOW_STANDBY_STATES: int;

const GUID_PROCESSOR_PERFSTATE_POLICY: int;

const MSNdis_TokenRingCurrentFunctional_GUID: int;

const GUID_DEVINTERFACE_KEYBOARD: int;

const MSNdis_InterruptModerationParameters_GUID: int;

const MSNdis_PMCapabilitiesParam_GUID: int;

const MSVerifierIrpLogInformation_GUID: int;

const GUID_BATTERY_DISCHARGE_ACTION_1: int;

const GUID_PROCESSOR_PERF_INCREASE_POLICY: int;

const MSNdis_80211_TransmitPowerLevel_GUID: int;

const WmiMonitorBrightnessEvent_GUID: int;

const GUID_VIDEO_SUBGROUP: int;

const MSNdis_StatusProtocolUnbind_GUID: int;

const MSNdis_ReceiveFilterInfo_GUID: int;

const GUID_HIBERNATE_FASTS4_POLICY: int;

const KernelPerfStates_GUID: int;

const XPF_PROCESSOR_ERROR_SECTION_GUID: int;

const MSNdis_NicSwitchCapabilities_GUID: int;

const MSNdis_LinkState_GUID: int;

const MSNdis_80211_FragmentationThreshold_GUID: int;

const WHEAPolicyManagementMethods_GUID: int;

const MSNdis_NetworkAddress_GUID: int;

const WmiMonitorDigitalVideoInputParams_GUID: int;

const MSNdis_PortStateData_GUID: int;

const GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS: int;

const MSNdis_WmiIPSecOffloadV1_GUID: int;

const MSNdis_80211_TransmitAntennaSelected_GUID: int;

const MSTapeDriveParam_GUID: int;

const MSSmBios_SysidUUID_GUID: int;

const MSNdis_AtmSupportedServiceCategory_GUID: int;

const MSNdis_AtmSupportedVcRates_GUID: int;

const MSNdis_StatusMediaSpecificIndicationEx_GUID: int;

const KernelThermalConstraintChange_GUID: int;

const RegisteredGuids_GUID: int;

const MSWmi_GuidRegistrationInfo_GUID: int;

const MSMCAInfo_RawCMCEvent_GUID: int;

const MSNdis_80211_WEPStatus_GUID: int;

const GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD: int;

const WmiMonitorBrightness_GUID: int;

const GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD: int;

const GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR: int;

const MSNdis_WmiTcpIpChecksumOffload_GUID: int;

const MSNdis_StatusPortState_GUID: int;

const MSNdis_StatusDot11MPDUMaxLengthChange_GUID: int;

const MSNdis_ReceiveQueueParameters_GUID: int;

const MSSmBios_Sysid1394_GUID: int;

const MSNdis_ReceiveQueueInfo_GUID: int;

const NMI_NOTIFY_TYPE_GUID: int;

const MSStorageDriver_FailurePredictFunction_GUID: int;

const GUID_DISK_COALESCING_POWERDOWN_TIMEOUT: int;

const MSNdis_WmiTcpConnectionOffload_GUID: int;

const PROCESSOR_GENERIC_ERROR_SECTION_GUID: int;

const GUID_USERINTERFACEBUTTON_ACTION: int;

const MSNdis_SetPortParameters_GUID: int;

const WmiMonitorBrightnessMethods_GUID: int;

const GUID_PCIEXPRESS_ASPM_POLICY: int;

const MSNdis_EthernetPermanentAddress_GUID: int;

const MSNdis_WmiTcpLargeSendOffloadV2_IPv6_GUID: int;

const MSNdis_CoReceivePdusNoBuffer_GUID: int;

const MSNdis_NetworkShortAddress_GUID: int;

const MSNdis_ObjectHeader_GUID: int;

const MSNdis_80211_DataRates_GUID: int;

const MSNdis_StatusOperationalStatus_GUID: int;

const GUID_BATTERY_DISCHARGE_FLAGS_1: int;

const MSNdis_AtmReceiveCellsOk_GUID: int;

const MSNdis_TcpConnectionOffloadHardwareConfig_GUID: int;

const MSNdis_CoHardwareStatus_GUID: int;

const MSNdis_PMAdminConfig_GUID: int;

const GUID_PROCESSOR_PERF_INCREASE_HISTORY: int;

const GUID_INTSTEER_SUBGROUP: int;

const GUID_DISK_BURST_IGNORE_THRESHOLD: int;

const MSNdis_TokenRingLineErrors_GUID: int;

const WHEA_CACHECHECK_GUID: int;

const MSNdis_QueryInterruptModeration_GUID: int;

const MSNdis_NotifyFilterArrival_GUID: int;

const MSNdis_QueryStatisticsInfo_GUID: int;

const GUID_DISK_POWERDOWN_TIMEOUT: int;

const MSNdis_EnumerateAdapter_GUID: int;

const MSNdis_EthernetOneTransmitCollision_GUID: int;

const MSNdis_StatusDot11LinkQuality_GUID: int;

const GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD: int;

const MSMCAInfo_RawMCAData_GUID: int;

const MSNdis_CoMediaConnectStatus_GUID: int;

const MSNdis_StatusLinkState_GUID: int;

const MSStorageDriver_FailurePredictData_GUID: int;

const MSNdis_ReceiveFilterFieldParameters_GUID: int;

const MSNdis_80211_AuthenticationMode_GUID: int;

const NO_SUBGROUP_GUID: int;

const GUID_VIDEO_FULLSCREEN_PLAYBACK: int;

const WmiMonitorListedFrequencyRanges_GUID: int;

const GUID_PROCESSOR_PERF_BOOST_MODE: int;

const ALL_POWERSCHEMES_GUID: int;

const GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY: int;

const MSMCAInfo_RawMCAEvent_GUID: int;

const WmiMonitorRawEEdidV1Block_GUID: int;

const MSNdis_StatusHDSplitCurrentConfig_GUID: int;

const MSMCAEvent_InvalidError_GUID: int;

const MSNdis_HDSplitCurrentConfig_GUID: int;

const KernelIdleState_GUID: int;

const GUID_PROCESSOR_IDLE_ALLOW_SCALING: int;

const MSMCAEvent_MemoryPageRemoved_GUID: int;

const MSTapeProblemIoError_GUID: int;

const MSNdis_ReceiveFilterCapabilities_GUID: int;

const MSNdis_FddiShortPermanentAddress_GUID: int;

const MSNdis_80211_ReloadDefaults_GUID: int;

const MSMCAEvent_SystemEventError_GUID: int;

const MSNdis_VendorDriverVersion_GUID: int;

const MSTapeDriveProblemEvent_GUID: int;

const GUID_PROCESSOR_IDLE_TIME_CHECK: int;

const GUID_INTSTEER_MODE: int;

const MSNdis_WmiTcpLargeSendOffloadV2_GUID: int;

const GUID_IDLE_RESILIENCY_PLATFORM_STATE: int;

const GUID_BACKGROUND_TASK_NOTIFICATION: int;

const WmiMonitorColorXYZinCIE_GUID: int;

const GUID_PROCESSOR_PERF_HISTORY: int;

const MSNdis_TransmitBufferSpace_GUID: int;

const MSNdis_CoVendorDriverVersion_GUID: int;

const MSNdis_FddiDownstreamNodeLong_GUID: int;

const MSNdis_80211_NumberOfAntennas_GUID: int;

const GUID_VIDEO_ADAPTIVE_POWERDOWN: int;

const PCIe_NOTIFY_TYPE_GUID: int;

const MSNdis_FddiRingManagmentState_GUID: int;

const MSSmBios_SysidUUIDList_GUID: int;

const MSNdis_ReceiveScaleCapabilities_GUID: int;

const MSNdis_PMCapabilityState_GUID: int;

const GUID_VIDEO_CONSOLE_LOCK_TIMEOUT: int;

const GUID_PROCESSOR_PERF_BOOST_POLICY: int;

const GUID_SESSION_USER_PRESENCE: int;

const MSNdis_StatusResetEnd_GUID: int;

const GUID_LIDCLOSE_ACTION: int;

const MSNdis_EnumerateReceiveFilters_GUID: int;

const MSNdis_StatusMediaDisconnect_GUID: int;

const MSParallel_AllocFreeCounts_GUID: int;

const WmiMonitorConnectionParams_GUID: int;

const MSNdis_EthernetMulticastList_GUID: int;

const MSNdis_ReceiveFilterGlobalParameters_GUID: int;

const MSNdis_VlanIdentifier_GUID: int;

const GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS: int;

const MSNdis_AtmMaxAal1PacketSize_GUID: int;

const GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD: int;

const MSNdis_ReceiveNoBuffer_GUID: int;

const MSNdis_WmiEnumAdapter_GUID: int;

const MEMORY_ERROR_SECTION_GUID: int;

const MSWmi_PnPInstanceNames_GUID: int;

const ScanCodeToUCharCount_11: int;

const GUID_PROCESSOR_PERF_DECREASE_TIME: int;

const MSNdis_MaximumFrameSize_GUID: int;

const GUID_MAX_POWER_SAVINGS: int;

const GUID_BATTERY_SUBGROUP: int;

const GUID_PROCESSOR_PERF_DECREASE_HISTORY: int;

const MSNdis_80211_Statistics_GUID: int;

const MSNdis_LinkStateData_GUID: int;

const MSIde_PortDeviceInfo_GUID: int;

const GUID_IDLE_BACKGROUND_TASK: int;

const MSNdis_CountedString_GUID: int;

const MSNdis_StatusDevicePowerOffEx_GUID: int;

const MSSmBios_SMBiosEventlog_GUID: int;

const MSNdis_PhysicalMediumType_GUID: int;

const MSNdis_QueryPciDeviceCustomProperty_GUID: int;

const MSNdis_80211_ReceivedSignalStrength_GUID: int;

const CMC_NOTIFY_TYPE_GUID: int;

const GUID_POWERSCHEME_PERSONALITY: int;

const MSNdis_ReceiveError_GUID: int;

const MSNdis_80211_InfrastructureMode_GUID: int;

const MSNdis_80211_ReceiveAntennaSelected_GUID: int;

const MSNdis_StatusTaskOffloadChange_GUID: int;

const MSStorageDriver_FailurePredictThresholds_GUID: int;

const FrequencyRangeDescriptor_GUID: int;

const MSSmBios_RawSMBiosTables_GUID: int;

const MSNdis_WmiTcpLargeSendOffloadV1_GUID: int;

const MSNdis_SetTcpOffloadParameters_GUID: int;

const MSNdis_CoTransmitPduErrors_GUID: int;

const GUID_IDLE_RESILIENCY_SUBGROUP: int;

const GUID_ENABLE_SWITCH_FORCED_SHUTDOWN: int;

const MSNdis_PciDeviceProperty_GUID: int;

const GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING: int;

const MSMCAEvent_MemoryError_GUID: int;

const GUID_PROCESSOR_PERF_DECREASE_THRESHOLD: int;

const MSStorageDriver_FailurePredictEvent_GUID: int;

const MSMCAEvent_SwitchToCPEPolling_GUID: int;

const GUID_ACTIVE_POWERSCHEME: int;

const GUID_SYSTEM_AWAYMODE: int;

const MSNdis_CoDriverVersion_GUID: int;

const MSNdis_CoLinkSpeed_GUID: int;

const MSNdis_StatusDevicePowerOff_GUID: int;

const VideoModeDescriptor_GUID: int;

const MSTapeMediaCapacity_GUID: int;

const ScanCodeToUCharCount_12: int;

procedure {:origName "_sdv_init2"} _sdv_init2();
  modifies alloc;



implementation {:origName "_sdv_init2"} _sdv_init2()
{
  var vslice_dummy_var_0: int;

  anon0:
    call {:si_unique_call 0} vslice_dummy_var_0 := __HAVOC_malloc(4);
    assume ScanCodeToUCharCount == 54;
    return;
}



procedure {:origName "I8xInitializeHardwareAtBoot"} I8xInitializeHardwareAtBoot(actual_KeyboardStatus: int, actual_MouseStatus: int) returns (Tmp_4: int);
  modifies alloc;



implementation {:origName "I8xInitializeHardwareAtBoot"} I8xInitializeHardwareAtBoot(actual_KeyboardStatus: int, actual_MouseStatus: int) returns (Tmp_4: int)
{
  var {:scalar} sdv_1: int;
  var {:scalar} Tmp_5: int;
  var {:scalar} status: int;
  var {:scalar} Tmp_7: int;
  var {:pointer} KeyboardStatus: int;
  var {:pointer} MouseStatus: int;

  anon0:
    KeyboardStatus := actual_KeyboardStatus;
    MouseStatus := actual_MouseStatus;
    status := 0;
    call {:si_unique_call 1} sdv_do_paged_code_check();
    goto anon29_Then, anon29_Else;

  anon29_Else:
    goto anon30_Then, anon30_Else;

  anon30_Else:
    Tmp_4 := -1073741808;
    goto L1;

  L1:
    return;

  anon30_Then:
    goto L9;

  L9:
    call {:si_unique_call 2} sdv_1 := I8xSanityCheckResources();
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} sdv_1 != 0;
    call {:si_unique_call 3} status := I8xToggleInterrupts(0);
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} status >= 0;
    call {:si_unique_call 4} I8xInitializeHardware(KeyboardStatus, MouseStatus, 1);
    assume {:nonnull} KeyboardStatus != 0;
    assume KeyboardStatus > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    goto L27;

  L27:
    havoc Tmp_5;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} Tmp_5 == 2;
    goto L30;

  L30:
    call {:si_unique_call 5} status := I8xToggleInterrupts(1);
    goto L34;

  L34:
    Tmp_4 := status;
    goto L1;

  anon41_Then:
    assume {:partition} Tmp_5 != 2;
    havoc Tmp_7;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} Tmp_7 != 1;
    goto L34;

  anon42_Then:
    assume {:partition} Tmp_7 == 1;
    goto L30;

  anon33_Then:
    assume {:nonnull} KeyboardStatus != 0;
    assume KeyboardStatus > 0;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    goto L37;

  L37:
    goto anon36_Then, anon36_Else;

  anon36_Else:
    goto L38;

  L38:
    assume {:nonnull} MouseStatus != 0;
    assume MouseStatus > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:nonnull} MouseStatus != 0;
    assume MouseStatus > 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    goto L41;

  L41:
    goto anon40_Then, anon40_Else;

  anon40_Else:
    goto L34;

  anon40_Then:
    goto L27;

  anon38_Then:
    assume {:nonnull} MouseStatus != 0;
    assume MouseStatus > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    goto L41;

  anon39_Then:
    goto L34;

  anon37_Then:
    goto L27;

  anon36_Then:
    goto L27;

  anon34_Then:
    assume {:nonnull} KeyboardStatus != 0;
    assume KeyboardStatus > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    goto L38;

  anon35_Then:
    goto L37;

  anon32_Then:
    assume {:partition} 0 > status;
    Tmp_4 := status;
    goto L1;

  anon31_Then:
    assume {:partition} sdv_1 == 0;
    Tmp_4 := -1073741670;
    goto L1;

  anon29_Then:
    goto L9;
}



procedure {:origName "I8xGetBytePolled"} I8xGetBytePolled(actual_DeviceType: int, actual_Byte: int) returns (Tmp_8: int);
  modifies alloc;
  free ensures Tmp_8 == -1073741643 || Tmp_8 == 0;



implementation {:origName "I8xGetBytePolled"} I8xGetBytePolled(actual_DeviceType: int, actual_Byte: int) returns (Tmp_8: int)
{
  var {:scalar} i: int;
  var {:scalar} Tmp_9: int;
  var {:pointer} Tmp_10: int;
  var {:scalar} Tmp_11: int;
  var {:scalar} response: int;
  var {:pointer} Tmp_13: int;
  var {:scalar} desiredMask: int;
  var {:pointer} Tmp_15: int;
  var {:scalar} DeviceType: int;
  var {:pointer} Byte: int;
  var boogieTmp: int;

  anon0:
    DeviceType := actual_DeviceType;
    Byte := actual_Byte;
    call {:si_unique_call 6} Tmp_10 := __HAVOC_malloc(8);
    call {:si_unique_call 7} Tmp_13 := __HAVOC_malloc(8);
    call {:si_unique_call 8} Tmp_15 := __HAVOC_malloc(8);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} DeviceType == 1;
    goto L10;

  L10:
    i := 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} DeviceType == 2;
    Tmp_9 := 33;
    goto L14;

  L14:
    desiredMask := Tmp_9;
    goto L15;

  L15:
    call {:si_unique_call 9} i, Tmp_10, Tmp_11, response, Tmp_15, boogieTmp := I8xGetBytePolled_loop_L15(i, Tmp_10, Tmp_11, response, desiredMask, Tmp_15, Byte, boogieTmp);
    goto L15_last;

  L15_last:
    goto anon23_Then, anon23_Else;

  anon23_Else:
    havoc Tmp_10;
    assume {:nonnull} Tmp_10 != 0;
    assume Tmp_10 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:IndirectCall} true;
    call {:si_unique_call 10} response := corral_nondet();
    goto L22;

  L22:
    Tmp_11 := BAND(response, desiredMask);
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} Tmp_11 != desiredMask;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} BAND(response, 1) == 0;
    i := i + 1;
    goto anon25_Else_dummy;

  anon25_Else_dummy:
    assume false;
    return;

  anon25_Then:
    assume {:partition} BAND(response, 1) != 0;
    havoc Tmp_15;
    assume {:nonnull} Tmp_15 != 0;
    assume Tmp_15 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:IndirectCall} true;
    assume {:nonnull} Byte != 0;
    assume Byte > 0;
    call {:si_unique_call 11} boogieTmp := corral_nondet();
    goto anon29_Else_dummy;

  anon29_Else_dummy:
    assume false;
    return;

  anon29_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} Byte != 0;
    assume Byte > 0;
    call {:si_unique_call 12} boogieTmp := corral_nondet();
    goto anon29_Then_dummy;

  anon29_Then_dummy:
    assume false;
    return;

  anon28_Then:
    assume {:partition} Tmp_11 == desiredMask;
    goto L16;

  L16:
    goto anon24_Then, anon24_Else;

  anon24_Else:
    Tmp_8 := -1073741643;
    goto L1;

  L1:
    return;

  anon24_Then:
    havoc Tmp_13;
    assume {:nonnull} Tmp_13 != 0;
    assume Tmp_13 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:IndirectCall} true;
    assume {:nonnull} Byte != 0;
    assume Byte > 0;
    call {:si_unique_call 13} boogieTmp := corral_nondet();
    goto L40;

  L40:
    Tmp_8 := 0;
    goto L1;

  anon30_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} Byte != 0;
    assume Byte > 0;
    call {:si_unique_call 14} boogieTmp := corral_nondet();
    goto L40;

  anon27_Then:
    assume {:IndirectCall} true;
    call {:si_unique_call 15} response := corral_nondet();
    goto L22;

  anon23_Then:
    goto L16;

  anon26_Then:
    assume {:partition} DeviceType != 2;
    Tmp_9 := 1;
    goto L14;

  anon21_Then:
    assume {:partition} DeviceType != 1;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} DeviceType == 2;
    goto L10;

  anon22_Then:
    assume {:partition} DeviceType != 2;
    goto L10;
}



procedure {:origName "I8xDrainOutputBuffer"} I8xDrainOutputBuffer(actual_DataAddress: int, actual_CommandAddress: int);
  modifies alloc;



implementation {:origName "I8xDrainOutputBuffer"} I8xDrainOutputBuffer(actual_DataAddress: int, actual_CommandAddress: int)
{
  var {:scalar} i_1: int;
  var {:scalar} sdv_7: int;
  var {:scalar} li_2: int;
  var {:scalar} sdv_8: int;
  var {:scalar} limit: int;
  var vslice_dummy_var_1: int;
  var vslice_dummy_var_2: int;
  var vslice_dummy_var_3: int;
  var vslice_dummy_var_4: int;

  anon0:
    call {:si_unique_call 16} vslice_dummy_var_1 := __HAVOC_malloc(4);
    call {:si_unique_call 17} li_2 := __HAVOC_malloc(20);
    limit := 1000;
    assume {:nonnull} li_2 != 0;
    assume li_2 > 0;
    i_1 := 0;
    goto L10;

  L10:
    call {:si_unique_call 18} i_1, sdv_8, vslice_dummy_var_2 := I8xDrainOutputBuffer_loop_L10(i_1, sdv_8, limit, vslice_dummy_var_2);
    goto L10_last;

  L10_last:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} limit > i_1;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:IndirectCall} true;
    call {:si_unique_call 19} sdv_8 := corral_nondet();
    goto L17;

  L17:
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} BAND(sdv_8, 2) != 0;
    call {:si_unique_call 20} vslice_dummy_var_2 := KeDelayExecutionThread(0, 0, 0);
    i_1 := i_1 + 1;
    goto anon16_Else_dummy;

  anon16_Else_dummy:
    assume false;
    return;

  anon16_Then:
    assume {:partition} BAND(sdv_8, 2) == 0;
    goto L11;

  L11:
    call {:si_unique_call 21} sdv_7, vslice_dummy_var_3, vslice_dummy_var_4 := I8xDrainOutputBuffer_loop_L11(sdv_7, vslice_dummy_var_3, vslice_dummy_var_4);
    goto L11_last;

  L11_last:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:IndirectCall} true;
    call {:si_unique_call 22} sdv_7 := corral_nondet();
    goto L23;

  L23:
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} BAND(sdv_7, 1) != 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:IndirectCall} true;
    call {:si_unique_call 23} vslice_dummy_var_4 := corral_nondet();
    goto anon18_Else_dummy;

  anon18_Else_dummy:
    assume false;
    return;

  anon18_Then:
    assume {:IndirectCall} true;
    call {:si_unique_call 24} vslice_dummy_var_3 := corral_nondet();
    goto anon18_Then_dummy;

  anon18_Then_dummy:
    assume false;
    return;

  anon17_Then:
    assume {:partition} BAND(sdv_7, 1) == 0;
    return;

  anon14_Then:
    assume {:IndirectCall} true;
    call {:si_unique_call 25} sdv_7 := corral_nondet();
    goto L23;

  anon15_Then:
    assume {:IndirectCall} true;
    call {:si_unique_call 26} sdv_8 := corral_nondet();
    goto L17;

  anon13_Then:
    assume {:partition} i_1 >= limit;
    goto L11;
}



procedure {:origName "I8xTransmitControllerCommand"} I8xTransmitControllerCommand(actual_TransmitCCBContext: int);
  modifies alloc;



implementation {:origName "I8xTransmitControllerCommand"} I8xTransmitControllerCommand(actual_TransmitCCBContext: int)
{
  var {:dopa} {:scalar} verifyCommandByte: int;
  var {:pointer} Tmp_20: int;
  var {:pointer} s_p_e_c_i_a_l_1: int;
  var {:scalar} curTime: int;
  var {:pointer} errorLogEntry: int;
  var {:pointer} sdv_12: int;
  var {:pointer} Tmp_21: int;
  var {:pointer} Tmp_22: int;
  var {:pointer} Tmp_23: int;
  var {:scalar} sdv_13: int;
  var {:pointer} Tmp_25: int;
  var {:dopa} {:scalar} controllerCommandByte: int;
  var {:pointer} s_p_e_c_i_a_l_2: int;
  var {:scalar} sdv_16: int;
  var {:pointer} Tmp_27: int;
  var {:scalar} endTime: int;
  var {:pointer} TransmitCCBContext: int;
  var boogieTmp: int;
  var vslice_dummy_var_5: int;
  var vslice_dummy_var_164: int;
  var vslice_dummy_var_165: int;
  var vslice_dummy_var_166: int;

  anon0:
    call {:si_unique_call 27} verifyCommandByte := __HAVOC_malloc(4);
    call {:si_unique_call 28} curTime := __HAVOC_malloc(20);
    call {:si_unique_call 29} controllerCommandByte := __HAVOC_malloc(4);
    call {:si_unique_call 30} vslice_dummy_var_5 := __HAVOC_malloc(4);
    call {:si_unique_call 31} endTime := __HAVOC_malloc(20);
    TransmitCCBContext := actual_TransmitCCBContext;
    call {:si_unique_call 32} Tmp_20 := __HAVOC_malloc(4);
    call {:si_unique_call 33} Tmp_21 := __HAVOC_malloc(4);
    call {:si_unique_call 34} Tmp_23 := __HAVOC_malloc(4);
    call {:si_unique_call 35} Tmp_27 := __HAVOC_malloc(4);
    assume {:nonnull} TransmitCCBContext != 0;
    assume TransmitCCBContext > 0;
    havoc vslice_dummy_var_164;
    call {:si_unique_call 36} boogieTmp := I8xGetControllerCommand(vslice_dummy_var_164, controllerCommandByte);
    assume {:nonnull} TransmitCCBContext != 0;
    assume TransmitCCBContext > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:nonnull} TransmitCCBContext != 0;
    assume TransmitCCBContext > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:nonnull} TransmitCCBContext != 0;
    assume TransmitCCBContext > 0;
    assume {:nonnull} controllerCommandByte != 0;
    assume controllerCommandByte > 0;
    goto L18;

  L18:
    Tmp_25 := KeTickCount;
    assume {:nonnull} Tmp_25 != 0;
    assume Tmp_25 > 0;
    havoc s_p_e_c_i_a_l_1;
    goto L20;

  L20:
    call {:si_unique_call 37} I8xTransmitControllerCommand_loop_L20(s_p_e_c_i_a_l_1, curTime);
    goto L20_last;

  L20_last:
    assume {:nonnull} curTime != 0;
    assume curTime > 0;
    assume {:nonnull} s_p_e_c_i_a_l_1 != 0;
    assume s_p_e_c_i_a_l_1 > 0;
    assume {:nonnull} curTime != 0;
    assume curTime > 0;
    assume {:nonnull} s_p_e_c_i_a_l_1 != 0;
    assume s_p_e_c_i_a_l_1 > 0;
    assume {:nonnull} curTime != 0;
    assume curTime > 0;
    assume {:nonnull} s_p_e_c_i_a_l_1 != 0;
    assume s_p_e_c_i_a_l_1 > 0;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    call {:si_unique_call 38} sdv_13 := corral_nondet();
    assume {:nonnull} curTime != 0;
    assume curTime > 0;
    assume {:nonnull} endTime != 0;
    assume endTime > 0;
    goto L31;

  L31:
    call {:si_unique_call 39} Tmp_22, s_p_e_c_i_a_l_2, boogieTmp := I8xTransmitControllerCommand_loop_L31(verifyCommandByte, curTime, Tmp_22, controllerCommandByte, s_p_e_c_i_a_l_2, endTime, TransmitCCBContext, boogieTmp);
    goto L31_last;

  L31_last:
    assume {:nonnull} TransmitCCBContext != 0;
    assume TransmitCCBContext > 0;
    assume {:nonnull} controllerCommandByte != 0;
    assume controllerCommandByte > 0;
    havoc vslice_dummy_var_165;
    call {:si_unique_call 44} boogieTmp := I8xPutControllerCommand(vslice_dummy_var_165);
    assume {:nonnull} TransmitCCBContext != 0;
    assume TransmitCCBContext > 0;
    havoc vslice_dummy_var_166;
    call {:si_unique_call 45} boogieTmp := I8xGetControllerCommand(vslice_dummy_var_166, verifyCommandByte);
    assume {:nonnull} verifyCommandByte != 0;
    assume verifyCommandByte > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    Tmp_22 := KeTickCount;
    assume {:nonnull} Tmp_22 != 0;
    assume Tmp_22 > 0;
    havoc s_p_e_c_i_a_l_2;
    goto L47;

  L47:
    call {:si_unique_call 40} I8xTransmitControllerCommand_loop_L47(curTime, s_p_e_c_i_a_l_2);
    goto L47_last;

  L47_last:
    assume {:nonnull} curTime != 0;
    assume curTime > 0;
    assume {:nonnull} s_p_e_c_i_a_l_2 != 0;
    assume s_p_e_c_i_a_l_2 > 0;
    assume {:nonnull} curTime != 0;
    assume curTime > 0;
    assume {:nonnull} s_p_e_c_i_a_l_2 != 0;
    assume s_p_e_c_i_a_l_2 > 0;
    assume {:nonnull} curTime != 0;
    assume curTime > 0;
    assume {:nonnull} s_p_e_c_i_a_l_2 != 0;
    assume s_p_e_c_i_a_l_2 > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:nonnull} curTime != 0;
    assume curTime > 0;
    assume {:nonnull} endTime != 0;
    assume endTime > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    goto L55;

  L55:
    assume {:nonnull} TransmitCCBContext != 0;
    assume TransmitCCBContext > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:nonnull} controllerCommandByte != 0;
    assume controllerCommandByte > 0;
    assume {:nonnull} verifyCommandByte != 0;
    assume verifyCommandByte > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:nonnull} verifyCommandByte != 0;
    assume verifyCommandByte > 0;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:nonnull} TransmitCCBContext != 0;
    assume TransmitCCBContext > 0;
    call {:si_unique_call 41} sdv_16 := sdv_KeGetCurrentIrql();
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} 2 >= sdv_16;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    goto L67;

  L67:
    call {:si_unique_call 42} sdv_12 := IoAllocateErrorLogEntry(0, 64);
    errorLogEntry := sdv_12;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} errorLogEntry != 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} TransmitCCBContext != 0;
    assume TransmitCCBContext > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    havoc Tmp_27;
    assume {:nonnull} Tmp_27 != 0;
    assume Tmp_27 > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    havoc Tmp_23;
    assume {:nonnull} Tmp_23 != 0;
    assume Tmp_23 > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    havoc Tmp_20;
    assume {:nonnull} Tmp_20 != 0;
    assume Tmp_20 > 0;
    assume {:nonnull} errorLogEntry != 0;
    assume errorLogEntry > 0;
    havoc Tmp_21;
    assume {:nonnull} Tmp_21 != 0;
    assume Tmp_21 > 0;
    assume {:nonnull} controllerCommandByte != 0;
    assume controllerCommandByte > 0;
    call {:si_unique_call 43} IoWriteErrorLogEntry(0);
    goto L1;

  L1:
    return;

  anon36_Then:
    assume {:partition} errorLogEntry == 0;
    goto L1;

  anon33_Then:
    goto L67;

  anon32_Then:
    assume {:partition} sdv_16 > 2;
    goto L1;

  anon31_Then:
    goto L1;

  anon30_Then:
    goto L1;

  anon29_Then:
    goto L1;

  anon28_Then:
    goto anon28_Then_dummy;

  anon28_Then_dummy:
    assume false;
    return;

  anon35_Then:
    goto anon35_Then_dummy;

  anon35_Then_dummy:
    assume false;
    return;

  anon27_Then:
    goto L55;

  anon34_Then:
    goto anon34_Then_dummy;

  anon34_Then_dummy:
    assume false;
    return;

  anon26_Then:
    assume {:nonnull} TransmitCCBContext != 0;
    assume TransmitCCBContext > 0;
    assume {:nonnull} controllerCommandByte != 0;
    assume controllerCommandByte > 0;
    goto L18;

  anon25_Then:
    goto L1;
}



procedure {:origName "I8xPutControllerCommand"} I8xPutControllerCommand(actual_Byte_1: int) returns (Tmp_29: int);
  modifies alloc;



implementation {:origName "I8xPutControllerCommand"} I8xPutControllerCommand(actual_Byte_1: int) returns (Tmp_29: int)
{
  var {:scalar} status_1: int;
  var {:scalar} Byte_1: int;

  anon0:
    Byte_1 := actual_Byte_1;
    call {:si_unique_call 46} status_1 := I8xPutBytePolled#1(1, 0, 3, 96);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} status_1 >= 0;
    call {:si_unique_call 47} Tmp_29 := I8xPutBytePolled#1(0, 0, 3, Byte_1);
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:partition} 0 > status_1;
    Tmp_29 := status_1;
    goto L1;
}



procedure {:origName "I8xInitializeHardware"} I8xInitializeHardware(actual_KeyboardStatus_1: int, actual_MouseStatus_1: int, actual_InitFlags: int);
  modifies alloc;



implementation {:origName "I8xInitializeHardware"} I8xInitializeHardware(actual_KeyboardStatus_1: int, actual_MouseStatus_1: int, actual_InitFlags: int)
{
  var {:scalar} Tmp_31: int;
  var {:scalar} Tmp_32: int;
  var {:scalar} Tmp_33: int;
  var {:scalar} Tmp_35: int;
  var {:scalar} Tmp_36: int;
  var {:scalar} canTouchKeyboard: int;
  var {:scalar} canTouchMouse: int;
  var {:scalar} Tmp_38: int;
  var {:scalar} Tmp_39: int;
  var {:pointer} Tmp_40: int;
  var {:scalar} Tmp_41: int;
  var {:pointer} keyboardExtension: int;
  var {:pointer} mouseExtension: int;
  var {:scalar} altStatus: int;
  var {:pointer} commandAddress: int;
  var {:pointer} Tmp_43: int;
  var {:scalar} Tmp_44: int;
  var {:pointer} dataAddress: int;
  var {:scalar} Tmp_45: int;
  var {:scalar} firstInit: int;
  var {:scalar} status_2: int;
  var {:scalar} Tmp_46: int;
  var {:pointer} KeyboardStatus_1: int;
  var {:pointer} MouseStatus_1: int;
  var {:scalar} InitFlags: int;
  var boogieTmp: int;
  var vslice_dummy_var_6: int;
  var vslice_dummy_var_7: int;
  var vslice_dummy_var_8: int;
  var vslice_dummy_var_9: int;
  var vslice_dummy_var_10: int;
  var vslice_dummy_var_11: int;
  var vslice_dummy_var_12: int;
  var vslice_dummy_var_13: int;
  var vslice_dummy_var_14: int;

  anon0:
    call {:si_unique_call 48} vslice_dummy_var_6 := __HAVOC_malloc(4);
    KeyboardStatus_1 := actual_KeyboardStatus_1;
    MouseStatus_1 := actual_MouseStatus_1;
    InitFlags := actual_InitFlags;
    call {:si_unique_call 49} Tmp_40 := __HAVOC_malloc(8);
    call {:si_unique_call 50} Tmp_43 := __HAVOC_malloc(8);
    havoc mouseExtension;
    havoc keyboardExtension;
    call {:si_unique_call 51} sdv_do_paged_code_check();
    havoc Tmp_40;
    assume {:nonnull} Tmp_40 != 0;
    assume Tmp_40 > 0;
    havoc dataAddress;
    havoc Tmp_43;
    assume {:nonnull} Tmp_43 != 0;
    assume Tmp_43 > 0;
    havoc commandAddress;
    call {:si_unique_call 52} I8xDrainOutputBuffer(dataAddress, commandAddress);
    goto anon108_Then, anon108_Else;

  anon108_Else:
    assume {:partition} BAND(InitFlags, 1) != 0;
    Tmp_44 := 1;
    goto L28;

  L28:
    firstInit := Tmp_44;
    goto anon109_Then, anon109_Else;

  anon109_Else:
    assume {:partition} firstInit != 0;
    canTouchMouse := 1;
    canTouchKeyboard := canTouchMouse;
    goto L33;

  L33:
    havoc Tmp_46;
    goto anon110_Then, anon110_Else;

  anon110_Else:
    assume {:partition} Tmp_46 == 1;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} firstInit == 0;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} canTouchKeyboard != 0;
    assume {:nonnull} keyboardExtension != 0;
    assume keyboardExtension > 0;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    call {:si_unique_call 53} vslice_dummy_var_7 := I8xPutBytePolled#1(1, 0, 3, 173);
    goto L35;

  L35:
    havoc Tmp_36;
    goto anon111_Then, anon111_Else;

  anon111_Else:
    assume {:partition} Tmp_36 == 2;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} firstInit == 0;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} canTouchMouse != 0;
    assume {:nonnull} mouseExtension != 0;
    assume mouseExtension > 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    call {:si_unique_call 54} vslice_dummy_var_8 := I8xPutBytePolled#1(1, 0, 3, 167);
    goto L43;

  L43:
    call {:si_unique_call 55} I8xDrainOutputBuffer(dataAddress, commandAddress);
    havoc Tmp_38;
    goto anon112_Then, anon112_Else;

  anon112_Else:
    assume {:partition} Tmp_38 == 1;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:partition} canTouchKeyboard != 0;
    assume {:nonnull} KeyboardStatus_1 != 0;
    assume KeyboardStatus_1 > 0;
    call {:si_unique_call 56} boogieTmp := I8xInitializeKeyboard(keyboardExtension);
    assume {:nonnull} KeyboardStatus_1 != 0;
    assume KeyboardStatus_1 > 0;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    goto L62;

  L62:
    assume {:nonnull} KeyboardStatus_1 != 0;
    assume KeyboardStatus_1 > 0;
    goto anon89_Then, anon89_Else;

  anon89_Else:
    goto anon90_Then, anon90_Else;

  anon90_Else:
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:partition} firstInit != 0;
    assume {:nonnull} keyboardExtension != 0;
    assume keyboardExtension > 0;
    call {:si_unique_call 57} IoInvalidateDeviceState(0);
    goto L63;

  L63:
    havoc Tmp_32;
    goto anon113_Then, anon113_Else;

  anon113_Else:
    assume {:partition} Tmp_32 == 2;
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:partition} canTouchMouse != 0;
    assume {:nonnull} MouseStatus_1 != 0;
    assume MouseStatus_1 > 0;
    call {:si_unique_call 58} boogieTmp := I8xInitializeMouse(mouseExtension);
    assume {:nonnull} MouseStatus_1 != 0;
    assume MouseStatus_1 > 0;
    goto anon93_Then, anon93_Else;

  anon93_Else:
    goto L82;

  L82:
    assume {:nonnull} MouseStatus_1 != 0;
    assume MouseStatus_1 > 0;
    goto anon95_Then, anon95_Else;

  anon95_Else:
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:partition} firstInit != 0;
    goto anon97_Then, anon97_Else;

  anon97_Else:
    assume {:nonnull} mouseExtension != 0;
    assume mouseExtension > 0;
    call {:si_unique_call 59} IoInvalidateDeviceState(0);
    goto L83;

  L83:
    havoc Tmp_35;
    goto anon114_Then, anon114_Else;

  anon114_Else:
    assume {:partition} Tmp_35 == 1;
    assume {:nonnull} KeyboardStatus_1 != 0;
    assume KeyboardStatus_1 > 0;
    goto anon98_Then, anon98_Else;

  anon98_Else:
    goto anon99_Then, anon99_Else;

  anon99_Else:
    assume {:partition} canTouchKeyboard != 0;
    call {:si_unique_call 60} status_2 := I8xPutBytePolled#1(0, 1, 1, 237);
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:partition} status_2 == 0;
    assume {:nonnull} keyboardExtension != 0;
    assume keyboardExtension > 0;
    havoc Tmp_31;
    call {:si_unique_call 61} status_2 := I8xPutBytePolled#1(0, 1, 1, Tmp_31);
    goto L94;

  L94:
    havoc Tmp_39;
    goto anon115_Then, anon115_Else;

  anon115_Else:
    assume {:partition} Tmp_39 == 1;
    goto anon101_Then, anon101_Else;

  anon101_Else:
    assume {:partition} canTouchKeyboard != 0;
    call {:si_unique_call 62} altStatus := I8xPutBytePolled#1(1, 0, 3, 174);
    goto anon102_Then, anon102_Else;

  anon102_Else:
    assume {:partition} altStatus >= 0;
    goto L118;

  L118:
    call {:si_unique_call 63} I8xDrainOutputBuffer(dataAddress, commandAddress);
    goto L110;

  L110:
    havoc Tmp_41;
    goto anon116_Then, anon116_Else;

  anon116_Else:
    assume {:partition} Tmp_41 == 2;
    goto anon104_Then, anon104_Else;

  anon104_Else:
    assume {:partition} canTouchMouse != 0;
    call {:si_unique_call 64} altStatus := I8xPutBytePolled#1(1, 0, 3, 168);
    goto anon105_Then, anon105_Else;

  anon105_Else:
    assume {:partition} altStatus >= 0;
    goto L133;

  L133:
    call {:si_unique_call 65} I8xDrainOutputBuffer(dataAddress, commandAddress);
    goto L1;

  L1:
    return;

  anon105_Then:
    assume {:partition} 0 > altStatus;
    goto anon106_Then, anon106_Else;

  anon106_Else:
    assume {:partition} firstInit != 0;
    assume {:nonnull} MouseStatus_1 != 0;
    assume MouseStatus_1 > 0;
    call {:si_unique_call 66} vslice_dummy_var_13 := I8xManuallyRemoveDevice(mouseExtension);
    goto L133;

  anon106_Then:
    assume {:partition} firstInit == 0;
    goto L133;

  anon104_Then:
    assume {:partition} canTouchMouse == 0;
    goto L1;

  anon116_Then:
    assume {:partition} Tmp_41 != 2;
    goto L1;

  anon102_Then:
    assume {:partition} 0 > altStatus;
    goto anon103_Then, anon103_Else;

  anon103_Else:
    assume {:partition} firstInit != 0;
    assume {:nonnull} KeyboardStatus_1 != 0;
    assume KeyboardStatus_1 > 0;
    call {:si_unique_call 67} vslice_dummy_var_14 := I8xManuallyRemoveDevice(keyboardExtension);
    goto L118;

  anon103_Then:
    assume {:partition} firstInit == 0;
    goto L118;

  anon101_Then:
    assume {:partition} canTouchKeyboard == 0;
    goto L110;

  anon115_Then:
    assume {:partition} Tmp_39 != 1;
    goto L110;

  anon100_Then:
    assume {:partition} status_2 != 0;
    goto L94;

  anon99_Then:
    assume {:partition} canTouchKeyboard == 0;
    goto L94;

  anon98_Then:
    goto L94;

  anon114_Then:
    assume {:partition} Tmp_35 != 1;
    goto L94;

  anon97_Then:
    call {:si_unique_call 68} vslice_dummy_var_10 := I8xManuallyRemoveDevice(mouseExtension);
    goto L83;

  anon96_Then:
    assume {:partition} firstInit == 0;
    goto L83;

  anon95_Then:
    goto L83;

  anon93_Then:
    assume {:nonnull} MouseStatus_1 != 0;
    assume MouseStatus_1 > 0;
    goto anon94_Then, anon94_Else;

  anon94_Else:
    goto anon107_Then, anon107_Else;

  anon107_Else:
    assume {:partition} firstInit != 0;
    call {:si_unique_call 69} vslice_dummy_var_11 := I8xManuallyRemoveDevice(mouseExtension);
    goto L83;

  anon107_Then:
    assume {:partition} firstInit == 0;
    goto L83;

  anon94_Then:
    goto L82;

  anon92_Then:
    assume {:partition} canTouchMouse == 0;
    goto L74;

  L74:
    assume {:nonnull} MouseStatus_1 != 0;
    assume MouseStatus_1 > 0;
    goto L83;

  anon113_Then:
    assume {:partition} Tmp_32 != 2;
    goto L74;

  anon91_Then:
    assume {:partition} firstInit == 0;
    goto L63;

  anon90_Then:
    call {:si_unique_call 70} vslice_dummy_var_9 := I8xManuallyRemoveDevice(keyboardExtension);
    goto L63;

  anon89_Then:
    goto L63;

  anon87_Then:
    assume {:nonnull} KeyboardStatus_1 != 0;
    assume KeyboardStatus_1 > 0;
    goto anon88_Then, anon88_Else;

  anon88_Else:
    call {:si_unique_call 71} vslice_dummy_var_12 := I8xManuallyRemoveDevice(keyboardExtension);
    goto L63;

  anon88_Then:
    goto L62;

  anon86_Then:
    assume {:partition} canTouchKeyboard == 0;
    goto L54;

  L54:
    assume {:nonnull} KeyboardStatus_1 != 0;
    assume KeyboardStatus_1 > 0;
    goto L63;

  anon112_Then:
    assume {:partition} Tmp_38 != 1;
    goto L54;

  anon85_Then:
    goto L43;

  anon84_Then:
    assume {:partition} canTouchMouse == 0;
    goto L43;

  anon83_Then:
    assume {:partition} firstInit != 0;
    goto L43;

  anon111_Then:
    assume {:partition} Tmp_36 != 2;
    goto L43;

  anon82_Then:
    goto L35;

  anon81_Then:
    assume {:partition} canTouchKeyboard == 0;
    goto L35;

  anon80_Then:
    assume {:partition} firstInit != 0;
    goto L35;

  anon110_Then:
    assume {:partition} Tmp_46 != 1;
    goto L35;

  anon109_Then:
    assume {:partition} firstInit == 0;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} BAND(InitFlags, 65536) != 0;
    Tmp_33 := 1;
    goto L149;

  L149:
    canTouchKeyboard := Tmp_33;
    goto anon117_Then, anon117_Else;

  anon117_Else:
    assume {:partition} BAND(InitFlags, 131072) != 0;
    Tmp_45 := 1;
    goto L153;

  L153:
    canTouchMouse := Tmp_45;
    goto L33;

  anon117_Then:
    assume {:partition} BAND(InitFlags, 131072) == 0;
    Tmp_45 := 0;
    goto L153;

  anon79_Then:
    assume {:partition} BAND(InitFlags, 65536) == 0;
    Tmp_33 := 0;
    goto L149;

  anon108_Then:
    assume {:partition} BAND(InitFlags, 1) == 0;
    Tmp_44 := 0;
    goto L28;
}



procedure {:origName "I8xGetControllerCommand"} I8xGetControllerCommand(actual_HardwareDisableEnableMask: int, actual_Byte_2: int) returns (Tmp_48: int);
  modifies alloc;



implementation {:origName "I8xGetControllerCommand"} I8xGetControllerCommand(actual_HardwareDisableEnableMask: int, actual_Byte_2: int) returns (Tmp_48: int)
{
  var {:scalar} secondStatus: int;
  var {:scalar} status_3: int;
  var {:scalar} retryCount: int;
  var {:scalar} HardwareDisableEnableMask: int;
  var {:pointer} Byte_2: int;

  anon0:
    HardwareDisableEnableMask := actual_HardwareDisableEnableMask;
    Byte_2 := actual_Byte_2;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} BAND(HardwareDisableEnableMask, 1) != 0;
    call {:si_unique_call 72} status_3 := I8xPutBytePolled#1(1, 0, 3, 173);
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} status_3 < 0;
    Tmp_48 := status_3;
    goto L1;

  L1:
    return;

  anon37_Then:
    assume {:partition} 0 <= status_3;
    goto L7;

  L7:
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} BAND(HardwareDisableEnableMask, 2) != 0;
    call {:si_unique_call 73} status_3 := I8xPutBytePolled#1(1, 0, 3, 167);
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} status_3 < 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} BAND(HardwareDisableEnableMask, 1) != 0;
    call {:si_unique_call 74} secondStatus := I8xPutBytePolled#1(1, 0, 3, 174);
    goto L23;

  L23:
    Tmp_48 := status_3;
    goto L1;

  anon39_Then:
    assume {:partition} BAND(HardwareDisableEnableMask, 1) == 0;
    goto L23;

  anon38_Then:
    assume {:partition} 0 <= status_3;
    goto L14;

  L14:
    call {:si_unique_call 75} status_3 := I8xPutBytePolled#1(1, 0, 3, 32);
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} status_3 >= 0;
    retryCount := 0;
    goto L32;

  L32:
    call {:si_unique_call 76} status_3, retryCount := I8xGetControllerCommand_loop_L32(status_3, retryCount, Byte_2);
    goto L32_last;

  L32_last:
    assume {:CounterLoop 5} {:Counter "retryCount"} true;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} 5 > retryCount;
    call {:si_unique_call 77} status_3 := I8xGetBytePolled(0, Byte_2);
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} status_3 < 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} status_3 == -1073741643;
    retryCount := retryCount + 1;
    goto anon44_Else_dummy;

  anon44_Else_dummy:
    assume false;
    return;

  anon44_Then:
    assume {:partition} status_3 != -1073741643;
    goto L30;

  L30:
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} BAND(HardwareDisableEnableMask, 1) != 0;
    call {:si_unique_call 78} secondStatus := I8xPutBytePolled#1(1, 0, 3, 174);
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} secondStatus >= 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} status_3 == 0;
    assume {:nonnull} Byte_2 != 0;
    assume Byte_2 > 0;
    goto L45;

  L45:
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} BAND(HardwareDisableEnableMask, 2) != 0;
    call {:si_unique_call 79} secondStatus := I8xPutBytePolled#1(1, 0, 3, 168);
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} secondStatus >= 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} status_3 >= 0;
    assume {:nonnull} Byte_2 != 0;
    assume Byte_2 > 0;
    goto L55;

  L55:
    Tmp_48 := status_3;
    goto L1;

  anon51_Then:
    assume {:partition} 0 > status_3;
    goto L55;

  anon49_Then:
    assume {:partition} 0 > secondStatus;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} status_3 >= 0;
    status_3 := secondStatus;
    goto L55;

  anon50_Then:
    assume {:partition} 0 > status_3;
    goto L55;

  anon45_Then:
    assume {:partition} BAND(HardwareDisableEnableMask, 2) == 0;
    goto L55;

  anon48_Then:
    assume {:partition} status_3 != 0;
    goto L45;

  anon46_Then:
    assume {:partition} 0 > secondStatus;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} status_3 >= 0;
    status_3 := secondStatus;
    goto L45;

  anon47_Then:
    assume {:partition} 0 > status_3;
    goto L45;

  anon41_Then:
    assume {:partition} BAND(HardwareDisableEnableMask, 1) == 0;
    goto L45;

  anon43_Then:
    assume {:partition} 0 <= status_3;
    goto L30;

  anon42_Then:
    assume {:partition} retryCount >= 5;
    goto L30;

  anon40_Then:
    assume {:partition} 0 > status_3;
    goto L30;

  anon36_Then:
    assume {:partition} BAND(HardwareDisableEnableMask, 2) == 0;
    goto L14;

  anon35_Then:
    assume {:partition} BAND(HardwareDisableEnableMask, 1) == 0;
    goto L7;
}



procedure {:origName "I8xGetByteAsynchronous"} I8xGetByteAsynchronous(actual_DeviceType_1: int, actual_Byte_3: int);
  modifies alloc;



implementation {:origName "I8xGetByteAsynchronous"} I8xGetByteAsynchronous(actual_DeviceType_1: int, actual_Byte_3: int)
{
  var {:scalar} i_2: int;
  var {:pointer} Tmp_50: int;
  var {:pointer} Tmp_51: int;
  var {:pointer} Tmp_52: int;
  var {:scalar} Tmp_54: int;
  var {:scalar} Tmp_57: int;
  var {:scalar} response_1: int;
  var {:scalar} desiredMask_1: int;
  var {:scalar} DeviceType_1: int;
  var {:pointer} Byte_3: int;
  var boogieTmp: int;
  var vslice_dummy_var_15: int;

  anon0:
    call {:si_unique_call 80} vslice_dummy_var_15 := __HAVOC_malloc(4);
    DeviceType_1 := actual_DeviceType_1;
    Byte_3 := actual_Byte_3;
    call {:si_unique_call 81} Tmp_50 := __HAVOC_malloc(8);
    call {:si_unique_call 82} Tmp_51 := __HAVOC_malloc(8);
    call {:si_unique_call 83} Tmp_52 := __HAVOC_malloc(8);
    i_2 := 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} DeviceType_1 == 2;
    Tmp_57 := 33;
    goto L10;

  L10:
    desiredMask_1 := Tmp_57;
    goto L11;

  L11:
    call {:si_unique_call 84} i_2, Tmp_50, Tmp_51, Tmp_54, response_1, boogieTmp := I8xGetByteAsynchronous_loop_L11(i_2, Tmp_50, Tmp_51, Tmp_54, response_1, desiredMask_1, Byte_3, boogieTmp);
    goto L11_last;

  L11_last:
    goto anon17_Then, anon17_Else;

  anon17_Else:
    havoc Tmp_50;
    assume {:nonnull} Tmp_50 != 0;
    assume Tmp_50 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:IndirectCall} true;
    call {:si_unique_call 85} response_1 := corral_nondet();
    goto L18;

  L18:
    Tmp_54 := BAND(response_1, desiredMask_1);
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} Tmp_54 != desiredMask_1;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} BAND(response_1, 1) != 0;
    havoc Tmp_51;
    assume {:nonnull} Tmp_51 != 0;
    assume Tmp_51 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:IndirectCall} true;
    assume {:nonnull} Byte_3 != 0;
    assume Byte_3 > 0;
    call {:si_unique_call 86} boogieTmp := corral_nondet();
    goto anon23_Else_dummy;

  anon23_Else_dummy:
    assume false;
    return;

  anon23_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} Byte_3 != 0;
    assume Byte_3 > 0;
    call {:si_unique_call 87} boogieTmp := corral_nondet();
    goto anon23_Then_dummy;

  anon23_Then_dummy:
    assume false;
    return;

  anon19_Then:
    assume {:partition} BAND(response_1, 1) == 0;
    i_2 := i_2 + 1;
    goto anon19_Then_dummy;

  anon19_Then_dummy:
    assume false;
    return;

  anon22_Then:
    assume {:partition} Tmp_54 == desiredMask_1;
    goto L12;

  L12:
    goto anon18_Then, anon18_Else;

  anon18_Else:
    havoc Tmp_52;
    assume {:nonnull} Tmp_52 != 0;
    assume Tmp_52 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:IndirectCall} true;
    assume {:nonnull} Byte_3 != 0;
    assume Byte_3 > 0;
    call {:si_unique_call 88} boogieTmp := corral_nondet();
    goto L1;

  L1:
    return;

  anon24_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} Byte_3 != 0;
    assume Byte_3 > 0;
    call {:si_unique_call 89} boogieTmp := corral_nondet();
    goto L1;

  anon18_Then:
    goto L1;

  anon21_Then:
    assume {:IndirectCall} true;
    call {:si_unique_call 90} response_1 := corral_nondet();
    goto L18;

  anon17_Then:
    goto L12;

  anon20_Then:
    assume {:partition} DeviceType_1 != 2;
    Tmp_57 := 1;
    goto L10;
}



procedure {:origName "I8xPutByteAsynchronous"} I8xPutByteAsynchronous(actual_PortType: int, actual_Byte_4: int);
  modifies alloc;



implementation {:origName "I8xPutByteAsynchronous"} I8xPutByteAsynchronous(actual_PortType: int, actual_Byte_4: int)
{
  var {:scalar} i_3: int;
  var {:pointer} Tmp_60: int;
  var {:scalar} sdv_43: int;
  var {:pointer} Tmp_65: int;
  var {:pointer} Tmp_66: int;
  var {:scalar} Tmp_67: int;
  var {:scalar} PortType: int;
  var vslice_dummy_var_16: int;

  anon0:
    call {:si_unique_call 91} vslice_dummy_var_16 := __HAVOC_malloc(4);
    PortType := actual_PortType;
    call {:si_unique_call 92} Tmp_60 := __HAVOC_malloc(8);
    call {:si_unique_call 93} Tmp_65 := __HAVOC_malloc(8);
    call {:si_unique_call 94} Tmp_66 := __HAVOC_malloc(8);
    i_3 := 0;
    goto L5;

  L5:
    call {:si_unique_call 95} i_3, Tmp_60, sdv_43, Tmp_67 := I8xPutByteAsynchronous_loop_L5(i_3, Tmp_60, sdv_43, Tmp_67);
    goto L5_last;

  L5_last:
    Tmp_67 := i_3;
    i_3 := i_3 + 1;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    havoc Tmp_60;
    assume {:nonnull} Tmp_60 != 0;
    assume Tmp_60 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:IndirectCall} true;
    call {:si_unique_call 96} sdv_43 := corral_nondet();
    goto L11;

  L11:
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} BAND(sdv_43, 2) == 0;
    goto L6;

  L6:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} PortType == 1;
    havoc Tmp_66;
    assume {:nonnull} Tmp_66 != 0;
    assume Tmp_66 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:IndirectCall} true;
    goto L1;

  L1:
    return;

  anon20_Then:
    assume {:IndirectCall} true;
    goto L1;

  anon17_Then:
    assume {:partition} PortType != 1;
    havoc Tmp_65;
    assume {:nonnull} Tmp_65 != 0;
    assume Tmp_65 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:IndirectCall} true;
    goto L1;

  anon21_Then:
    assume {:IndirectCall} true;
    goto L1;

  anon15_Then:
    goto L1;

  anon16_Then:
    assume {:partition} BAND(sdv_43, 2) != 0;
    goto anon16_Then_dummy;

  anon16_Then_dummy:
    assume false;
    return;

  anon19_Then:
    assume {:IndirectCall} true;
    call {:si_unique_call 97} sdv_43 := corral_nondet();
    goto L11;

  anon18_Then:
    goto L6;
}



procedure {:origName "I8xToggleInterrupts"} I8xToggleInterrupts(actual_State_1: int) returns (Tmp_69: int);
  modifies alloc;



implementation {:origName "I8xToggleInterrupts"} I8xToggleInterrupts(actual_State_1: int) returns (Tmp_69: int)
{
  var {:scalar} Tmp_70: int;
  var {:scalar} transmitCCBContext: int;
  var {:pointer} Tmp_71: int;
  var {:scalar} Tmp_72: int;
  var {:scalar} Tmp_73: int;
  var {:scalar} Tmp_75: int;
  var {:scalar} State_1: int;

  anon0:
    call {:si_unique_call 98} transmitCCBContext := __HAVOC_malloc(16);
    State_1 := actual_State_1;
    call {:si_unique_call 99} sdv_do_paged_code_check();
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} State_1 != 0;
    assume {:nonnull} transmitCCBContext != 0;
    assume transmitCCBContext > 0;
    assume {:nonnull} transmitCCBContext != 0;
    assume transmitCCBContext > 0;
    havoc Tmp_73;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} Tmp_73 == 1;
    Tmp_72 := 1;
    goto L15;

  L15:
    assume {:nonnull} transmitCCBContext != 0;
    assume transmitCCBContext > 0;
    havoc Tmp_70;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} Tmp_70 == 2;
    Tmp_75 := 2;
    goto L20;

  L20:
    assume {:nonnull} transmitCCBContext != 0;
    assume transmitCCBContext > 0;
    goto L21;

  L21:
    Tmp_71 := transmitCCBContext;
    call {:si_unique_call 100} I8xTransmitControllerCommand(Tmp_71);
    assume {:nonnull} transmitCCBContext != 0;
    assume transmitCCBContext > 0;
    havoc Tmp_69;
    return;

  anon9_Then:
    assume {:partition} Tmp_70 != 2;
    Tmp_75 := 0;
    goto L20;

  anon8_Then:
    assume {:partition} Tmp_73 != 1;
    Tmp_72 := 0;
    goto L15;

  anon7_Then:
    assume {:partition} State_1 == 0;
    assume {:nonnull} transmitCCBContext != 0;
    assume transmitCCBContext > 0;
    assume {:nonnull} transmitCCBContext != 0;
    assume transmitCCBContext > 0;
    assume {:nonnull} transmitCCBContext != 0;
    assume transmitCCBContext > 0;
    goto L21;
}



procedure {:origName "I8xConvertTypematicParameters"} I8xConvertTypematicParameters(actual_Rate: int, actual_Delay: int) returns (Tmp_81: int);
  modifies alloc;



implementation {:origName "I8xConvertTypematicParameters"} I8xConvertTypematicParameters(actual_Rate: int, actual_Delay: int) returns (Tmp_81: int)
{
  var {:scalar} Tmp_82: int;
  var {:pointer} TypematicPeriod: int;
  var {:scalar} value: int;
  var {:scalar} Rate: int;
  var {:scalar} Delay: int;

  anon0:
    Rate := actual_Rate;
    Delay := actual_Delay;
    call {:si_unique_call 101} TypematicPeriod := __HAVOC_malloc(112);
    assume {:nonnull} TypematicPeriod != 0;
    assume TypematicPeriod > 0;
    value := INTDIV(Delay, 250) - 1;
    call {:si_unique_call 102} value := corral_nondet();
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} 27 >= Rate;
    Tmp_82 := Rate;
    assume {:nonnull} TypematicPeriod != 0;
    assume TypematicPeriod > 0;
    havoc value;
    goto L9;

  L9:
    Tmp_81 := value;
    return;

  anon3_Then:
    assume {:partition} Rate > 27;
    goto L9;
}



procedure {:origName "I8042ConversionStatusForOasys"} I8042ConversionStatusForOasys(actual_fOpen: int, actual_ConvStatus: int) returns (Tmp_84: int);
  free ensures Tmp_84 == 5 || Tmp_84 == 8 || Tmp_84 == 7 || Tmp_84 == 1 || Tmp_84 == 4 || Tmp_84 == 3;



implementation {:origName "I8042ConversionStatusForOasys"} I8042ConversionStatusForOasys(actual_fOpen: int, actual_ConvStatus: int) returns (Tmp_84: int)
{
  var {:scalar} ImeMode: int;
  var {:scalar} fOpen: int;
  var {:scalar} ConvStatus: int;

  anon0:
    fOpen := actual_fOpen;
    ConvStatus := actual_ConvStatus;
    ImeMode := 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} fOpen != 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} BAND(ConvStatus, 16) != 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} BAND(ConvStatus, 0) != 0;
    ImeMode := 5;
    goto L12;

  L12:
    Tmp_84 := ImeMode;
    return;

  anon19_Then:
    assume {:partition} BAND(ConvStatus, 0) == 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} BAND(ConvStatus, 2) != 0;
    ImeMode := 8;
    goto L12;

  anon20_Then:
    assume {:partition} BAND(ConvStatus, 2) == 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} BAND(ConvStatus, 1) != 0;
    ImeMode := 7;
    goto L12;

  anon21_Then:
    assume {:partition} BAND(ConvStatus, 1) == 0;
    ImeMode := 5;
    goto L12;

  anon17_Then:
    assume {:partition} BAND(ConvStatus, 16) == 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} BAND(ConvStatus, 0) != 0;
    ImeMode := 1;
    goto L12;

  anon18_Then:
    assume {:partition} BAND(ConvStatus, 0) == 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} BAND(ConvStatus, 2) != 0;
    ImeMode := 4;
    goto L12;

  anon22_Then:
    assume {:partition} BAND(ConvStatus, 2) == 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} BAND(ConvStatus, 1) != 0;
    ImeMode := 3;
    goto L12;

  anon23_Then:
    assume {:partition} BAND(ConvStatus, 1) == 0;
    ImeMode := 1;
    goto L12;

  anon24_Then:
    assume {:partition} fOpen == 0;
    ImeMode := 1;
    goto L12;
}



procedure {:origName "I8xServiceDebugEnable"} I8xServiceDebugEnable(actual_DeviceExtension: int, actual_RegistryPath: int);
  modifies alloc;



implementation {:origName "I8xServiceDebugEnable"} I8xServiceDebugEnable(actual_DeviceExtension: int, actual_RegistryPath: int)
{
  var {:dopa} {:scalar} keyNumber: int;
  var {:scalar} Tmp_86: int;
  var {:pointer} sdv_48: int;
  var {:dopa} {:scalar} defaultDebugFlags: int;
  var {:scalar} Tmp_90: int;
  var {:pointer} keyToScanTbl: int;
  var {:pointer} sdv_49: int;
  var {:scalar} Tmp_91: int;
  var {:dopa} {:scalar} defaultKeyNumber: int;
  var {:dopa} {:scalar} debugFlags: int;
  var {:pointer} parameters: int;
  var {:scalar} status_5: int;
  var {:scalar} queriesPlusOne: int;
  var {:scalar} Tmp_92: int;
  var {:scalar} parametersPath: int;
  var {:scalar} Tmp_93: int;
  var {:pointer} DeviceExtension: int;
  var {:pointer} RegistryPath: int;
  var vslice_dummy_var_17: int;
  var vslice_dummy_var_18: int;
  var vslice_dummy_var_19: int;
  var vslice_dummy_var_20: int;

  anon0:
    call {:si_unique_call 103} keyNumber := __HAVOC_malloc(4);
    call {:si_unique_call 104} defaultDebugFlags := __HAVOC_malloc(4);
    call {:si_unique_call 105} vslice_dummy_var_17 := __HAVOC_malloc(4);
    call {:si_unique_call 106} defaultKeyNumber := __HAVOC_malloc(4);
    call {:si_unique_call 107} debugFlags := __HAVOC_malloc(4);
    call {:si_unique_call 108} parametersPath := __HAVOC_malloc(12);
    DeviceExtension := actual_DeviceExtension;
    RegistryPath := actual_RegistryPath;
    call {:si_unique_call 109} vslice_dummy_var_19 := __HAVOC_malloc(52);
    call {:si_unique_call 110} keyToScanTbl := __HAVOC_malloc(536);
    parameters := 0;
    assume {:nonnull} defaultDebugFlags != 0;
    assume defaultDebugFlags > 0;
    assume {:nonnull} defaultKeyNumber != 0;
    assume defaultKeyNumber > 0;
    status_5 := 0;
    queriesPlusOne := 3;
    assume {:nonnull} keyToScanTbl != 0;
    assume keyToScanTbl > 0;
    call {:si_unique_call 111} sdv_do_paged_code_check();
    assume {:nonnull} parametersPath != 0;
    assume parametersPath > 0;
    assume {:nonnull} RegistryPath != 0;
    assume RegistryPath > 0;
    Tmp_91 := 28 * queriesPlusOne;
    call {:si_unique_call 112} sdv_48 := ExAllocatePoolWithTag(1, Tmp_91, 842281016);
    parameters := sdv_48;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} parameters != 0;
    Tmp_90 := 28 * queriesPlusOne;
    call {:si_unique_call 113} sdv_RtlZeroMemory(0, Tmp_90);
    call {:si_unique_call 114} RtlInitUnicodeString(parametersPath, 0);
    assume {:nonnull} RegistryPath != 0;
    assume RegistryPath > 0;
    assume {:nonnull} parametersPath != 0;
    assume parametersPath > 0;
    assume {:nonnull} parametersPath != 0;
    assume parametersPath > 0;
    havoc Tmp_92;
    call {:si_unique_call 115} sdv_49 := ExAllocatePoolWithTag(1, Tmp_92, 842281016);
    assume {:nonnull} parametersPath != 0;
    assume parametersPath > 0;
    assume {:nonnull} parametersPath != 0;
    assume parametersPath > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    goto L47;

  L47:
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} status_5 >= 0;
    assume {:nonnull} parametersPath != 0;
    assume parametersPath > 0;
    havoc Tmp_86;
    call {:si_unique_call 116} sdv_RtlZeroMemory(0, Tmp_86);
    call {:si_unique_call 117} vslice_dummy_var_18 := corral_nondet();
    call {:si_unique_call 118} vslice_dummy_var_20 := corral_nondet();
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    assume {:nonnull} parameters != 0;
    assume parameters > 0;
    call {:si_unique_call 119} status_5 := sdv_RtlQueryRegistryValues(0, 0, 0, 0, 0);
    goto L48;

  L48:
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} status_5 >= 0;
    assume {:nonnull} DeviceExtension != 0;
    assume DeviceExtension > 0;
    assume {:nonnull} debugFlags != 0;
    assume debugFlags > 0;
    goto L77;

  L77:
    assume {:nonnull} DeviceExtension != 0;
    assume DeviceExtension > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} keyNumber != 0;
    assume keyNumber > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:nonnull} DeviceExtension != 0;
    assume DeviceExtension > 0;
    assume {:nonnull} DeviceExtension != 0;
    assume DeviceExtension > 0;
    goto L78;

  L78:
    assume {:nonnull} parametersPath != 0;
    assume parametersPath > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    call {:si_unique_call 120} sdv_ExFreePool(0);
    goto L86;

  L86:
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} parameters != 0;
    call {:si_unique_call 121} sdv_ExFreePool(0);
    goto L1;

  L1:
    return;

  anon25_Then:
    assume {:partition} parameters == 0;
    goto L1;

  anon22_Then:
    goto L86;

  anon23_Then:
    assume {:nonnull} keyNumber != 0;
    assume keyNumber > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:nonnull} keyNumber != 0;
    assume keyNumber > 0;
    havoc Tmp_93;
    assume {:nonnull} DeviceExtension != 0;
    assume DeviceExtension > 0;
    assume {:nonnull} keyToScanTbl != 0;
    assume keyToScanTbl > 0;
    goto L85;

  L85:
    assume {:nonnull} DeviceExtension != 0;
    assume DeviceExtension > 0;
    goto L78;

  anon24_Then:
    assume {:nonnull} DeviceExtension != 0;
    assume DeviceExtension > 0;
    goto L85;

  anon21_Then:
    goto L78;

  anon20_Then:
    assume {:partition} 0 > status_5;
    assume {:nonnull} DeviceExtension != 0;
    assume DeviceExtension > 0;
    assume {:nonnull} defaultDebugFlags != 0;
    assume defaultDebugFlags > 0;
    goto L77;

  anon19_Then:
    assume {:partition} 0 > status_5;
    goto L48;

  anon27_Then:
    status_5 := -1073741823;
    goto L47;

  anon26_Then:
    assume {:partition} parameters == 0;
    status_5 := -1073741823;
    goto L47;
}



procedure {:origName "I8xKeyboardServiceParameters"} I8xKeyboardServiceParameters(actual_RegistryPath_1: int, actual_KeyboardExtension: int);
  modifies alloc;



implementation {:origName "I8xKeyboardServiceParameters"} I8xKeyboardServiceParameters(actual_RegistryPath_1: int, actual_KeyboardExtension: int)
{
  var {:dopa} {:scalar} prevOverrideKeyboardSubtype: int;
  var {:scalar} i_5: int;
  var {:scalar} Tmp_94: int;
  var {:dopa} {:scalar} defaultPowerCaps: int;
  var {:scalar} Tmp_95: int;
  var {:scalar} Tmp_96: int;
  var {:scalar} Tmp_97: int;
  var {:scalar} Tmp_98: int;
  var {:scalar} Tmp_99: int;
  var {:scalar} Tmp_100: int;
  var {:scalar} Tmp_101: int;
  var {:scalar} Tmp_102: int;
  var {:scalar} Tmp_103: int;
  var {:dopa} {:scalar} defaultDataQueueSize: int;
  var {:scalar} Tmp_104: int;
  var {:scalar} Tmp_105: int;
  var {:dopa} {:scalar} invalidKeyboardType: int;
  var {:scalar} Tmp_106: int;
  var {:scalar} Tmp_107: int;
  var {:scalar} Tmp_108: int;
  var {:scalar} Tmp_109: int;
  var {:scalar} Tmp_110: int;
  var {:scalar} Tmp_111: int;
  var {:scalar} Tmp_112: int;
  var {:scalar} Tmp_113: int;
  var {:pointer} keyHandle: int;
  var {:dopa} {:scalar} defaultKdEnableHotKey: int;
  var {:scalar} Tmp_114: int;
  var {:scalar} Tmp_115: int;
  var {:scalar} Tmp_116: int;
  var {:scalar} Tmp_118: int;
  var {:dopa} {:scalar} prevPollStatusIterations: int;
  var {:dopa} {:scalar} kdEnableHotKey: int;
  var {:scalar} Tmp_119: int;
  var {:scalar} Tmp_120: int;
  var {:dopa} {:scalar} powerCaps: int;
  var {:scalar} Tmp_121: int;
  var {:pointer} sdv_53: int;
  var {:scalar} Tmp_122: int;
  var {:scalar} Tmp_123: int;
  var {:scalar} Tmp_124: int;
  var {:scalar} Tmp_125: int;
  var {:dopa} {:scalar} crashOnCtrlScroll: int;
  var {:scalar} Tmp_128: int;
  var {:scalar} Tmp_129: int;
  var {:scalar} Tmp_130: int;
  var {:scalar} Tmp_131: int;
  var {:scalar} Tmp_132: int;
  var {:scalar} Tmp_133: int;
  var {:dopa} {:scalar} invalidKeyboardSubtype: int;
  var {:scalar} Tmp_134: int;
  var {:dopa} {:scalar} prevOverrideKeyboardType: int;
  var {:dopa} {:scalar} prevPowerCaps: int;
  var {:scalar} Tmp_135: int;
  var {:scalar} Tmp_136: int;
  var {:scalar} Tmp_137: int;
  var {:dopa} {:scalar} defaultPollStatusIterations: int;
  var {:scalar} Tmp_138: int;
  var {:scalar} Tmp_139: int;
  var {:scalar} sdv_57: int;
  var {:scalar} Tmp_140: int;
  var {:scalar} Tmp_141: int;
  var {:scalar} Tmp_142: int;
  var {:scalar} Tmp_143: int;
  var {:scalar} Tmp_144: int;
  var {:scalar} Tmp_145: int;
  var {:scalar} Tmp_146: int;
  var {:scalar} Tmp_147: int;
  var {:scalar} Tmp_148: int;
  var {:pointer} sdv_58: int;
  var {:scalar} Tmp_149: int;
  var {:scalar} Tmp_150: int;
  var {:scalar} Tmp_151: int;
  var {:scalar} Tmp_152: int;
  var {:scalar} Tmp_153: int;
  var {:pointer} configuration: int;
  var {:scalar} Tmp_154: int;
  var {:scalar} Tmp_155: int;
  var {:scalar} Tmp_156: int;
  var {:scalar} Tmp_157: int;
  var {:dopa} {:scalar} pollStatusIterations: int;
  var {:scalar} queries: int;
  var {:scalar} Tmp_158: int;
  var {:scalar} Tmp_159: int;
  var {:dopa} {:scalar} failedReset: int;
  var {:scalar} Tmp_160: int;
  var {:scalar} Tmp_161: int;
  var {:dopa} {:scalar} prevInputDataQueueLength: int;
  var {:scalar} Tmp_162: int;
  var {:pointer} parameters_1: int;
  var {:dopa} {:scalar} overrideKeyboardSubtype: int;
  var {:scalar} Tmp_163: int;
  var {:scalar} Tmp_164: int;
  var {:scalar} Tmp_165: int;
  var {:scalar} Tmp_166: int;
  var {:scalar} status_6: int;
  var {:scalar} Tmp_167: int;
  var {:dopa} {:scalar} overrideKeyboardType: int;
  var {:scalar} Tmp_168: int;
  var {:scalar} parametersPath_1: int;
  var {:scalar} Tmp_169: int;
  var {:scalar} Tmp_170: int;
  var {:scalar} Tmp_171: int;
  var {:scalar} Tmp_172: int;
  var {:scalar} Tmp_173: int;
  var {:dopa} {:scalar} defaultFailedReset: int;
  var {:scalar} Tmp_174: int;
  var {:scalar} Tmp_175: int;
  var {:scalar} Tmp_176: int;
  var {:dopa} {:scalar} defaultCrashOnCtrlScroll: int;
  var {:scalar} Tmp_177: int;
  var {:scalar} Tmp_178: int;
  var {:scalar} Tmp_179: int;
  var {:pointer} RegistryPath_1: int;
  var {:pointer} KeyboardExtension: int;
  var vslice_dummy_var_21: int;
  var vslice_dummy_var_22: int;
  var vslice_dummy_var_23: int;
  var vslice_dummy_var_24: int;

  anon0:
    call {:si_unique_call 122} prevOverrideKeyboardSubtype := __HAVOC_malloc(4);
    call {:si_unique_call 123} defaultPowerCaps := __HAVOC_malloc(4);
    call {:si_unique_call 124} defaultDataQueueSize := __HAVOC_malloc(4);
    call {:si_unique_call 125} invalidKeyboardType := __HAVOC_malloc(4);
    call {:si_unique_call 126} defaultKdEnableHotKey := __HAVOC_malloc(4);
    call {:si_unique_call 127} prevPollStatusIterations := __HAVOC_malloc(4);
    call {:si_unique_call 128} kdEnableHotKey := __HAVOC_malloc(4);
    call {:si_unique_call 129} powerCaps := __HAVOC_malloc(4);
    call {:si_unique_call 130} crashOnCtrlScroll := __HAVOC_malloc(4);
    call {:si_unique_call 131} vslice_dummy_var_21 := __HAVOC_malloc(4);
    call {:si_unique_call 132} invalidKeyboardSubtype := __HAVOC_malloc(4);
    call {:si_unique_call 133} prevOverrideKeyboardType := __HAVOC_malloc(4);
    call {:si_unique_call 134} prevPowerCaps := __HAVOC_malloc(4);
    call {:si_unique_call 135} defaultPollStatusIterations := __HAVOC_malloc(4);
    call {:si_unique_call 136} pollStatusIterations := __HAVOC_malloc(4);
    call {:si_unique_call 137} failedReset := __HAVOC_malloc(4);
    call {:si_unique_call 138} prevInputDataQueueLength := __HAVOC_malloc(4);
    call {:si_unique_call 139} overrideKeyboardSubtype := __HAVOC_malloc(4);
    call {:si_unique_call 140} overrideKeyboardType := __HAVOC_malloc(4);
    call {:si_unique_call 141} parametersPath_1 := __HAVOC_malloc(12);
    call {:si_unique_call 142} defaultFailedReset := __HAVOC_malloc(4);
    call {:si_unique_call 143} defaultCrashOnCtrlScroll := __HAVOC_malloc(4);
    RegistryPath_1 := actual_RegistryPath_1;
    KeyboardExtension := actual_KeyboardExtension;
    status_6 := 0;
    parameters_1 := 0;
    assume {:nonnull} defaultDataQueueSize != 0;
    assume defaultDataQueueSize > 0;
    assume {:nonnull} invalidKeyboardSubtype != 0;
    assume invalidKeyboardSubtype > 0;
    assume {:nonnull} invalidKeyboardType != 0;
    assume invalidKeyboardType > 0;
    assume {:nonnull} overrideKeyboardSubtype != 0;
    assume overrideKeyboardSubtype > 0;
    assume {:nonnull} overrideKeyboardType != 0;
    assume overrideKeyboardType > 0;
    assume {:nonnull} pollStatusIterations != 0;
    assume pollStatusIterations > 0;
    assume {:nonnull} defaultPowerCaps != 0;
    assume defaultPowerCaps > 0;
    assume {:nonnull} powerCaps != 0;
    assume powerCaps > 0;
    assume {:nonnull} failedReset != 0;
    assume failedReset > 0;
    assume {:nonnull} defaultFailedReset != 0;
    assume defaultFailedReset > 0;
    i_5 := 0;
    assume {:nonnull} defaultPollStatusIterations != 0;
    assume defaultPollStatusIterations > 0;
    assume {:nonnull} crashOnCtrlScroll != 0;
    assume crashOnCtrlScroll > 0;
    assume {:nonnull} defaultCrashOnCtrlScroll != 0;
    assume defaultCrashOnCtrlScroll > 0;
    assume {:nonnull} kdEnableHotKey != 0;
    assume kdEnableHotKey > 0;
    assume {:nonnull} defaultKdEnableHotKey != 0;
    assume defaultKdEnableHotKey > 0;
    queries := 9;
    call {:si_unique_call 144} sdv_do_paged_code_check();
    havoc configuration;
    assume {:nonnull} parametersPath_1 != 0;
    assume parametersPath_1 > 0;
    assume {:nonnull} RegistryPath_1 != 0;
    assume RegistryPath_1 > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} status_6 >= 0;
    Tmp_118 := 28 * (queries + 1);
    call {:si_unique_call 145} sdv_53 := ExAllocatePoolWithTag(1, Tmp_118, 842281016);
    parameters_1 := sdv_53;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} parameters_1 != 0;
    Tmp_133 := 28 * (queries + 1);
    call {:si_unique_call 146} sdv_RtlZeroMemory(0, Tmp_133);
    call {:si_unique_call 147} RtlInitUnicodeString(parametersPath_1, 0);
    assume {:nonnull} RegistryPath_1 != 0;
    assume RegistryPath_1 > 0;
    assume {:nonnull} parametersPath_1 != 0;
    assume parametersPath_1 > 0;
    assume {:nonnull} parametersPath_1 != 0;
    assume parametersPath_1 > 0;
    havoc Tmp_132;
    call {:si_unique_call 148} sdv_58 := ExAllocatePoolWithTag(1, Tmp_132, 842281016);
    assume {:nonnull} parametersPath_1 != 0;
    assume parametersPath_1 > 0;
    assume {:nonnull} parametersPath_1 != 0;
    assume parametersPath_1 > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    status_6 := -1073741823;
    goto L53;

  L53:
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} status_6 >= 0;
    assume {:nonnull} parametersPath_1 != 0;
    assume parametersPath_1 > 0;
    havoc Tmp_103;
    call {:si_unique_call 149} sdv_RtlZeroMemory(0, Tmp_103);
    call {:si_unique_call 150} vslice_dummy_var_22 := corral_nondet();
    call {:si_unique_call 151} vslice_dummy_var_23 := corral_nondet();
    Tmp_175 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_95 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_154 := i_5;
    assume {:nonnull} KeyboardExtension != 0;
    assume KeyboardExtension > 0;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_100 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_98 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_116 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    i_5 := i_5 + 1;
    Tmp_96 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_151 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_140 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_128 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_138 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_156 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    i_5 := i_5 + 1;
    Tmp_105 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_99 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_139 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_155 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_171 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_131 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    i_5 := i_5 + 1;
    Tmp_97 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_146 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_157 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_168 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_177 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_108 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    i_5 := i_5 + 1;
    Tmp_144 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_141 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_124 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_136 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_104 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_120 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    i_5 := i_5 + 1;
    Tmp_176 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_162 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_129 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_164 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_142 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_147 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    i_5 := i_5 + 1;
    Tmp_170 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_160 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_150 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_179 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_166 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_112 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    i_5 := i_5 + 1;
    Tmp_174 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_173 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_134 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_135 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_102 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_101 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    call {:si_unique_call 152} status_6 := sdv_RtlQueryRegistryValues(0, 0, 0, 0, 0);
    goto L79;

  L79:
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} status_6 >= 0;
    assume {:nonnull} configuration != 0;
    assume configuration > 0;
    assume {:nonnull} pollStatusIterations != 0;
    assume pollStatusIterations > 0;
    goto L145;

  L145:
    assume {:nonnull} failedReset != 0;
    assume failedReset > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:nonnull} failedReset != 0;
    assume failedReset > 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:nonnull} failedReset != 0;
    assume failedReset > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    goto L147;

  L147:
    assume {:nonnull} KeyboardExtension != 0;
    assume KeyboardExtension > 0;
    assume {:nonnull} failedReset != 0;
    assume failedReset > 0;
    goto L149;

  L149:
    call {:si_unique_call 153} status_6 := IoOpenDeviceRegistryKey(0, 1, 131072, 0);
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} status_6 >= 0;
    assume {:nonnull} KeyboardExtension != 0;
    assume KeyboardExtension > 0;
    assume {:nonnull} prevInputDataQueueLength != 0;
    assume prevInputDataQueueLength > 0;
    assume {:nonnull} powerCaps != 0;
    assume powerCaps > 0;
    assume {:nonnull} prevPowerCaps != 0;
    assume prevPowerCaps > 0;
    assume {:nonnull} overrideKeyboardType != 0;
    assume overrideKeyboardType > 0;
    assume {:nonnull} prevOverrideKeyboardType != 0;
    assume prevOverrideKeyboardType > 0;
    assume {:nonnull} overrideKeyboardSubtype != 0;
    assume overrideKeyboardSubtype > 0;
    assume {:nonnull} prevOverrideKeyboardSubtype != 0;
    assume prevOverrideKeyboardSubtype > 0;
    assume {:nonnull} pollStatusIterations != 0;
    assume pollStatusIterations > 0;
    assume {:nonnull} prevPollStatusIterations != 0;
    assume prevPollStatusIterations > 0;
    Tmp_125 := 28 * (queries + 1);
    call {:si_unique_call 154} sdv_RtlZeroMemory(0, Tmp_125);
    i_5 := 0;
    Tmp_159 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_109 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_107 := i_5;
    assume {:nonnull} KeyboardExtension != 0;
    assume KeyboardExtension > 0;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_121 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_130 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_145 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    i_5 := i_5 + 1;
    Tmp_119 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_149 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_115 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_110 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_123 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_178 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    i_5 := i_5 + 1;
    Tmp_106 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_148 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_153 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_172 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_163 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_161 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    i_5 := i_5 + 1;
    Tmp_137 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_111 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_152 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_113 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_169 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_122 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    i_5 := i_5 + 1;
    Tmp_158 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_94 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_114 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_167 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_165 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    Tmp_143 := i_5;
    assume {:nonnull} parameters_1 != 0;
    assume parameters_1 > 0;
    call {:si_unique_call 155} status_6 := sdv_RtlQueryRegistryValues(-1073741824, 0, 0, 0, 0);
    call {:si_unique_call 156} vslice_dummy_var_24 := ZwClose(0);
    goto L154;

  L154:
    assume {:nonnull} KeyboardExtension != 0;
    assume KeyboardExtension > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    goto L210;

  L210:
    assume {:nonnull} KeyboardExtension != 0;
    assume KeyboardExtension > 0;
    assume {:nonnull} KeyboardExtension != 0;
    assume KeyboardExtension > 0;
    assume {:nonnull} powerCaps != 0;
    assume powerCaps > 0;
    assume {:nonnull} invalidKeyboardType != 0;
    assume invalidKeyboardType > 0;
    assume {:nonnull} overrideKeyboardType != 0;
    assume overrideKeyboardType > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:nonnull} overrideKeyboardType != 0;
    assume overrideKeyboardType > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:nonnull} KeyboardExtension != 0;
    assume KeyboardExtension > 0;
    assume {:nonnull} overrideKeyboardType != 0;
    assume overrideKeyboardType > 0;
    goto L215;

  L215:
    assume {:nonnull} KeyboardExtension != 0;
    assume KeyboardExtension > 0;
    assume {:nonnull} overrideKeyboardType != 0;
    assume overrideKeyboardType > 0;
    goto L213;

  L213:
    assume {:nonnull} invalidKeyboardSubtype != 0;
    assume invalidKeyboardSubtype > 0;
    assume {:nonnull} overrideKeyboardSubtype != 0;
    assume overrideKeyboardSubtype > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:nonnull} KeyboardExtension != 0;
    assume KeyboardExtension > 0;
    assume {:nonnull} overrideKeyboardSubtype != 0;
    assume overrideKeyboardSubtype > 0;
    assume {:nonnull} KeyboardExtension != 0;
    assume KeyboardExtension > 0;
    assume {:nonnull} overrideKeyboardSubtype != 0;
    assume overrideKeyboardSubtype > 0;
    goto L217;

  L217:
    assume {:nonnull} crashOnCtrlScroll != 0;
    assume crashOnCtrlScroll > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:nonnull} KeyboardExtension != 0;
    assume KeyboardExtension > 0;
    assume {:nonnull} KeyboardExtension != 0;
    assume KeyboardExtension > 0;
    assume {:nonnull} KeyboardExtension != 0;
    assume KeyboardExtension > 0;
    goto L220;

  L220:
    assume {:nonnull} kdEnableHotKey != 0;
    assume kdEnableHotKey > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:nonnull} KeyboardExtension != 0;
    assume KeyboardExtension > 0;
    assume {:nonnull} KeyboardExtension != 0;
    assume KeyboardExtension > 0;
    assume {:nonnull} KeyboardExtension != 0;
    assume KeyboardExtension > 0;
    goto L224;

  L224:
    assume {:nonnull} parametersPath_1 != 0;
    assume parametersPath_1 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    call {:si_unique_call 157} sdv_ExFreePool(0);
    goto L228;

  L228:
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} parameters_1 != 0;
    call {:si_unique_call 158} sdv_ExFreePool(0);
    goto L1;

  L1:
    return;

  anon45_Then:
    assume {:partition} parameters_1 == 0;
    goto L1;

  anon44_Then:
    goto L228;

  anon43_Then:
    goto L224;

  anon42_Then:
    goto L220;

  anon40_Then:
    goto L217;

  anon41_Then:
    goto L215;

  anon51_Then:
    goto L213;

  anon39_Then:
    assume {:nonnull} KeyboardExtension != 0;
    assume KeyboardExtension > 0;
    assume {:nonnull} defaultDataQueueSize != 0;
    assume defaultDataQueueSize > 0;
    goto L210;

  anon38_Then:
    assume {:partition} 0 > status_6;
    goto L154;

  anon46_Then:
    assume {:nonnull} KeyboardExtension != 0;
    assume KeyboardExtension > 0;
    goto L149;

  anon47_Then:
    goto L147;

  anon37_Then:
    goto L147;

  anon36_Then:
    assume {:partition} 0 > status_6;
    assume {:nonnull} configuration != 0;
    assume configuration > 0;
    assume {:nonnull} defaultPollStatusIterations != 0;
    assume defaultPollStatusIterations > 0;
    assume {:nonnull} KeyboardExtension != 0;
    assume KeyboardExtension > 0;
    assume {:nonnull} defaultDataQueueSize != 0;
    assume defaultDataQueueSize > 0;
    goto L145;

  anon35_Then:
    assume {:partition} 0 > status_6;
    goto L79;

  anon50_Then:
    goto L53;

  anon49_Then:
    assume {:partition} parameters_1 == 0;
    status_6 := -1073741823;
    goto L53;

  anon48_Then:
    assume {:partition} 0 > status_6;
    goto L53;
}



procedure {:origName "I8042KeyboardInterruptService"} I8042KeyboardInterruptService(actual_Interrupt: int, actual_DeviceObjectIn: int) returns (Tmp_180: int);
  modifies alloc, yogi_error, Mem_T.CompletionRoutine__IO_STACK_LOCATION;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "I8042KeyboardInterruptService"} I8042KeyboardInterruptService(actual_Interrupt: int, actual_DeviceObjectIn: int) returns (Tmp_180: int)
{
  var {:scalar} i_6: int;
  var {:pointer} input: int;
  var {:scalar} action: int;
  var {:scalar} ret: int;
  var {:pointer} Tmp_184: int;
  var {:pointer} scanState: int;
  var {:pointer} DeviceObject: int;
  var {:pointer} Tmp_185: int;
  var {:pointer} Tmp_186: int;
  var {:pointer} Tmp_187: int;
  var {:scalar} Tmp_188: int;
  var {:pointer} Tmp_189: int;
  var {:dopa} {:scalar} scanCode: int;
  var {:pointer} deviceExtension: int;
  var {:scalar} cont: int;
  var {:scalar} Tmp_190: int;
  var {:scalar} statusByte: int;
  var {:scalar} Tmp_193: int;
  var {:pointer} DeviceObjectIn: int;
  var boogieTmp: int;
  var vslice_dummy_var_25: int;
  var vslice_dummy_var_26: int;
  var vslice_dummy_var_27: int;
  var vslice_dummy_var_167: int;
  var vslice_dummy_var_168: int;
  var vslice_dummy_var_169: int;
  var vslice_dummy_var_170: int;

  anon0:
    call {:si_unique_call 159} scanCode := __HAVOC_malloc(4);
    DeviceObjectIn := actual_DeviceObjectIn;
    call {:si_unique_call 160} Tmp_184 := __HAVOC_malloc(8);
    call {:si_unique_call 161} Tmp_185 := __HAVOC_malloc(8);
    call {:si_unique_call 162} Tmp_187 := __HAVOC_malloc(8);
    call {:si_unique_call 163} Tmp_189 := __HAVOC_malloc(8);
    DeviceObject := DeviceObjectIn;
    assume {:nonnull} DeviceObject != 0;
    assume DeviceObject > 0;
    havoc deviceExtension;
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    goto anon157_Then, anon157_Else;

  anon157_Else:
    Tmp_180 := 0;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon157_Then:
    havoc Tmp_189;
    assume {:nonnull} Tmp_189 != 0;
    assume Tmp_189 > 0;
    goto anon158_Then, anon158_Else;

  anon158_Else:
    assume {:IndirectCall} true;
    call {:si_unique_call 164} statusByte := corral_nondet();
    goto L19;

  L19:
    Tmp_193 := BAND(statusByte, BOR(1, 32));
    goto anon159_Then, anon159_Else;

  anon159_Else:
    assume {:partition} Tmp_193 != 1;
    i_6 := 0;
    goto L25;

  L25:
    call {:si_unique_call 165} i_6, Tmp_185, Tmp_188, statusByte := I8042KeyboardInterruptService_loop_L25(i_6, Tmp_185, Tmp_188, statusByte);
    goto L25_last;

  L25_last:
    goto anon119_Then, anon119_Else;

  anon119_Else:
    havoc Tmp_185;
    assume {:nonnull} Tmp_185 != 0;
    assume Tmp_185 > 0;
    goto anon160_Then, anon160_Else;

  anon160_Else:
    assume {:IndirectCall} true;
    call {:si_unique_call 166} statusByte := corral_nondet();
    goto L35;

  L35:
    Tmp_188 := BAND(statusByte, BOR(1, 32));
    goto anon161_Then, anon161_Else;

  anon161_Else:
    assume {:partition} Tmp_188 != 1;
    i_6 := i_6 + 1;
    goto anon161_Else_dummy;

  anon161_Else_dummy:
    assume false;
    return;

  anon161_Then:
    assume {:partition} Tmp_188 == 1;
    goto L26;

  L26:
    havoc Tmp_187;
    assume {:nonnull} Tmp_187 != 0;
    assume Tmp_187 > 0;
    goto anon162_Then, anon162_Else;

  anon162_Else:
    assume {:IndirectCall} true;
    call {:si_unique_call 167} statusByte := corral_nondet();
    goto L43;

  L43:
    Tmp_190 := BAND(statusByte, BOR(1, 32));
    goto anon163_Then, anon163_Else;

  anon163_Else:
    assume {:partition} Tmp_190 != 1;
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    goto anon120_Then, anon120_Else;

  anon120_Else:
    goto L47;

  L47:
    Tmp_180 := 0;
    goto L1;

  anon120_Then:
    havoc Tmp_184;
    assume {:nonnull} Tmp_184 != 0;
    assume Tmp_184 > 0;
    goto anon164_Then, anon164_Else;

  anon164_Else:
    assume {:IndirectCall} true;
    assume {:nonnull} scanCode != 0;
    assume scanCode > 0;
    call {:si_unique_call 168} boogieTmp := corral_nondet();
    goto L47;

  anon164_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} scanCode != 0;
    assume scanCode > 0;
    call {:si_unique_call 169} boogieTmp := corral_nondet();
    goto L47;

  anon163_Then:
    assume {:partition} Tmp_190 == 1;
    goto L21;

  L21:
    call {:si_unique_call 170} I8xGetByteAsynchronous(1, scanCode);
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    assume {:nonnull} scanCode != 0;
    assume scanCode > 0;
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    goto anon165_Then, anon165_Else;

  anon165_Else:
    cont := 0;
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    goto anon122_Then, anon122_Else;

  anon122_Else:
    assume {:partition} cont == 0;
    Tmp_180 := ret;
    goto L1;

  anon122_Then:
    assume {:partition} cont != 0;
    goto L55;

  L55:
    assume {:nonnull} scanCode != 0;
    assume scanCode > 0;
    goto anon121_Then, anon121_Else;

  anon121_Else:
    assume {:nonnull} scanCode != 0;
    assume scanCode > 0;
    goto anon152_Then, anon152_Else;

  anon152_Else:
    goto anon124_Then, anon124_Else;

  anon124_Else:
    goto L81;

  L81:
    Tmp_180 := 1;
    goto L1;

  anon124_Then:
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    goto anon169_Then, anon169_Else;

  anon169_Else:
    assume {:nonnull} DeviceObject != 0;
    assume DeviceObject > 0;
    goto anon125_Then, anon125_Else;

  anon125_Else:
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    goto anon126_Then, anon126_Else;

  anon126_Else:
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    call {:si_unique_call 171} I8xInitiateIo(DeviceObject);
    goto anon170_Then, anon170_Else;

  anon170_Else:
    assume {:partition} yogi_error != 1;
    goto L81;

  anon170_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon126_Then:
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    assume {:nonnull} DeviceObject != 0;
    assume DeviceObject > 0;
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    havoc vslice_dummy_var_167;
    call {:si_unique_call 172} vslice_dummy_var_26 := KeInsertQueueDpc#1(RetriesExceededDpc_COMMON_DATA(deviceExtension), vslice_dummy_var_167, 0);
    goto anon171_Then, anon171_Else;

  anon171_Else:
    assume {:partition} yogi_error != 1;
    goto L81;

  anon171_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon125_Then:
    goto L65;

  L65:
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    input := CurrentInput__PORT_KEYBOARD_EXTENSION(deviceExtension);
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    scanState := CurrentScanState__PORT_KEYBOARD_EXTENSION(deviceExtension);
    assume {:nonnull} scanCode != 0;
    assume scanCode > 0;
    goto anon172_Then, anon172_Else;

  anon172_Else:
    assume {:nonnull} input != 0;
    assume input > 0;
    assume {:nonnull} input != 0;
    assume input > 0;
    assume {:nonnull} scanState != 0;
    assume scanState > 0;
    goto L104;

  L104:
    assume {:nonnull} scanState != 0;
    assume scanState > 0;
    goto anon129_Then, anon129_Else;

  anon129_Else:
    call {:si_unique_call 173} I8xQueueCurrentKeyboardInput(DeviceObject);
    goto anon173_Then, anon173_Else;

  anon173_Else:
    assume {:partition} yogi_error != 1;
    goto L81;

  anon173_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon129_Then:
    goto L81;

  anon172_Then:
    assume {:nonnull} scanState != 0;
    assume scanState > 0;
    goto anon128_Then, anon128_Else;

  anon128_Else:
    assume {:nonnull} scanState != 0;
    assume scanState > 0;
    goto anon154_Then, anon154_Else;

  anon154_Else:
    assume {:nonnull} scanState != 0;
    assume scanState > 0;
    goto anon153_Then, anon153_Else;

  anon153_Else:
    goto L113;

  L113:
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    goto anon131_Then, anon131_Else;

  anon131_Else:
    goto L115;

  L115:
    assume {:nonnull} scanCode != 0;
    assume scanCode > 0;
    assume {:nonnull} scanState != 0;
    assume scanState > 0;
    havoc vslice_dummy_var_168;
    havoc vslice_dummy_var_169;
    call {:si_unique_call 174} I8xProcessCrashDump(deviceExtension, vslice_dummy_var_168, vslice_dummy_var_169);
    goto L118;

  L118:
    assume {:nonnull} scanCode != 0;
    assume scanCode > 0;
    goto anon133_Then, anon133_Else;

  anon133_Else:
    assume {:nonnull} input != 0;
    assume input > 0;
    assume {:nonnull} scanCode != 0;
    assume scanCode > 0;
    assume {:nonnull} input != 0;
    assume input > 0;
    assume {:nonnull} input != 0;
    assume input > 0;
    goto anon174_Then, anon174_Else;

  anon174_Else:
    assume {:nonnull} input != 0;
    assume input > 0;
    goto anon134_Then, anon134_Else;

  anon134_Else:
    assume {:nonnull} input != 0;
    assume input > 0;
    goto anon156_Then, anon156_Else;

  anon156_Else:
    assume {:nonnull} input != 0;
    assume input > 0;
    goto anon155_Then, anon155_Else;

  anon155_Else:
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    goto anon137_Then, anon137_Else;

  anon137_Else:
    action := 1;
    goto L133;

  L133:
    goto anon138_Then, anon138_Else;

  anon138_Else:
    assume {:partition} action != 0;
    assume {:nonnull} input != 0;
    assume input > 0;
    havoc Tmp_186;
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    call {:si_unique_call 175} vslice_dummy_var_27 := KeInsertQueueDpc#1(SysButtonEventDpc__PORT_KEYBOARD_EXTENSION(deviceExtension), action, Tmp_186);
    goto anon175_Then, anon175_Else;

  anon175_Else:
    assume {:partition} yogi_error != 1;
    goto L124;

  L124:
    assume {:nonnull} scanState != 0;
    assume scanState > 0;
    goto L104;

  anon175_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon138_Then:
    assume {:partition} action == 0;
    goto L124;

  anon137_Then:
    action := 2;
    goto L133;

  anon155_Then:
    action := 0;
    goto L133;

  anon156_Then:
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    goto anon136_Then, anon136_Else;

  anon136_Else:
    action := 1;
    goto L133;

  anon136_Then:
    action := 2;
    goto L133;

  anon134_Then:
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    goto anon135_Then, anon135_Else;

  anon135_Else:
    action := 1;
    goto L133;

  anon135_Then:
    action := 2;
    goto L133;

  anon174_Then:
    goto L124;

  anon133_Then:
    assume {:nonnull} input != 0;
    assume input > 0;
    assume {:nonnull} scanCode != 0;
    assume scanCode > 0;
    assume {:nonnull} KdDebuggerNotPresent != 0;
    assume KdDebuggerNotPresent > 0;
    goto anon176_Then, anon176_Else;

  anon176_Else:
    assume {:nonnull} input != 0;
    assume input > 0;
    goto anon139_Then, anon139_Else;

  anon139_Else:
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    goto anon140_Then, anon140_Else;

  anon140_Else:
    goto L150;

  L150:
    assume {:nonnull} input != 0;
    assume input > 0;
    goto anon142_Then, anon142_Else;

  anon142_Else:
    assume {:nonnull} input != 0;
    assume input > 0;
    goto anon143_Then, anon143_Else;

  anon143_Else:
    assume {:nonnull} KdDebuggerEnabled != 0;
    assume KdDebuggerEnabled > 0;
    goto anon144_Then, anon144_Else;

  anon144_Else:
    goto anon145_Then, anon145_Else;

  anon145_Else:
    call {:si_unique_call 176} DbgBreakPointWithStatus(2);
    goto L124;

  anon145_Then:
    goto L124;

  anon144_Then:
    goto L124;

  anon143_Then:
    goto L124;

  anon142_Then:
    goto L124;

  anon140_Then:
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    goto anon141_Then, anon141_Else;

  anon141_Else:
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    goto anon146_Then, anon146_Else;

  anon146_Else:
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    goto anon147_Then, anon147_Else;

  anon147_Else:
    assume {:nonnull} input != 0;
    assume input > 0;
    goto anon148_Then, anon148_Else;

  anon148_Else:
    assume {:nonnull} KdDebuggerEnabled != 0;
    assume KdDebuggerEnabled > 0;
    goto anon149_Then, anon149_Else;

  anon149_Else:
    goto anon150_Then, anon150_Else;

  anon150_Else:
    call {:si_unique_call 177} DbgBreakPointWithStatus(2);
    goto L124;

  anon150_Then:
    goto L124;

  anon149_Then:
    goto L124;

  anon148_Then:
    goto L124;

  anon147_Then:
    goto L150;

  anon146_Then:
    goto L150;

  anon141_Then:
    goto L150;

  anon139_Then:
    goto L124;

  anon176_Then:
    goto L124;

  anon131_Then:
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    goto anon132_Then, anon132_Else;

  anon132_Else:
    goto L118;

  anon132_Then:
    goto L115;

  anon153_Then:
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    call {:si_unique_call 178} vslice_dummy_var_25 := KeInsertQueueDpc#1(ErrorLogDpc_COMMON_DATA(deviceExtension), 0, -1073414134);
    goto anon177_Then, anon177_Else;

  anon177_Else:
    assume {:partition} yogi_error != 1;
    goto L104;

  anon177_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon154_Then:
    goto L113;

  anon128_Then:
    assume {:nonnull} scanCode != 0;
    assume scanCode > 0;
    goto anon130_Then, anon130_Else;

  anon130_Else:
    assume {:nonnull} input != 0;
    assume input > 0;
    assume {:nonnull} scanState != 0;
    assume scanState > 0;
    goto L104;

  anon130_Then:
    assume {:nonnull} scanCode != 0;
    assume scanCode > 0;
    goto anon151_Then, anon151_Else;

  anon151_Else:
    assume {:nonnull} input != 0;
    assume input > 0;
    assume {:nonnull} scanState != 0;
    assume scanState > 0;
    goto L104;

  anon151_Then:
    goto L113;

  anon169_Then:
    goto L65;

  anon152_Then:
    goto L65;

  anon121_Then:
    goto anon123_Then, anon123_Else;

  anon123_Else:
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    goto anon166_Then, anon166_Else;

  anon166_Else:
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    goto anon127_Then, anon127_Else;

  anon127_Else:
    call {:si_unique_call 179} I8xInitiateIo(DeviceObject);
    goto anon167_Then, anon167_Else;

  anon167_Else:
    assume {:partition} yogi_error != 1;
    goto L81;

  anon167_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon127_Then:
    assume {:nonnull} deviceExtension != 0;
    assume deviceExtension > 0;
    assume {:nonnull} DeviceObject != 0;
    assume DeviceObject > 0;
    havoc vslice_dummy_var_170;
    call {:si_unique_call 180} sdv_IoRequestDpc(DeviceObject, vslice_dummy_var_170, 1);
    goto anon168_Then, anon168_Else;

  anon168_Else:
    assume {:partition} yogi_error != 1;
    goto L81;

  anon168_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon166_Then:
    goto L81;

  anon123_Then:
    goto L81;

  anon165_Then:
    goto L55;

  anon162_Then:
    assume {:IndirectCall} true;
    call {:si_unique_call 181} statusByte := corral_nondet();
    goto L43;

  anon160_Then:
    assume {:IndirectCall} true;
    call {:si_unique_call 182} statusByte := corral_nondet();
    goto L35;

  anon119_Then:
    goto L26;

  anon159_Then:
    assume {:partition} Tmp_193 == 1;
    goto L21;

  anon158_Then:
    assume {:IndirectCall} true;
    call {:si_unique_call 183} statusByte := corral_nondet();
    goto L19;
}



procedure {:origName "I8xInitializeKeyboard"} I8xInitializeKeyboard(actual_KeyboardExtension_1: int) returns (Tmp_194: int);
  modifies alloc;



implementation {:origName "I8xInitializeKeyboard"} I8xInitializeKeyboard(actual_KeyboardExtension_1: int) returns (Tmp_194: int)
{
  var {:scalar} i_7: int;
  var {:pointer} Tmp_195: int;
  var {:pointer} Tmp_196: int;
  var {:scalar} failedResetResponseStatus2: int;
  var {:scalar} sdv_70: int;
  var {:pointer} deviceObject: int;
  var {:pointer} s_p_e_c_i_a_l_3: int;
  var {:scalar} failedResetResponse: int;
  var {:scalar} failedLeds: int;
  var {:scalar} failedLedsStatus: int;
  var {:pointer} hParameters: int;
  var {:scalar} transmitCCBContext_1: int;
  var {:scalar} sdv_74: int;
  var {:scalar} failedResetResponseStatus: int;
  var {:scalar} sdv_75: int;
  var {:scalar} resetRespTimeout: int;
  var {:scalar} li_3: int;
  var {:scalar} sdv_79: int;
  var {:scalar} failedTypematicStatus: int;
  var {:scalar} string: int;
  var {:pointer} s_p_e_c_i_a_l_4: int;
  var {:scalar} failedResetResponseByte: int;
  var {:pointer} hService: int;
  var {:scalar} failedResetStatus: int;
  var {:scalar} sdv_82: int;
  var {:pointer} dumpData: int;
  var {:scalar} difference: int;
  var {:dopa} {:scalar} byte_1: int;
  var {:scalar} Tmp_197: int;
  var {:scalar} failedResetResponse2: int;
  var {:scalar} Tmp_198: int;
  var {:pointer} id: int;
  var {:pointer} Tmp_199: int;
  var {:pointer} Tmp_200: int;
  var {:scalar} failedTypematic: int;
  var {:scalar} failedReset_1: int;
  var {:pointer} Tmp_201: int;
  var {:scalar} status_7: int;
  var {:scalar} translationOn: int;
  var {:pointer} deviceExtension_1: int;
  var {:scalar} startOfSpin: int;
  var {:pointer} Tmp_202: int;
  var {:pointer} Tmp_203: int;
  var {:scalar} nextQuery: int;
  var {:scalar} waitForAckOnReset: int;
  var {:pointer} KeyboardExtension_1: int;
  var vslice_dummy_var_28: int;
  var vslice_dummy_var_29: int;
  var vslice_dummy_var_30: int;
  var vslice_dummy_var_31: int;
  var vslice_dummy_var_32: int;
  var vslice_dummy_var_171: int;
  var vslice_dummy_var_172: int;
  var vslice_dummy_var_173: int;
  var vslice_dummy_var_174: int;

  anon0:
    call {:si_unique_call 184} hParameters := __HAVOC_malloc(4);
    call {:si_unique_call 185} transmitCCBContext_1 := __HAVOC_malloc(16);
    call {:si_unique_call 186} vslice_dummy_var_28 := __HAVOC_malloc(24);
    call {:si_unique_call 187} resetRespTimeout := __HAVOC_malloc(20);
    call {:si_unique_call 188} li_3 := __HAVOC_malloc(20);
    call {:si_unique_call 189} string := __HAVOC_malloc(12);
    call {:si_unique_call 190} hService := __HAVOC_malloc(4);
    call {:si_unique_call 191} difference := __HAVOC_malloc(20);
    call {:si_unique_call 192} byte_1 := __HAVOC_malloc(4);
    call {:si_unique_call 193} startOfSpin := __HAVOC_malloc(20);
    call {:si_unique_call 194} nextQuery := __HAVOC_malloc(20);
    KeyboardExtension_1 := actual_KeyboardExtension_1;
    call {:si_unique_call 195} Tmp_196 := __HAVOC_malloc(44);
    call {:si_unique_call 196} dumpData := __HAVOC_malloc(16);
    call {:si_unique_call 197} Tmp_203 := __HAVOC_malloc(80);
    waitForAckOnReset := 1;
    translationOn := 1;
    failedReset_1 := 0;
    failedResetResponse := 0;
    failedResetResponse2 := 0;
    failedTypematic := 0;
    failedLeds := 0;
    call {:si_unique_call 198} sdv_do_paged_code_check();
    i_7 := 0;
    goto L44;

  L44:
    call {:si_unique_call 199} i_7, Tmp_198 := I8xInitializeKeyboard_loop_L44(i_7, dumpData, Tmp_198);
    goto L44_last;

  L44_last:
    assume {:CounterLoop 4} {:Counter "i_7"} true;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} 4 > i_7;
    Tmp_198 := i_7;
    assume {:nonnull} dumpData != 0;
    assume dumpData > 0;
    i_7 := i_7 + 1;
    goto anon87_Else_dummy;

  anon87_Else_dummy:
    assume false;
    return;

  anon87_Then:
    assume {:partition} i_7 >= 4;
    deviceExtension_1 := KeyboardExtension_1;
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    havoc deviceObject;
    goto L49;

  L49:
    call {:si_unique_call 200} s_p_e_c_i_a_l_3, failedResetResponse, failedResetResponseStatus, s_p_e_c_i_a_l_4, failedResetResponseByte, failedResetStatus, sdv_82, Tmp_199, Tmp_200, failedReset_1, status_7, waitForAckOnReset, vslice_dummy_var_29 := I8xInitializeKeyboard_loop_L49(s_p_e_c_i_a_l_3, failedResetResponse, failedResetResponseStatus, resetRespTimeout, li_3, s_p_e_c_i_a_l_4, failedResetResponseByte, failedResetStatus, sdv_82, difference, byte_1, Tmp_199, Tmp_200, failedReset_1, status_7, startOfSpin, nextQuery, waitForAckOnReset, KeyboardExtension_1, vslice_dummy_var_29);
    goto L49_last;

  L49_last:
    call {:si_unique_call 237} status_7 := I8xPutBytePolled#1(0, waitForAckOnReset, 1, 255);
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} status_7 >= 0;
    goto L55;

  L55:
    assume {:nonnull} li_3 != 0;
    assume li_3 > 0;
    assume {:nonnull} resetRespTimeout != 0;
    assume resetRespTimeout > 0;
    Tmp_199 := KeTickCount;
    assume {:nonnull} Tmp_199 != 0;
    assume Tmp_199 > 0;
    havoc s_p_e_c_i_a_l_3;
    goto L60;

  L60:
    call {:si_unique_call 201} I8xInitializeKeyboard_loop_L60(s_p_e_c_i_a_l_3, startOfSpin);
    goto L60_last;

  L60_last:
    assume {:nonnull} s_p_e_c_i_a_l_3 != 0;
    assume s_p_e_c_i_a_l_3 > 0;
    assume {:nonnull} startOfSpin != 0;
    assume startOfSpin > 0;
    assume {:nonnull} s_p_e_c_i_a_l_3 != 0;
    assume s_p_e_c_i_a_l_3 > 0;
    assume {:nonnull} startOfSpin != 0;
    assume startOfSpin > 0;
    assume {:nonnull} s_p_e_c_i_a_l_3 != 0;
    assume s_p_e_c_i_a_l_3 > 0;
    assume {:nonnull} startOfSpin != 0;
    assume startOfSpin > 0;
    goto anon125_Then, anon125_Else;

  anon125_Else:
    goto L69;

  L69:
    call {:si_unique_call 202} s_p_e_c_i_a_l_4, sdv_82, Tmp_200, status_7, vslice_dummy_var_29 := I8xInitializeKeyboard_loop_L69(resetRespTimeout, s_p_e_c_i_a_l_4, sdv_82, difference, byte_1, Tmp_200, status_7, startOfSpin, nextQuery, vslice_dummy_var_29);
    goto L69_last;

  L69_last:
    call {:si_unique_call 236} status_7 := I8xGetBytePolled(1, byte_1);
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} status_7 >= 0;
    assume {:nonnull} byte_1 != 0;
    assume byte_1 > 0;
    goto anon92_Then, anon92_Else;

  anon92_Else:
    failedResetResponse := 1;
    failedResetResponseStatus := status_7;
    assume {:nonnull} byte_1 != 0;
    assume byte_1 > 0;
    havoc failedResetResponseByte;
    goto L68;

  L68:
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} status_7 >= 0;
    assume {:nonnull} transmitCCBContext_1 != 0;
    assume transmitCCBContext_1 > 0;
    assume {:nonnull} transmitCCBContext_1 != 0;
    assume transmitCCBContext_1 > 0;
    assume {:nonnull} transmitCCBContext_1 != 0;
    assume transmitCCBContext_1 > 0;
    Tmp_195 := transmitCCBContext_1;
    call {:si_unique_call 203} I8xTransmitControllerCommand(Tmp_195);
    assume {:nonnull} transmitCCBContext_1 != 0;
    assume transmitCCBContext_1 > 0;
    goto anon95_Then, anon95_Else;

  anon95_Else:
    goto L111;

  L111:
    assume {:nonnull} transmitCCBContext_1 != 0;
    assume transmitCCBContext_1 > 0;
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    id := KeyboardIdentifier__KEYBOARD_ATTRIBUTES(KeyboardAttributes__PORT_KEYBOARD_EXTENSION(deviceExtension_1));
    call {:si_unique_call 204} status_7 := I8xPutBytePolled#1(0, 1, 1, 243);
    goto anon97_Then, anon97_Else;

  anon97_Else:
    assume {:partition} status_7 != 0;
    failedTypematic := 1;
    failedTypematicStatus := status_7;
    goto L124;

  L124:
    status_7 := 0;
    call {:si_unique_call 205} status_7 := I8xPutBytePolled#1(0, 1, 1, 237);
    goto anon98_Then, anon98_Else;

  anon98_Else:
    assume {:partition} status_7 != 0;
    failedLeds := 1;
    failedLedsStatus := status_7;
    goto L133;

  L133:
    status_7 := 0;
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    goto anon126_Then, anon126_Else;

  anon126_Else:
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    goto L135;

  L135:
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    goto anon99_Then, anon99_Else;

  anon99_Else:
    goto anon101_Then, anon101_Else;

  anon101_Else:
    assume {:partition} translationOn != 0;
    assume {:nonnull} transmitCCBContext_1 != 0;
    assume transmitCCBContext_1 > 0;
    assume {:nonnull} transmitCCBContext_1 != 0;
    assume transmitCCBContext_1 > 0;
    assume {:nonnull} transmitCCBContext_1 != 0;
    assume transmitCCBContext_1 > 0;
    Tmp_201 := transmitCCBContext_1;
    call {:si_unique_call 206} I8xTransmitControllerCommand(Tmp_201);
    assume {:nonnull} transmitCCBContext_1 != 0;
    assume transmitCCBContext_1 > 0;
    goto anon102_Then, anon102_Else;

  anon102_Else:
    assume {:nonnull} transmitCCBContext_1 != 0;
    assume transmitCCBContext_1 > 0;
    goto anon103_Then, anon103_Else;

  anon103_Else:
    assume {:nonnull} id != 0;
    assume id > 0;
    goto anon104_Then, anon104_Else;

  anon104_Else:
    goto L153;

  L153:
    call {:si_unique_call 207} status_7 := I8xPutBytePolled#1(0, 1, 1, 240);
    goto anon106_Then, anon106_Else;

  anon106_Else:
    assume {:partition} status_7 >= 0;
    call {:si_unique_call 208} status_7 := I8xPutBytePolled#1(0, 1, 1, 1);
    goto anon107_Then, anon107_Else;

  anon107_Else:
    assume {:partition} status_7 < 0;
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    assume {:nonnull} dumpData != 0;
    assume dumpData > 0;
    assume {:nonnull} dumpData != 0;
    assume dumpData > 0;
    assume {:nonnull} dumpData != 0;
    assume dumpData > 0;
    assume {:nonnull} dumpData != 0;
    assume dumpData > 0;
    call {:si_unique_call 209} I8xLogError(deviceObject, 327701, 1560, status_7, dumpData, 4);
    goto L139;

  L139:
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:partition} failedReset_1 != 0;
    goto anon111_Then, anon111_Else;

  anon111_Else:
    assume {:partition} failedTypematic != 0;
    goto anon112_Then, anon112_Else;

  anon112_Else:
    assume {:partition} failedLeds != 0;
    assume {:nonnull} KeyboardExtension_1 != 0;
    assume KeyboardExtension_1 > 0;
    goto anon113_Then, anon113_Else;

  anon113_Else:
    call {:si_unique_call 210} sdv_InitializeObjectAttributes(0, 0, 64, 0, 0);
    call {:si_unique_call 211} sdv_79 := ZwOpenKey(hService, 983103, 0);
    goto anon114_Then, anon114_Else;

  anon114_Else:
    assume {:partition} sdv_79 >= 0;
    Tmp_196 := strConst__li2bpl8;
    call {:si_unique_call 212} RtlInitUnicodeString(string, Tmp_196);
    call {:si_unique_call 213} sdv_InitializeObjectAttributes(0, 0, 64, 0, 0);
    call {:si_unique_call 214} sdv_70 := ZwOpenKey(hParameters, 983103, 0);
    goto anon115_Then, anon115_Else;

  anon115_Else:
    assume {:partition} sdv_70 >= 0;
    Tmp_203 := strConst__li2bpl7;
    call {:si_unique_call 215} RtlInitUnicodeString(string, Tmp_203);
    call {:si_unique_call 216} vslice_dummy_var_32 := ZwSetValueKey(0, 0, 0, 4, 0, 4);
    call {:si_unique_call 217} vslice_dummy_var_31 := ZwClose(0);
    goto L207;

  L207:
    call {:si_unique_call 218} vslice_dummy_var_30 := ZwClose(0);
    goto L185;

  L185:
    status_7 := -1073741667;
    goto anon127_Then, anon127_Else;

  anon127_Else:
    call {:si_unique_call 219} I8xLogError(deviceObject, -1073414112, 0, status_7, 0, 0);
    goto L223;

  L223:
    goto anon116_Then, anon116_Else;

  anon116_Else:
    assume {:partition} status_7 >= 0;
    goto L228;

  L228:
    goto L229;

  L229:
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    Tmp_194 := status_7;
    return;

  anon116_Then:
    assume {:partition} 0 > status_7;
    goto anon117_Then, anon117_Else;

  anon117_Else:
    assume {:partition} status_7 != -1073741667;
    goto L229;

  anon117_Then:
    assume {:partition} status_7 == -1073741667;
    goto L228;

  anon127_Then:
    goto L223;

  anon115_Then:
    assume {:partition} 0 > sdv_70;
    goto L207;

  anon114_Then:
    assume {:partition} 0 > sdv_79;
    goto L185;

  anon113_Then:
    goto L185;

  anon112_Then:
    assume {:partition} failedLeds == 0;
    goto L181;

  L181:
    goto anon110_Then, anon110_Else;

  anon110_Else:
    assume {:partition} failedReset_1 != 0;
    goto anon119_Then, anon119_Else;

  anon119_Else:
    assume {:nonnull} dumpData != 0;
    assume dumpData > 0;
    assume {:nonnull} dumpData != 0;
    assume dumpData > 0;
    assume {:nonnull} dumpData != 0;
    assume dumpData > 0;
    call {:si_unique_call 220} I8xLogError(deviceObject, 327695, 1510, failedResetStatus, dumpData, 3);
    goto L234;

  L234:
    goto anon118_Then, anon118_Else;

  anon118_Else:
    assume {:partition} failedResetResponse2 != 0;
    assume {:nonnull} dumpData != 0;
    assume dumpData > 0;
    assume {:nonnull} dumpData != 0;
    assume dumpData > 0;
    assume {:nonnull} dumpData != 0;
    assume dumpData > 0;
    assume {:nonnull} dumpData != 0;
    assume dumpData > 0;
    call {:si_unique_call 221} I8xLogError(deviceObject, 327697, 1520, failedResetResponseStatus2, dumpData, 4);
    goto L250;

  L250:
    goto anon121_Then, anon121_Else;

  anon121_Else:
    assume {:partition} failedTypematic != 0;
    assume {:nonnull} dumpData != 0;
    assume dumpData > 0;
    assume {:nonnull} dumpData != 0;
    assume dumpData > 0;
    assume {:nonnull} dumpData != 0;
    assume dumpData > 0;
    call {:si_unique_call 222} I8xLogError(deviceObject, 327699, 1535, failedTypematicStatus, dumpData, 3);
    goto L251;

  L251:
    goto anon122_Then, anon122_Else;

  anon122_Else:
    assume {:partition} failedLeds != 0;
    assume {:nonnull} dumpData != 0;
    assume dumpData > 0;
    assume {:nonnull} dumpData != 0;
    assume dumpData > 0;
    assume {:nonnull} dumpData != 0;
    assume dumpData > 0;
    call {:si_unique_call 223} I8xLogError(deviceObject, 327700, 1545, failedLedsStatus, dumpData, 3);
    goto L223;

  anon122_Then:
    assume {:partition} failedLeds == 0;
    goto L223;

  anon121_Then:
    assume {:partition} failedTypematic == 0;
    goto L251;

  anon118_Then:
    assume {:partition} failedResetResponse2 == 0;
    goto anon120_Then, anon120_Else;

  anon120_Else:
    assume {:partition} failedResetResponse != 0;
    assume {:nonnull} dumpData != 0;
    assume dumpData > 0;
    assume {:nonnull} dumpData != 0;
    assume dumpData > 0;
    assume {:nonnull} dumpData != 0;
    assume dumpData > 0;
    assume {:nonnull} dumpData != 0;
    assume dumpData > 0;
    call {:si_unique_call 224} I8xLogError(deviceObject, 327697, 1515, failedResetResponseStatus, dumpData, 4);
    goto L250;

  anon120_Then:
    assume {:partition} failedResetResponse == 0;
    goto L250;

  anon119_Then:
    goto L234;

  anon110_Then:
    assume {:partition} failedReset_1 == 0;
    goto L234;

  anon111_Then:
    assume {:partition} failedTypematic == 0;
    goto L181;

  anon100_Then:
    assume {:partition} failedReset_1 == 0;
    goto L181;

  anon107_Then:
    assume {:partition} 0 <= status_7;
    goto L139;

  anon106_Then:
    assume {:partition} 0 > status_7;
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    assume {:nonnull} dumpData != 0;
    assume dumpData > 0;
    assume {:nonnull} dumpData != 0;
    assume dumpData > 0;
    assume {:nonnull} dumpData != 0;
    assume dumpData > 0;
    call {:si_unique_call 225} I8xLogError(deviceObject, 327701, 1555, status_7, dumpData, 3);
    goto L139;

  anon104_Then:
    assume {:nonnull} id != 0;
    assume id > 0;
    goto anon105_Then, anon105_Else;

  anon105_Else:
    assume {:nonnull} id != 0;
    assume id > 0;
    goto anon108_Then, anon108_Else;

  anon108_Else:
    assume {:nonnull} id != 0;
    assume id > 0;
    goto anon109_Then, anon109_Else;

  anon109_Else:
    goto L153;

  anon109_Then:
    goto L139;

  anon108_Then:
    goto L153;

  anon105_Then:
    goto L153;

  anon103_Then:
    assume {:nonnull} transmitCCBContext_1 != 0;
    assume transmitCCBContext_1 > 0;
    havoc status_7;
    goto L139;

  anon102_Then:
    goto L139;

  anon101_Then:
    assume {:partition} translationOn == 0;
    goto L139;

  anon99_Then:
    goto L139;

  anon126_Then:
    goto L135;

  anon98_Then:
    assume {:partition} status_7 == 0;
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    havoc Tmp_197;
    call {:si_unique_call 226} status_7 := I8xPutBytePolled#1(0, 1, 1, Tmp_197);
    goto anon123_Then, anon123_Else;

  anon123_Else:
    assume {:partition} status_7 != 0;
    assume {:nonnull} dumpData != 0;
    assume dumpData > 0;
    assume {:nonnull} dumpData != 0;
    assume dumpData > 0;
    assume {:nonnull} dumpData != 0;
    assume dumpData > 0;
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    assume {:nonnull} dumpData != 0;
    assume dumpData > 0;
    call {:si_unique_call 227} I8xLogError(deviceObject, 327700, 1550, status_7, dumpData, 4);
    goto L133;

  anon123_Then:
    assume {:partition} status_7 == 0;
    goto L133;

  anon97_Then:
    assume {:partition} status_7 == 0;
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    havoc vslice_dummy_var_171;
    havoc vslice_dummy_var_172;
    call {:si_unique_call 228} sdv_75 := I8xConvertTypematicParameters(vslice_dummy_var_171, vslice_dummy_var_172);
    call {:si_unique_call 229} status_7 := I8xPutBytePolled#1(0, 1, 1, sdv_75);
    goto anon124_Then, anon124_Else;

  anon124_Else:
    assume {:partition} status_7 != 0;
    assume {:nonnull} dumpData != 0;
    assume dumpData > 0;
    assume {:nonnull} dumpData != 0;
    assume dumpData > 0;
    assume {:nonnull} dumpData != 0;
    assume dumpData > 0;
    assume {:nonnull} deviceExtension_1 != 0;
    assume deviceExtension_1 > 0;
    havoc vslice_dummy_var_173;
    havoc vslice_dummy_var_174;
    call {:si_unique_call 230} sdv_74 := I8xConvertTypematicParameters(vslice_dummy_var_173, vslice_dummy_var_174);
    assume {:nonnull} dumpData != 0;
    assume dumpData > 0;
    call {:si_unique_call 231} I8xLogError(deviceObject, 327699, 1540, status_7, dumpData, 4);
    goto L124;

  anon124_Then:
    assume {:partition} status_7 == 0;
    goto L124;

  anon96_Then:
    assume {:nonnull} transmitCCBContext_1 != 0;
    assume transmitCCBContext_1 > 0;
    havoc status_7;
    goto L139;

  anon95_Then:
    Tmp_202 := transmitCCBContext_1;
    call {:si_unique_call 232} I8xTransmitControllerCommand(Tmp_202);
    goto L111;

  anon89_Then:
    assume {:partition} 0 > status_7;
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:partition} waitForAckOnReset == 1;
    waitForAckOnReset := 0;
    goto anon94_Else_dummy;

  anon94_Else_dummy:
    assume false;
    return;

  anon94_Then:
    assume {:partition} waitForAckOnReset != 1;
    failedResetResponse2 := 1;
    failedResetResponseStatus2 := status_7;
    assume {:nonnull} byte_1 != 0;
    assume byte_1 > 0;
    goto L139;

  anon92_Then:
    goto L68;

  anon90_Then:
    assume {:partition} 0 > status_7;
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:partition} status_7 == -1073741643;
    call {:si_unique_call 233} vslice_dummy_var_29 := KeDelayExecutionThread(0, 0, 0);
    Tmp_200 := KeTickCount;
    assume {:nonnull} Tmp_200 != 0;
    assume Tmp_200 > 0;
    havoc s_p_e_c_i_a_l_4;
    goto L88;

  L88:
    call {:si_unique_call 234} I8xInitializeKeyboard_loop_L88(s_p_e_c_i_a_l_4, nextQuery);
    goto L88_last;

  L88_last:
    assume {:nonnull} nextQuery != 0;
    assume nextQuery > 0;
    assume {:nonnull} s_p_e_c_i_a_l_4 != 0;
    assume s_p_e_c_i_a_l_4 > 0;
    assume {:nonnull} nextQuery != 0;
    assume nextQuery > 0;
    assume {:nonnull} s_p_e_c_i_a_l_4 != 0;
    assume s_p_e_c_i_a_l_4 > 0;
    assume {:nonnull} nextQuery != 0;
    assume nextQuery > 0;
    assume {:nonnull} s_p_e_c_i_a_l_4 != 0;
    assume s_p_e_c_i_a_l_4 > 0;
    goto anon128_Then, anon128_Else;

  anon128_Else:
    assume {:nonnull} difference != 0;
    assume difference > 0;
    assume {:nonnull} nextQuery != 0;
    assume nextQuery > 0;
    assume {:nonnull} startOfSpin != 0;
    assume startOfSpin > 0;
    call {:si_unique_call 235} sdv_82 := corral_nondet();
    assume {:nonnull} difference != 0;
    assume difference > 0;
    assume {:nonnull} resetRespTimeout != 0;
    assume resetRespTimeout > 0;
    goto anon93_Then, anon93_Else;

  anon93_Else:
    goto anon93_Else_dummy;

  anon93_Else_dummy:
    assume false;
    return;

  anon93_Then:
    goto L68;

  anon128_Then:
    goto anon128_Then_dummy;

  anon128_Then_dummy:
    assume false;
    return;

  anon91_Then:
    assume {:partition} status_7 != -1073741643;
    goto L68;

  anon125_Then:
    goto anon125_Then_dummy;

  anon125_Then_dummy:
    assume false;
    return;

  anon88_Then:
    assume {:partition} 0 > status_7;
    failedReset_1 := 1;
    failedResetStatus := status_7;
    assume {:nonnull} KeyboardExtension_1 != 0;
    assume KeyboardExtension_1 > 0;
    goto anon129_Then, anon129_Else;

  anon129_Else:
    status_7 := -1073741667;
    goto L139;

  anon129_Then:
    goto L55;
}



procedure {:origName "I8xKeyboardConfiguration"} I8xKeyboardConfiguration(actual_KeyboardExtension_2: int, actual_ResourceList: int) returns (Tmp_205: int);
  modifies alloc;
  free ensures Tmp_205 == 0 || Tmp_205 == -1073741670;



implementation {:origName "I8xKeyboardConfiguration"} I8xKeyboardConfiguration(actual_KeyboardExtension_2: int, actual_ResourceList: int) returns (Tmp_205: int)
{
  var {:scalar} i_8: int;
  var {:scalar} Tmp_206: int;
  var {:scalar} count: int;
  var {:pointer} partialResList: int;
  var {:scalar} Tmp_207: int;
  var {:pointer} keyboardId: int;
  var {:scalar} iIndex: int;
  var {:pointer} Tmp_208: int;
  var {:scalar} Tmp_209: int;
  var {:scalar} Tmp_210: int;
  var {:scalar} Tmp_211: int;
  var {:scalar} Tmp_212: int;
  var {:scalar} Tmp_213: int;
  var {:scalar} Tmp_214: int;
  var {:scalar} Tmp_215: int;
  var {:pointer} firstResDesc: int;
  var {:pointer} configuration_1: int;
  var {:scalar} Tmp_216: int;
  var {:pointer} currentResDesc: int;
  var {:pointer} fullResDesc: int;
  var {:scalar} status_8: int;
  var {:pointer} Tmp_217: int;
  var {:scalar} defaultInterruptShare: int;
  var {:pointer} pKeyboardTypeInformation: int;
  var {:pointer} KeyboardExtension_2: int;
  var {:pointer} ResourceList: int;

  anon0:
    KeyboardExtension_2 := actual_KeyboardExtension_2;
    ResourceList := actual_ResourceList;
    call {:si_unique_call 238} Tmp_208 := __HAVOC_malloc(584);
    call {:si_unique_call 239} Tmp_217 := __HAVOC_malloc(584);
    status_8 := 0;
    partialResList := 0;
    firstResDesc := 0;
    currentResDesc := 0;
    fullResDesc := 0;
    call {:si_unique_call 240} sdv_do_paged_code_check();
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} ResourceList != 0;
    assume {:nonnull} ResourceList != 0;
    assume ResourceList > 0;
    havoc fullResDesc;
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} fullResDesc != 0;
    havoc configuration_1;
    assume {:nonnull} fullResDesc != 0;
    assume fullResDesc > 0;
    partialResList := PartialResourceList__CM_FULL_RESOURCE_DESCRIPTOR(fullResDesc);
    assume {:nonnull} partialResList != 0;
    assume partialResList > 0;
    havoc firstResDesc;
    currentResDesc := firstResDesc;
    assume {:nonnull} partialResList != 0;
    assume partialResList > 0;
    havoc count;
    assume {:nonnull} configuration_1 != 0;
    assume configuration_1 > 0;
    assume {:nonnull} configuration_1 != 0;
    assume configuration_1 > 0;
    assume {:nonnull} fullResDesc != 0;
    assume fullResDesc > 0;
    assume {:nonnull} configuration_1 != 0;
    assume configuration_1 > 0;
    assume {:nonnull} fullResDesc != 0;
    assume fullResDesc > 0;
    assume {:nonnull} configuration_1 != 0;
    assume configuration_1 > 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    defaultInterruptShare := 1;
    goto L39;

  L39:
    i_8 := 0;
    goto L40;

  L40:
    call {:si_unique_call 241} i_8, Tmp_206, Tmp_208, Tmp_209, Tmp_210, Tmp_217 := I8xKeyboardConfiguration_loop_L40(i_8, Tmp_206, count, Tmp_208, Tmp_209, Tmp_210, configuration_1, currentResDesc, Tmp_217, defaultInterruptShare, KeyboardExtension_2);
    goto L40_last;

  L40_last:
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} count > i_8;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    goto L52;

  L52:
    i_8 := i_8 + 1;
    goto L52_dummy;

  L52_dummy:
    assume false;
    return;

  anon52_Then:
    goto L44;

  L44:
    assume {:nonnull} configuration_1 != 0;
    assume configuration_1 > 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:nonnull} configuration_1 != 0;
    assume configuration_1 > 0;
    havoc Tmp_210;
    assume {:nonnull} configuration_1 != 0;
    assume configuration_1 > 0;
    havoc Tmp_208;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} Tmp_208 != 0;
    assume Tmp_208 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} configuration_1 != 0;
    assume configuration_1 > 0;
    havoc Tmp_209;
    assume {:nonnull} configuration_1 != 0;
    assume configuration_1 > 0;
    havoc Tmp_217;
    assume {:nonnull} Tmp_217 != 0;
    assume Tmp_217 > 0;
    assume {:nonnull} configuration_1 != 0;
    assume configuration_1 > 0;
    goto L52;

  anon45_Then:
    goto L52;

  anon53_Then:
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} currentResDesc != 0;
    assume currentResDesc > 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} defaultInterruptShare != 0;
    Tmp_206 := 3;
    goto L50;

  L50:
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    goto L52;

  anon56_Then:
    assume {:partition} defaultInterruptShare == 0;
    Tmp_206 := 1;
    goto L50;

  anon44_Then:
    goto L44;

  anon42_Then:
    assume {:partition} i_8 >= count;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    goto L60;

  L60:
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    keyboardId := KeyboardIdentifier__KEYBOARD_ATTRIBUTES(KeyboardAttributes__PORT_KEYBOARD_EXTENSION(KeyboardExtension_2));
    assume {:nonnull} keyboardId != 0;
    assume keyboardId > 0;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    goto L63;

  L63:
    assume {:nonnull} keyboardId != 0;
    assume keyboardId > 0;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    goto L66;

  L66:
    iIndex := 0;
    pKeyboardTypeInformation := 0;
    goto L69;

  L69:
    call {:si_unique_call 242} Tmp_207, iIndex, Tmp_214, Tmp_215 := I8xKeyboardConfiguration_loop_L69(Tmp_207, keyboardId, iIndex, Tmp_214, Tmp_215);
    goto L69_last;

  L69_last:
    Tmp_214 := iIndex;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    Tmp_207 := iIndex;
    assume {:nonnull} keyboardId != 0;
    assume keyboardId > 0;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    Tmp_215 := iIndex;
    assume {:nonnull} keyboardId != 0;
    assume keyboardId > 0;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    Tmp_212 := iIndex;
    havoc pKeyboardTypeInformation;
    goto L70;

  L70:
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} pKeyboardTypeInformation != 0;
    goto L77;

  L77:
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} pKeyboardTypeInformation != 0;
    assume pKeyboardTypeInformation > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} pKeyboardTypeInformation != 0;
    assume pKeyboardTypeInformation > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} pKeyboardTypeInformation != 0;
    assume pKeyboardTypeInformation > 0;
    goto L80;

  L80:
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    Tmp_205 := status_8;
    goto L1;

  L1:
    return;

  anon49_Then:
    assume {:partition} pKeyboardTypeInformation == 0;
    havoc pKeyboardTypeInformation;
    goto L77;

  anon60_Then:
    goto L72;

  L72:
    iIndex := iIndex + 1;
    goto L72_dummy;

  L72_dummy:
    assume false;
    return;

  anon59_Then:
    goto L72;

  anon58_Then:
    goto L70;

  anon47_Then:
    assume {:nonnull} keyboardId != 0;
    assume keyboardId > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:nonnull} keyboardId != 0;
    assume keyboardId > 0;
    havoc Tmp_211;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} keyboardId != 0;
    assume keyboardId > 0;
    havoc Tmp_213;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} keyboardId != 0;
    assume keyboardId > 0;
    havoc Tmp_216;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    goto L80;

  anon48_Then:
    goto L66;

  anon57_Then:
    assume {:nonnull} keyboardId != 0;
    assume keyboardId > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:nonnull} keyboardId != 0;
    assume keyboardId > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:nonnull} keyboardId != 0;
    assume keyboardId > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:nonnull} configuration_1 != 0;
    assume configuration_1 > 0;
    goto L63;

  anon51_Then:
    goto L63;

  anon50_Then:
    goto L63;

  anon46_Then:
    goto L63;

  anon43_Then:
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    assume {:nonnull} KeyboardExtension_2 != 0;
    assume KeyboardExtension_2 > 0;
    goto L60;

  anon55_Then:
    defaultInterruptShare := 0;
    goto L39;

  anon54_Then:
    assume {:partition} fullResDesc == 0;
    Tmp_205 := -1073741670;
    goto L1;

  anon41_Then:
    assume {:partition} ResourceList == 0;
    Tmp_205 := -1073741670;
    goto L1;
}



procedure {:origName "I8042QueryIMEStatusForOasys"} I8042QueryIMEStatusForOasys(actual_KeyboardIMEStatus: int) returns (Tmp_219: int);
  free ensures Tmp_219 == 5 || Tmp_219 == 8 || Tmp_219 == 7 || Tmp_219 == 1 || Tmp_219 == 4 || Tmp_219 == 3;



implementation {:origName "I8042QueryIMEStatusForOasys"} I8042QueryIMEStatusForOasys(actual_KeyboardIMEStatus: int) returns (Tmp_219: int)
{
  var {:scalar} InternalMode: int;
  var {:pointer} KeyboardIMEStatus: int;
  var vslice_dummy_var_175: int;
  var vslice_dummy_var_176: int;

  anon0:
    KeyboardIMEStatus := actual_KeyboardIMEStatus;
    assume {:nonnull} KeyboardIMEStatus != 0;
    assume KeyboardIMEStatus > 0;
    havoc vslice_dummy_var_175;
    havoc vslice_dummy_var_176;
    call {:si_unique_call 243} InternalMode := I8042ConversionStatusForOasys(vslice_dummy_var_175, vslice_dummy_var_176);
    Tmp_219 := InternalMode;
    return;
}



procedure {:origName "I8xServiceCrashDump"} I8xServiceCrashDump(actual_DeviceExtension_1: int, actual_RegistryPath_2: int);
  modifies alloc;



implementation {:origName "I8xServiceCrashDump"} I8xServiceCrashDump(actual_DeviceExtension_1: int, actual_RegistryPath_2: int)
{
  var {:dopa} {:scalar} keyNumber_1: int;
  var {:scalar} Tmp_221: int;
  var {:dopa} {:scalar} crashFlags: int;
  var {:pointer} sdv_89: int;
  var {:scalar} Tmp_224: int;
  var {:pointer} keyToScanTbl_1: int;
  var {:pointer} sdv_90: int;
  var {:dopa} {:scalar} defaultCrashFlags: int;
  var {:dopa} {:scalar} defaultKeyNumber_1: int;
  var {:scalar} Tmp_225: int;
  var {:pointer} parameters_2: int;
  var {:scalar} Tmp_226: int;
  var {:scalar} status_9: int;
  var {:scalar} queriesPlusOne_1: int;
  var {:scalar} parametersPath_2: int;
  var {:scalar} Tmp_227: int;
  var {:pointer} DeviceExtension_1: int;
  var {:pointer} RegistryPath_2: int;
  var vslice_dummy_var_33: int;
  var vslice_dummy_var_34: int;
  var vslice_dummy_var_35: int;
  var vslice_dummy_var_36: int;

  anon0:
    call {:si_unique_call 244} keyNumber_1 := __HAVOC_malloc(4);
    call {:si_unique_call 245} crashFlags := __HAVOC_malloc(4);
    call {:si_unique_call 246} defaultCrashFlags := __HAVOC_malloc(4);
    call {:si_unique_call 247} defaultKeyNumber_1 := __HAVOC_malloc(4);
    call {:si_unique_call 248} parametersPath_2 := __HAVOC_malloc(12);
    call {:si_unique_call 249} vslice_dummy_var_33 := __HAVOC_malloc(4);
    DeviceExtension_1 := actual_DeviceExtension_1;
    RegistryPath_2 := actual_RegistryPath_2;
    call {:si_unique_call 250} vslice_dummy_var_35 := __HAVOC_malloc(44);
    call {:si_unique_call 251} keyToScanTbl_1 := __HAVOC_malloc(536);
    parameters_2 := 0;
    assume {:nonnull} defaultCrashFlags != 0;
    assume defaultCrashFlags > 0;
    assume {:nonnull} defaultKeyNumber_1 != 0;
    assume defaultKeyNumber_1 > 0;
    status_9 := 0;
    queriesPlusOne_1 := 3;
    assume {:nonnull} keyToScanTbl_1 != 0;
    assume keyToScanTbl_1 > 0;
    call {:si_unique_call 252} sdv_do_paged_code_check();
    assume {:nonnull} parametersPath_2 != 0;
    assume parametersPath_2 > 0;
    assume {:nonnull} RegistryPath_2 != 0;
    assume RegistryPath_2 > 0;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} status_9 >= 0;
    Tmp_221 := 28 * queriesPlusOne_1;
    call {:si_unique_call 253} sdv_89 := ExAllocatePoolWithTag(1, Tmp_221, 842281016);
    parameters_2 := sdv_89;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} parameters_2 != 0;
    Tmp_225 := 28 * queriesPlusOne_1;
    call {:si_unique_call 254} sdv_RtlZeroMemory(0, Tmp_225);
    call {:si_unique_call 255} RtlInitUnicodeString(parametersPath_2, 0);
    assume {:nonnull} RegistryPath_2 != 0;
    assume RegistryPath_2 > 0;
    assume {:nonnull} parametersPath_2 != 0;
    assume parametersPath_2 > 0;
    assume {:nonnull} parametersPath_2 != 0;
    assume parametersPath_2 > 0;
    havoc Tmp_224;
    call {:si_unique_call 256} sdv_90 := ExAllocatePoolWithTag(1, Tmp_224, 842281016);
    assume {:nonnull} parametersPath_2 != 0;
    assume parametersPath_2 > 0;
    assume {:nonnull} parametersPath_2 != 0;
    assume parametersPath_2 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    status_9 := -1073741823;
    goto L26;

  L26:
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} status_9 >= 0;
    assume {:nonnull} parametersPath_2 != 0;
    assume parametersPath_2 > 0;
    havoc Tmp_226;
    call {:si_unique_call 257} sdv_RtlZeroMemory(0, Tmp_226);
    call {:si_unique_call 258} vslice_dummy_var_34 := corral_nondet();
    call {:si_unique_call 259} vslice_dummy_var_36 := corral_nondet();
    assume {:nonnull} parameters_2 != 0;
    assume parameters_2 > 0;
    assume {:nonnull} parameters_2 != 0;
    assume parameters_2 > 0;
    assume {:nonnull} parameters_2 != 0;
    assume parameters_2 > 0;
    assume {:nonnull} parameters_2 != 0;
    assume parameters_2 > 0;
    assume {:nonnull} parameters_2 != 0;
    assume parameters_2 > 0;
    assume {:nonnull} parameters_2 != 0;
    assume parameters_2 > 0;
    assume {:nonnull} parameters_2 != 0;
    assume parameters_2 > 0;
    assume {:nonnull} parameters_2 != 0;
    assume parameters_2 > 0;
    assume {:nonnull} parameters_2 != 0;
    assume parameters_2 > 0;
    assume {:nonnull} parameters_2 != 0;
    assume parameters_2 > 0;
    assume {:nonnull} parameters_2 != 0;
    assume parameters_2 > 0;
    assume {:nonnull} parameters_2 != 0;
    assume parameters_2 > 0;
    call {:si_unique_call 260} status_9 := sdv_RtlQueryRegistryValues(0, 0, 0, 0, 0);
    goto L49;

  L49:
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} status_9 >= 0;
    assume {:nonnull} DeviceExtension_1 != 0;
    assume DeviceExtension_1 > 0;
    assume {:nonnull} crashFlags != 0;
    assume crashFlags > 0;
    goto L78;

  L78:
    assume {:nonnull} DeviceExtension_1 != 0;
    assume DeviceExtension_1 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:nonnull} keyNumber_1 != 0;
    assume keyNumber_1 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:nonnull} DeviceExtension_1 != 0;
    assume DeviceExtension_1 > 0;
    assume {:nonnull} DeviceExtension_1 != 0;
    assume DeviceExtension_1 > 0;
    goto L79;

  L79:
    assume {:nonnull} parametersPath_2 != 0;
    assume parametersPath_2 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    call {:si_unique_call 261} sdv_ExFreePool(0);
    goto L87;

  L87:
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} parameters_2 != 0;
    call {:si_unique_call 262} sdv_ExFreePool(0);
    goto L1;

  L1:
    return;

  anon27_Then:
    assume {:partition} parameters_2 == 0;
    goto L1;

  anon24_Then:
    goto L87;

  anon25_Then:
    assume {:nonnull} keyNumber_1 != 0;
    assume keyNumber_1 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:nonnull} keyNumber_1 != 0;
    assume keyNumber_1 > 0;
    havoc Tmp_227;
    assume {:nonnull} DeviceExtension_1 != 0;
    assume DeviceExtension_1 > 0;
    assume {:nonnull} keyToScanTbl_1 != 0;
    assume keyToScanTbl_1 > 0;
    goto L86;

  L86:
    assume {:nonnull} DeviceExtension_1 != 0;
    assume DeviceExtension_1 > 0;
    goto L79;

  anon26_Then:
    assume {:nonnull} DeviceExtension_1 != 0;
    assume DeviceExtension_1 > 0;
    goto L86;

  anon23_Then:
    goto L79;

  anon22_Then:
    assume {:partition} 0 > status_9;
    assume {:nonnull} DeviceExtension_1 != 0;
    assume DeviceExtension_1 > 0;
    assume {:nonnull} defaultCrashFlags != 0;
    assume defaultCrashFlags > 0;
    goto L78;

  anon21_Then:
    assume {:partition} 0 > status_9;
    goto L49;

  anon30_Then:
    goto L26;

  anon29_Then:
    assume {:partition} parameters_2 == 0;
    status_9 := -1073741823;
    goto L26;

  anon28_Then:
    assume {:partition} 0 > status_9;
    goto L26;
}



procedure {:origName "_sdv_init8"} _sdv_init8();
  modifies alloc;



implementation {:origName "_sdv_init8"} _sdv_init8()
{
  var vslice_dummy_var_37: int;

  anon0:
    call {:si_unique_call 263} vslice_dummy_var_37 := __HAVOC_malloc(4);
    assume ScanCodeToUCharCount_1 == 54;
    return;
}



procedure {:origName "I8xQueueCurrentKeyboardInput"} I8xQueueCurrentKeyboardInput(actual_DeviceObject_1: int);
  modifies alloc, yogi_error, Mem_T.CompletionRoutine__IO_STACK_LOCATION;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "I8xQueueCurrentKeyboardInput"} I8xQueueCurrentKeyboardInput(actual_DeviceObject_1: int)
{
  var {:scalar} sdv_94: int;
  var {:pointer} deviceExtension_2: int;
  var {:pointer} DeviceObject_1: int;
  var vslice_dummy_var_38: int;
  var vslice_dummy_var_39: int;
  var vslice_dummy_var_40: int;
  var vslice_dummy_var_177: int;

  anon0:
    call {:si_unique_call 264} vslice_dummy_var_38 := __HAVOC_malloc(4);
    DeviceObject_1 := actual_DeviceObject_1;
    assume {:nonnull} DeviceObject_1 != 0;
    assume DeviceObject_1 > 0;
    havoc deviceExtension_2;
    assume {:nonnull} deviceExtension_2 != 0;
    assume deviceExtension_2 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:nonnull} deviceExtension_2 != 0;
    assume deviceExtension_2 > 0;
    call {:si_unique_call 265} sdv_94 := I8xWriteDataToKeyboardQueue(deviceExtension_2, CurrentInput__PORT_KEYBOARD_EXTENSION(deviceExtension_2));
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} sdv_94 != 0;
    assume {:nonnull} deviceExtension_2 != 0;
    assume deviceExtension_2 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} deviceExtension_2 != 0;
    assume deviceExtension_2 > 0;
    goto L6;

  L6:
    assume {:nonnull} deviceExtension_2 != 0;
    assume deviceExtension_2 > 0;
    goto LM2;

  LM2:
    return;

  anon15_Then:
    assume {:nonnull} DeviceObject_1 != 0;
    assume DeviceObject_1 > 0;
    assume {:nonnull} deviceExtension_2 != 0;
    assume deviceExtension_2 > 0;
    havoc vslice_dummy_var_177;
    call {:si_unique_call 266} vslice_dummy_var_39 := KeInsertQueueDpc#1(KeyboardIsrDpc__PORT_KEYBOARD_EXTENSION(deviceExtension_2), vslice_dummy_var_177, 0);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} yogi_error != 1;
    goto L6;

  anon17_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon13_Then:
    assume {:partition} sdv_94 == 0;
    assume {:nonnull} deviceExtension_2 != 0;
    assume deviceExtension_2 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:nonnull} deviceExtension_2 != 0;
    assume deviceExtension_2 > 0;
    call {:si_unique_call 267} vslice_dummy_var_40 := KeInsertQueueDpc#1(ErrorLogDpc_COMMON_DATA(deviceExtension_2), 0, -1073414133);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} deviceExtension_2 != 0;
    assume deviceExtension_2 > 0;
    goto L6;

  anon18_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon14_Then:
    goto L6;

  anon16_Then:
    goto L6;
}



procedure {:origName "I8xProcessCrashDump"} I8xProcessCrashDump(actual_DeviceExtension_2: int, actual_ScanCode: int, actual_ScanState: int);
  modifies alloc;



implementation {:origName "I8xProcessCrashDump"} I8xProcessCrashDump(actual_DeviceExtension_2: int, actual_ScanCode: int, actual_ScanState: int)
{
  var {:scalar} debugScanCode: int;
  var {:scalar} crashScanCode: int;
  var {:scalar} Tmp_233: int;
  var {:scalar} Tmp_235: int;
  var {:scalar} Tmp_236: int;
  var {:scalar} Tmp_237: int;
  var {:scalar} Tmp_238: int;
  var {:scalar} crashFlags_1: int;
  var {:scalar} debugScanCode2: int;
  var {:scalar} Tmp_240: int;
  var {:scalar} Tmp_241: int;
  var {:scalar} Tmp_242: int;
  var {:scalar} Tmp_243: int;
  var {:scalar} Tmp_244: int;
  var {:scalar} Tmp_245: int;
  var {:scalar} Tmp_246: int;
  var {:scalar} Tmp_247: int;
  var {:scalar} Tmp_248: int;
  var {:scalar} Tmp_249: int;
  var {:scalar} Tmp_250: int;
  var {:scalar} debugFlags_1: int;
  var {:scalar} Tmp_251: int;
  var {:scalar} Tmp_252: int;
  var {:scalar} Tmp_253: int;
  var {:scalar} Tmp_254: int;
  var {:scalar} crashScanCode2: int;
  var {:scalar} Tmp_255: int;
  var {:scalar} Tmp_256: int;
  var {:scalar} Tmp_257: int;
  var {:scalar} Tmp_258: int;
  var {:pointer} DeviceExtension_2: int;
  var {:scalar} ScanCode: int;
  var {:scalar} ScanState: int;
  var vslice_dummy_var_41: int;
  var vslice_dummy_var_42: int;
  var vslice_dummy_var_43: int;

  anon0:
    call {:si_unique_call 268} vslice_dummy_var_41 := __HAVOC_malloc(4);
    DeviceExtension_2 := actual_DeviceExtension_2;
    ScanCode := actual_ScanCode;
    ScanState := actual_ScanState;
    assume {:nonnull} DeviceExtension_2 != 0;
    assume DeviceExtension_2 > 0;
    havoc crashFlags_1;
    assume {:nonnull} DeviceExtension_2 != 0;
    assume DeviceExtension_2 > 0;
    havoc crashScanCode;
    assume {:nonnull} DeviceExtension_2 != 0;
    assume DeviceExtension_2 > 0;
    havoc crashScanCode2;
    assume {:nonnull} DeviceExtension_2 != 0;
    assume DeviceExtension_2 > 0;
    havoc debugFlags_1;
    assume {:nonnull} DeviceExtension_2 != 0;
    assume DeviceExtension_2 > 0;
    havoc debugScanCode;
    assume {:nonnull} DeviceExtension_2 != 0;
    assume DeviceExtension_2 > 0;
    havoc debugScanCode2;
    goto anon201_Then, anon201_Else;

  anon201_Else:
    assume {:partition} 127 >= ScanCode;
    goto anon148_Then, anon148_Else;

  anon148_Else:
    assume {:partition} ScanCode != 29;
    goto anon197_Then, anon197_Else;

  anon197_Else:
    assume {:partition} ScanCode != 42;
    goto anon196_Then, anon196_Else;

  anon196_Else:
    assume {:partition} ScanCode != 54;
    goto anon195_Then, anon195_Else;

  anon195_Else:
    assume {:partition} ScanCode == 56;
    goto anon153_Then, anon153_Else;

  anon153_Else:
    assume {:partition} ScanState != 0;
    goto anon154_Then, anon154_Else;

  anon154_Else:
    assume {:partition} ScanState == 1;
    assume {:nonnull} DeviceExtension_2 != 0;
    assume DeviceExtension_2 > 0;
    goto L1;

  L1:
    return;

  anon154_Then:
    assume {:partition} ScanState != 1;
    goto L1;

  anon153_Then:
    assume {:partition} ScanState == 0;
    assume {:nonnull} DeviceExtension_2 != 0;
    assume DeviceExtension_2 > 0;
    goto L1;

  anon195_Then:
    assume {:partition} ScanCode != 56;
    goto anon149_Then, anon149_Else;

  anon149_Else:
    assume {:partition} 127 >= crashScanCode;
    goto anon157_Then, anon157_Else;

  anon157_Else:
    assume {:partition} ScanState == 0;
    Tmp_233 := BAND(ScanCode, BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64));
    goto anon209_Then, anon209_Else;

  anon209_Else:
    assume {:partition} Tmp_233 != crashScanCode;
    goto L36;

  L36:
    goto anon156_Then, anon156_Else;

  anon156_Else:
    assume {:partition} crashScanCode > 127;
    goto anon159_Then, anon159_Else;

  anon159_Else:
    assume {:partition} ScanState == 1;
    Tmp_249 := BAND(ScanCode, BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64));
    Tmp_255 := BAND(crashScanCode, BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64));
    goto anon202_Then, anon202_Else;

  anon202_Else:
    assume {:partition} Tmp_249 != Tmp_255;
    goto L41;

  L41:
    goto anon158_Then, anon158_Else;

  anon158_Else:
    assume {:partition} 127 >= crashScanCode2;
    goto anon161_Then, anon161_Else;

  anon161_Else:
    assume {:partition} ScanState == 0;
    Tmp_251 := BAND(ScanCode, BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64));
    goto anon208_Then, anon208_Else;

  anon208_Else:
    assume {:partition} Tmp_251 != crashScanCode2;
    goto L46;

  L46:
    goto anon160_Then, anon160_Else;

  anon160_Else:
    assume {:partition} crashScanCode2 > 127;
    goto anon163_Then, anon163_Else;

  anon163_Else:
    assume {:partition} ScanState == 1;
    Tmp_235 := BAND(ScanCode, BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64));
    Tmp_242 := BAND(crashScanCode2, BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64));
    goto anon203_Then, anon203_Else;

  anon203_Else:
    assume {:partition} Tmp_235 != Tmp_242;
    goto L50;

  L50:
    goto anon162_Then, anon162_Else;

  anon162_Else:
    assume {:partition} 127 >= debugScanCode;
    goto anon165_Then, anon165_Else;

  anon165_Else:
    assume {:partition} ScanState == 0;
    Tmp_243 := BAND(ScanCode, BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64));
    goto anon207_Then, anon207_Else;

  anon207_Else:
    assume {:partition} Tmp_243 != debugScanCode;
    goto L55;

  L55:
    goto anon164_Then, anon164_Else;

  anon164_Else:
    assume {:partition} debugScanCode > 127;
    goto anon167_Then, anon167_Else;

  anon167_Else:
    assume {:partition} ScanState == 1;
    Tmp_250 := BAND(ScanCode, BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64));
    Tmp_241 := BAND(debugScanCode, BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64));
    goto anon204_Then, anon204_Else;

  anon204_Else:
    assume {:partition} Tmp_250 != Tmp_241;
    goto L59;

  L59:
    goto anon166_Then, anon166_Else;

  anon166_Else:
    assume {:partition} 127 >= debugScanCode2;
    goto anon169_Then, anon169_Else;

  anon169_Else:
    assume {:partition} ScanState == 0;
    Tmp_236 := BAND(ScanCode, BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64));
    goto anon206_Then, anon206_Else;

  anon206_Else:
    assume {:partition} Tmp_236 != debugScanCode2;
    goto L64;

  L64:
    goto anon168_Then, anon168_Else;

  anon168_Else:
    assume {:partition} debugScanCode2 > 127;
    goto anon170_Then, anon170_Else;

  anon170_Else:
    assume {:partition} ScanState == 1;
    Tmp_237 := BAND(ScanCode, BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64));
    Tmp_238 := BAND(debugScanCode2, BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64));
    goto anon205_Then, anon205_Else;

  anon205_Else:
    assume {:partition} Tmp_237 != Tmp_238;
    goto L68;

  L68:
    assume {:nonnull} DeviceExtension_2 != 0;
    assume DeviceExtension_2 > 0;
    goto L1;

  anon205_Then:
    assume {:partition} Tmp_237 == Tmp_238;
    goto L1;

  anon170_Then:
    assume {:partition} ScanState != 1;
    goto L68;

  anon168_Then:
    assume {:partition} 127 >= debugScanCode2;
    goto L68;

  anon206_Then:
    assume {:partition} Tmp_236 == debugScanCode2;
    goto L1;

  anon169_Then:
    assume {:partition} ScanState != 0;
    goto L64;

  anon166_Then:
    assume {:partition} debugScanCode2 > 127;
    goto L64;

  anon204_Then:
    assume {:partition} Tmp_250 == Tmp_241;
    goto L1;

  anon167_Then:
    assume {:partition} ScanState != 1;
    goto L59;

  anon164_Then:
    assume {:partition} 127 >= debugScanCode;
    goto L59;

  anon207_Then:
    assume {:partition} Tmp_243 == debugScanCode;
    goto L1;

  anon165_Then:
    assume {:partition} ScanState != 0;
    goto L55;

  anon162_Then:
    assume {:partition} debugScanCode > 127;
    goto L55;

  anon203_Then:
    assume {:partition} Tmp_235 == Tmp_242;
    goto L1;

  anon163_Then:
    assume {:partition} ScanState != 1;
    goto L50;

  anon160_Then:
    assume {:partition} 127 >= crashScanCode2;
    goto L50;

  anon208_Then:
    assume {:partition} Tmp_251 == crashScanCode2;
    goto L1;

  anon161_Then:
    assume {:partition} ScanState != 0;
    goto L46;

  anon158_Then:
    assume {:partition} crashScanCode2 > 127;
    goto L46;

  anon202_Then:
    assume {:partition} Tmp_249 == Tmp_255;
    goto L1;

  anon159_Then:
    assume {:partition} ScanState != 1;
    goto L41;

  anon156_Then:
    assume {:partition} 127 >= crashScanCode;
    goto L41;

  anon209_Then:
    assume {:partition} Tmp_233 == crashScanCode;
    goto L1;

  anon157_Then:
    assume {:partition} ScanState != 0;
    goto L36;

  anon149_Then:
    assume {:partition} crashScanCode > 127;
    goto L36;

  anon196_Then:
    assume {:partition} ScanCode == 54;
    goto anon152_Then, anon152_Else;

  anon152_Else:
    assume {:partition} ScanState == 0;
    assume {:nonnull} DeviceExtension_2 != 0;
    assume DeviceExtension_2 > 0;
    goto L1;

  anon152_Then:
    assume {:partition} ScanState != 0;
    goto L1;

  anon197_Then:
    assume {:partition} ScanCode == 42;
    goto anon151_Then, anon151_Else;

  anon151_Else:
    assume {:partition} ScanState == 0;
    assume {:nonnull} DeviceExtension_2 != 0;
    assume DeviceExtension_2 > 0;
    goto L1;

  anon151_Then:
    assume {:partition} ScanState != 0;
    goto L1;

  anon148_Then:
    assume {:partition} ScanCode == 29;
    goto anon150_Then, anon150_Else;

  anon150_Else:
    assume {:partition} ScanState != 0;
    goto anon155_Then, anon155_Else;

  anon155_Else:
    assume {:partition} ScanState == 1;
    assume {:nonnull} DeviceExtension_2 != 0;
    assume DeviceExtension_2 > 0;
    goto L1;

  anon155_Then:
    assume {:partition} ScanState != 1;
    goto L1;

  anon150_Then:
    assume {:partition} ScanState == 0;
    assume {:nonnull} DeviceExtension_2 != 0;
    assume DeviceExtension_2 > 0;
    goto L1;

  anon201_Then:
    assume {:partition} ScanCode > 127;
    goto anon147_Then, anon147_Else;

  anon147_Else:
    assume {:partition} BAND(ScanCode, 127) != 29;
    goto anon200_Then, anon200_Else;

  anon200_Else:
    assume {:partition} BAND(ScanCode, 127) != 42;
    goto anon199_Then, anon199_Else;

  anon199_Else:
    assume {:partition} BAND(ScanCode, 127) != 54;
    goto anon198_Then, anon198_Else;

  anon198_Else:
    assume {:partition} BAND(ScanCode, 127) == 56;
    goto anon175_Then, anon175_Else;

  anon175_Else:
    assume {:partition} ScanState != 0;
    goto anon176_Then, anon176_Else;

  anon176_Else:
    assume {:partition} ScanState == 1;
    assume {:nonnull} DeviceExtension_2 != 0;
    assume DeviceExtension_2 > 0;
    goto L1;

  anon176_Then:
    assume {:partition} ScanState != 1;
    goto L1;

  anon175_Then:
    assume {:partition} ScanState == 0;
    assume {:nonnull} DeviceExtension_2 != 0;
    assume DeviceExtension_2 > 0;
    goto L1;

  anon198_Then:
    assume {:partition} BAND(ScanCode, 127) != 56;
    goto anon171_Then, anon171_Else;

  anon171_Else:
    assume {:partition} 127 >= crashScanCode;
    goto anon179_Then, anon179_Else;

  anon179_Else:
    assume {:partition} ScanState == 0;
    Tmp_257 := BAND(ScanCode, BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64));
    goto anon219_Then, anon219_Else;

  anon219_Else:
    assume {:partition} Tmp_257 == crashScanCode;
    goto L95;

  L95:
    assume {:nonnull} DeviceExtension_2 != 0;
    assume DeviceExtension_2 > 0;
    goto anon180_Then, anon180_Else;

  anon180_Else:
    assume {:nonnull} DeviceExtension_2 != 0;
    assume DeviceExtension_2 > 0;
    goto L98;

  L98:
    crashFlags_1 := BOR(crashFlags_1, BOR(256, 512));
    assume {:nonnull} DeviceExtension_2 != 0;
    assume DeviceExtension_2 > 0;
    goto anon211_Then, anon211_Else;

  anon211_Else:
    assume {:nonnull} DeviceExtension_2 != 0;
    assume DeviceExtension_2 > 0;
    call {:si_unique_call 269} KeBugCheckEx(226, 0, 0, 0, 0);
    goto L1;

  anon211_Then:
    goto L1;

  anon180_Then:
    assume {:nonnull} DeviceExtension_2 != 0;
    assume DeviceExtension_2 > 0;
    goto L98;

  anon219_Then:
    assume {:partition} Tmp_257 != crashScanCode;
    goto L91;

  L91:
    goto anon178_Then, anon178_Else;

  anon178_Else:
    assume {:partition} crashScanCode > 127;
    goto anon182_Then, anon182_Else;

  anon182_Else:
    assume {:partition} ScanState == 1;
    Tmp_254 := BAND(ScanCode, BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64));
    Tmp_240 := BAND(crashScanCode, BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64));
    goto anon210_Then, anon210_Else;

  anon210_Else:
    assume {:partition} Tmp_254 != Tmp_240;
    goto L105;

  L105:
    goto anon181_Then, anon181_Else;

  anon181_Else:
    assume {:partition} 127 >= crashScanCode2;
    goto anon184_Then, anon184_Else;

  anon184_Else:
    assume {:partition} ScanState == 0;
    Tmp_256 := BAND(ScanCode, BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64));
    goto anon218_Then, anon218_Else;

  anon218_Else:
    assume {:partition} Tmp_256 != crashScanCode2;
    goto L110;

  L110:
    goto anon183_Then, anon183_Else;

  anon183_Else:
    assume {:partition} crashScanCode2 > 127;
    goto anon186_Then, anon186_Else;

  anon186_Else:
    assume {:partition} ScanState == 1;
    Tmp_247 := BAND(ScanCode, BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64));
    Tmp_253 := BAND(crashScanCode2, BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64));
    goto anon212_Then, anon212_Else;

  anon212_Else:
    assume {:partition} Tmp_247 != Tmp_253;
    goto L114;

  L114:
    goto anon185_Then, anon185_Else;

  anon185_Else:
    assume {:partition} 127 >= debugScanCode;
    goto anon188_Then, anon188_Else;

  anon188_Else:
    assume {:partition} ScanState == 0;
    Tmp_252 := BAND(ScanCode, BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64));
    goto anon217_Then, anon217_Else;

  anon217_Else:
    assume {:partition} Tmp_252 == debugScanCode;
    goto L123;

  L123:
    assume {:nonnull} DeviceExtension_2 != 0;
    assume DeviceExtension_2 > 0;
    goto anon189_Then, anon189_Else;

  anon189_Else:
    assume {:nonnull} DeviceExtension_2 != 0;
    assume DeviceExtension_2 > 0;
    goto L126;

  L126:
    debugFlags_1 := BOR(debugFlags_1, BOR(1024, 2048));
    assume {:nonnull} DeviceExtension_2 != 0;
    assume DeviceExtension_2 > 0;
    goto anon214_Then, anon214_Else;

  anon214_Else:
    assume {:nonnull} DeviceExtension_2 != 0;
    assume DeviceExtension_2 > 0;
    call {:si_unique_call 270} vslice_dummy_var_43 := corral_nondet();
    call {:si_unique_call 271} vslice_dummy_var_42 := corral_nondet();
    goto L1;

  anon214_Then:
    goto L1;

  anon189_Then:
    assume {:nonnull} DeviceExtension_2 != 0;
    assume DeviceExtension_2 > 0;
    goto L126;

  anon217_Then:
    assume {:partition} Tmp_252 != debugScanCode;
    goto L119;

  L119:
    goto anon187_Then, anon187_Else;

  anon187_Else:
    assume {:partition} debugScanCode > 127;
    goto anon191_Then, anon191_Else;

  anon191_Else:
    assume {:partition} ScanState == 1;
    Tmp_244 := BAND(ScanCode, BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64));
    Tmp_246 := BAND(debugScanCode, BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64));
    goto anon213_Then, anon213_Else;

  anon213_Else:
    assume {:partition} Tmp_244 != Tmp_246;
    goto L137;

  L137:
    goto anon190_Then, anon190_Else;

  anon190_Else:
    assume {:partition} 127 >= debugScanCode2;
    goto anon193_Then, anon193_Else;

  anon193_Else:
    assume {:partition} ScanState == 0;
    Tmp_248 := BAND(ScanCode, BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64));
    goto anon216_Then, anon216_Else;

  anon216_Else:
    assume {:partition} Tmp_248 != debugScanCode2;
    goto L142;

  L142:
    goto anon192_Then, anon192_Else;

  anon192_Else:
    assume {:partition} debugScanCode2 > 127;
    goto anon194_Then, anon194_Else;

  anon194_Else:
    assume {:partition} ScanState == 1;
    Tmp_258 := BAND(ScanCode, BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64));
    Tmp_245 := BAND(debugScanCode2, BOR(BOR(BOR(BOR(BOR(BOR(1, 2), 4), 8), 16), 32), 64));
    goto anon215_Then, anon215_Else;

  anon215_Else:
    assume {:partition} Tmp_258 != Tmp_245;
    goto L146;

  L146:
    assume {:nonnull} DeviceExtension_2 != 0;
    assume DeviceExtension_2 > 0;
    goto L1;

  anon215_Then:
    assume {:partition} Tmp_258 == Tmp_245;
    goto L123;

  anon194_Then:
    assume {:partition} ScanState != 1;
    goto L146;

  anon192_Then:
    assume {:partition} 127 >= debugScanCode2;
    goto L146;

  anon216_Then:
    assume {:partition} Tmp_248 == debugScanCode2;
    goto L123;

  anon193_Then:
    assume {:partition} ScanState != 0;
    goto L142;

  anon190_Then:
    assume {:partition} debugScanCode2 > 127;
    goto L142;

  anon213_Then:
    assume {:partition} Tmp_244 == Tmp_246;
    goto L123;

  anon191_Then:
    assume {:partition} ScanState != 1;
    goto L137;

  anon187_Then:
    assume {:partition} 127 >= debugScanCode;
    goto L137;

  anon188_Then:
    assume {:partition} ScanState != 0;
    goto L119;

  anon185_Then:
    assume {:partition} debugScanCode > 127;
    goto L119;

  anon212_Then:
    assume {:partition} Tmp_247 == Tmp_253;
    goto L95;

  anon186_Then:
    assume {:partition} ScanState != 1;
    goto L114;

  anon183_Then:
    assume {:partition} 127 >= crashScanCode2;
    goto L114;

  anon218_Then:
    assume {:partition} Tmp_256 == crashScanCode2;
    goto L95;

  anon184_Then:
    assume {:partition} ScanState != 0;
    goto L110;

  anon181_Then:
    assume {:partition} crashScanCode2 > 127;
    goto L110;

  anon210_Then:
    assume {:partition} Tmp_254 == Tmp_240;
    goto L95;

  anon182_Then:
    assume {:partition} ScanState != 1;
    goto L105;

  anon178_Then:
    assume {:partition} 127 >= crashScanCode;
    goto L105;

  anon179_Then:
    assume {:partition} ScanState != 0;
    goto L91;

  anon171_Then:
    assume {:partition} crashScanCode > 127;
    goto L91;

  anon199_Then:
    assume {:partition} BAND(ScanCode, 127) == 54;
    goto anon174_Then, anon174_Else;

  anon174_Else:
    assume {:partition} ScanState == 0;
    assume {:nonnull} DeviceExtension_2 != 0;
    assume DeviceExtension_2 > 0;
    goto L1;

  anon174_Then:
    assume {:partition} ScanState != 0;
    goto L1;

  anon200_Then:
    assume {:partition} BAND(ScanCode, 127) == 42;
    goto anon173_Then, anon173_Else;

  anon173_Else:
    assume {:partition} ScanState == 0;
    assume {:nonnull} DeviceExtension_2 != 0;
    assume DeviceExtension_2 > 0;
    goto L1;

  anon173_Then:
    assume {:partition} ScanState != 0;
    goto L1;

  anon147_Then:
    assume {:partition} BAND(ScanCode, 127) == 29;
    goto anon172_Then, anon172_Else;

  anon172_Else:
    assume {:partition} ScanState != 0;
    goto anon177_Then, anon177_Else;

  anon177_Else:
    assume {:partition} ScanState == 1;
    assume {:nonnull} DeviceExtension_2 != 0;
    assume DeviceExtension_2 > 0;
    goto L1;

  anon177_Then:
    assume {:partition} ScanState != 1;
    goto L1;

  anon172_Then:
    assume {:partition} ScanState == 0;
    assume {:nonnull} DeviceExtension_2 != 0;
    assume DeviceExtension_2 > 0;
    goto L1;
}



procedure {:origName "I8xWriteDataToKeyboardQueue"} I8xWriteDataToKeyboardQueue(actual_KeyboardExtension_3: int, actual_InputData: int) returns (Tmp_259: int);
  free ensures Tmp_259 == 0 || Tmp_259 == 1;



implementation {:origName "I8xWriteDataToKeyboardQueue"} I8xWriteDataToKeyboardQueue(actual_KeyboardExtension_3: int, actual_InputData: int) returns (Tmp_259: int)
{
  var {:pointer} previousDataIn: int;
  var {:pointer} Tmp_261: int;
  var {:pointer} KeyboardExtension_3: int;
  var {:pointer} InputData: int;

  anon0:
    KeyboardExtension_3 := actual_KeyboardExtension_3;
    InputData := actual_InputData;
    assume {:nonnull} KeyboardExtension_3 != 0;
    assume KeyboardExtension_3 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:nonnull} KeyboardExtension_3 != 0;
    assume KeyboardExtension_3 > 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:nonnull} KeyboardExtension_3 != 0;
    assume KeyboardExtension_3 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} KeyboardExtension_3 != 0;
    assume KeyboardExtension_3 > 0;
    havoc previousDataIn;
    goto L10;

  L10:
    assume {:nonnull} previousDataIn != 0;
    assume previousDataIn > 0;
    assume {:nonnull} previousDataIn != 0;
    assume previousDataIn > 0;
    Tmp_259 := 0;
    goto L1;

  L1:
    return;

  anon11_Then:
    assume {:nonnull} KeyboardExtension_3 != 0;
    assume KeyboardExtension_3 > 0;
    havoc previousDataIn;
    goto L10;

  anon10_Then:
    goto L5;

  L5:
    assume {:nonnull} KeyboardExtension_3 != 0;
    assume KeyboardExtension_3 > 0;
    havoc Tmp_261;
    assume {:nonnull} InputData != 0;
    assume InputData > 0;
    assume {:nonnull} Tmp_261 != 0;
    assume Tmp_261 > 0;
    assume {:nonnull} InputData != 0;
    assume InputData > 0;
    assume {:nonnull} Tmp_261 != 0;
    assume Tmp_261 > 0;
    assume {:nonnull} InputData != 0;
    assume InputData > 0;
    assume {:nonnull} Tmp_261 != 0;
    assume Tmp_261 > 0;
    assume {:nonnull} InputData != 0;
    assume InputData > 0;
    assume {:nonnull} Tmp_261 != 0;
    assume Tmp_261 > 0;
    assume {:nonnull} InputData != 0;
    assume InputData > 0;
    assume {:nonnull} Tmp_261 != 0;
    assume Tmp_261 > 0;
    assume {:nonnull} KeyboardExtension_3 != 0;
    assume KeyboardExtension_3 > 0;
    assume {:nonnull} KeyboardExtension_3 != 0;
    assume KeyboardExtension_3 > 0;
    assume {:nonnull} KeyboardExtension_3 != 0;
    assume KeyboardExtension_3 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} KeyboardExtension_3 != 0;
    assume KeyboardExtension_3 > 0;
    goto L16;

  L16:
    Tmp_259 := 1;
    goto L1;

  anon12_Then:
    goto L16;

  anon9_Then:
    goto L5;
}



procedure {:origName "_sdv_init7"} _sdv_init7();
  modifies alloc;



implementation {:origName "_sdv_init7"} _sdv_init7()
{
  var vslice_dummy_var_44: int;

  anon0:
    call {:si_unique_call 272} vslice_dummy_var_44 := __HAVOC_malloc(4);
    assume ScanCodeToUCharCount_2 == 54;
    return;
}



procedure {:origName "I8042KeyboardIsrDpc"} I8042KeyboardIsrDpc(actual_Dpc: int, actual_DeviceObjectIn_1: int, actual_IrpIn: int, actual_Context: int);
  modifies alloc;



implementation {:origName "I8042KeyboardIsrDpc"} I8042KeyboardIsrDpc(actual_Dpc: int, actual_DeviceObjectIn_1: int, actual_IrpIn: int, actual_Context: int)
{
  var {:scalar} dataNotConsumed: int;
  var {:scalar} moreDpcProcessing: int;
  var {:scalar} inputDataConsumed: int;
  var {:pointer} DeviceObject_2: int;
  var {:pointer} classService: int;
  var {:scalar} operationContext: int;
  var {:scalar} Tmp_264: int;
  var {:scalar} deltaTime: int;
  var {:dopa} {:scalar} interlockedResult: int;
  var {:scalar} setPointerContext: int;
  var {:scalar} getPointerContext: int;
  var {:pointer} deviceExtension_3: int;
  var {:pointer} DeviceObjectIn_1: int;
  var {:pointer} IrpIn: int;
  var vslice_dummy_var_45: int;
  var vslice_dummy_var_46: int;
  var vslice_dummy_var_47: int;
  var vslice_dummy_var_48: int;
  var vslice_dummy_var_49: int;
  var vslice_dummy_var_50: int;
  var vslice_dummy_var_51: int;
  var vslice_dummy_var_52: int;

  anon0:
    call {:si_unique_call 273} operationContext := __HAVOC_malloc(12);
    call {:si_unique_call 274} deltaTime := __HAVOC_malloc(20);
    call {:si_unique_call 275} interlockedResult := __HAVOC_malloc(4);
    call {:si_unique_call 276} setPointerContext := __HAVOC_malloc(16);
    call {:si_unique_call 277} getPointerContext := __HAVOC_malloc(20);
    call {:si_unique_call 278} vslice_dummy_var_45 := __HAVOC_malloc(4);
    DeviceObjectIn_1 := actual_DeviceObjectIn_1;
    IrpIn := actual_IrpIn;
    DeviceObject_2 := DeviceObjectIn_1;
    dataNotConsumed := 0;
    inputDataConsumed := 0;
    assume {:nonnull} DeviceObject_2 != 0;
    assume DeviceObject_2 > 0;
    havoc deviceExtension_3;
    assume {:nonnull} deviceExtension_3 != 0;
    assume deviceExtension_3 > 0;
    assume {:nonnull} operationContext != 0;
    assume operationContext > 0;
    assume {:nonnull} operationContext != 0;
    assume operationContext > 0;
    assume {:nonnull} operationContext != 0;
    assume operationContext > 0;
    call {:si_unique_call 279} vslice_dummy_var_47 := KeSynchronizeExecution(0, li2bplFunctionConstant206, 0);
    assume {:nonnull} interlockedResult != 0;
    assume interlockedResult > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    Tmp_264 := 0;
    goto L30;

  L30:
    moreDpcProcessing := Tmp_264;
    goto L31;

  L31:
    call {:si_unique_call 280} dataNotConsumed, moreDpcProcessing, inputDataConsumed, classService, vslice_dummy_var_46, vslice_dummy_var_48, vslice_dummy_var_49, vslice_dummy_var_50, vslice_dummy_var_51, vslice_dummy_var_52 := I8042KeyboardIsrDpc_loop_L31(dataNotConsumed, moreDpcProcessing, inputDataConsumed, classService, operationContext, deltaTime, interlockedResult, setPointerContext, getPointerContext, deviceExtension_3, vslice_dummy_var_46, vslice_dummy_var_48, vslice_dummy_var_49, vslice_dummy_var_50, vslice_dummy_var_51, vslice_dummy_var_52);
    goto L31_last;

  L31_last:
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} moreDpcProcessing != 0;
    dataNotConsumed := 0;
    inputDataConsumed := 0;
    assume {:nonnull} getPointerContext != 0;
    assume getPointerContext > 0;
    assume {:nonnull} setPointerContext != 0;
    assume setPointerContext > 0;
    assume {:nonnull} getPointerContext != 0;
    assume getPointerContext > 0;
    assume {:nonnull} setPointerContext != 0;
    assume setPointerContext > 0;
    assume {:nonnull} setPointerContext != 0;
    assume setPointerContext > 0;
    call {:si_unique_call 281} vslice_dummy_var_48 := KeSynchronizeExecution(0, li2bplFunctionConstant207, 0);
    assume {:nonnull} getPointerContext != 0;
    assume getPointerContext > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} deviceExtension_3 != 0;
    assume deviceExtension_3 > 0;
    assume {:nonnull} deviceExtension_3 != 0;
    assume deviceExtension_3 > 0;
    havoc classService;
    assume {:nonnull} getPointerContext != 0;
    assume getPointerContext > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume classService == 0;
    assume {:nonnull} deviceExtension_3 != 0;
    assume deviceExtension_3 > 0;
    havoc dataNotConsumed;
    assume {:nonnull} setPointerContext != 0;
    assume setPointerContext > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} dataNotConsumed != 0;
    assume {:nonnull} getPointerContext != 0;
    assume getPointerContext > 0;
    assume {:nonnull} setPointerContext != 0;
    assume setPointerContext > 0;
    goto L47;

  L47:
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} dataNotConsumed != 0;
    goto L58;

  L58:
    call {:si_unique_call 282} vslice_dummy_var_46 := KeSynchronizeExecution(0, li2bplFunctionConstant210, 0);
    goto L43;

  L43:
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} dataNotConsumed != 0;
    assume {:nonnull} operationContext != 0;
    assume operationContext > 0;
    assume {:nonnull} interlockedResult != 0;
    assume interlockedResult > 0;
    assume {:nonnull} operationContext != 0;
    assume operationContext > 0;
    call {:si_unique_call 283} vslice_dummy_var_49 := KeSynchronizeExecution(0, li2bplFunctionConstant206, 0);
    assume {:nonnull} deltaTime != 0;
    assume deltaTime > 0;
    assume {:nonnull} deltaTime != 0;
    assume deltaTime > 0;
    call {:si_unique_call 284} vslice_dummy_var_50 := KeSetTimer(0, deltaTime, 0);
    moreDpcProcessing := 0;
    goto anon22_Else_dummy;

  anon22_Else_dummy:
    assume false;
    return;

  anon22_Then:
    assume {:partition} dataNotConsumed == 0;
    assume {:nonnull} operationContext != 0;
    assume operationContext > 0;
    assume {:nonnull} operationContext != 0;
    assume operationContext > 0;
    call {:si_unique_call 285} vslice_dummy_var_51 := KeSynchronizeExecution(0, li2bplFunctionConstant206, 0);
    assume {:nonnull} interlockedResult != 0;
    assume interlockedResult > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:nonnull} operationContext != 0;
    assume operationContext > 0;
    assume {:nonnull} interlockedResult != 0;
    assume interlockedResult > 0;
    assume {:nonnull} operationContext != 0;
    assume operationContext > 0;
    call {:si_unique_call 286} vslice_dummy_var_52 := KeSynchronizeExecution(0, li2bplFunctionConstant206, 0);
    goto anon25_Else_dummy;

  anon25_Else_dummy:
    assume false;
    return;

  anon25_Then:
    moreDpcProcessing := 0;
    goto anon25_Then_dummy;

  anon25_Then_dummy:
    assume false;
    return;

  anon23_Then:
    assume {:partition} dataNotConsumed == 0;
    assume {:nonnull} getPointerContext != 0;
    assume getPointerContext > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume classService == 0;
    assume {:nonnull} getPointerContext != 0;
    assume getPointerContext > 0;
    havoc dataNotConsumed;
    assume {:nonnull} getPointerContext != 0;
    assume getPointerContext > 0;
    assume {:nonnull} setPointerContext != 0;
    assume setPointerContext > 0;
    assume {:nonnull} setPointerContext != 0;
    assume setPointerContext > 0;
    goto L58;

  anon24_Then:
    goto L58;

  anon27_Then:
    assume {:partition} dataNotConsumed == 0;
    assume {:nonnull} deviceExtension_3 != 0;
    assume deviceExtension_3 > 0;
    assume {:nonnull} setPointerContext != 0;
    assume setPointerContext > 0;
    assume {:nonnull} getPointerContext != 0;
    assume getPointerContext > 0;
    assume {:nonnull} setPointerContext != 0;
    assume setPointerContext > 0;
    goto L47;

  anon26_Then:
    goto L47;

  anon21_Then:
    goto L43;

  anon20_Then:
    assume {:partition} moreDpcProcessing == 0;
    return;

  anon19_Then:
    Tmp_264 := 1;
    goto L30;
}



procedure {:origName "I8xPower"} I8xPower(actual_DeviceObject_3: int, actual_Irp_1: int) returns (Tmp_267: int);
  modifies alloc, Mem_T.CompletionRoutine__IO_STACK_LOCATION, forward_state, s, yogi_error;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "I8xPower"} I8xPower(actual_DeviceObject_3: int, actual_Irp_1: int) returns (Tmp_267: int)
{
  var {:pointer} structPtr888sdv: int;
  var {:pointer} commonData: int;
  var {:scalar} sdv_111: int;
  var {:scalar} sdv: int;
  var {:scalar} status_10: int;
  var {:pointer} stack: int;
  var {:pointer} interrupt: int;
  var {:pointer} DeviceObject_3: int;
  var {:pointer} Irp_1: int;
  var vslice_dummy_var_53: int;
  var vslice_dummy_var_54: int;
  var vslice_dummy_var_178: int;
  var vslice_dummy_var_179: int;

  anon0:
    call {:si_unique_call 287} sdv := __HAVOC_malloc(8);
    DeviceObject_3 := actual_DeviceObject_3;
    Irp_1 := actual_Irp_1;
    status_10 := 0;
    call {:si_unique_call 288} sdv_do_paged_code_check();
    assume {:nonnull} DeviceObject_3 != 0;
    assume DeviceObject_3 > 0;
    havoc commonData;
    call {:si_unique_call 289} stack := sdv_IoGetCurrentIrpStackLocation(Irp_1);
    assume {:nonnull} commonData != 0;
    assume commonData > 0;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:nonnull} commonData != 0;
    assume commonData > 0;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:nonnull} stack != 0;
    assume stack > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:nonnull} stack != 0;
    assume stack > 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:nonnull} stack != 0;
    assume stack > 0;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    goto L26;

  L26:
    call {:si_unique_call 290} PoStartNextPowerIrp(0);
    call {:si_unique_call 291} sdv_IoSkipCurrentIrpStackLocation(Irp_1);
    call {:si_unique_call 292} Tmp_267 := PoCallDriver(0, Irp_1);
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    call {:si_unique_call 293} SLIC_I8xPower_exit(strConst__li2bpl12, Tmp_267);
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon79_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon78_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon72_Then:
    assume {:nonnull} stack != 0;
    assume stack > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:nonnull} commonData != 0;
    assume commonData > 0;
    assume {:nonnull} stack != 0;
    assume stack > 0;
    goto L26;

  anon63_Then:
    assume {:nonnull} commonData != 0;
    assume commonData > 0;
    assume {:nonnull} stack != 0;
    assume stack > 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:nonnull} stack != 0;
    assume stack > 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:nonnull} stack != 0;
    assume stack > 0;
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:nonnull} stack != 0;
    assume stack > 0;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:nonnull} stack != 0;
    assume stack > 0;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    goto L45;

  L45:
    call {:si_unique_call 294} sdv_111 := I8xCheckPowerFlag(268435456);
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} sdv_111 != 0;
    call {:si_unique_call 295} PoStartNextPowerIrp(0);
    assume {:nonnull} Irp_1 != 0;
    assume Irp_1 > 0;
    assume {:nonnull} Irp_1 != 0;
    assume Irp_1 > 0;
    havoc status_10;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume Irp_1 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 296} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl13);
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} yogi_error != 1;
    goto L159;

  L159:
    call {:si_unique_call 297} sdv_IoCompleteRequest(0, 0);
    Tmp_267 := status_10;
    goto L1;

  anon84_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon83_Then:
    assume !(Irp_1 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L159;

  anon66_Then:
    assume {:partition} sdv_111 == 0;
    assume {:nonnull} commonData != 0;
    assume commonData > 0;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    call {:si_unique_call 298} I8xSetPowerFlag(2, 1);
    goto L65;

  L65:
    assume {:nonnull} stack != 0;
    assume stack > 0;
    havoc vslice_dummy_var_178;
    havoc vslice_dummy_var_179;
    call {:si_unique_call 299} structPtr888sdv := PoSetPowerState(0, vslice_dummy_var_178, vslice_dummy_var_179);
    assume {:nonnull} sdv != 0;
    assume sdv > 0;
    assume {:nonnull} structPtr888sdv != 0;
    assume structPtr888sdv > 0;
    assume {:nonnull} sdv != 0;
    assume sdv > 0;
    assume {:nonnull} structPtr888sdv != 0;
    assume structPtr888sdv > 0;
    assume {:nonnull} commonData != 0;
    assume commonData > 0;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    goto L70;

  L70:
    assume {:nonnull} commonData != 0;
    assume commonData > 0;
    assume {:nonnull} stack != 0;
    assume stack > 0;
    assume {:nonnull} commonData != 0;
    assume commonData > 0;
    assume {:nonnull} stack != 0;
    assume stack > 0;
    assume {:nonnull} Irp_1 != 0;
    assume Irp_1 > 0;
    call {:si_unique_call 300} PoStartNextPowerIrp(0);
    call {:si_unique_call 301} sdv_IoSkipCurrentIrpStackLocation(Irp_1);
    call {:si_unique_call 302} Tmp_267 := PoCallDriver(0, Irp_1);
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon85_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon68_Then:
    assume {:nonnull} commonData != 0;
    assume commonData > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:nonnull} commonData != 0;
    assume commonData > 0;
    havoc interrupt;
    assume {:nonnull} commonData != 0;
    assume commonData > 0;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:partition} interrupt != 0;
    call {:si_unique_call 303} IoDisconnectInterrupt(0);
    goto L70;

  anon86_Then:
    assume {:partition} interrupt == 0;
    goto L70;

  anon69_Then:
    goto L70;

  anon67_Then:
    call {:si_unique_call 304} I8xSetPowerFlag(32, 1);
    goto L65;

  anon74_Then:
    goto L26;

  anon75_Then:
    goto L45;

  anon76_Then:
    goto L45;

  anon65_Then:
    call {:si_unique_call 305} vslice_dummy_var_53 := sdv_IoAcquireRemoveLock(0, 0);
    assume {:nonnull} commonData != 0;
    assume commonData > 0;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    call {:si_unique_call 306} I8xSetPowerFlag(1, 1);
    goto L97;

  L97:
    call {:si_unique_call 307} sdv_IoCopyCurrentIrpStackLocationToNext(Irp_1);
    call {:si_unique_call 308} sdv_IoSetCompletionRoutine(Irp_1, li2bplFunctionConstant1083, 0, 1, 1, 1);
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume Irp_1 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 309} SLIC_sdv_IoSetCompletionRoutine_exit(0);
    goto L103;

  L103:
    call {:si_unique_call 310} sdv_IoMarkIrpPending(0);
    call {:si_unique_call 311} vslice_dummy_var_54 := PoCallDriver(0, Irp_1);
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:partition} yogi_error != 1;
    Tmp_267 := 259;
    goto L1;

  anon82_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon77_Then:
    assume !(Irp_1 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L103;

  anon70_Then:
    call {:si_unique_call 312} I8xSetPowerFlag(16, 1);
    goto L97;

  anon64_Then:
    goto L26;

  anon73_Then:
    goto L26;

  anon61_Then:
    assume {:nonnull} commonData != 0;
    assume commonData > 0;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:nonnull} commonData != 0;
    assume commonData > 0;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    call {:si_unique_call 313} PoStartNextPowerIrp(0);
    assume {:nonnull} Irp_1 != 0;
    assume Irp_1 > 0;
    assume {:nonnull} Irp_1 != 0;
    assume Irp_1 > 0;
    havoc status_10;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume Irp_1 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 314} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl13);
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} yogi_error != 1;
    goto L153;

  L153:
    call {:si_unique_call 315} sdv_IoCompleteRequest(0, 0);
    Tmp_267 := status_10;
    goto L1;

  anon81_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon80_Then:
    assume !(Irp_1 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L153;

  anon71_Then:
    goto L26;

  anon62_Then:
    goto L26;

  anon60_Then:
    goto L16;

  L16:
    call {:si_unique_call 316} PoStartNextPowerIrp(0);
    assume {:nonnull} Irp_1 != 0;
    assume Irp_1 > 0;
    call {:si_unique_call 317} sdv_IoSkipCurrentIrpStackLocation(Irp_1);
    call {:si_unique_call 318} Tmp_267 := PoCallDriver(0, Irp_1);
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon87_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon59_Then:
    goto L16;
}



procedure {:origName "I8xPnPComplete"} I8xPnPComplete(actual_DeviceObject_4: int, actual_Irp_2: int, actual_Event: int) returns (Tmp_269: int);
  free ensures Tmp_269 == -1073741802;



implementation {:origName "I8xPnPComplete"} I8xPnPComplete(actual_DeviceObject_4: int, actual_Irp_2: int, actual_Event: int) returns (Tmp_269: int)
{
  var {:pointer} Event: int;
  var vslice_dummy_var_55: int;

  anon0:
    Event := actual_Event;
    call {:si_unique_call 319} vslice_dummy_var_55 := KeSetEvent(Event, 0, 0);
    Tmp_269 := -1073741802;
    return;
}



procedure {:origName "I8xRemovePort"} I8xRemovePort(actual_ResDesc: int) returns (Tmp_271: int);
  modifies alloc;
  free ensures Tmp_271 == 0 || Tmp_271 == 1;



implementation {:origName "I8xRemovePort"} I8xRemovePort(actual_ResDesc: int) returns (Tmp_271: int)
{
  var {:scalar} i_9: int;
  var {:scalar} Tmp_272: int;
  var {:pointer} Tmp_273: int;
  var {:scalar} address: int;
  var {:pointer} Tmp_274: int;
  var {:scalar} Tmp_275: int;
  var {:scalar} Tmp_276: int;
  var {:pointer} Tmp_278: int;
  var {:pointer} ResDesc: int;

  anon0:
    call {:si_unique_call 320} address := __HAVOC_malloc(20);
    ResDesc := actual_ResDesc;
    call {:si_unique_call 321} Tmp_273 := __HAVOC_malloc(40);
    call {:si_unique_call 322} Tmp_274 := __HAVOC_malloc(40);
    call {:si_unique_call 323} Tmp_278 := __HAVOC_malloc(40);
    call {:si_unique_call 324} sdv_do_paged_code_check();
    goto anon11_Then, anon11_Else;

  anon11_Else:
    Tmp_271 := 0;
    goto L1;

  L1:
    return;

  anon11_Then:
    assume {:nonnull} ResDesc != 0;
    assume ResDesc > 0;
    assume {:nonnull} address != 0;
    assume address > 0;
    assume {:nonnull} ResDesc != 0;
    assume ResDesc > 0;
    assume {:nonnull} address != 0;
    assume address > 0;
    assume {:nonnull} ResDesc != 0;
    assume ResDesc > 0;
    assume {:nonnull} address != 0;
    assume address > 0;
    assume {:nonnull} ResDesc != 0;
    assume ResDesc > 0;
    assume {:nonnull} address != 0;
    assume address > 0;
    assume {:nonnull} ResDesc != 0;
    assume ResDesc > 0;
    assume {:nonnull} address != 0;
    assume address > 0;
    i_9 := 0;
    goto L12;

  L12:
    call {:si_unique_call 325} i_9, Tmp_272, Tmp_273, Tmp_276, Tmp_278 := I8xRemovePort_loop_L12(i_9, Tmp_272, Tmp_273, address, Tmp_276, Tmp_278);
    goto L12_last;

  L12_last:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    Tmp_272 := i_9;
    havoc Tmp_273;
    assume {:nonnull} Tmp_273 != 0;
    assume Tmp_273 > 0;
    assume {:nonnull} address != 0;
    assume address > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    Tmp_276 := i_9;
    havoc Tmp_278;
    assume {:nonnull} Tmp_278 != 0;
    assume Tmp_278 > 0;
    assume {:nonnull} address != 0;
    assume address > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    Tmp_271 := 1;
    goto L1;

  anon15_Then:
    goto L15;

  L15:
    i_9 := i_9 + 1;
    goto L15_dummy;

  L15_dummy:
    assume false;
    return;

  anon14_Then:
    goto L15;

  anon12_Then:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    havoc Tmp_275;
    havoc Tmp_274;
    assume {:nonnull} Tmp_274 != 0;
    assume Tmp_274 > 0;
    assume {:nonnull} address != 0;
    assume address > 0;
    assume {:nonnull} Tmp_274 != 0;
    assume Tmp_274 > 0;
    assume {:nonnull} address != 0;
    assume address > 0;
    assume {:nonnull} Tmp_274 != 0;
    assume Tmp_274 > 0;
    assume {:nonnull} address != 0;
    assume address > 0;
    assume {:nonnull} Tmp_274 != 0;
    assume Tmp_274 > 0;
    assume {:nonnull} address != 0;
    assume address > 0;
    assume {:nonnull} Tmp_274 != 0;
    assume Tmp_274 > 0;
    assume {:nonnull} address != 0;
    assume address > 0;
    goto L18;

  L18:
    Tmp_271 := 0;
    goto L1;

  anon13_Then:
    goto L18;
}



procedure {:origName "I8xPowerUpToD0Complete"} I8xPowerUpToD0Complete(actual_DeviceObject_5: int, actual_Irp_3: int, actual_Context_1: int) returns (Tmp_279: int);
  modifies alloc, yogi_error;
  free ensures old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "I8xPowerUpToD0Complete"} I8xPowerUpToD0Complete(actual_DeviceObject_5: int, actual_Irp_3: int, actual_Context_1: int) returns (Tmp_279: int)
{
  var {:pointer} item: int;
  var {:pointer} Tmp_280: int;
  var {:scalar} Tmp_281: int;
  var {:scalar} poweredUpDevices: int;
  var {:scalar} Tmp_282: int;
  var {:pointer} commonData_1: int;
  var {:scalar} queueItem: int;
  var {:scalar} Tmp_283: int;
  var {:scalar} Tmp_284: int;
  var {:pointer} sdv_114: int;
  var {:scalar} Tmp_285: int;
  var {:scalar} clearFlags: int;
  var {:scalar} Tmp_287: int;
  var {:scalar} Tmp_288: int;
  var {:scalar} poweredDownDevices: int;
  var {:scalar} Tmp_289: int;
  var {:scalar} Tmp_290: int;
  var {:scalar} failMouIrp: int;
  var {:scalar} status_11: int;
  var {:scalar} failedDevices: int;
  var {:pointer} mouIrp: int;
  var {:scalar} irql: int;
  var {:pointer} kbdIrp: int;
  var {:pointer} DeviceObject_5: int;
  var {:pointer} Irp_3: int;
  var vslice_dummy_var_56: int;
  var vslice_dummy_var_57: int;
  var vslice_dummy_var_58: int;
  var vslice_dummy_var_180: int;
  var vslice_dummy_var_181: int;
  var vslice_dummy_var_182: int;

  anon0:
    DeviceObject_5 := actual_DeviceObject_5;
    Irp_3 := actual_Irp_3;
    status_11 := 0;
    poweredDownDevices := 0;
    poweredUpDevices := 0;
    failedDevices := 0;
    queueItem := 0;
    clearFlags := 0;
    failMouIrp := 0;
    mouIrp := 0;
    kbdIrp := 0;
    assume {:nonnull} DeviceObject_5 != 0;
    assume DeviceObject_5 > 0;
    havoc commonData_1;
    call {:si_unique_call 326} sdv_114 := ExAllocatePoolWithTag(512, 24, 842281016);
    item := sdv_114;
    call {:si_unique_call 327} Tmp_280 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_280 != 0;
    assume Tmp_280 > 0;
    call {:si_unique_call 328} sdv_KeAcquireSpinLock(0, Tmp_280);
    assume {:nonnull} Tmp_280 != 0;
    assume Tmp_280 > 0;
    havoc irql;
    assume {:nonnull} Irp_3 != 0;
    assume Irp_3 > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:nonnull} commonData_1 != 0;
    assume commonData_1 > 0;
    status_11 := -1073741802;
    assume {:nonnull} commonData_1 != 0;
    assume commonData_1 > 0;
    goto anon89_Then, anon89_Else;

  anon89_Else:
    goto L39;

  L39:
    havoc Tmp_284;
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} Tmp_284 == 2;
    poweredDownDevices := poweredDownDevices + 1;
    goto L41;

  L41:
    havoc Tmp_287;
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:partition} Tmp_287 == 32;
    poweredDownDevices := poweredDownDevices + 1;
    goto L44;

  L44:
    havoc Tmp_281;
    goto anon92_Then, anon92_Else;

  anon92_Else:
    assume {:partition} Tmp_281 == 256;
    poweredUpDevices := poweredUpDevices + 1;
    goto L47;

  L47:
    havoc Tmp_285;
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume {:partition} Tmp_285 == 4096;
    poweredUpDevices := poweredUpDevices + 1;
    goto L50;

  L50:
    havoc Tmp_288;
    goto anon94_Then, anon94_Else;

  anon94_Else:
    assume {:partition} Tmp_288 == 512;
    failedDevices := failedDevices + 1;
    goto L53;

  L53:
    havoc Tmp_282;
    goto anon95_Then, anon95_Else;

  anon95_Else:
    assume {:partition} Tmp_282 == 8192;
    failedDevices := failedDevices + 1;
    goto L56;

  L56:
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} poweredUpDevices + failedDevices == poweredDownDevices;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} poweredUpDevices > 0;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} failedDevices > 0;
    havoc Tmp_283;
    goto anon96_Then, anon96_Else;

  anon96_Else:
    assume {:partition} Tmp_283 == 512;
    havoc mouIrp;
    clearFlags := 1;
    goto anon97_Then, anon97_Else;

  anon97_Else:
    assume {:partition} mouIrp != Irp_3;
    failMouIrp := 1;
    goto L58;

  L58:
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} queueItem != 0;
    goto L74;

  L74:
    havoc Tmp_289;
    goto anon98_Then, anon98_Else;

  anon98_Else:
    assume {:partition} Tmp_289 == 4096;
    havoc mouIrp;
    goto L80;

  L80:
    havoc Tmp_290;
    goto anon99_Then, anon99_Else;

  anon99_Else:
    assume {:partition} Tmp_290 == 256;
    havoc kbdIrp;
    goto L86;

  L86:
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} item != 0;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} queueItem != 0;
    goto L87;

  L87:
    call {:si_unique_call 329} sdv_KeReleaseSpinLock(0, irql);
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} queueItem != 0;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} item != 0;
    call {:si_unique_call 330} sdv_RtlZeroMemory(0, 24);
    goto anon82_Then, anon82_Else;

  anon82_Else:
    goto L103;

  L103:
    assume {:nonnull} item != 0;
    assume item > 0;
    assume {:nonnull} item != 0;
    assume item > 0;
    assume {:nonnull} item != 0;
    assume item > 0;
    call {:si_unique_call 331} ExInitializeWorkItem(Item__POWER_UP_WORK_ITEM(item), li2bplFunctionConstant239, item);
    assume {:nonnull} item != 0;
    assume item > 0;
    call {:si_unique_call 332} sdv_ExQueueWorkItem(Item__POWER_UP_WORK_ITEM(item), 1);
    goto L111;

  L111:
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} failMouIrp != 0;
    call {:si_unique_call 333} PoStartNextPowerIrp(0);
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume mouIrp == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 334} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl13);
    goto anon100_Then, anon100_Else;

  anon100_Else:
    assume {:partition} yogi_error != 1;
    goto L182;

  L182:
    call {:si_unique_call 335} sdv_IoCompleteRequest(0, 0);
    havoc vslice_dummy_var_180;
    call {:si_unique_call 336} vslice_dummy_var_56 := sdv_IoReleaseRemoveLock(vslice_dummy_var_180, mouIrp);
    mouIrp := 0;
    goto L112;

  L112:
    assume {:nonnull} Irp_3 != 0;
    assume Irp_3 > 0;
    goto anon84_Then, anon84_Else;

  anon84_Else:
    goto L126;

  L126:
    Tmp_279 := status_11;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon84_Then:
    call {:si_unique_call 337} PoStartNextPowerIrp(0);
    Irp_3 := 0;
    goto L126;

  anon100_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon85_Then:
    assume !(mouIrp == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L182;

  anon83_Then:
    assume {:partition} failMouIrp == 0;
    goto L112;

  anon82_Then:
    goto L103;

  anon80_Then:
    assume {:partition} item == 0;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} mouIrp != 0;
    assume {:nonnull} mouIrp != 0;
    assume mouIrp > 0;
    assume {:nonnull} mouIrp != 0;
    assume mouIrp > 0;
    call {:si_unique_call 338} PoStartNextPowerIrp(0);
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume mouIrp == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 339} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl13);
    goto anon101_Then, anon101_Else;

  anon101_Else:
    assume {:partition} yogi_error != 1;
    goto L185;

  L185:
    call {:si_unique_call 340} sdv_IoCompleteRequest(0, 0);
    havoc vslice_dummy_var_181;
    call {:si_unique_call 341} vslice_dummy_var_57 := sdv_IoReleaseRemoveLock(vslice_dummy_var_181, mouIrp);
    mouIrp := 0;
    goto L128;

  L128:
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:partition} kbdIrp != 0;
    assume {:nonnull} kbdIrp != 0;
    assume kbdIrp > 0;
    assume {:nonnull} kbdIrp != 0;
    assume kbdIrp > 0;
    call {:si_unique_call 342} PoStartNextPowerIrp(0);
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume kbdIrp == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 343} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl13);
    goto anon102_Then, anon102_Else;

  anon102_Else:
    assume {:partition} yogi_error != 1;
    goto L188;

  L188:
    call {:si_unique_call 344} sdv_IoCompleteRequest(0, 0);
    havoc vslice_dummy_var_182;
    call {:si_unique_call 345} vslice_dummy_var_58 := sdv_IoReleaseRemoveLock(vslice_dummy_var_182, kbdIrp);
    kbdIrp := 0;
    goto L141;

  L141:
    Tmp_279 := -1073741802;
    goto L1;

  anon102_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon88_Then:
    assume !(kbdIrp == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L188;

  anon86_Then:
    assume {:partition} kbdIrp == 0;
    goto L141;

  anon101_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon87_Then:
    assume !(mouIrp == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L185;

  anon81_Then:
    assume {:partition} mouIrp == 0;
    goto L128;

  anon78_Then:
    assume {:partition} queueItem == 0;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} item != 0;
    call {:si_unique_call 346} sdv_ExFreePool(0);
    item := 0;
    goto L111;

  anon79_Then:
    assume {:partition} item == 0;
    goto L111;

  anon77_Then:
    assume {:partition} queueItem == 0;
    goto L87;

  anon76_Then:
    assume {:partition} item == 0;
    goto L87;

  anon99_Then:
    assume {:partition} Tmp_290 != 256;
    goto L86;

  anon98_Then:
    assume {:partition} Tmp_289 != 4096;
    goto L80;

  anon72_Then:
    assume {:partition} queueItem == 0;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} clearFlags == 0;
    goto L87;

  anon75_Then:
    assume {:partition} clearFlags != 0;
    goto L74;

  anon97_Then:
    assume {:partition} mouIrp == Irp_3;
    assume {:nonnull} mouIrp != 0;
    assume mouIrp > 0;
    assume {:nonnull} mouIrp != 0;
    assume mouIrp > 0;
    havoc status_11;
    goto L58;

  anon96_Then:
    assume {:partition} Tmp_283 != 512;
    goto L62;

  L62:
    queueItem := 1;
    goto L58;

  anon74_Then:
    assume {:partition} 0 >= failedDevices;
    goto L62;

  anon73_Then:
    assume {:partition} 0 >= poweredUpDevices;
    clearFlags := 1;
    goto L58;

  anon71_Then:
    assume {:partition} poweredUpDevices + failedDevices != poweredDownDevices;
    goto L58;

  anon95_Then:
    assume {:partition} Tmp_282 != 8192;
    goto L56;

  anon94_Then:
    assume {:partition} Tmp_288 != 512;
    goto L53;

  anon93_Then:
    assume {:partition} Tmp_285 != 4096;
    goto L50;

  anon92_Then:
    assume {:partition} Tmp_281 != 256;
    goto L47;

  anon91_Then:
    assume {:partition} Tmp_287 != 32;
    goto L44;

  anon90_Then:
    assume {:partition} Tmp_284 != 2;
    goto L41;

  anon89_Then:
    goto L39;

  anon69_Then:
    assume {:nonnull} commonData_1 != 0;
    assume commonData_1 > 0;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    goto L39;

  anon70_Then:
    goto L39;
}



procedure {:origName "I8xRegisterDeviceInterface"} I8xRegisterDeviceInterface(actual_PDO: int, actual_Guid: int, actual_SymbolicName: int) returns (Tmp_291: int);
  modifies alloc;
  free ensures Tmp_291 == -1073741772 || Tmp_291 == -1073741824 || Tmp_291 == -1073741789 || Tmp_291 == -1073741670 || Tmp_291 == -1073741808 || Tmp_291 == 0 || Tmp_291 == -1073741823;



implementation {:origName "I8xRegisterDeviceInterface"} I8xRegisterDeviceInterface(actual_PDO: int, actual_Guid: int, actual_SymbolicName: int) returns (Tmp_291: int)
{
  var {:scalar} status_12: int;
  var {:pointer} SymbolicName: int;

  anon0:
    SymbolicName := actual_SymbolicName;
    call {:si_unique_call 347} sdv_do_paged_code_check();
    call {:si_unique_call 348} status_12 := IoRegisterDeviceInterface(0, 0, 0, SymbolicName);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} status_12 >= 0;
    call {:si_unique_call 349} status_12 := IoSetDeviceInterfaceState(0, 1);
    goto L12;

  L12:
    Tmp_291 := status_12;
    return;

  anon3_Then:
    assume {:partition} 0 > status_12;
    goto L12;
}



procedure {:origName "I8xSendIrpSynchronously"} I8xSendIrpSynchronously(actual_DeviceObject_6: int, actual_Irp_4: int, actual_Strict: int) returns (Tmp_293: int);
  modifies alloc, Mem_T.CompletionRoutine__IO_STACK_LOCATION, forward_state, s, yogi_error;
  free ensures old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "I8xSendIrpSynchronously"} I8xSendIrpSynchronously(actual_DeviceObject_6: int, actual_Irp_4: int, actual_Strict: int) returns (Tmp_293: int)
{
  var {:scalar} status_13: int;
  var {:scalar} event: int;
  var {:pointer} DeviceObject_6: int;
  var {:pointer} Irp_4: int;
  var {:scalar} Strict: int;
  var vslice_dummy_var_59: int;

  anon0:
    call {:si_unique_call 350} event := __HAVOC_malloc(156);
    DeviceObject_6 := actual_DeviceObject_6;
    Irp_4 := actual_Irp_4;
    Strict := actual_Strict;
    call {:si_unique_call 351} sdv_do_paged_code_check();
    call {:si_unique_call 352} KeInitializeEvent(event, 1, 0);
    call {:si_unique_call 353} sdv_IoCopyCurrentIrpStackLocationToNext(Irp_4);
    call {:si_unique_call 354} sdv_IoSetCompletionRoutine(Irp_4, li2bplFunctionConstant1075, event, 1, 1, 1);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume Irp_4 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 355} SLIC_sdv_IoSetCompletionRoutine_exit(0);
    goto L17;

  L17:
    call {:si_unique_call 356} status_13 := sdv_IoCallDriver(DeviceObject_6, Irp_4);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} yogi_error != 1;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} status_13 == 259;
    call {:si_unique_call 357} vslice_dummy_var_59 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    assume {:nonnull} Irp_4 != 0;
    assume Irp_4 > 0;
    havoc status_13;
    goto L22;

  L22:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} Strict != 0;
    goto L28;

  L28:
    Tmp_293 := status_13;
    goto LM2;

  LM2:
    return;

  anon14_Then:
    assume {:partition} Strict == 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} status_13 == -1073741637;
    goto L30;

  L30:
    status_13 := 0;
    goto L28;

  anon15_Then:
    assume {:partition} status_13 != -1073741637;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} status_13 == -1073741808;
    goto L30;

  anon16_Then:
    assume {:partition} status_13 != -1073741808;
    goto L28;

  anon13_Then:
    assume {:partition} status_13 != 259;
    goto L22;

  anon18_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon17_Then:
    assume !(Irp_4 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L17;
}



procedure {:origName "I8xCheckPowerFlag"} I8xCheckPowerFlag(actual_Flag: int) returns (Tmp_295: int);
  modifies alloc;
  free ensures Tmp_295 == 1 || Tmp_295 == 0;



implementation {:origName "I8xCheckPowerFlag"} I8xCheckPowerFlag(actual_Flag: int) returns (Tmp_295: int)
{
  var {:pointer} Tmp_296: int;
  var {:scalar} rVal: int;
  var {:scalar} irql_1: int;
  var {:scalar} Flag: int;

  anon0:
    Flag := actual_Flag;
    rVal := 0;
    call {:si_unique_call 358} Tmp_296 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_296 != 0;
    assume Tmp_296 > 0;
    call {:si_unique_call 359} sdv_KeAcquireSpinLock(0, Tmp_296);
    assume {:nonnull} Tmp_296 != 0;
    assume Tmp_296 > 0;
    havoc irql_1;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    rVal := 1;
    goto L10;

  L10:
    call {:si_unique_call 360} sdv_KeReleaseSpinLock(0, irql_1);
    Tmp_295 := rVal;
    return;

  anon3_Then:
    goto L10;
}



procedure {:origName "_sdv_init13"} _sdv_init13();
  modifies alloc;



implementation {:origName "_sdv_init13"} _sdv_init13()
{
  var vslice_dummy_var_60: int;

  anon0:
    call {:si_unique_call 361} vslice_dummy_var_60 := __HAVOC_malloc(4);
    assume ScanCodeToUCharCount_3 == 54;
    return;
}



procedure {:origName "I8xManuallyRemoveDevice"} I8xManuallyRemoveDevice(actual_CommonData: int) returns (Tmp_299: int);
  modifies alloc;



implementation {:origName "I8xManuallyRemoveDevice"} I8xManuallyRemoveDevice(actual_CommonData: int) returns (Tmp_299: int)
{
  var {:pointer} Tmp_300: int;
  var {:scalar} deviceCount: int;
  var {:pointer} CommonData: int;

  anon0:
    CommonData := actual_CommonData;
    call {:si_unique_call 362} sdv_do_paged_code_check();
    assume {:nonnull} CommonData != 0;
    assume CommonData > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    call {:si_unique_call 363} Tmp_300 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_300 != 0;
    assume Tmp_300 > 0;
    call {:si_unique_call 364} deviceCount := sdv_InterlockedDecrement(Tmp_300);
    assume {:nonnull} Tmp_300 != 0;
    assume Tmp_300 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} 1 > deviceCount;
    goto L16;

  L16:
    assume {:nonnull} CommonData != 0;
    assume CommonData > 0;
    call {:si_unique_call 365} IoInvalidateDeviceState(0);
    Tmp_299 := deviceCount;
    return;

  anon8_Then:
    assume {:partition} deviceCount >= 1;
    goto L16;

  anon7_Then:
    call {:si_unique_call 366} Tmp_300 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_300 != 0;
    assume Tmp_300 > 0;
    call {:si_unique_call 367} deviceCount := sdv_InterlockedDecrement(Tmp_300);
    assume {:nonnull} Tmp_300 != 0;
    assume Tmp_300 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} 1 > deviceCount;
    goto L16;

  anon9_Then:
    assume {:partition} deviceCount >= 1;
    goto L16;
}



procedure {:origName "I8xFilterResourceRequirements"} I8xFilterResourceRequirements(actual_DeviceObject_7: int, actual_Irp_5: int) returns (Tmp_301: int);
  modifies alloc;
  free ensures Tmp_301 == 0;



implementation {:origName "I8xFilterResourceRequirements"} I8xFilterResourceRequirements(actual_DeviceObject_7: int, actual_Irp_5: int) returns (Tmp_301: int)
{
  var {:scalar} i_10: int;
  var {:scalar} size: int;
  var {:pointer} pReqList: int;
  var {:pointer} pResList: int;
  var {:pointer} pNewResDesc: int;
  var {:pointer} pNewResList: int;
  var {:scalar} foundPorts: int;
  var {:pointer} Tmp_302: int;
  var {:scalar} removeCount: int;
  var {:scalar} j_1: int;
  var {:pointer} Tmp_303: int;
  var {:pointer} Tmp_304: int;
  var {:scalar} sdv_122: int;
  var {:scalar} prevCount: int;
  var {:scalar} Tmp_306: int;
  var {:pointer} sdv_123: int;
  var {:pointer} sdv_125: int;
  var {:scalar} Tmp_307: int;
  var {:pointer} Tmp_308: int;
  var {:pointer} pNewReqList: int;
  var {:scalar} Tmp_309: int;
  var {:scalar} Tmp_310: int;
  var {:scalar} status_14: int;
  var {:scalar} Tmp_311: int;
  var {:pointer} pResDesc: int;
  var {:pointer} stack_1: int;
  var {:scalar} reqCount: int;
  var {:scalar} foundInt: int;
  var {:pointer} Irp_5: int;
  var vslice_dummy_var_183: int;
  var vslice_dummy_var_184: int;

  anon0:
    Irp_5 := actual_Irp_5;
    call {:si_unique_call 368} Tmp_302 := __HAVOC_malloc(420);
    call {:si_unique_call 369} Tmp_303 := __HAVOC_malloc(420);
    call {:si_unique_call 370} Tmp_304 := __HAVOC_malloc(432);
    call {:si_unique_call 371} Tmp_308 := __HAVOC_malloc(420);
    pReqList := 0;
    pNewReqList := 0;
    pResList := 0;
    pNewResList := 0;
    pResDesc := 0;
    pNewResDesc := 0;
    i_10 := 0;
    j_1 := 0;
    foundInt := 0;
    foundPorts := 0;
    call {:si_unique_call 372} sdv_do_paged_code_check();
    call {:si_unique_call 373} stack_1 := sdv_IoGetCurrentIrpStackLocation(Irp_5);
    assume {:nonnull} Irp_5 != 0;
    assume Irp_5 > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:nonnull} Irp_5 != 0;
    assume Irp_5 > 0;
    havoc pReqList;
    goto L37;

  L37:
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} pReqList != 0;
    assume {:nonnull} pReqList != 0;
    assume pReqList > 0;
    havoc reqCount;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} reqCount > 1;
    Tmp_301 := 0;
    goto L1;

  L1:
    return;

  anon68_Then:
    assume {:partition} 1 >= reqCount;
    assume {:nonnull} pReqList != 0;
    assume pReqList > 0;
    havoc pResList;
    removeCount := 0;
    j_1 := 0;
    goto L45;

  L45:
    call {:si_unique_call 374} foundPorts, Tmp_302, removeCount, j_1, sdv_122, Tmp_311, pResDesc, foundInt := I8xFilterResourceRequirements_loop_L45(pResList, foundPorts, Tmp_302, removeCount, j_1, sdv_122, Tmp_311, pResDesc, foundInt);
    goto L45_last;

  L45_last:
    assume {:nonnull} pResList != 0;
    assume pResList > 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    Tmp_311 := j_1;
    assume {:nonnull} pResList != 0;
    assume pResList > 0;
    havoc Tmp_302;
    pResDesc := Tmp_302 + Tmp_311 * 420;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    goto L58;

  L58:
    j_1 := j_1 + 1;
    goto L58_dummy;

  L58_dummy:
    assume false;
    return;

  anon67_Then:
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    goto L54;

  L54:
    foundInt := 1;
    goto L58;

  anon55_Then:
    goto L54;

  anon69_Then:
    call {:si_unique_call 375} sdv_122 := I8xRemovePort(pResDesc);
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} sdv_122 != 0;
    removeCount := removeCount + 1;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    goto L60;

  L60:
    foundPorts := 1;
    goto L58;

  anon56_Then:
    assume {:partition} sdv_122 == 0;
    goto L60;

  anon53_Then:
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} removeCount != 0;
    assume {:nonnull} pReqList != 0;
    assume pReqList > 0;
    havoc size;
    assume {:nonnull} pResList != 0;
    assume pResList > 0;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    size := size - removeCount * 32;
    goto L67;

  L67:
    call {:si_unique_call 376} sdv_123 := ExAllocatePoolWithTag(1, size, 842281016);
    pNewReqList := sdv_123;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} pNewReqList != 0;
    call {:si_unique_call 377} sdv_RtlZeroMemory(0, size);
    call {:si_unique_call 378} sdv_RtlCopyMemory(0, 0, 32);
    assume {:nonnull} pNewReqList != 0;
    assume pNewReqList > 0;
    assume {:nonnull} pReqList != 0;
    assume pReqList > 0;
    havoc pResList;
    assume {:nonnull} pNewReqList != 0;
    assume pNewReqList > 0;
    havoc pNewResList;
    call {:si_unique_call 379} sdv_RtlCopyMemory(0, 0, 8);
    assume {:nonnull} pNewResList != 0;
    assume pNewResList > 0;
    assume {:nonnull} pNewResList != 0;
    assume pNewResList > 0;
    havoc pNewResDesc;
    j_1 := 0;
    goto L89;

  L89:
    call {:si_unique_call 380} removeCount, j_1, Tmp_303, Tmp_306, pResDesc := I8xFilterResourceRequirements_loop_L89(pResList, pNewResDesc, pNewResList, removeCount, j_1, Tmp_303, Tmp_306, pResDesc);
    goto L89_last;

  L89_last:
    assume {:nonnull} pResList != 0;
    assume pResList > 0;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    Tmp_306 := j_1;
    assume {:nonnull} pResList != 0;
    assume pResList > 0;
    havoc Tmp_303;
    pResDesc := Tmp_303 + Tmp_306 * 420;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResDesc != 0;
    assume pNewResDesc > 0;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    assume {:nonnull} pNewResList != 0;
    assume pNewResList > 0;
    goto L99;

  L99:
    j_1 := j_1 + 1;
    goto L99_dummy;

  L99_dummy:
    assume false;
    return;

  anon72_Then:
    removeCount := removeCount - 1;
    goto L99;

  anon57_Then:
    assume {:nonnull} pReqList != 0;
    assume pReqList > 0;
    havoc vslice_dummy_var_183;
    call {:si_unique_call 381} sdv_RtlZeroMemory(0, vslice_dummy_var_183);
    call {:si_unique_call 382} sdv_ExFreePool(0);
    assume {:nonnull} stack_1 != 0;
    assume stack_1 > 0;
    assume {:nonnull} Irp_5 != 0;
    assume Irp_5 > 0;
    goto L105;

  L105:
    Tmp_301 := 0;
    goto L1;

  anon71_Then:
    assume {:partition} pNewReqList == 0;
    assume {:nonnull} stack_1 != 0;
    assume stack_1 > 0;
    havoc pReqList;
    assume {:nonnull} pReqList != 0;
    assume pReqList > 0;
    havoc reqCount;
    removeCount := 0;
    i_10 := 0;
    goto L109;

  L109:
    call {:si_unique_call 383} i_10, pResList, j_1, Tmp_304, Tmp_307, Tmp_308, Tmp_309, pResDesc := I8xFilterResourceRequirements_loop_L109(i_10, pReqList, pResList, j_1, Tmp_304, Tmp_307, Tmp_308, Tmp_309, pResDesc, reqCount);
    goto L109_last;

  L109_last:
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:partition} reqCount > i_10;
    Tmp_309 := i_10;
    assume {:nonnull} pReqList != 0;
    assume pReqList > 0;
    havoc Tmp_304;
    pResList := Tmp_304 + Tmp_309 * 432;
    j_1 := 0;
    goto L113;

  L113:
    call {:si_unique_call 384} j_1, Tmp_307, Tmp_308, pResDesc := I8xFilterResourceRequirements_loop_L113(pResList, j_1, Tmp_307, Tmp_308, pResDesc);
    goto L113_last;

  L113_last:
    assume {:nonnull} pResList != 0;
    assume pResList > 0;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    Tmp_307 := j_1;
    assume {:nonnull} pResList != 0;
    assume pResList > 0;
    havoc Tmp_308;
    pResDesc := Tmp_308 + Tmp_307 * 420;
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:nonnull} pResDesc != 0;
    assume pResDesc > 0;
    goto L117;

  L117:
    j_1 := j_1 + 1;
    goto L117_dummy;

  L117_dummy:
    assume false;
    return;

  anon73_Then:
    goto L117;

  anon59_Then:
    i_10 := i_10 + 1;
    goto anon59_Then_dummy;

  anon59_Then_dummy:
    assume false;
    return;

  anon58_Then:
    assume {:partition} i_10 >= reqCount;
    Tmp_301 := 0;
    goto L1;

  anon70_Then:
    goto L67;

  anon54_Then:
    assume {:partition} removeCount == 0;
    havoc Tmp_310;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} Tmp_310 != 1;
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} foundPorts == 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} foundInt != 0;
    assume {:nonnull} pReqList != 0;
    assume pReqList > 0;
    havoc size;
    call {:si_unique_call 385} sdv_125 := ExAllocatePoolWithTag(1, size, 842281016);
    pNewReqList := sdv_125;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} pNewReqList != 0;
    call {:si_unique_call 386} sdv_RtlZeroMemory(0, size);
    assume {:nonnull} pReqList != 0;
    assume pReqList > 0;
    havoc vslice_dummy_var_184;
    call {:si_unique_call 387} sdv_RtlCopyMemory(0, 0, vslice_dummy_var_184);
    assume {:nonnull} pReqList != 0;
    assume pReqList > 0;
    havoc pResList;
    assume {:nonnull} pNewReqList != 0;
    assume pNewReqList > 0;
    havoc pNewResList;
    assume {:nonnull} pNewResList != 0;
    assume pNewResList > 0;
    havoc prevCount;
    i_10 := 0;
    goto L146;

  L146:
    call {:si_unique_call 388} i_10, status_14 := I8xFilterResourceRequirements_loop_L146(i_10, pNewResList, prevCount, status_14);
    goto L146_last;

  L146_last:
    assume {:CounterLoop 18} {:Counter "i_10"} true;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} 18 > i_10;
    call {:si_unique_call 389} status_14 := IoQueryDeviceDescription(0, 0, 0, 0, 0, 0, li2bplFunctionConstant1078, 0);
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} status_14 < 0;
    assume {:nonnull} pNewResList != 0;
    assume pNewResList > 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    i_10 := i_10 + 1;
    goto anon65_Else_dummy;

  anon65_Else_dummy:
    assume false;
    return;

  anon65_Then:
    goto L147;

  L147:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} status_14 >= 0;
    goto L158;

  L158:
    assume {:nonnull} pNewReqList != 0;
    assume pNewReqList > 0;
    assume {:nonnull} pNewResList != 0;
    assume pNewResList > 0;
    call {:si_unique_call 390} sdv_ExFreePool(0);
    assume {:nonnull} stack_1 != 0;
    assume stack_1 > 0;
    assume {:nonnull} Irp_5 != 0;
    assume Irp_5 > 0;
    goto L105;

  anon63_Then:
    assume {:partition} 0 > status_14;
    assume {:nonnull} pNewResList != 0;
    assume pNewResList > 0;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    call {:si_unique_call 391} sdv_ExFreePool(0);
    goto L105;

  anon66_Then:
    goto L158;

  anon64_Then:
    assume {:partition} 0 <= status_14;
    goto L147;

  anon62_Then:
    assume {:partition} i_10 >= 18;
    goto L147;

  anon75_Then:
    assume {:partition} pNewReqList == 0;
    Tmp_301 := 0;
    goto L1;

  anon61_Then:
    assume {:partition} foundInt == 0;
    goto L105;

  anon60_Then:
    assume {:partition} foundPorts != 0;
    goto L105;

  anon74_Then:
    assume {:partition} Tmp_310 == 1;
    goto L105;

  anon52_Then:
    assume {:partition} pReqList == 0;
    Tmp_301 := 0;
    goto L1;

  anon51_Then:
    assume {:nonnull} stack_1 != 0;
    assume stack_1 > 0;
    havoc pReqList;
    assume {:nonnull} Irp_5 != 0;
    assume Irp_5 > 0;
    goto L37;
}



procedure {:origName "I8xPnP"} I8xPnP(actual_DeviceObject_8: int, actual_Irp_6: int) returns (Tmp_312: int);
  modifies alloc, Mem_T.CompletionRoutine__IO_STACK_LOCATION, forward_state, s, yogi_error;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "I8xPnP"} I8xPnP(actual_DeviceObject_8: int, actual_Irp_6: int) returns (Tmp_312: int)
{
  var {:pointer} commonData_2: int;
  var {:pointer} Tmp_313: int;
  var {:scalar} Tmp_314: int;
  var {:scalar} status_15: int;
  var {:pointer} devCaps: int;
  var {:pointer} stack_2: int;
  var {:pointer} DeviceObject_8: int;
  var {:pointer} Irp_6: int;
  var vslice_dummy_var_61: int;
  var vslice_dummy_var_62: int;
  var vslice_dummy_var_63: int;
  var vslice_dummy_var_64: int;
  var vslice_dummy_var_185: int;
  var vslice_dummy_var_186: int;
  var vslice_dummy_var_187: int;
  var vslice_dummy_var_188: int;
  var vslice_dummy_var_189: int;
  var vslice_dummy_var_190: int;
  var vslice_dummy_var_191: int;
  var vslice_dummy_var_192: int;
  var vslice_dummy_var_193: int;
  var vslice_dummy_var_194: int;
  var vslice_dummy_var_195: int;
  var vslice_dummy_var_196: int;

  anon0:
    DeviceObject_8 := actual_DeviceObject_8;
    Irp_6 := actual_Irp_6;
    status_15 := 0;
    call {:si_unique_call 392} sdv_do_paged_code_check();
    assume {:nonnull} DeviceObject_8 != 0;
    assume DeviceObject_8 > 0;
    havoc commonData_2;
    call {:si_unique_call 393} stack_2 := sdv_IoGetCurrentIrpStackLocation(Irp_6);
    call {:si_unique_call 394} status_15 := sdv_IoAcquireRemoveLock(0, 0);
    goto anon131_Then, anon131_Else;

  anon131_Else:
    assume {:partition} status_15 >= 0;
    assume {:nonnull} stack_2 != 0;
    assume stack_2 > 0;
    goto anon132_Then, anon132_Else;

  anon132_Else:
    assume {:nonnull} stack_2 != 0;
    assume stack_2 > 0;
    goto anon168_Then, anon168_Else;

  anon168_Else:
    assume {:nonnull} stack_2 != 0;
    assume stack_2 > 0;
    goto anon167_Then, anon167_Else;

  anon167_Else:
    assume {:nonnull} stack_2 != 0;
    assume stack_2 > 0;
    goto anon166_Then, anon166_Else;

  anon166_Else:
    assume {:nonnull} stack_2 != 0;
    assume stack_2 > 0;
    goto anon165_Then, anon165_Else;

  anon165_Else:
    assume {:nonnull} stack_2 != 0;
    assume stack_2 > 0;
    goto anon164_Then, anon164_Else;

  anon164_Else:
    assume {:nonnull} stack_2 != 0;
    assume stack_2 > 0;
    goto anon163_Then, anon163_Else;

  anon163_Else:
    assume {:nonnull} stack_2 != 0;
    assume stack_2 > 0;
    goto anon162_Then, anon162_Else;

  anon162_Else:
    assume {:nonnull} stack_2 != 0;
    assume stack_2 > 0;
    goto anon161_Then, anon161_Else;

  anon161_Else:
    assume {:nonnull} stack_2 != 0;
    assume stack_2 > 0;
    goto anon160_Then, anon160_Else;

  anon160_Else:
    assume {:nonnull} stack_2 != 0;
    assume stack_2 > 0;
    goto anon159_Then, anon159_Else;

  anon159_Else:
    assume {:nonnull} stack_2 != 0;
    assume stack_2 > 0;
    goto anon158_Then, anon158_Else;

  anon158_Else:
    assume {:nonnull} stack_2 != 0;
    assume stack_2 > 0;
    goto anon157_Then, anon157_Else;

  anon157_Else:
    assume {:nonnull} stack_2 != 0;
    assume stack_2 > 0;
    goto anon156_Then, anon156_Else;

  anon156_Else:
    assume {:nonnull} stack_2 != 0;
    assume stack_2 > 0;
    goto anon155_Then, anon155_Else;

  anon155_Else:
    assume {:nonnull} stack_2 != 0;
    assume stack_2 > 0;
    goto anon154_Then, anon154_Else;

  anon154_Else:
    assume {:nonnull} stack_2 != 0;
    assume stack_2 > 0;
    goto anon153_Then, anon153_Else;

  anon153_Else:
    assume {:nonnull} stack_2 != 0;
    assume stack_2 > 0;
    goto anon152_Then, anon152_Else;

  anon152_Else:
    assume {:nonnull} stack_2 != 0;
    assume stack_2 > 0;
    goto anon151_Then, anon151_Else;

  anon151_Else:
    assume {:nonnull} stack_2 != 0;
    assume stack_2 > 0;
    goto anon150_Then, anon150_Else;

  anon150_Else:
    assume {:nonnull} commonData_2 != 0;
    assume commonData_2 > 0;
    havoc vslice_dummy_var_185;
    call {:si_unique_call 395} status_15 := I8xSendIrpSynchronously(vslice_dummy_var_185, Irp_6, 0);
    goto anon191_Then, anon191_Else;

  anon191_Else:
    assume {:partition} yogi_error != 1;
    goto anon136_Then, anon136_Else;

  anon136_Else:
    assume {:partition} status_15 >= 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    assume {:nonnull} commonData_2 != 0;
    assume commonData_2 > 0;
    goto L45;

  L45:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    goto anon192_Then, anon192_Else;

  anon192_Else:
    assume Irp_6 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 396} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl13);
    goto anon193_Then, anon193_Else;

  anon193_Else:
    assume {:partition} yogi_error != 1;
    goto L262;

  L262:
    call {:si_unique_call 397} sdv_IoCompleteRequest(0, 0);
    goto L51;

  L51:
    assume {:nonnull} commonData_2 != 0;
    assume commonData_2 > 0;
    call {:si_unique_call 398} vslice_dummy_var_61 := sdv_IoReleaseRemoveLock(RemoveLock_COMMON_DATA(commonData_2), Irp_6);
    Tmp_312 := status_15;
    goto L1;

  L1:
    call {:si_unique_call 399} SLIC_I8xPnP_exit(strConst__li2bpl12, Tmp_312);
    goto anon172_Then, anon172_Else;

  anon172_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon172_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon193_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon192_Then:
    assume !(Irp_6 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L262;

  anon136_Then:
    assume {:partition} 0 > status_15;
    goto L45;

  anon191_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon150_Then:
    goto L25;

  L25:
    call {:si_unique_call 400} sdv_IoSkipCurrentIrpStackLocation(Irp_6);
    assume {:nonnull} commonData_2 != 0;
    assume commonData_2 > 0;
    havoc vslice_dummy_var_186;
    call {:si_unique_call 401} status_15 := sdv_IoCallDriver(vslice_dummy_var_186, Irp_6);
    goto anon184_Then, anon184_Else;

  anon184_Else:
    assume {:partition} yogi_error != 1;
    goto L51;

  anon184_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon151_Then:
    goto L25;

  anon152_Then:
    goto L25;

  anon153_Then:
    goto L25;

  anon154_Then:
    goto L25;

  anon155_Then:
    goto L25;

  anon156_Then:
    assume {:nonnull} commonData_2 != 0;
    assume commonData_2 > 0;
    havoc vslice_dummy_var_187;
    call {:si_unique_call 402} status_15 := I8xSendIrpSynchronously(vslice_dummy_var_187, Irp_6, 0);
    goto anon188_Then, anon188_Else;

  anon188_Else:
    assume {:partition} yogi_error != 1;
    goto anon137_Then, anon137_Else;

  anon137_Else:
    assume {:partition} status_15 >= 0;
    call {:si_unique_call 403} status_15 := I8xFilterResourceRequirements(DeviceObject_8, Irp_6);
    goto L57;

  L57:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    goto anon189_Then, anon189_Else;

  anon189_Else:
    assume Irp_6 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 404} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl13);
    goto anon190_Then, anon190_Else;

  anon190_Else:
    assume {:partition} yogi_error != 1;
    goto L259;

  L259:
    call {:si_unique_call 405} sdv_IoCompleteRequest(0, 0);
    goto L51;

  anon190_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon189_Then:
    assume !(Irp_6 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L259;

  anon137_Then:
    assume {:partition} 0 > status_15;
    goto L57;

  anon188_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon157_Then:
    goto L25;

  anon158_Then:
    goto L25;

  anon159_Then:
    goto L25;

  anon160_Then:
    assume {:nonnull} commonData_2 != 0;
    assume commonData_2 > 0;
    goto anon135_Then, anon135_Else;

  anon135_Else:
    assume {:nonnull} commonData_2 != 0;
    assume commonData_2 > 0;
    goto anon138_Then, anon138_Else;

  anon138_Else:
    assume {:nonnull} commonData_2 != 0;
    assume commonData_2 > 0;
    goto anon139_Then, anon139_Else;

  anon139_Else:
    assume {:nonnull} commonData_2 != 0;
    assume commonData_2 > 0;
    havoc vslice_dummy_var_188;
    call {:si_unique_call 406} status_15 := I8xSendIrpSynchronously(vslice_dummy_var_188, Irp_6, 1);
    goto anon185_Then, anon185_Else;

  anon185_Else:
    assume {:partition} yogi_error != 1;
    goto anon140_Then, anon140_Else;

  anon140_Else:
    assume {:partition} status_15 >= 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    goto anon142_Then, anon142_Else;

  anon142_Else:
    call {:si_unique_call 407} stack_2 := sdv_IoGetCurrentIrpStackLocation(Irp_6);
    assume {:nonnull} stack_2 != 0;
    assume stack_2 > 0;
    havoc devCaps;
    goto anon186_Then, anon186_Else;

  anon186_Else:
    assume {:partition} devCaps != 0;
    assume {:nonnull} devCaps != 0;
    assume devCaps > 0;
    assume {:nonnull} devCaps != 0;
    assume devCaps > 0;
    goto L73;

  L73:
    goto anon141_Then, anon141_Else;

  anon141_Else:
    assume Irp_6 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 408} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl13);
    goto anon187_Then, anon187_Else;

  anon187_Else:
    assume {:partition} yogi_error != 1;
    goto L256;

  L256:
    call {:si_unique_call 409} sdv_IoCompleteRequest(0, 0);
    goto L51;

  anon187_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon141_Then:
    assume !(Irp_6 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L256;

  anon186_Then:
    assume {:partition} devCaps == 0;
    goto L73;

  anon142_Then:
    goto L73;

  anon140_Then:
    assume {:partition} 0 > status_15;
    goto L73;

  anon185_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon139_Then:
    goto L25;

  anon138_Then:
    goto L25;

  anon135_Then:
    goto L25;

  anon161_Then:
    goto L25;

  anon162_Then:
    goto L25;

  anon163_Then:
    goto L33;

  L33:
    assume {:nonnull} commonData_2 != 0;
    assume commonData_2 > 0;
    havoc vslice_dummy_var_189;
    call {:si_unique_call 410} status_15 := I8xSendIrpSynchronously(vslice_dummy_var_189, Irp_6, 0);
    goto anon181_Then, anon181_Else;

  anon181_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    goto anon182_Then, anon182_Else;

  anon182_Else:
    assume Irp_6 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 411} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl13);
    goto anon183_Then, anon183_Else;

  anon183_Else:
    assume {:partition} yogi_error != 1;
    goto L253;

  L253:
    call {:si_unique_call 412} sdv_IoCompleteRequest(0, 0);
    goto L51;

  anon183_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon182_Then:
    assume !(Irp_6 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L253;

  anon181_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon164_Then:
    goto L31;

  L31:
    assume {:nonnull} commonData_2 != 0;
    assume commonData_2 > 0;
    goto anon133_Then, anon133_Else;

  anon133_Else:
    Tmp_314 := 0;
    goto L136;

  L136:
    status_15 := Tmp_314;
    goto anon175_Then, anon175_Else;

  anon175_Else:
    assume {:partition} status_15 >= 0;
    call {:si_unique_call 413} sdv_IoSkipCurrentIrpStackLocation(Irp_6);
    assume {:nonnull} commonData_2 != 0;
    assume commonData_2 > 0;
    havoc vslice_dummy_var_190;
    call {:si_unique_call 414} status_15 := sdv_IoCallDriver(vslice_dummy_var_190, Irp_6);
    goto anon176_Then, anon176_Else;

  anon176_Else:
    assume {:partition} yogi_error != 1;
    goto L51;

  anon176_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon175_Then:
    assume {:partition} 0 > status_15;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    goto anon177_Then, anon177_Else;

  anon177_Else:
    assume Irp_6 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 415} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl13);
    goto anon178_Then, anon178_Else;

  anon178_Else:
    assume {:partition} yogi_error != 1;
    goto L250;

  L250:
    call {:si_unique_call 416} sdv_IoCompleteRequest(0, 0);
    goto L51;

  anon178_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon177_Then:
    assume !(Irp_6 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L250;

  anon133_Then:
    Tmp_314 := -1073741823;
    goto L136;

  anon165_Then:
    goto L25;

  anon166_Then:
    goto L33;

  anon167_Then:
    assume {:nonnull} commonData_2 != 0;
    assume commonData_2 > 0;
    goto anon134_Then, anon134_Else;

  anon134_Else:
    call {:si_unique_call 417} vslice_dummy_var_62 := IoWMIRegistrationControl(0, 2);
    goto L94;

  L94:
    assume {:nonnull} commonData_2 != 0;
    assume commonData_2 > 0;
    goto anon143_Then, anon143_Else;

  anon143_Else:
    call {:si_unique_call 418} Tmp_313 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_313 != 0;
    assume Tmp_313 > 0;
    call {:si_unique_call 419} vslice_dummy_var_64 := sdv_InterlockedDecrement(Tmp_313);
    assume {:nonnull} Tmp_313 != 0;
    assume Tmp_313 > 0;
    goto L98;

  L98:
    call {:si_unique_call 420} sdv_IoReleaseRemoveLockAndWait(0, 0);
    call {:si_unique_call 421} ExAcquireFastMutexUnsafe(0);
    assume {:nonnull} commonData_2 != 0;
    assume commonData_2 > 0;
    goto anon144_Then, anon144_Else;

  anon144_Else:
    call {:si_unique_call 422} I8xKeyboardRemoveDevice(DeviceObject_8);
    goto anon179_Then, anon179_Else;

  anon179_Else:
    assume {:partition} yogi_error != 1;
    goto L114;

  L114:
    call {:si_unique_call 423} ExReleaseFastMutexUnsafe(0);
    assume {:nonnull} commonData_2 != 0;
    assume commonData_2 > 0;
    assume {:nonnull} commonData_2 != 0;
    assume commonData_2 > 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    call {:si_unique_call 424} sdv_IoSkipCurrentIrpStackLocation(Irp_6);
    assume {:nonnull} commonData_2 != 0;
    assume commonData_2 > 0;
    havoc vslice_dummy_var_191;
    call {:si_unique_call 425} status_15 := sdv_IoCallDriver(vslice_dummy_var_191, Irp_6);
    goto anon180_Then, anon180_Else;

  anon180_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 426} IoDetachDevice(0);
    call {:si_unique_call 427} IoDeleteDevice(0);
    Tmp_312 := status_15;
    goto L1;

  anon180_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon179_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon144_Then:
    call {:si_unique_call 428} I8xMouseRemoveDevice(DeviceObject_8);
    goto L114;

  anon143_Then:
    goto L98;

  anon134_Then:
    goto L94;

  anon168_Then:
    goto L31;

  anon132_Then:
    assume {:nonnull} commonData_2 != 0;
    assume commonData_2 > 0;
    havoc vslice_dummy_var_192;
    call {:si_unique_call 429} status_15 := I8xSendIrpSynchronously(vslice_dummy_var_192, Irp_6, 1);
    goto anon169_Then, anon169_Else;

  anon169_Else:
    assume {:partition} yogi_error != 1;
    goto anon145_Then, anon145_Else;

  anon145_Else:
    assume {:partition} status_15 >= 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    goto anon146_Then, anon146_Else;

  anon146_Else:
    call {:si_unique_call 430} ExAcquireFastMutexUnsafe(0);
    assume {:nonnull} commonData_2 != 0;
    assume commonData_2 > 0;
    goto anon147_Then, anon147_Else;

  anon147_Else:
    goto L160;

  L160:
    call {:si_unique_call 431} ExReleaseFastMutexUnsafe(0);
    goto L153;

  L153:
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    goto anon170_Then, anon170_Else;

  anon170_Else:
    assume Irp_6 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 432} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl13);
    goto anon171_Then, anon171_Else;

  anon171_Else:
    assume {:partition} yogi_error != 1;
    goto L247;

  L247:
    call {:si_unique_call 433} sdv_IoCompleteRequest(0, 0);
    goto L51;

  anon171_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon170_Then:
    assume !(Irp_6 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L247;

  anon147_Then:
    assume {:nonnull} commonData_2 != 0;
    assume commonData_2 > 0;
    goto anon148_Then, anon148_Else;

  anon148_Else:
    assume {:nonnull} DeviceObject_8 != 0;
    assume DeviceObject_8 > 0;
    assume {:nonnull} stack_2 != 0;
    assume stack_2 > 0;
    havoc vslice_dummy_var_193;
    havoc vslice_dummy_var_194;
    call {:si_unique_call 434} status_15 := I8xKeyboardStartDevice(vslice_dummy_var_193, vslice_dummy_var_194);
    goto anon173_Then, anon173_Else;

  anon173_Else:
    assume {:partition} yogi_error != 1;
    goto L170;

  L170:
    goto anon149_Then, anon149_Else;

  anon149_Else:
    assume {:partition} status_15 >= 0;
    call {:si_unique_call 435} Tmp_313 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_313 != 0;
    assume Tmp_313 > 0;
    call {:si_unique_call 436} vslice_dummy_var_63 := sdv_InterlockedIncrement(Tmp_313);
    assume {:nonnull} Tmp_313 != 0;
    assume Tmp_313 > 0;
    assume {:nonnull} commonData_2 != 0;
    assume commonData_2 > 0;
    goto L160;

  anon149_Then:
    assume {:partition} 0 > status_15;
    goto L160;

  anon173_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon148_Then:
    assume {:nonnull} DeviceObject_8 != 0;
    assume DeviceObject_8 > 0;
    assume {:nonnull} stack_2 != 0;
    assume stack_2 > 0;
    havoc vslice_dummy_var_195;
    havoc vslice_dummy_var_196;
    call {:si_unique_call 437} status_15 := I8xMouseStartDevice(vslice_dummy_var_195, vslice_dummy_var_196);
    goto anon174_Then, anon174_Else;

  anon174_Else:
    assume {:partition} yogi_error != 1;
    goto L170;

  anon174_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon146_Then:
    goto L153;

  anon145_Then:
    assume {:partition} 0 > status_15;
    goto L153;

  anon169_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon131_Then:
    assume {:partition} 0 > status_15;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    assume {:nonnull} Irp_6 != 0;
    assume Irp_6 > 0;
    goto anon194_Then, anon194_Else;

  anon194_Else:
    assume Irp_6 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 438} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl13);
    goto anon195_Then, anon195_Else;

  anon195_Else:
    assume {:partition} yogi_error != 1;
    goto L265;

  L265:
    call {:si_unique_call 439} sdv_IoCompleteRequest(0, 0);
    Tmp_312 := status_15;
    goto L1;

  anon195_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon194_Then:
    assume !(Irp_6 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L265;
}



procedure {:origName "I8xSetPowerFlag"} I8xSetPowerFlag(actual_Flag_1: int, actual_Set: int);
  modifies alloc;



implementation {:origName "I8xSetPowerFlag"} I8xSetPowerFlag(actual_Flag_1: int, actual_Set: int)
{
  var {:pointer} Tmp_316: int;
  var {:scalar} irql_2: int;
  var {:scalar} Flag_1: int;
  var {:scalar} Set: int;
  var vslice_dummy_var_65: int;

  anon0:
    call {:si_unique_call 440} vslice_dummy_var_65 := __HAVOC_malloc(4);
    Flag_1 := actual_Flag_1;
    Set := actual_Set;
    call {:si_unique_call 441} Tmp_316 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_316 != 0;
    assume Tmp_316 > 0;
    call {:si_unique_call 442} sdv_KeAcquireSpinLock(0, Tmp_316);
    assume {:nonnull} Tmp_316 != 0;
    assume Tmp_316 > 0;
    havoc irql_2;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} Set != 0;
    goto L10;

  L10:
    call {:si_unique_call 443} sdv_KeReleaseSpinLock(0, irql_2);
    return;

  anon3_Then:
    assume {:partition} Set == 0;
    goto L10;
}



procedure {:origName "I8xMouseConnectInterruptAndEnable"} I8xMouseConnectInterruptAndEnable(actual_MouseExtension: int, actual_Reset: int) returns (Tmp_317: int);
  modifies alloc, Mem_T.CompletionRoutine__IO_STACK_LOCATION, s, yogi_error;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "I8xMouseConnectInterruptAndEnable"} I8xMouseConnectInterruptAndEnable(actual_MouseExtension: int, actual_Reset: int) returns (Tmp_317: int)
{
  var {:pointer} self: int;
  var {:scalar} Tmp_318: int;
  var {:pointer} topOfStack: int;
  var {:scalar} Tmp_320: int;
  var {:scalar} startInfo: int;
  var {:pointer} dumpData_1: int;
  var {:pointer} configuration_2: int;
  var {:scalar} Tmp_321: int;
  var {:scalar} status_16: int;
  var {:pointer} MouseExtension: int;
  var {:scalar} Reset: int;
  var vslice_dummy_var_66: int;
  var vslice_dummy_var_67: int;
  var vslice_dummy_var_68: int;
  var vslice_dummy_var_69: int;
  var vslice_dummy_var_197: int;
  var vslice_dummy_var_198: int;
  var vslice_dummy_var_199: int;
  var vslice_dummy_var_200: int;

  anon0:
    call {:si_unique_call 444} startInfo := __HAVOC_malloc(12);
    MouseExtension := actual_MouseExtension;
    Reset := actual_Reset;
    call {:si_unique_call 445} dumpData_1 := __HAVOC_malloc(4);
    status_16 := 0;
    call {:si_unique_call 446} sdv_do_paged_code_check();
    assume {:nonnull} MouseExtension != 0;
    assume MouseExtension > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    Tmp_317 := 0;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon21_Then:
    havoc configuration_2;
    assume {:nonnull} MouseExtension != 0;
    assume MouseExtension > 0;
    havoc self;
    call {:si_unique_call 447} vslice_dummy_var_68 := sdv_MmLockPagableCodeSection(li2bplFunctionConstant963);
    assume {:nonnull} MouseExtension != 0;
    assume MouseExtension > 0;
    assume {:nonnull} MouseExtension != 0;
    assume MouseExtension > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    Tmp_321 := 0;
    goto L81;

  L81:
    assume {:nonnull} MouseExtension != 0;
    assume MouseExtension > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    Tmp_318 := 1;
    goto L23;

  L23:
    assume {:nonnull} MouseExtension != 0;
    assume MouseExtension > 0;
    havoc Tmp_320;
    assume {:nonnull} MouseExtension != 0;
    assume MouseExtension > 0;
    assume {:nonnull} configuration_2 != 0;
    assume configuration_2 > 0;
    havoc vslice_dummy_var_197;
    havoc vslice_dummy_var_198;
    havoc vslice_dummy_var_199;
    havoc vslice_dummy_var_200;
    call {:si_unique_call 448} status_16 := IoConnectInterrupt(InterruptObject_COMMON_DATA(MouseExtension), li2bplFunctionConstant963, self, 0, vslice_dummy_var_197, Tmp_320, vslice_dummy_var_198, Tmp_318, Tmp_321, vslice_dummy_var_199, vslice_dummy_var_200);
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} yogi_error != 1;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} status_16 >= 0;
    call {:si_unique_call 449} topOfStack := IoGetAttachedDeviceReference(self);
    call {:si_unique_call 450} sdv_RtlZeroMemory(0, 40);
    assume {:nonnull} startInfo != 0;
    assume startInfo > 0;
    assume {:nonnull} MouseExtension != 0;
    assume MouseExtension > 0;
    assume {:nonnull} startInfo != 0;
    assume startInfo > 0;
    call {:si_unique_call 451} vslice_dummy_var_69 := I8xSendIoctl(topOfStack, 999375, startInfo, 40);
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 452} vslice_dummy_var_66 := sdv_ObDereferenceObject(0);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} Reset != 0;
    assume {:nonnull} MouseExtension != 0;
    assume MouseExtension > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    call {:si_unique_call 453} status_16 := I8xMouseEnableTransmission(MouseExtension);
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} status_16 < 0;
    status_16 := 0;
    goto L48;

  L48:
    Tmp_317 := status_16;
    goto L1;

  anon25_Then:
    assume {:partition} 0 <= status_16;
    goto L48;

  anon24_Then:
    assume {:nonnull} MouseExtension != 0;
    assume MouseExtension > 0;
    assume {:nonnull} MouseExtension != 0;
    assume MouseExtension > 0;
    assume {:nonnull} MouseExtension != 0;
    assume MouseExtension > 0;
    call {:si_unique_call 454} status_16 := I8xResetMouse#1(MouseExtension);
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} yogi_error != 1;
    goto L48;

  anon30_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon23_Then:
    assume {:partition} Reset == 0;
    goto L48;

  anon29_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon22_Then:
    assume {:partition} 0 > status_16;
    assume {:nonnull} MouseExtension != 0;
    assume MouseExtension > 0;
    assume {:nonnull} dumpData_1 != 0;
    assume dumpData_1 > 0;
    call {:si_unique_call 455} I8xLogError(self, -1073414095, 1090, -1073741670, dumpData_1, 1);
    call {:si_unique_call 456} vslice_dummy_var_67 := I8xManuallyRemoveDevice(MouseExtension);
    Tmp_317 := status_16;
    goto L1;

  anon28_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon27_Then:
    Tmp_318 := 0;
    goto L23;

  anon26_Then:
    Tmp_321 := 1;
    goto L81;
}



procedure {:origName "I8xMouseEnableDpc"} I8xMouseEnableDpc(actual_Dpc_1: int, actual_MouseExtension_1: int, actual_SystemArg1: int, actual_SystemArg2: int);
  modifies alloc;



implementation {:origName "I8xMouseEnableDpc"} I8xMouseEnableDpc(actual_Dpc_1: int, actual_MouseExtension_1: int, actual_SystemArg1: int, actual_SystemArg2: int)
{
  var {:scalar} result: int;
  var {:pointer} MouseExtension_1: int;
  var vslice_dummy_var_70: int;
  var vslice_dummy_var_71: int;
  var vslice_dummy_var_72: int;

  anon0:
    call {:si_unique_call 457} vslice_dummy_var_70 := __HAVOC_malloc(4);
    MouseExtension_1 := actual_MouseExtension_1;
    assume {:nonnull} MouseExtension_1 != 0;
    assume MouseExtension_1 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    call {:si_unique_call 458} result := KeSynchronizeExecution(0, li2bplFunctionConstant1058, 0);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} result == 0;
    call {:si_unique_call 459} vslice_dummy_var_72 := KeCancelTimer(0);
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} result != 0;
    goto L1;

  anon5_Then:
    call {:si_unique_call 460} vslice_dummy_var_71 := KeCancelTimer(0);
    goto L1;
}



procedure {:origName "I8xMouseRemoveDevice"} I8xMouseRemoveDevice(actual_DeviceObject_10: int);
  modifies alloc;



implementation {:origName "I8xMouseRemoveDevice"} I8xMouseRemoveDevice(actual_DeviceObject_10: int)
{
  var {:pointer} mouseExtension_1: int;
  var {:pointer} DeviceObject_10: int;
  var vslice_dummy_var_73: int;
  var vslice_dummy_var_74: int;

  anon0:
    call {:si_unique_call 461} vslice_dummy_var_73 := __HAVOC_malloc(4);
    DeviceObject_10 := actual_DeviceObject_10;
    assume {:nonnull} DeviceObject_10 != 0;
    assume DeviceObject_10 > 0;
    havoc mouseExtension_1;
    call {:si_unique_call 462} sdv_do_paged_code_check();
    assume {:nonnull} mouseExtension_1 != 0;
    assume mouseExtension_1 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} mouseExtension_1 != 0;
    assume mouseExtension_1 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    call {:si_unique_call 463} vslice_dummy_var_74 := IoUnregisterPlugPlayNotification(0);
    assume {:nonnull} mouseExtension_1 != 0;
    assume mouseExtension_1 > 0;
    goto L9;

  L9:
    assume {:nonnull} mouseExtension_1 != 0;
    assume mouseExtension_1 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    call {:si_unique_call 464} IoDisconnectInterrupt(0);
    assume {:nonnull} mouseExtension_1 != 0;
    assume mouseExtension_1 > 0;
    goto L15;

  L15:
    assume {:nonnull} mouseExtension_1 != 0;
    assume mouseExtension_1 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    call {:si_unique_call 465} sdv_ExFreePool(0);
    assume {:nonnull} mouseExtension_1 != 0;
    assume mouseExtension_1 > 0;
    goto L20;

  L20:
    call {:si_unique_call 466} RtlFreeUnicodeString(0);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    goto L1;

  L1:
    return;

  anon15_Then:
    goto L1;

  anon14_Then:
    goto L20;

  anon12_Then:
    goto L15;

  anon13_Then:
    goto L9;

  anon11_Then:
    goto L9;
}



procedure {:origName "_sdv_init12"} _sdv_init12();
  modifies alloc;



implementation {:origName "_sdv_init12"} _sdv_init12()
{
  var vslice_dummy_var_75: int;

  anon0:
    call {:si_unique_call 467} vslice_dummy_var_75 := __HAVOC_malloc(4);
    assume ScanCodeToUCharCount_4 == 54;
    return;
}



procedure {:origName "I8xVerifyMousePnPID"} I8xVerifyMousePnPID(actual_MouseExtension_4: int, actual_MouseID: int) returns (Tmp_334: int);
  modifies alloc;
  free ensures Tmp_334 == 1 || Tmp_334 == 0;



implementation {:origName "I8xVerifyMousePnPID"} I8xVerifyMousePnPID(actual_MouseExtension_4: int, actual_MouseID: int) returns (Tmp_334: int)
{
  var {:scalar} sdv_164: int;
  var {:pointer} szDefaultIDs: int;
  var {:pointer} currentString: int;
  var {:scalar} sdv_166: int;
  var {:pointer} MouseExtension_4: int;

  anon0:
    MouseExtension_4 := actual_MouseExtension_4;
    call {:si_unique_call 468} szDefaultIDs := __HAVOC_malloc(360);
    currentString := 0;
    assume {:nonnull} szDefaultIDs != 0;
    assume szDefaultIDs > 0;
    assume {:nonnull} MouseExtension_4 != 0;
    assume MouseExtension_4 > 0;
    havoc currentString;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} currentString != 0;
    goto L11;

  L11:
    call {:si_unique_call 469} I8xVerifyMousePnPID_loop_L11(sdv_164, currentString);
    goto L11_last;

  L11_last:
    assume {:nonnull} currentString != 0;
    assume currentString > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} sdv_164 != 0;
    goto anon14_Else_dummy;

  anon14_Else_dummy:
    assume false;
    return;

  anon14_Then:
    assume {:partition} sdv_164 == 0;
    Tmp_334 := 1;
    goto L1;

  L1:
    return;

  anon13_Then:
    goto L10;

  L10:
    currentString := szDefaultIDs;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} currentString != 0;
    goto L23;

  L23:
    call {:si_unique_call 470} I8xVerifyMousePnPID_loop_L23(currentString, sdv_166);
    goto L23_last;

  L23_last:
    assume {:nonnull} currentString != 0;
    assume currentString > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} sdv_166 != 0;
    goto anon16_Else_dummy;

  anon16_Else_dummy:
    assume false;
    return;

  anon16_Then:
    assume {:partition} sdv_166 == 0;
    Tmp_334 := 1;
    goto L1;

  anon15_Then:
    goto L22;

  L22:
    Tmp_334 := 0;
    goto L1;

  anon18_Then:
    assume {:partition} currentString == 0;
    goto L22;

  anon17_Then:
    assume {:partition} currentString == 0;
    goto L10;
}



procedure {:origName "I8xMouseStartDevice"} I8xMouseStartDevice(actual_MouseExtension_5: int, actual_ResourceList_1: int) returns (Tmp_341: int);
  modifies alloc, Mem_T.CompletionRoutine__IO_STACK_LOCATION, s, yogi_error;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "I8xMouseStartDevice"} I8xMouseStartDevice(actual_MouseExtension_5: int, actual_ResourceList_1: int) returns (Tmp_341: int)
{
  var {:pointer} self_1: int;
  var {:pointer} Tmp_342: int;
  var {:scalar} Tmp_343: int;
  var {:scalar} initializeDataContext: int;
  var {:scalar} Tmp_344: int;
  var {:pointer} dumpData_2: int;
  var {:pointer} sdv_177: int;
  var {:scalar} sdv_178: int;
  var {:scalar} Tmp_345: int;
  var {:scalar} Tmp_346: int;
  var {:scalar} tryKbInit: int;
  var {:scalar} status_18: int;
  var {:scalar} Tmp_347: int;
  var {:pointer} MouseExtension_5: int;
  var {:pointer} ResourceList_1: int;
  var vslice_dummy_var_76: int;
  var vslice_dummy_var_77: int;
  var vslice_dummy_var_78: int;
  var vslice_dummy_var_79: int;
  var vslice_dummy_var_201: int;
  var vslice_dummy_var_202: int;
  var vslice_dummy_var_203: int;
  var vslice_dummy_var_204: int;

  anon0:
    call {:si_unique_call 471} initializeDataContext := __HAVOC_malloc(8);
    MouseExtension_5 := actual_MouseExtension_5;
    ResourceList_1 := actual_ResourceList_1;
    call {:si_unique_call 472} dumpData_2 := __HAVOC_malloc(4);
    status_18 := 0;
    tryKbInit := 0;
    call {:si_unique_call 473} sdv_do_paged_code_check();
    havoc Tmp_346;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} Tmp_346 == 512;
    call {:si_unique_call 474} Tmp_342 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_342 != 0;
    assume Tmp_342 > 0;
    call {:si_unique_call 475} vslice_dummy_var_78 := sdv_InterlockedDecrement(Tmp_342);
    assume {:nonnull} Tmp_342 != 0;
    assume Tmp_342 > 0;
    status_18 := -1073741810;
    goto L21;

  L21:
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} tryKbInit != 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    havoc Tmp_347;
    goto L26;

  L26:
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} Tmp_347 != 0;
    havoc Tmp_343;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} Tmp_343 != 256;
    havoc vslice_dummy_var_201;
    call {:si_unique_call 476} vslice_dummy_var_76 := I8xKeyboardInitializeHardware(vslice_dummy_var_201, MouseExtension_5);
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:partition} yogi_error != 1;
    goto L22;

  L22:
    Tmp_341 := status_18;
    goto LM2;

  LM2:
    return;

  anon44_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon43_Then:
    assume {:partition} Tmp_343 == 256;
    goto L22;

  anon36_Then:
    assume {:partition} Tmp_347 == 0;
    goto L22;

  anon35_Then:
    Tmp_347 := 0;
    goto L26;

  anon34_Then:
    assume {:partition} tryKbInit == 0;
    goto L22;

  anon42_Then:
    assume {:partition} Tmp_346 != 512;
    assume {:nonnull} MouseExtension_5 != 0;
    assume MouseExtension_5 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    call {:si_unique_call 477} status_18 := I8xMouseConfiguration(MouseExtension_5, ResourceList_1);
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} status_18 >= 0;
    assume {:nonnull} MouseExtension_5 != 0;
    assume MouseExtension_5 > 0;
    havoc self_1;
    assume {:nonnull} MouseExtension_5 != 0;
    assume MouseExtension_5 > 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:nonnull} MouseExtension_5 != 0;
    assume MouseExtension_5 > 0;
    goto L44;

  L44:
    call {:si_unique_call 478} I8xMouseServiceParameters(RegistryPath__GLOBALS(Globals), MouseExtension_5);
    assume {:nonnull} MouseExtension_5 != 0;
    assume MouseExtension_5 > 0;
    havoc vslice_dummy_var_202;
    call {:si_unique_call 479} sdv_177 := ExAllocatePoolWithTag(512, vslice_dummy_var_202, 842281016);
    assume {:nonnull} MouseExtension_5 != 0;
    assume MouseExtension_5 > 0;
    assume {:nonnull} MouseExtension_5 != 0;
    assume MouseExtension_5 > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:nonnull} MouseExtension_5 != 0;
    assume MouseExtension_5 > 0;
    assume {:nonnull} MouseExtension_5 != 0;
    assume MouseExtension_5 > 0;
    havoc vslice_dummy_var_203;
    call {:si_unique_call 480} sdv_RtlZeroMemory(0, vslice_dummy_var_203);
    assume {:nonnull} initializeDataContext != 0;
    assume initializeDataContext > 0;
    assume {:nonnull} initializeDataContext != 0;
    assume initializeDataContext > 0;
    call {:si_unique_call 481} I8xInitializeDataQueue(initializeDataContext);
    assume {:nonnull} MouseExtension_5 != 0;
    assume MouseExtension_5 > 0;
    assume {:nonnull} MouseExtension_5 != 0;
    assume MouseExtension_5 > 0;
    call {:si_unique_call 482} KeInitializeDpc(ErrorLogDpc_COMMON_DATA(MouseExtension_5), li2bplFunctionConstant190, 0);
    assume {:nonnull} MouseExtension_5 != 0;
    assume MouseExtension_5 > 0;
    call {:si_unique_call 483} KeInitializeDpc(MouseIsrDpc__PORT_MOUSE_EXTENSION(MouseExtension_5), li2bplFunctionConstant948, 0);
    assume {:nonnull} MouseExtension_5 != 0;
    assume MouseExtension_5 > 0;
    call {:si_unique_call 484} KeInitializeDpc(MouseIsrDpcRetry__PORT_MOUSE_EXTENSION(MouseExtension_5), li2bplFunctionConstant948, 0);
    assume {:nonnull} MouseExtension_5 != 0;
    assume MouseExtension_5 > 0;
    call {:si_unique_call 485} KeInitializeDpc(MouseIsrResetDpc__PORT_MOUSE_EXTENSION(MouseExtension_5), li2bplFunctionConstant1053, 0);
    assume {:nonnull} MouseExtension_5 != 0;
    assume MouseExtension_5 > 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:nonnull} MouseExtension_5 != 0;
    assume MouseExtension_5 > 0;
    call {:si_unique_call 486} KeInitializeDpc(Dpc__ENABLE_MOUSE(EnableMouse__PORT_MOUSE_EXTENSION(MouseExtension_5)), li2bplFunctionConstant1055, 0);
    call {:si_unique_call 487} KeInitializeTimerEx(0, 1);
    assume {:nonnull} MouseExtension_5 != 0;
    assume MouseExtension_5 > 0;
    goto L87;

  L87:
    call {:si_unique_call 488} vslice_dummy_var_77 := I8xInitWmi(MouseExtension_5);
    assume {:nonnull} MouseExtension_5 != 0;
    assume MouseExtension_5 > 0;
    call {:si_unique_call 489} vslice_dummy_var_79 := IoRegisterPlugPlayNotification(1, 0, 0, 0, li2bplFunctionConstant1056, 0, 0);
    havoc Tmp_345;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} Tmp_345 == 1;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    havoc Tmp_344;
    goto L102;

  L102:
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} Tmp_344 != 0;
    goto L96;

  L96:
    havoc vslice_dummy_var_204;
    call {:si_unique_call 490} status_18 := I8xMouseInitializeHardware(vslice_dummy_var_204, MouseExtension_5);
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} yogi_error != 1;
    goto L21;

  anon48_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon40_Then:
    assume {:partition} Tmp_344 == 0;
    goto L21;

  anon39_Then:
    Tmp_344 := 0;
    goto L102;

  anon47_Then:
    assume {:partition} Tmp_345 != 1;
    goto L96;

  anon38_Then:
    assume {:nonnull} MouseExtension_5 != 0;
    assume MouseExtension_5 > 0;
    call {:si_unique_call 491} KeInitializeDpc(Dpc__RESET_MOUSE(ResetMouse__PORT_MOUSE_EXTENSION(MouseExtension_5)), li2bplFunctionConstant1054, 0);
    call {:si_unique_call 492} KeInitializeTimer(0);
    assume {:nonnull} MouseExtension_5 != 0;
    assume MouseExtension_5 > 0;
    goto L87;

  anon46_Then:
    assume {:nonnull} MouseExtension_5 != 0;
    assume MouseExtension_5 > 0;
    assume {:nonnull} dumpData_2 != 0;
    assume dumpData_2 > 0;
    call {:si_unique_call 493} I8xLogError(self_1, -1073414096, 1050, -1073741670, dumpData_2, 1);
    status_18 := -1073741670;
    tryKbInit := 1;
    goto L21;

  anon45_Then:
    goto L44;

  anon37_Then:
    assume {:partition} 0 > status_18;
    call {:si_unique_call 494} sdv_178 := I8xManuallyRemoveDevice(MouseExtension_5);
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} 1 > sdv_178;
    tryKbInit := 1;
    goto L21;

  anon41_Then:
    assume {:partition} sdv_178 >= 1;
    goto L21;

  anon33_Then:
    status_18 := -1073741436;
    goto L21;
}



procedure {:origName "I8xMouseInitializeHardware"} I8xMouseInitializeHardware(actual_KeyboardExtension_4: int, actual_MouseExtension_6: int) returns (Tmp_348: int);
  modifies alloc, Mem_T.CompletionRoutine__IO_STACK_LOCATION, s, yogi_error;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "I8xMouseInitializeHardware"} I8xMouseInitializeHardware(actual_KeyboardExtension_4: int, actual_MouseExtension_6: int) returns (Tmp_348: int)
{
  var {:scalar} Tmp_349: int;
  var {:dopa} {:scalar} keyboardStatus: int;
  var {:dopa} {:scalar} mouseStatus: int;
  var {:scalar} Tmp_351: int;
  var {:scalar} status_19: int;
  var {:scalar} Tmp_352: int;
  var {:pointer} KeyboardExtension_4: int;
  var {:pointer} MouseExtension_6: int;
  var boogieTmp: int;
  var vslice_dummy_var_80: int;

  anon0:
    call {:si_unique_call 495} keyboardStatus := __HAVOC_malloc(4);
    call {:si_unique_call 496} mouseStatus := __HAVOC_malloc(4);
    KeyboardExtension_4 := actual_KeyboardExtension_4;
    MouseExtension_6 := actual_MouseExtension_6;
    assume {:nonnull} keyboardStatus != 0;
    assume keyboardStatus > 0;
    assume {:nonnull} mouseStatus != 0;
    assume mouseStatus > 0;
    status_19 := 0;
    call {:si_unique_call 497} sdv_do_paged_code_check();
    havoc Tmp_352;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} Tmp_352 != 1;
    goto L56;

  L56:
    call {:si_unique_call 498} status_19 := I8xInitializeHardwareAtBoot(keyboardStatus, mouseStatus);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} status_19 == -1073741808;
    call {:si_unique_call 499} vslice_dummy_var_80 := I8xManuallyRemoveDevice(MouseExtension_6);
    goto L20;

  L20:
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} status_19 >= 0;
    assume {:nonnull} keyboardStatus != 0;
    assume keyboardStatus > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    goto L27;

  L27:
    call {:si_unique_call 500} status_19 := I8xKeyboardConnectInterrupt(KeyboardExtension_4);
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} yogi_error != 1;
    goto L31;

  L31:
    assume {:nonnull} mouseStatus != 0;
    assume mouseStatus > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    goto L33;

  L33:
    assume {:nonnull} mouseStatus != 0;
    assume mouseStatus > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    Tmp_349 := 0;
    goto L36;

  L36:
    Tmp_351 := Tmp_349;
    assume {:nonnull} mouseStatus != 0;
    assume mouseStatus > 0;
    call {:si_unique_call 501} boogieTmp := I8xMouseConnectInterruptAndEnable(MouseExtension_6, Tmp_351);
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} yogi_error != 1;
    goto L41;

  L41:
    assume {:nonnull} mouseStatus != 0;
    assume mouseStatus > 0;
    havoc Tmp_348;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon30_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon27_Then:
    Tmp_349 := 1;
    goto L36;

  anon25_Then:
    assume {:nonnull} mouseStatus != 0;
    assume mouseStatus > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    goto L41;

  anon26_Then:
    goto L33;

  anon29_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon23_Then:
    assume {:nonnull} keyboardStatus != 0;
    assume keyboardStatus > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    goto L31;

  anon24_Then:
    goto L27;

  anon22_Then:
    assume {:partition} 0 > status_19;
    Tmp_348 := status_19;
    goto L1;

  anon21_Then:
    assume {:partition} status_19 != -1073741808;
    goto L20;

  anon28_Then:
    assume {:partition} Tmp_352 == 1;
    goto L56;
}



procedure {:origName "I8xKeyboardRemoveDeviceInitialized"} I8xKeyboardRemoveDeviceInitialized(actual_KeyboardExtension_5: int);
  modifies alloc, yogi_error;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "I8xKeyboardRemoveDeviceInitialized"} I8xKeyboardRemoveDeviceInitialized(actual_KeyboardExtension_5: int)
{
  var {:pointer} Tmp_355: int;
  var {:scalar} sdv_187: int;
  var {:pointer} irp: int;
  var {:scalar} irql_3: int;
  var {:pointer} KeyboardExtension_5: int;
  var vslice_dummy_var_81: int;
  var vslice_dummy_var_82: int;

  anon0:
    call {:si_unique_call 502} vslice_dummy_var_81 := __HAVOC_malloc(4);
    KeyboardExtension_5 := actual_KeyboardExtension_5;
    irp := 0;
    call {:si_unique_call 503} Tmp_355 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_355 != 0;
    assume Tmp_355 > 0;
    call {:si_unique_call 504} sdv_KeAcquireSpinLock(0, Tmp_355);
    assume {:nonnull} Tmp_355 != 0;
    assume Tmp_355 > 0;
    havoc irql_3;
    call {:si_unique_call 505} vslice_dummy_var_82 := KeRemoveQueueDpc(0);
    assume {:nonnull} KeyboardExtension_5 != 0;
    assume KeyboardExtension_5 > 0;
    havoc irp;
    assume {:nonnull} KeyboardExtension_5 != 0;
    assume KeyboardExtension_5 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} irp != 0;
    assume {:nonnull} irp != 0;
    assume irp > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    goto L22;

  L22:
    irp := 0;
    goto L15;

  L15:
    call {:si_unique_call 506} sdv_KeReleaseSpinLock(0, irql_3);
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} irp != 0;
    call {:si_unique_call 507} I8xCompleteSysButtonIrp(irp, 0, -1073741738);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon13_Then:
    assume {:partition} irp == 0;
    goto L1;

  anon11_Then:
    call {:si_unique_call 508} sdv_187 := sdv_IoSetCancelRoutine(irp, 0);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} sdv_187 == 0;
    goto L22;

  anon12_Then:
    assume {:partition} sdv_187 != 0;
    goto L15;

  anon14_Then:
    assume {:partition} irp == 0;
    goto L15;
}



procedure {:origName "I8xKeyboardRemoveDevice"} I8xKeyboardRemoveDevice(actual_DeviceObject_12: int);
  modifies alloc, yogi_error;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "I8xKeyboardRemoveDevice"} I8xKeyboardRemoveDevice(actual_DeviceObject_12: int)
{
  var {:pointer} keyboardExtension_1: int;
  var {:pointer} DeviceObject_12: int;
  var vslice_dummy_var_83: int;
  var vslice_dummy_var_84: int;

  anon0:
    call {:si_unique_call 509} vslice_dummy_var_83 := __HAVOC_malloc(4);
    DeviceObject_12 := actual_DeviceObject_12;
    assume {:nonnull} DeviceObject_12 != 0;
    assume DeviceObject_12 > 0;
    havoc keyboardExtension_1;
    call {:si_unique_call 510} sdv_do_paged_code_check();
    goto anon15_Then, anon15_Else;

  anon15_Else:
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} keyboardExtension_1 != 0;
    goto L10;

  L10:
    assume {:nonnull} keyboardExtension_1 != 0;
    assume keyboardExtension_1 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    call {:si_unique_call 511} IoDisconnectInterrupt(0);
    assume {:nonnull} keyboardExtension_1 != 0;
    assume keyboardExtension_1 > 0;
    goto L14;

  L14:
    assume {:nonnull} keyboardExtension_1 != 0;
    assume keyboardExtension_1 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    call {:si_unique_call 512} sdv_ExFreePool(0);
    assume {:nonnull} keyboardExtension_1 != 0;
    assume keyboardExtension_1 > 0;
    goto L19;

  L19:
    assume {:nonnull} keyboardExtension_1 != 0;
    assume keyboardExtension_1 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    call {:si_unique_call 513} I8xKeyboardRemoveDeviceInitialized(keyboardExtension_1);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    goto L24;

  L24:
    assume {:nonnull} keyboardExtension_1 != 0;
    assume keyboardExtension_1 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    call {:si_unique_call 514} vslice_dummy_var_84 := IoSetDeviceInterfaceState(0, 0);
    call {:si_unique_call 515} RtlFreeUnicodeString(0);
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon20_Then:
    goto L1;

  anon21_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon19_Then:
    goto L24;

  anon18_Then:
    goto L19;

  anon16_Then:
    goto L14;

  anon17_Then:
    assume {:partition} keyboardExtension_1 == 0;
    goto L10;

  anon15_Then:
    goto L10;
}



procedure {:origName "I8xKeyboardConnectInterrupt"} I8xKeyboardConnectInterrupt(actual_KeyboardExtension_6: int) returns (Tmp_359: int);
  modifies alloc, s, yogi_error, Mem_T.CompletionRoutine__IO_STACK_LOCATION;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "I8xKeyboardConnectInterrupt"} I8xKeyboardConnectInterrupt(actual_KeyboardExtension_6: int) returns (Tmp_359: int)
{
  var {:pointer} self_2: int;
  var {:pointer} topOfStack_1: int;
  var {:scalar} startInfo_1: int;
  var {:scalar} Tmp_361: int;
  var {:pointer} dumpData_3: int;
  var {:pointer} configuration_3: int;
  var {:scalar} Tmp_362: int;
  var {:scalar} status_20: int;
  var {:scalar} Tmp_363: int;
  var {:pointer} KeyboardExtension_6: int;
  var vslice_dummy_var_85: int;
  var vslice_dummy_var_86: int;
  var vslice_dummy_var_87: int;
  var vslice_dummy_var_205: int;
  var vslice_dummy_var_206: int;
  var vslice_dummy_var_207: int;
  var vslice_dummy_var_208: int;

  anon0:
    call {:si_unique_call 516} startInfo_1 := __HAVOC_malloc(12);
    KeyboardExtension_6 := actual_KeyboardExtension_6;
    call {:si_unique_call 517} dumpData_3 := __HAVOC_malloc(4);
    status_20 := 0;
    call {:si_unique_call 518} sdv_do_paged_code_check();
    assume {:nonnull} KeyboardExtension_6 != 0;
    assume KeyboardExtension_6 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    Tmp_359 := 0;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon13_Then:
    havoc configuration_3;
    assume {:nonnull} KeyboardExtension_6 != 0;
    assume KeyboardExtension_6 > 0;
    havoc self_2;
    assume {:nonnull} KeyboardExtension_6 != 0;
    assume KeyboardExtension_6 > 0;
    assume {:nonnull} KeyboardExtension_6 != 0;
    assume KeyboardExtension_6 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    Tmp_363 := 0;
    goto L59;

  L59:
    assume {:nonnull} KeyboardExtension_6 != 0;
    assume KeyboardExtension_6 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    Tmp_361 := 1;
    goto L20;

  L20:
    assume {:nonnull} KeyboardExtension_6 != 0;
    assume KeyboardExtension_6 > 0;
    havoc Tmp_362;
    assume {:nonnull} KeyboardExtension_6 != 0;
    assume KeyboardExtension_6 > 0;
    assume {:nonnull} configuration_3 != 0;
    assume configuration_3 > 0;
    havoc vslice_dummy_var_205;
    havoc vslice_dummy_var_206;
    havoc vslice_dummy_var_207;
    havoc vslice_dummy_var_208;
    call {:si_unique_call 519} status_20 := IoConnectInterrupt(InterruptObject_COMMON_DATA(KeyboardExtension_6), li2bplFunctionConstant912, self_2, 0, vslice_dummy_var_205, Tmp_362, vslice_dummy_var_206, Tmp_361, Tmp_363, vslice_dummy_var_207, vslice_dummy_var_208);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} yogi_error != 1;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} status_20 >= 0;
    call {:si_unique_call 520} topOfStack_1 := IoGetAttachedDeviceReference(self_2);
    call {:si_unique_call 521} sdv_RtlZeroMemory(0, 40);
    assume {:nonnull} startInfo_1 != 0;
    assume startInfo_1 > 0;
    assume {:nonnull} KeyboardExtension_6 != 0;
    assume KeyboardExtension_6 > 0;
    assume {:nonnull} startInfo_1 != 0;
    assume startInfo_1 > 0;
    call {:si_unique_call 522} vslice_dummy_var_87 := I8xSendIoctl(topOfStack_1, 737231, startInfo_1, 40);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 523} vslice_dummy_var_85 := sdv_ObDereferenceObject(0);
    goto L44;

  L44:
    Tmp_359 := status_20;
    goto L1;

  anon18_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon14_Then:
    assume {:partition} 0 > status_20;
    assume {:nonnull} KeyboardExtension_6 != 0;
    assume KeyboardExtension_6 > 0;
    assume {:nonnull} dumpData_3 != 0;
    assume dumpData_3 > 0;
    call {:si_unique_call 524} I8xLogError(self_2, -1073414135, 1080, -1073741670, dumpData_3, 1);
    call {:si_unique_call 525} vslice_dummy_var_86 := I8xManuallyRemoveDevice(KeyboardExtension_6);
    goto L44;

  anon17_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon16_Then:
    Tmp_361 := 0;
    goto L20;

  anon15_Then:
    Tmp_363 := 1;
    goto L59;
}



procedure {:origName "_sdv_init9"} _sdv_init9();
  modifies alloc;



implementation {:origName "_sdv_init9"} _sdv_init9()
{
  var vslice_dummy_var_88: int;

  anon0:
    call {:si_unique_call 526} vslice_dummy_var_88 := __HAVOC_malloc(4);
    assume ScanCodeToUCharCount_5 == 54;
    return;
}



procedure {:origName "I8xKeyboardStartDevice"} I8xKeyboardStartDevice(actual_KeyboardExtension_7: int, actual_ResourceList_2: int) returns (Tmp_366: int);
  modifies alloc, Mem_T.CompletionRoutine__IO_STACK_LOCATION, s, yogi_error;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "I8xKeyboardStartDevice"} I8xKeyboardStartDevice(actual_KeyboardExtension_7: int, actual_ResourceList_2: int) returns (Tmp_366: int)
{
  var {:scalar} tryMouseInit: int;
  var {:pointer} self_3: int;
  var {:pointer} Tmp_367: int;
  var {:scalar} initializeDataContext_1: int;
  var {:pointer} dumpData_4: int;
  var {:scalar} sdv_199: int;
  var {:pointer} sdv_200: int;
  var {:scalar} Tmp_368: int;
  var {:scalar} Tmp_369: int;
  var {:scalar} status_21: int;
  var {:scalar} Tmp_370: int;
  var {:scalar} Tmp_371: int;
  var {:scalar} Tmp_372: int;
  var {:pointer} KeyboardExtension_7: int;
  var {:pointer} ResourceList_2: int;
  var vslice_dummy_var_89: int;
  var vslice_dummy_var_90: int;
  var vslice_dummy_var_91: int;
  var vslice_dummy_var_92: int;
  var vslice_dummy_var_209: int;
  var vslice_dummy_var_210: int;
  var vslice_dummy_var_211: int;
  var vslice_dummy_var_212: int;
  var vslice_dummy_var_213: int;

  anon0:
    call {:si_unique_call 527} initializeDataContext_1 := __HAVOC_malloc(8);
    KeyboardExtension_7 := actual_KeyboardExtension_7;
    ResourceList_2 := actual_ResourceList_2;
    call {:si_unique_call 528} dumpData_4 := __HAVOC_malloc(4);
    status_21 := 0;
    tryMouseInit := 0;
    call {:si_unique_call 529} sdv_do_paged_code_check();
    havoc Tmp_369;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} Tmp_369 == 256;
    call {:si_unique_call 530} Tmp_367 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_367 != 0;
    assume Tmp_367 > 0;
    call {:si_unique_call 531} vslice_dummy_var_92 := sdv_InterlockedDecrement(Tmp_367);
    assume {:nonnull} Tmp_367 != 0;
    assume Tmp_367 > 0;
    status_21 := -1073741810;
    goto L21;

  L21:
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} tryMouseInit != 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    havoc Tmp_371;
    goto L26;

  L26:
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:partition} Tmp_371 != 0;
    havoc Tmp_370;
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} Tmp_370 != 512;
    havoc vslice_dummy_var_209;
    call {:si_unique_call 532} vslice_dummy_var_89 := I8xMouseInitializeHardware(KeyboardExtension_7, vslice_dummy_var_209);
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} yogi_error != 1;
    goto L22;

  L22:
    Tmp_366 := status_21;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon50_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon49_Then:
    assume {:partition} Tmp_370 == 512;
    goto L22;

  anon40_Then:
    assume {:partition} Tmp_371 == 0;
    goto L22;

  anon39_Then:
    Tmp_371 := 0;
    goto L26;

  anon38_Then:
    assume {:partition} tryMouseInit == 0;
    goto L22;

  anon48_Then:
    assume {:partition} Tmp_369 != 256;
    assume {:nonnull} KeyboardExtension_7 != 0;
    assume KeyboardExtension_7 > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    call {:si_unique_call 533} status_21 := I8xKeyboardConfiguration(KeyboardExtension_7, ResourceList_2);
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:partition} status_21 >= 0;
    assume {:nonnull} KeyboardExtension_7 != 0;
    assume KeyboardExtension_7 > 0;
    havoc self_3;
    assume {:nonnull} KeyboardExtension_7 != 0;
    assume KeyboardExtension_7 > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:nonnull} KeyboardExtension_7 != 0;
    assume KeyboardExtension_7 > 0;
    goto L44;

  L44:
    assume {:nonnull} KeyboardExtension_7 != 0;
    assume KeyboardExtension_7 > 0;
    assume {:nonnull} KeyboardExtension_7 != 0;
    assume KeyboardExtension_7 > 0;
    assume {:nonnull} KeyboardExtension_7 != 0;
    assume KeyboardExtension_7 > 0;
    assume {:nonnull} KeyboardExtension_7 != 0;
    assume KeyboardExtension_7 > 0;
    call {:si_unique_call 534} I8xKeyboardServiceParameters(RegistryPath__GLOBALS(Globals), KeyboardExtension_7);
    assume {:nonnull} KeyboardExtension_7 != 0;
    assume KeyboardExtension_7 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    goto L56;

  L56:
    assume {:nonnull} KeyboardExtension_7 != 0;
    assume KeyboardExtension_7 > 0;
    goto anon43_Then, anon43_Else;

  anon43_Else:
    goto L60;

  L60:
    assume {:nonnull} KeyboardExtension_7 != 0;
    assume KeyboardExtension_7 > 0;
    havoc vslice_dummy_var_210;
    call {:si_unique_call 535} sdv_200 := ExAllocatePoolWithTag(512, vslice_dummy_var_210, 842281016);
    assume {:nonnull} KeyboardExtension_7 != 0;
    assume KeyboardExtension_7 > 0;
    assume {:nonnull} KeyboardExtension_7 != 0;
    assume KeyboardExtension_7 > 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:nonnull} KeyboardExtension_7 != 0;
    assume KeyboardExtension_7 > 0;
    assume {:nonnull} KeyboardExtension_7 != 0;
    assume KeyboardExtension_7 > 0;
    havoc vslice_dummy_var_211;
    call {:si_unique_call 536} sdv_RtlZeroMemory(0, vslice_dummy_var_211);
    assume {:nonnull} initializeDataContext_1 != 0;
    assume initializeDataContext_1 > 0;
    assume {:nonnull} initializeDataContext_1 != 0;
    assume initializeDataContext_1 > 0;
    call {:si_unique_call 537} I8xInitializeDataQueue(initializeDataContext_1);
    assume {:nonnull} KeyboardExtension_7 != 0;
    assume KeyboardExtension_7 > 0;
    assume {:nonnull} KeyboardExtension_7 != 0;
    assume KeyboardExtension_7 > 0;
    call {:si_unique_call 538} KeInitializeDpc(KeyboardIsrDpc__PORT_KEYBOARD_EXTENSION(KeyboardExtension_7), li2bplFunctionConstant900, 0);
    assume {:nonnull} KeyboardExtension_7 != 0;
    assume KeyboardExtension_7 > 0;
    call {:si_unique_call 539} KeInitializeDpc(KeyboardIsrDpcRetry__PORT_KEYBOARD_EXTENSION(KeyboardExtension_7), li2bplFunctionConstant900, 0);
    assume {:nonnull} KeyboardExtension_7 != 0;
    assume KeyboardExtension_7 > 0;
    call {:si_unique_call 540} KeInitializeDpc(SysButtonEventDpc__PORT_KEYBOARD_EXTENSION(KeyboardExtension_7), li2bplFunctionConstant274, 0);
    call {:si_unique_call 541} Tmp_367 := __HAVOC_malloc(4);
    assume {:nonnull} KeyboardExtension_7 != 0;
    assume KeyboardExtension_7 > 0;
    assume {:nonnull} Tmp_367 != 0;
    assume Tmp_367 > 0;
    call {:si_unique_call 542} sdv_KeInitializeSpinLock(Tmp_367);
    assume {:nonnull} KeyboardExtension_7 != 0;
    assume KeyboardExtension_7 > 0;
    assume {:nonnull} Tmp_367 != 0;
    assume Tmp_367 > 0;
    assume {:nonnull} KeyboardExtension_7 != 0;
    assume KeyboardExtension_7 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:nonnull} KeyboardExtension_7 != 0;
    assume KeyboardExtension_7 > 0;
    havoc vslice_dummy_var_212;
    call {:si_unique_call 543} vslice_dummy_var_91 := I8xRegisterDeviceInterface(vslice_dummy_var_212, GUID_DEVICE_SYS_BUTTON, SysButtonInterfaceName__PORT_KEYBOARD_EXTENSION(KeyboardExtension_7));
    goto L89;

  L89:
    call {:si_unique_call 544} vslice_dummy_var_90 := I8xInitWmi(KeyboardExtension_7);
    assume {:nonnull} KeyboardExtension_7 != 0;
    assume KeyboardExtension_7 > 0;
    havoc Tmp_368;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:partition} Tmp_368 == 2;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    havoc Tmp_372;
    goto L104;

  L104:
    goto anon46_Then, anon46_Else;

  anon46_Else:
    assume {:partition} Tmp_372 != 0;
    goto L98;

  L98:
    havoc vslice_dummy_var_213;
    call {:si_unique_call 545} status_21 := I8xKeyboardInitializeHardware(KeyboardExtension_7, vslice_dummy_var_213);
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} yogi_error != 1;
    goto L21;

  anon54_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon46_Then:
    assume {:partition} Tmp_372 == 0;
    goto L21;

  anon45_Then:
    Tmp_372 := 0;
    goto L104;

  anon53_Then:
    assume {:partition} Tmp_368 != 2;
    goto L98;

  anon44_Then:
    goto L89;

  anon52_Then:
    assume {:nonnull} KeyboardExtension_7 != 0;
    assume KeyboardExtension_7 > 0;
    assume {:nonnull} dumpData_4 != 0;
    assume dumpData_4 > 0;
    call {:si_unique_call 546} I8xLogError(self_3, -1073414142, 1050, -1073741670, dumpData_4, 1);
    status_21 := -1073741670;
    tryMouseInit := 1;
    goto L21;

  anon43_Then:
    call {:si_unique_call 547} I8xServiceDebugEnable(KeyboardExtension_7, RegistryPath__GLOBALS(Globals));
    goto L60;

  anon42_Then:
    call {:si_unique_call 548} I8xServiceCrashDump(KeyboardExtension_7, RegistryPath__GLOBALS(Globals));
    goto L56;

  anon51_Then:
    goto L44;

  anon41_Then:
    assume {:partition} 0 > status_21;
    call {:si_unique_call 549} sdv_199 := I8xManuallyRemoveDevice(KeyboardExtension_7);
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} 1 > sdv_199;
    tryMouseInit := 1;
    goto L21;

  anon47_Then:
    assume {:partition} sdv_199 >= 1;
    goto L21;

  anon37_Then:
    Tmp_366 := -1073741436;
    goto L1;
}



procedure {:origName "I8xKeyboardInitializeHardware"} I8xKeyboardInitializeHardware(actual_KeyboardExtension_8: int, actual_MouseExtension_8: int) returns (Tmp_373: int);
  modifies alloc, Mem_T.CompletionRoutine__IO_STACK_LOCATION, s, yogi_error;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "I8xKeyboardInitializeHardware"} I8xKeyboardInitializeHardware(actual_KeyboardExtension_8: int, actual_MouseExtension_8: int) returns (Tmp_373: int)
{
  var {:scalar} Tmp_374: int;
  var {:scalar} Tmp_376: int;
  var {:dopa} {:scalar} keyboardStatus_1: int;
  var {:scalar} Tmp_377: int;
  var {:dopa} {:scalar} mouseStatus_1: int;
  var {:scalar} status_22: int;
  var {:pointer} KeyboardExtension_8: int;
  var {:pointer} MouseExtension_8: int;
  var boogieTmp: int;

  anon0:
    call {:si_unique_call 550} keyboardStatus_1 := __HAVOC_malloc(4);
    call {:si_unique_call 551} mouseStatus_1 := __HAVOC_malloc(4);
    KeyboardExtension_8 := actual_KeyboardExtension_8;
    MouseExtension_8 := actual_MouseExtension_8;
    assume {:nonnull} keyboardStatus_1 != 0;
    assume keyboardStatus_1 > 0;
    assume {:nonnull} mouseStatus_1 != 0;
    assume mouseStatus_1 > 0;
    call {:si_unique_call 552} sdv_do_paged_code_check();
    havoc Tmp_377;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} Tmp_377 != 2;
    goto L50;

  L50:
    call {:si_unique_call 553} status_22 := I8xInitializeHardwareAtBoot(keyboardStatus_1, mouseStatus_1);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} status_22 >= 0;
    assume {:nonnull} mouseStatus_1 != 0;
    assume mouseStatus_1 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    goto L22;

  L22:
    assume {:nonnull} mouseStatus_1 != 0;
    assume mouseStatus_1 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    Tmp_374 := 0;
    goto L25;

  L25:
    Tmp_376 := Tmp_374;
    call {:si_unique_call 554} status_22 := I8xMouseConnectInterruptAndEnable(MouseExtension_8, Tmp_376);
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} yogi_error != 1;
    goto L31;

  L31:
    assume {:nonnull} keyboardStatus_1 != 0;
    assume keyboardStatus_1 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    goto L33;

  L33:
    assume {:nonnull} keyboardStatus_1 != 0;
    assume keyboardStatus_1 > 0;
    call {:si_unique_call 555} boogieTmp := I8xKeyboardConnectInterrupt(KeyboardExtension_8);
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} yogi_error != 1;
    goto L37;

  L37:
    assume {:nonnull} keyboardStatus_1 != 0;
    assume keyboardStatus_1 > 0;
    havoc Tmp_373;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon27_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon23_Then:
    assume {:nonnull} keyboardStatus_1 != 0;
    assume keyboardStatus_1 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    goto L37;

  anon24_Then:
    goto L33;

  anon26_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon22_Then:
    Tmp_374 := 1;
    goto L25;

  anon20_Then:
    assume {:nonnull} mouseStatus_1 != 0;
    assume mouseStatus_1 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    goto L31;

  anon21_Then:
    goto L22;

  anon19_Then:
    assume {:partition} 0 > status_22;
    Tmp_373 := status_22;
    goto L1;

  anon25_Then:
    assume {:partition} Tmp_377 == 2;
    goto L50;
}



procedure {:origName "I8xSendResetCommand"} I8xSendResetCommand(actual_MouseExtension_9: int);
  modifies alloc;



implementation {:origName "I8xSendResetCommand"} I8xSendResetCommand(actual_MouseExtension_9: int)
{
  var {:pointer} structPtr888li: int;
  var {:pointer} s_p_e_c_i_a_l_5: int;
  var {:scalar} li: int;
  var {:pointer} Tmp_378: int;
  var {:pointer} Tmp_381: int;
  var {:pointer} MouseExtension_9: int;
  var vslice_dummy_var_93: int;
  var vslice_dummy_var_94: int;
  var vslice_dummy_var_95: int;
  var vslice_dummy_var_96: int;

  anon0:
    call {:si_unique_call 556} vslice_dummy_var_93 := __HAVOC_malloc(20);
    call {:si_unique_call 557} li := __HAVOC_malloc(20);
    call {:si_unique_call 558} vslice_dummy_var_94 := __HAVOC_malloc(4);
    MouseExtension_9 := actual_MouseExtension_9;
    call {:si_unique_call 559} structPtr888li := RtlConvertLongToLargeInteger(-15000000);
    assume {:nonnull} li != 0;
    assume li > 0;
    assume {:nonnull} structPtr888li != 0;
    assume structPtr888li > 0;
    assume {:nonnull} li != 0;
    assume li > 0;
    assume {:nonnull} structPtr888li != 0;
    assume structPtr888li > 0;
    assume {:nonnull} li != 0;
    assume li > 0;
    assume {:nonnull} structPtr888li != 0;
    assume structPtr888li > 0;
    assume {:nonnull} li != 0;
    assume li > 0;
    assume {:nonnull} structPtr888li != 0;
    assume structPtr888li > 0;
    assume {:nonnull} li != 0;
    assume li > 0;
    assume {:nonnull} structPtr888li != 0;
    assume structPtr888li > 0;
    assume {:nonnull} MouseExtension_9 != 0;
    assume MouseExtension_9 > 0;
    call {:si_unique_call 560} vslice_dummy_var_96 := KeSetTimer(0, li, 0);
    assume {:nonnull} MouseExtension_9 != 0;
    assume MouseExtension_9 > 0;
    assume {:nonnull} MouseExtension_9 != 0;
    assume MouseExtension_9 > 0;
    assume {:nonnull} MouseExtension_9 != 0;
    assume MouseExtension_9 > 0;
    assume {:nonnull} MouseExtension_9 != 0;
    assume MouseExtension_9 > 0;
    Tmp_378 := KeTickCount;
    assume {:nonnull} Tmp_378 != 0;
    assume Tmp_378 > 0;
    havoc s_p_e_c_i_a_l_5;
    goto L19;

  L19:
    call {:si_unique_call 561} Tmp_381 := I8xSendResetCommand_loop_L19(s_p_e_c_i_a_l_5, Tmp_381, MouseExtension_9);
    goto L19_last;

  L19_last:
    assume {:nonnull} MouseExtension_9 != 0;
    assume MouseExtension_9 > 0;
    assume {:nonnull} s_p_e_c_i_a_l_5 != 0;
    assume s_p_e_c_i_a_l_5 > 0;
    assume {:nonnull} MouseExtension_9 != 0;
    assume MouseExtension_9 > 0;
    assume {:nonnull} s_p_e_c_i_a_l_5 != 0;
    assume s_p_e_c_i_a_l_5 > 0;
    assume {:nonnull} MouseExtension_9 != 0;
    assume MouseExtension_9 > 0;
    Tmp_381 := PreviousTick__PORT_MOUSE_EXTENSION(MouseExtension_9);
    assume {:nonnull} Tmp_381 != 0;
    assume Tmp_381 > 0;
    assume {:nonnull} s_p_e_c_i_a_l_5 != 0;
    assume s_p_e_c_i_a_l_5 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 562} vslice_dummy_var_95 := I8xPutBytePolled#1(0, 0, 2, 255);
    return;

  anon3_Then:
    goto anon3_Then_dummy;

  anon3_Then_dummy:
    assume false;
    return;
}



procedure {:origName "I8xGetBytePolledIterated"} I8xGetBytePolledIterated(actual_DeviceType_2: int, actual_Byte_6: int, actual_Attempts: int) returns (Tmp_382: int);
  modifies alloc;
  free ensures Tmp_382 == -1073741643 || Tmp_382 == 0 || Tmp_382 == -1073741823;



implementation {:origName "I8xGetBytePolledIterated"} I8xGetBytePolledIterated(actual_DeviceType_2: int, actual_Byte_6: int, actual_Attempts: int) returns (Tmp_382: int)
{
  var {:scalar} i_11: int;
  var {:scalar} status_23: int;
  var {:pointer} Byte_6: int;
  var {:scalar} Attempts: int;

  anon0:
    Byte_6 := actual_Byte_6;
    Attempts := actual_Attempts;
    status_23 := -1073741823;
    call {:si_unique_call 563} sdv_do_paged_code_check();
    i_11 := 0;
    goto L10;

  L10:
    call {:si_unique_call 564} i_11, status_23 := I8xGetBytePolledIterated_loop_L10(i_11, status_23, Byte_6, Attempts);
    goto L10_last;

  L10_last:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} Attempts > i_11;
    call {:si_unique_call 565} status_23 := I8xGetBytePolled(0, Byte_6);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} status_23 < 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} status_23 == -1073741643;
    i_11 := i_11 + 1;
    goto anon9_Else_dummy;

  anon9_Else_dummy:
    assume false;
    return;

  anon9_Then:
    assume {:partition} status_23 != -1073741643;
    goto L11;

  L11:
    Tmp_382 := status_23;
    return;

  anon8_Then:
    assume {:partition} 0 <= status_23;
    goto L11;

  anon7_Then:
    assume {:partition} i_11 >= Attempts;
    goto L11;
}



procedure {:origName "I8xFindWheelMouse"} I8xFindWheelMouse(actual_MouseExtension_10: int) returns (Tmp_384: int);
  modifies alloc;



implementation {:origName "I8xFindWheelMouse"} I8xFindWheelMouse(actual_MouseExtension_10: int) returns (Tmp_384: int)
{
  var {:scalar} i_12: int;
  var {:pointer} pnpCommands: int;
  var {:scalar} Tmp_385: int;
  var {:pointer} Tmp_386: int;
  var {:scalar} Tmp_387: int;
  var {:pointer} errorLogEntry_1: int;
  var {:scalar} idCount: int;
  var {:pointer} currentChar: int;
  var {:pointer} enable5Commands: int;
  var {:pointer} sdv_216: int;
  var {:pointer} dumpData_5: int;
  var {:scalar} Tmp_389: int;
  var {:dopa} {:scalar} byte_2: int;
  var {:scalar} Tmp_390: int;
  var {:pointer} enableCommands: int;
  var {:dopa} {:scalar} uniqueErrorValue: int;
  var {:scalar} Tmp_391: int;
  var {:scalar} sdv_217: int;
  var {:scalar} status_24: int;
  var {:dopa} {:scalar} dumpCount: int;
  var {:dopa} {:scalar} errorCode: int;
  var {:pointer} mouseID: int;
  var {:scalar} Tmp_392: int;
  var {:pointer} MouseExtension_10: int;

  anon0:
    call {:si_unique_call 566} byte_2 := __HAVOC_malloc(4);
    call {:si_unique_call 567} uniqueErrorValue := __HAVOC_malloc(4);
    call {:si_unique_call 568} dumpCount := __HAVOC_malloc(4);
    call {:si_unique_call 569} errorCode := __HAVOC_malloc(4);
    MouseExtension_10 := actual_MouseExtension_10;
    call {:si_unique_call 570} pnpCommands := __HAVOC_malloc(28);
    call {:si_unique_call 571} Tmp_386 := __HAVOC_malloc(4);
    call {:si_unique_call 572} enable5Commands := __HAVOC_malloc(32);
    call {:si_unique_call 573} dumpData_5 := __HAVOC_malloc(16);
    call {:si_unique_call 574} enableCommands := __HAVOC_malloc(32);
    call {:si_unique_call 575} mouseID := __HAVOC_malloc(32);
    assume {:nonnull} errorCode != 0;
    assume errorCode > 0;
    assume {:nonnull} enableCommands != 0;
    assume enableCommands > 0;
    assume {:nonnull} enable5Commands != 0;
    assume enable5Commands > 0;
    assume {:nonnull} pnpCommands != 0;
    assume pnpCommands > 0;
    assume {:nonnull} dumpCount != 0;
    assume dumpCount > 0;
    assume {:nonnull} uniqueErrorValue != 0;
    assume uniqueErrorValue > 0;
    call {:si_unique_call 576} sdv_do_paged_code_check();
    assume {:nonnull} MouseExtension_10 != 0;
    assume MouseExtension_10 > 0;
    goto anon51_Then, anon51_Else;

  anon51_Else:
    i_12 := 0;
    goto L29;

  L29:
    call {:si_unique_call 577} i_12, Tmp_389 := I8xFindWheelMouse_loop_L29(i_12, dumpData_5, Tmp_389);
    goto L29_last;

  L29_last:
    assume {:CounterLoop 4} {:Counter "i_12"} true;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    assume {:partition} 4 > i_12;
    Tmp_389 := i_12;
    assume {:nonnull} dumpData_5 != 0;
    assume dumpData_5 > 0;
    i_12 := i_12 + 1;
    goto anon52_Else_dummy;

  anon52_Else_dummy:
    assume false;
    return;

  anon52_Then:
    assume {:partition} i_12 >= 4;
    assume {:nonnull} MouseExtension_10 != 0;
    assume MouseExtension_10 > 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:nonnull} MouseExtension_10 != 0;
    assume MouseExtension_10 > 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    call {:si_unique_call 578} status_24 := I8xTransmitByteSequence(pnpCommands, uniqueErrorValue, errorCode, dumpData_5, dumpCount);
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} status_24 >= 0;
    call {:si_unique_call 579} sdv_RtlZeroMemory(0, 16);
    currentChar := mouseID;
    idCount := 0;
    goto L114;

  L114:
    call {:si_unique_call 580} Tmp_387, idCount, status_24 := I8xFindWheelMouse_loop_L114(Tmp_387, idCount, currentChar, byte_2, status_24);
    goto L114_last;

  L114_last:
    assume {:CounterLoop 7} {:Counter "idCount"} true;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} 7 > idCount;
    call {:si_unique_call 581} status_24 := I8xGetBytePolledIterated(0, byte_2, 5);
    assume {:nonnull} byte_2 != 0;
    assume byte_2 > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:nonnull} byte_2 != 0;
    assume byte_2 > 0;
    havoc Tmp_387;
    assume {:nonnull} currentChar != 0;
    assume currentChar > 0;
    assume {:nonnull} currentChar != 0;
    assume currentChar > 0;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    goto L123;

  L123:
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} status_24 < 0;
    goto L161;

  L161:
    call {:si_unique_call 582} status_24 := I8xFindWheelMouse_loop_L161(byte_2, status_24);
    goto L161_last;

  L161_last:
    call {:si_unique_call 591} status_24 := I8xGetBytePolled(0, byte_2);
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} status_24 != -1073741643;
    goto anon71_Else_dummy;

  anon71_Else_dummy:
    assume false;
    return;

  anon71_Then:
    assume {:partition} status_24 == -1073741643;
    Tmp_384 := -1073741810;
    goto L1;

  L1:
    return;

  anon70_Then:
    assume {:partition} 0 <= status_24;
    idCount := idCount + 1;
    goto anon70_Then_dummy;

  anon70_Then_dummy:
    assume false;
    return;

  anon75_Then:
    goto L123;

  anon69_Then:
    goto L123;

  anon68_Then:
    assume {:partition} idCount >= 7;
    call {:si_unique_call 583} sdv_217 := I8xVerifyMousePnPID(MouseExtension_10, mouseID);
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} sdv_217 == 0;
    Tmp_384 := -1073741810;
    goto L1;

  anon72_Then:
    assume {:partition} sdv_217 != 0;
    goto L40;

  L40:
    call {:si_unique_call 584} status_24 := I8xTransmitByteSequence(enableCommands, uniqueErrorValue, errorCode, dumpData_5, dumpCount);
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} status_24 < 0;
    goto L63;

  L63:
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} status_24 >= 0;
    goto L73;

  L73:
    Tmp_384 := status_24;
    goto L1;

  anon60_Then:
    assume {:partition} 0 > status_24;
    assume {:nonnull} errorCode != 0;
    assume errorCode > 0;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:nonnull} dumpCount != 0;
    assume dumpCount > 0;
    havoc Tmp_392;
    call {:si_unique_call 585} sdv_216 := IoAllocateErrorLogEntry(0, Tmp_392);
    errorLogEntry_1 := sdv_216;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} errorLogEntry_1 != 0;
    assume {:nonnull} errorCode != 0;
    assume errorCode > 0;
    assume {:nonnull} errorLogEntry_1 != 0;
    assume errorLogEntry_1 > 0;
    assume {:nonnull} dumpCount != 0;
    assume dumpCount > 0;
    assume {:nonnull} errorLogEntry_1 != 0;
    assume errorLogEntry_1 > 0;
    assume {:nonnull} errorLogEntry_1 != 0;
    assume errorLogEntry_1 > 0;
    assume {:nonnull} errorLogEntry_1 != 0;
    assume errorLogEntry_1 > 0;
    assume {:nonnull} errorLogEntry_1 != 0;
    assume errorLogEntry_1 > 0;
    assume {:nonnull} errorLogEntry_1 != 0;
    assume errorLogEntry_1 > 0;
    assume {:nonnull} errorLogEntry_1 != 0;
    assume errorLogEntry_1 > 0;
    assume {:nonnull} uniqueErrorValue != 0;
    assume uniqueErrorValue > 0;
    assume {:nonnull} errorLogEntry_1 != 0;
    assume errorLogEntry_1 > 0;
    i_12 := 0;
    goto L89;

  L89:
    call {:si_unique_call 586} i_12, Tmp_385, Tmp_386, Tmp_390 := I8xFindWheelMouse_loop_L89(i_12, Tmp_385, Tmp_386, errorLogEntry_1, dumpData_5, Tmp_390, dumpCount);
    goto L89_last;

  L89_last:
    assume {:nonnull} dumpCount != 0;
    assume dumpCount > 0;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    Tmp_390 := i_12;
    assume {:nonnull} errorLogEntry_1 != 0;
    assume errorLogEntry_1 > 0;
    havoc Tmp_386;
    Tmp_385 := i_12;
    assume {:nonnull} Tmp_386 != 0;
    assume Tmp_386 > 0;
    assume {:nonnull} dumpData_5 != 0;
    assume dumpData_5 > 0;
    i_12 := i_12 + 1;
    goto anon64_Else_dummy;

  anon64_Else_dummy:
    assume false;
    return;

  anon64_Then:
    call {:si_unique_call 587} IoWriteErrorLogEntry(0);
    goto L73;

  anon74_Then:
    assume {:partition} errorLogEntry_1 == 0;
    goto L73;

  anon63_Then:
    goto L73;

  anon54_Then:
    assume {:partition} 0 <= status_24;
    call {:si_unique_call 588} status_24 := I8xGetBytePolledIterated(0, byte_2, 5);
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} status_24 >= 0;
    assume {:nonnull} byte_2 != 0;
    assume byte_2 > 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:nonnull} byte_2 != 0;
    assume byte_2 > 0;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    goto L53;

  L53:
    assume {:nonnull} byte_2 != 0;
    assume byte_2 > 0;
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:nonnull} MouseExtension_10 != 0;
    assume MouseExtension_10 > 0;
    call {:si_unique_call 589} status_24 := I8xTransmitByteSequence(enable5Commands, uniqueErrorValue, errorCode, dumpData_5, dumpCount);
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} status_24 >= 0;
    call {:si_unique_call 590} status_24 := I8xGetBytePolledIterated(0, byte_2, 5);
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} status_24 >= 0;
    assume {:nonnull} byte_2 != 0;
    assume byte_2 > 0;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:nonnull} MouseExtension_10 != 0;
    assume MouseExtension_10 > 0;
    goto L63;

  anon62_Then:
    goto L63;

  anon61_Then:
    assume {:partition} 0 > status_24;
    goto L63;

  anon59_Then:
    assume {:partition} 0 > status_24;
    goto L63;

  anon57_Then:
    goto L63;

  anon58_Then:
    goto L51;

  L51:
    assume {:nonnull} errorCode != 0;
    assume errorCode > 0;
    assume {:nonnull} dumpData_5 != 0;
    assume dumpData_5 > 0;
    assume {:nonnull} dumpData_5 != 0;
    assume dumpData_5 > 0;
    assume {:nonnull} dumpData_5 != 0;
    assume dumpData_5 > 0;
    assume {:nonnull} byte_2 != 0;
    assume byte_2 > 0;
    assume {:nonnull} dumpData_5 != 0;
    assume dumpData_5 > 0;
    assume {:nonnull} dumpCount != 0;
    assume dumpCount > 0;
    goto L63;

  anon56_Then:
    goto L53;

  anon55_Then:
    assume {:partition} 0 > status_24;
    goto L51;

  anon67_Then:
    assume {:partition} 0 > status_24;
    goto L63;

  anon65_Then:
    assume {:nonnull} MouseExtension_10 != 0;
    assume MouseExtension_10 > 0;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    Tmp_384 := -1073741810;
    goto L1;

  anon66_Then:
    goto L40;

  anon53_Then:
    havoc Tmp_391;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} Tmp_391 == 8;
    goto L40;

  anon73_Then:
    assume {:partition} Tmp_391 != 8;
    Tmp_384 := -1073741810;
    goto L1;

  anon51_Then:
    Tmp_384 := -1073741810;
    goto L1;
}



procedure {:origName "I8xInitializeMouse"} I8xInitializeMouse(actual_MouseExtension_11: int) returns (Tmp_393: int);
  modifies alloc;



implementation {:origName "I8xInitializeMouse"} I8xInitializeMouse(actual_MouseExtension_11: int) returns (Tmp_393: int)
{
  var {:scalar} i_13: int;
  var {:scalar} tenSeconds: int;
  var {:pointer} s_p_e_c_i_a_l_6: int;
  var {:pointer} deviceObject_1: int;
  var {:scalar} okToLogError: int;
  var {:scalar} Tmp_394: int;
  var {:pointer} Tmp_395: int;
  var {:scalar} Tmp_396: int;
  var {:scalar} Tmp_397: int;
  var {:scalar} li_4: int;
  var {:dopa} {:scalar} numButtons: int;
  var {:pointer} s_p_e_c_i_a_l_7: int;
  var {:pointer} Tmp_398: int;
  var {:scalar} Tmp_399: int;
  var {:scalar} sdv_226: int;
  var {:pointer} dumpData_6: int;
  var {:scalar} difference_1: int;
  var {:dopa} {:scalar} byte_3: int;
  var {:scalar} uniqueErrorValue_1: int;
  var {:scalar} status_25: int;
  var {:scalar} dumpCount_1: int;
  var {:pointer} deviceExtension_4: int;
  var {:scalar} startOfSpin_1: int;
  var {:scalar} nextQuery_1: int;
  var {:scalar} errorCode_1: int;
  var {:pointer} MouseExtension_11: int;
  var vslice_dummy_var_97: int;
  var vslice_dummy_var_98: int;
  var vslice_dummy_var_214: int;

  anon0:
    call {:si_unique_call 592} tenSeconds := __HAVOC_malloc(20);
    call {:si_unique_call 593} li_4 := __HAVOC_malloc(20);
    call {:si_unique_call 594} numButtons := __HAVOC_malloc(4);
    call {:si_unique_call 595} difference_1 := __HAVOC_malloc(20);
    call {:si_unique_call 596} byte_3 := __HAVOC_malloc(4);
    call {:si_unique_call 597} startOfSpin_1 := __HAVOC_malloc(20);
    call {:si_unique_call 598} nextQuery_1 := __HAVOC_malloc(20);
    MouseExtension_11 := actual_MouseExtension_11;
    call {:si_unique_call 599} dumpData_6 := __HAVOC_malloc(16);
    errorCode_1 := 0;
    dumpCount_1 := 0;
    call {:si_unique_call 600} sdv_do_paged_code_check();
    i_13 := 0;
    goto L26;

  L26:
    call {:si_unique_call 601} i_13, Tmp_394 := I8xInitializeMouse_loop_L26(i_13, Tmp_394, dumpData_6);
    goto L26_last;

  L26_last:
    assume {:CounterLoop 4} {:Counter "i_13"} true;
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} 4 > i_13;
    Tmp_394 := i_13;
    assume {:nonnull} dumpData_6 != 0;
    assume dumpData_6 > 0;
    i_13 := i_13 + 1;
    goto anon47_Else_dummy;

  anon47_Else_dummy:
    assume false;
    return;

  anon47_Then:
    assume {:partition} i_13 >= 4;
    deviceExtension_4 := MouseExtension_11;
    assume {:nonnull} deviceExtension_4 != 0;
    assume deviceExtension_4 > 0;
    havoc deviceObject_1;
    okToLogError := 1;
    call {:si_unique_call 602} status_25 := I8xPutBytePolled#1(0, 1, 2, 255);
    goto anon48_Then, anon48_Else;

  anon48_Else:
    assume {:partition} status_25 >= 0;
    assume {:nonnull} deviceExtension_4 != 0;
    assume deviceExtension_4 > 0;
    assume {:nonnull} deviceExtension_4 != 0;
    assume deviceExtension_4 > 0;
    assume {:nonnull} deviceExtension_4 != 0;
    assume deviceExtension_4 > 0;
    assume {:nonnull} deviceExtension_4 != 0;
    assume deviceExtension_4 > 0;
    assume {:nonnull} li_4 != 0;
    assume li_4 > 0;
    assume {:nonnull} tenSeconds != 0;
    assume tenSeconds > 0;
    Tmp_398 := KeTickCount;
    assume {:nonnull} Tmp_398 != 0;
    assume Tmp_398 > 0;
    havoc s_p_e_c_i_a_l_6;
    goto L47;

  L47:
    call {:si_unique_call 603} I8xInitializeMouse_loop_L47(s_p_e_c_i_a_l_6, startOfSpin_1);
    goto L47_last;

  L47_last:
    assume {:nonnull} s_p_e_c_i_a_l_6 != 0;
    assume s_p_e_c_i_a_l_6 > 0;
    assume {:nonnull} startOfSpin_1 != 0;
    assume startOfSpin_1 > 0;
    assume {:nonnull} s_p_e_c_i_a_l_6 != 0;
    assume s_p_e_c_i_a_l_6 > 0;
    assume {:nonnull} startOfSpin_1 != 0;
    assume startOfSpin_1 > 0;
    assume {:nonnull} s_p_e_c_i_a_l_6 != 0;
    assume s_p_e_c_i_a_l_6 > 0;
    assume {:nonnull} startOfSpin_1 != 0;
    assume startOfSpin_1 > 0;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    goto L56;

  L56:
    call {:si_unique_call 604} Tmp_395, s_p_e_c_i_a_l_7, sdv_226, status_25, vslice_dummy_var_97 := I8xInitializeMouse_loop_L56(tenSeconds, Tmp_395, s_p_e_c_i_a_l_7, sdv_226, difference_1, byte_3, status_25, startOfSpin_1, nextQuery_1, vslice_dummy_var_97);
    goto L56_last;

  L56_last:
    call {:si_unique_call 616} status_25 := I8xGetBytePolled(0, byte_3);
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} status_25 >= 0;
    assume {:nonnull} byte_3 != 0;
    assume byte_3 > 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    goto L61;

  L61:
    goto anon51_Then, anon51_Else;

  anon51_Else:
    assume {:partition} status_25 == -1073741643;
    call {:si_unique_call 605} vslice_dummy_var_97 := KeDelayExecutionThread(0, 0, 0);
    Tmp_395 := KeTickCount;
    assume {:nonnull} Tmp_395 != 0;
    assume Tmp_395 > 0;
    havoc s_p_e_c_i_a_l_7;
    goto L71;

  L71:
    call {:si_unique_call 606} I8xInitializeMouse_loop_L71(s_p_e_c_i_a_l_7, nextQuery_1);
    goto L71_last;

  L71_last:
    assume {:nonnull} nextQuery_1 != 0;
    assume nextQuery_1 > 0;
    assume {:nonnull} s_p_e_c_i_a_l_7 != 0;
    assume s_p_e_c_i_a_l_7 > 0;
    assume {:nonnull} nextQuery_1 != 0;
    assume nextQuery_1 > 0;
    assume {:nonnull} s_p_e_c_i_a_l_7 != 0;
    assume s_p_e_c_i_a_l_7 > 0;
    assume {:nonnull} nextQuery_1 != 0;
    assume nextQuery_1 > 0;
    assume {:nonnull} s_p_e_c_i_a_l_7 != 0;
    assume s_p_e_c_i_a_l_7 > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:nonnull} difference_1 != 0;
    assume difference_1 > 0;
    assume {:nonnull} nextQuery_1 != 0;
    assume nextQuery_1 > 0;
    assume {:nonnull} startOfSpin_1 != 0;
    assume startOfSpin_1 > 0;
    call {:si_unique_call 607} sdv_226 := corral_nondet();
    assume {:nonnull} difference_1 != 0;
    assume difference_1 > 0;
    assume {:nonnull} tenSeconds != 0;
    assume tenSeconds > 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    goto anon53_Else_dummy;

  anon53_Else_dummy:
    assume false;
    return;

  anon53_Then:
    goto L55;

  L55:
    goto anon49_Then, anon49_Else;

  anon49_Else:
    assume {:partition} status_25 >= 0;
    call {:si_unique_call 608} status_25 := I8xGetBytePolled(0, byte_3);
    goto anon54_Then, anon54_Else;

  anon54_Else:
    assume {:partition} status_25 >= 0;
    assume {:nonnull} byte_3 != 0;
    assume byte_3 > 0;
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:nonnull} deviceExtension_4 != 0;
    assume deviceExtension_4 > 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:nonnull} deviceExtension_4 != 0;
    assume deviceExtension_4 > 0;
    assume {:nonnull} deviceExtension_4 != 0;
    assume deviceExtension_4 > 0;
    assume {:nonnull} deviceExtension_4 != 0;
    assume deviceExtension_4 > 0;
    call {:si_unique_call 609} vslice_dummy_var_98 := I8xFindWheelMouse(deviceExtension_4);
    call {:si_unique_call 610} status_25 := I8xQueryNumberOfMouseButtons(numButtons);
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} status_25 >= 0;
    assume {:nonnull} numButtons != 0;
    assume numButtons > 0;
    goto anon58_Then, anon58_Else;

  anon58_Else:
    assume {:nonnull} deviceExtension_4 != 0;
    assume deviceExtension_4 > 0;
    assume {:nonnull} numButtons != 0;
    assume numButtons > 0;
    goto L107;

  L107:
    havoc Tmp_396;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} Tmp_396 == 4096;
    assume {:nonnull} deviceExtension_4 != 0;
    assume deviceExtension_4 > 0;
    goto L112;

  L112:
    call {:si_unique_call 611} status_25 := I8xPutBytePolled#1(0, 1, 2, 243);
    goto anon59_Then, anon59_Else;

  anon59_Else:
    assume {:partition} status_25 >= 0;
    assume {:nonnull} deviceExtension_4 != 0;
    assume deviceExtension_4 > 0;
    havoc Tmp_397;
    call {:si_unique_call 612} status_25 := I8xPutBytePolled#1(0, 1, 2, Tmp_397);
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} status_25 >= 0;
    call {:si_unique_call 613} status_25 := I8xPutBytePolled#1(0, 1, 2, 232);
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} status_25 >= 0;
    assume {:nonnull} deviceExtension_4 != 0;
    assume deviceExtension_4 > 0;
    havoc vslice_dummy_var_214;
    call {:si_unique_call 614} status_25 := I8xPutBytePolled#1(0, 1, 2, vslice_dummy_var_214);
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} status_25 >= 0;
    goto L137;

  L137:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} status_25 >= 0;
    goto L139;

  L139:
    assume {:nonnull} deviceExtension_4 != 0;
    assume deviceExtension_4 > 0;
    assume {:nonnull} deviceExtension_4 != 0;
    assume deviceExtension_4 > 0;
    assume {:nonnull} deviceExtension_4 != 0;
    assume deviceExtension_4 > 0;
    assume {:nonnull} deviceExtension_4 != 0;
    assume deviceExtension_4 > 0;
    Tmp_393 := status_25;
    goto L1;

  L1:
    return;

  anon63_Then:
    assume {:partition} 0 > status_25;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} errorCode_1 != 0;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} okToLogError != 0;
    call {:si_unique_call 615} I8xLogError(deviceObject_1, errorCode_1, uniqueErrorValue_1, status_25, dumpData_6, dumpCount_1);
    goto L139;

  anon65_Then:
    assume {:partition} okToLogError == 0;
    goto L139;

  anon64_Then:
    assume {:partition} errorCode_1 == 0;
    goto L139;

  anon62_Then:
    assume {:partition} 0 > status_25;
    errorCode_1 := -1073414121;
    uniqueErrorValue_1 := 1465;
    assume {:nonnull} dumpData_6 != 0;
    assume dumpData_6 > 0;
    assume {:nonnull} dumpData_6 != 0;
    assume dumpData_6 > 0;
    assume {:nonnull} dumpData_6 != 0;
    assume dumpData_6 > 0;
    assume {:nonnull} deviceExtension_4 != 0;
    assume deviceExtension_4 > 0;
    assume {:nonnull} dumpData_6 != 0;
    assume dumpData_6 > 0;
    dumpCount_1 := 4;
    goto L137;

  anon61_Then:
    assume {:partition} 0 > status_25;
    errorCode_1 := -1073414121;
    uniqueErrorValue_1 := 1455;
    assume {:nonnull} dumpData_6 != 0;
    assume dumpData_6 > 0;
    assume {:nonnull} dumpData_6 != 0;
    assume dumpData_6 > 0;
    assume {:nonnull} dumpData_6 != 0;
    assume dumpData_6 > 0;
    assume {:nonnull} dumpData_6 != 0;
    assume dumpData_6 > 0;
    dumpCount_1 := 4;
    goto L137;

  anon60_Then:
    assume {:partition} 0 > status_25;
    errorCode_1 := -1073414122;
    uniqueErrorValue_1 := 1445;
    assume {:nonnull} dumpData_6 != 0;
    assume dumpData_6 > 0;
    assume {:nonnull} dumpData_6 != 0;
    assume dumpData_6 > 0;
    assume {:nonnull} dumpData_6 != 0;
    assume dumpData_6 > 0;
    assume {:nonnull} deviceExtension_4 != 0;
    assume deviceExtension_4 > 0;
    assume {:nonnull} dumpData_6 != 0;
    assume dumpData_6 > 0;
    dumpCount_1 := 4;
    goto L137;

  anon59_Then:
    assume {:partition} 0 > status_25;
    errorCode_1 := -1073414122;
    uniqueErrorValue_1 := 1435;
    assume {:nonnull} dumpData_6 != 0;
    assume dumpData_6 > 0;
    assume {:nonnull} dumpData_6 != 0;
    assume dumpData_6 > 0;
    assume {:nonnull} dumpData_6 != 0;
    assume dumpData_6 > 0;
    assume {:nonnull} dumpData_6 != 0;
    assume dumpData_6 > 0;
    dumpCount_1 := 4;
    goto L137;

  anon67_Then:
    assume {:partition} Tmp_396 != 4096;
    havoc Tmp_399;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} Tmp_399 == 8;
    assume {:nonnull} deviceExtension_4 != 0;
    assume deviceExtension_4 > 0;
    goto L112;

  anon68_Then:
    assume {:partition} Tmp_399 != 8;
    goto L112;

  anon58_Then:
    goto L107;

  anon57_Then:
    assume {:partition} 0 > status_25;
    errorCode_1 := -1073414110;
    uniqueErrorValue_1 := 1426;
    assume {:nonnull} dumpData_6 != 0;
    assume dumpData_6 > 0;
    assume {:nonnull} dumpData_6 != 0;
    assume dumpData_6 > 0;
    assume {:nonnull} dumpData_6 != 0;
    assume dumpData_6 > 0;
    dumpCount_1 := 3;
    goto L137;

  anon56_Then:
    Tmp_393 := 0;
    goto L1;

  anon55_Then:
    goto L90;

  L90:
    errorCode_1 := 327698;
    uniqueErrorValue_1 := 1425;
    assume {:nonnull} dumpData_6 != 0;
    assume dumpData_6 > 0;
    assume {:nonnull} dumpData_6 != 0;
    assume dumpData_6 > 0;
    assume {:nonnull} dumpData_6 != 0;
    assume dumpData_6 > 0;
    assume {:nonnull} byte_3 != 0;
    assume byte_3 > 0;
    assume {:nonnull} dumpData_6 != 0;
    assume dumpData_6 > 0;
    dumpCount_1 := 4;
    goto L137;

  anon54_Then:
    assume {:partition} 0 > status_25;
    goto L90;

  anon49_Then:
    assume {:partition} 0 > status_25;
    errorCode_1 := 327698;
    uniqueErrorValue_1 := 1420;
    assume {:nonnull} dumpData_6 != 0;
    assume dumpData_6 > 0;
    assume {:nonnull} dumpData_6 != 0;
    assume dumpData_6 > 0;
    assume {:nonnull} dumpData_6 != 0;
    assume dumpData_6 > 0;
    assume {:nonnull} byte_3 != 0;
    assume byte_3 > 0;
    assume {:nonnull} dumpData_6 != 0;
    assume dumpData_6 > 0;
    dumpCount_1 := 4;
    goto L137;

  anon69_Then:
    goto anon69_Then_dummy;

  anon69_Then_dummy:
    assume false;
    return;

  anon51_Then:
    assume {:partition} status_25 != -1073741643;
    goto L55;

  anon52_Then:
    goto L55;

  anon50_Then:
    assume {:partition} 0 > status_25;
    goto L61;

  anon66_Then:
    goto anon66_Then_dummy;

  anon66_Then_dummy:
    assume false;
    return;

  anon48_Then:
    assume {:partition} 0 > status_25;
    havoc okToLogError;
    errorCode_1 := -1073414113;
    uniqueErrorValue_1 := 1415;
    assume {:nonnull} dumpData_6 != 0;
    assume dumpData_6 > 0;
    assume {:nonnull} dumpData_6 != 0;
    assume dumpData_6 > 0;
    assume {:nonnull} dumpData_6 != 0;
    assume dumpData_6 > 0;
    assume {:nonnull} dumpData_6 != 0;
    assume dumpData_6 > 0;
    dumpCount_1 := 4;
    status_25 := -1073741667;
    goto L137;
}



procedure {:origName "I8xQueueCurrentMouseInput"} I8xQueueCurrentMouseInput(actual_DeviceObject_13: int);
  modifies alloc, yogi_error, Mem_T.CompletionRoutine__IO_STACK_LOCATION;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "I8xQueueCurrentMouseInput"} I8xQueueCurrentMouseInput(actual_DeviceObject_13: int)
{
  var {:scalar} sdv_229: int;
  var {:pointer} deviceExtension_5: int;
  var {:pointer} DeviceObject_13: int;
  var vslice_dummy_var_99: int;
  var vslice_dummy_var_100: int;
  var vslice_dummy_var_101: int;

  anon0:
    call {:si_unique_call 617} vslice_dummy_var_99 := __HAVOC_malloc(4);
    DeviceObject_13 := actual_DeviceObject_13;
    assume {:nonnull} DeviceObject_13 != 0;
    assume DeviceObject_13 > 0;
    havoc deviceExtension_5;
    assume {:nonnull} deviceExtension_5 != 0;
    assume deviceExtension_5 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:nonnull} deviceExtension_5 != 0;
    assume deviceExtension_5 > 0;
    call {:si_unique_call 618} sdv_229 := I8xWriteDataToMouseQueue(deviceExtension_5, CurrentInput__PORT_MOUSE_EXTENSION(deviceExtension_5));
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} sdv_229 != 0;
    assume {:nonnull} deviceExtension_5 != 0;
    assume deviceExtension_5 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} deviceExtension_5 != 0;
    assume deviceExtension_5 > 0;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon15_Then:
    assume {:nonnull} deviceExtension_5 != 0;
    assume deviceExtension_5 > 0;
    call {:si_unique_call 619} vslice_dummy_var_100 := KeInsertQueueDpc#1(MouseIsrDpc__PORT_MOUSE_EXTENSION(deviceExtension_5), 0, 0);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon17_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon13_Then:
    assume {:partition} sdv_229 == 0;
    assume {:nonnull} deviceExtension_5 != 0;
    assume deviceExtension_5 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:nonnull} deviceExtension_5 != 0;
    assume deviceExtension_5 > 0;
    call {:si_unique_call 620} vslice_dummy_var_101 := KeInsertQueueDpc#1(ErrorLogDpc_COMMON_DATA(deviceExtension_5), 0, -1073414132);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} deviceExtension_5 != 0;
    assume deviceExtension_5 > 0;
    goto L1;

  anon18_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon14_Then:
    goto L1;

  anon16_Then:
    goto L1;
}



procedure {:origName "I8xQueryNumberOfMouseButtons"} I8xQueryNumberOfMouseButtons(actual_NumberOfMouseButtons: int) returns (Tmp_403: int);
  modifies alloc;



implementation {:origName "I8xQueryNumberOfMouseButtons"} I8xQueryNumberOfMouseButtons(actual_NumberOfMouseButtons: int) returns (Tmp_403: int)
{
  var {:scalar} i_14: int;
  var {:dopa} {:scalar} byte_4: int;
  var {:scalar} status_26: int;
  var {:dopa} {:scalar} buttons: int;
  var {:pointer} NumberOfMouseButtons: int;

  anon0:
    call {:si_unique_call 621} byte_4 := __HAVOC_malloc(4);
    call {:si_unique_call 622} buttons := __HAVOC_malloc(4);
    NumberOfMouseButtons := actual_NumberOfMouseButtons;
    call {:si_unique_call 623} sdv_do_paged_code_check();
    call {:si_unique_call 624} status_26 := I8xPutBytePolled#1(0, 1, 2, 232);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} status_26 >= 0;
    call {:si_unique_call 625} status_26 := I8xPutBytePolled#1(0, 1, 2, 0);
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} status_26 >= 0;
    i_14 := 0;
    goto L23;

  L23:
    call {:si_unique_call 626} i_14, status_26 := I8xQueryNumberOfMouseButtons_loop_L23(i_14, status_26);
    goto L23_last;

  L23_last:
    assume {:CounterLoop 3} {:Counter "i_14"} true;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} 3 > i_14;
    call {:si_unique_call 627} status_26 := I8xPutBytePolled#1(0, 1, 2, 230);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} status_26 >= 0;
    i_14 := i_14 + 1;
    goto anon24_Else_dummy;

  anon24_Else_dummy:
    assume false;
    return;

  anon24_Then:
    assume {:partition} 0 > status_26;
    Tmp_403 := status_26;
    goto L1;

  L1:
    return;

  anon23_Then:
    assume {:partition} i_14 >= 3;
    call {:si_unique_call 628} status_26 := I8xPutBytePolled#1(0, 1, 2, 233);
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} status_26 >= 0;
    call {:si_unique_call 629} status_26 := I8xGetBytePolled(0, byte_4);
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} status_26 >= 0;
    call {:si_unique_call 630} status_26 := I8xGetBytePolled(0, buttons);
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} status_26 >= 0;
    call {:si_unique_call 631} status_26 := I8xGetBytePolled(0, byte_4);
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} status_26 >= 0;
    assume {:nonnull} buttons != 0;
    assume buttons > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    goto L57;

  L57:
    assume {:nonnull} NumberOfMouseButtons != 0;
    assume NumberOfMouseButtons > 0;
    assume {:nonnull} buttons != 0;
    assume buttons > 0;
    goto L58;

  L58:
    Tmp_403 := status_26;
    goto L1;

  anon29_Then:
    assume {:nonnull} buttons != 0;
    assume buttons > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:nonnull} NumberOfMouseButtons != 0;
    assume NumberOfMouseButtons > 0;
    goto L58;

  anon30_Then:
    goto L57;

  anon28_Then:
    assume {:partition} 0 > status_26;
    Tmp_403 := status_26;
    goto L1;

  anon27_Then:
    assume {:partition} 0 > status_26;
    Tmp_403 := status_26;
    goto L1;

  anon26_Then:
    assume {:partition} 0 > status_26;
    Tmp_403 := status_26;
    goto L1;

  anon25_Then:
    assume {:partition} 0 > status_26;
    Tmp_403 := status_26;
    goto L1;

  anon22_Then:
    assume {:partition} 0 > status_26;
    Tmp_403 := status_26;
    goto L1;

  anon21_Then:
    assume {:partition} 0 > status_26;
    Tmp_403 := status_26;
    goto L1;
}



procedure {:origName "_sdv_init11"} _sdv_init11();
  modifies alloc;



implementation {:origName "_sdv_init11"} _sdv_init11()
{
  var vslice_dummy_var_102: int;

  anon0:
    call {:si_unique_call 632} vslice_dummy_var_102 := __HAVOC_malloc(4);
    assume ScanCodeToUCharCount_6 == 54;
    return;
}



procedure {:origName "I8xTransmitByteSequence"} I8xTransmitByteSequence(actual_Bytes: int, actual_UniqueErrorValue: int, actual_ErrorCode: int, actual_DumpData: int, actual_DumpCount: int) returns (Tmp_409: int);
  modifies alloc;



implementation {:origName "I8xTransmitByteSequence"} I8xTransmitByteSequence(actual_Bytes: int, actual_UniqueErrorValue: int, actual_ErrorCode: int, actual_DumpData: int, actual_DumpCount: int) returns (Tmp_409: int)
{
  var {:scalar} byteCount: int;
  var {:scalar} Tmp_410: int;
  var {:scalar} Tmp_412: int;
  var {:scalar} status_28: int;
  var {:scalar} Tmp_413: int;
  var {:scalar} Tmp_414: int;
  var {:pointer} Bytes: int;
  var {:pointer} UniqueErrorValue: int;
  var {:pointer} ErrorCode: int;
  var {:pointer} DumpData: int;
  var {:pointer} DumpCount: int;

  anon0:
    Bytes := actual_Bytes;
    UniqueErrorValue := actual_UniqueErrorValue;
    ErrorCode := actual_ErrorCode;
    DumpData := actual_DumpData;
    DumpCount := actual_DumpCount;
    call {:si_unique_call 633} sdv_do_paged_code_check();
    status_28 := 0;
    byteCount := 0;
    goto L10;

  L10:
    call {:si_unique_call 634} byteCount, Tmp_410, Tmp_412, status_28, Tmp_414 := I8xTransmitByteSequence_loop_L10(byteCount, Tmp_410, Tmp_412, status_28, Tmp_414, Bytes, UniqueErrorValue);
    goto L10_last;

  L10_last:
    Tmp_414 := byteCount;
    assume {:nonnull} Bytes != 0;
    assume Bytes > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    Tmp_412 := byteCount;
    assume {:nonnull} Bytes != 0;
    assume Bytes > 0;
    havoc Tmp_410;
    call {:si_unique_call 635} status_28 := I8xPutBytePolled#1(0, 1, 2, Tmp_410);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} status_28 >= 0;
    byteCount := byteCount + 1;
    assume {:nonnull} UniqueErrorValue != 0;
    assume UniqueErrorValue > 0;
    goto anon5_Else_dummy;

  anon5_Else_dummy:
    assume false;
    return;

  anon5_Then:
    assume {:partition} 0 > status_28;
    assume {:nonnull} ErrorCode != 0;
    assume ErrorCode > 0;
    assume {:nonnull} DumpCount != 0;
    assume DumpCount > 0;
    assume {:nonnull} DumpData != 0;
    assume DumpData > 0;
    assume {:nonnull} DumpData != 0;
    assume DumpData > 0;
    assume {:nonnull} DumpData != 0;
    assume DumpData > 0;
    Tmp_413 := byteCount;
    assume {:nonnull} Bytes != 0;
    assume Bytes > 0;
    assume {:nonnull} DumpData != 0;
    assume DumpData > 0;
    goto L11;

  L11:
    Tmp_409 := status_28;
    return;

  anon6_Then:
    goto L11;
}



procedure {:origName "I8xMouseEnableTransmission"} I8xMouseEnableTransmission(actual_MouseExtension_13: int) returns (Tmp_415: int);
  modifies alloc;



implementation {:origName "I8xMouseEnableTransmission"} I8xMouseEnableTransmission(actual_MouseExtension_13: int) returns (Tmp_415: int)
{
  var {:scalar} i_15: int;
  var {:scalar} Tmp_417: int;
  var {:scalar} Tmp_418: int;
  var {:pointer} errorLogEntry_2: int;
  var {:scalar} li_5: int;
  var {:pointer} sdv_247: int;
  var {:pointer} dumpData_7: int;
  var {:scalar} uniqueErrorValue_2: int;
  var {:scalar} status_29: int;
  var {:scalar} dumpCount_2: int;
  var {:scalar} Tmp_419: int;
  var {:scalar} Tmp_420: int;
  var {:pointer} Tmp_421: int;
  var {:scalar} errorCode_2: int;
  var {:pointer} MouseExtension_13: int;
  var vslice_dummy_var_103: int;

  anon0:
    call {:si_unique_call 636} li_5 := __HAVOC_malloc(20);
    MouseExtension_13 := actual_MouseExtension_13;
    call {:si_unique_call 637} dumpData_7 := __HAVOC_malloc(16);
    call {:si_unique_call 638} Tmp_421 := __HAVOC_malloc(4);
    errorCode_2 := 0;
    dumpCount_2 := 0;
    i_15 := 0;
    goto L15;

  L15:
    call {:si_unique_call 639} i_15, Tmp_417 := I8xMouseEnableTransmission_loop_L15(i_15, Tmp_417, dumpData_7);
    goto L15_last;

  L15_last:
    assume {:CounterLoop 4} {:Counter "i_15"} true;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} 4 > i_15;
    Tmp_417 := i_15;
    assume {:nonnull} dumpData_7 != 0;
    assume dumpData_7 > 0;
    i_15 := i_15 + 1;
    goto anon15_Else_dummy;

  anon15_Else_dummy:
    assume false;
    return;

  anon15_Then:
    assume {:partition} i_15 >= 4;
    assume {:nonnull} MouseExtension_13 != 0;
    assume MouseExtension_13 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:nonnull} li_5 != 0;
    assume li_5 > 0;
    assume {:nonnull} MouseExtension_13 != 0;
    assume MouseExtension_13 > 0;
    call {:si_unique_call 640} vslice_dummy_var_103 := KeSetTimerEx(0, li_5, 5000, 0);
    goto L19;

  L19:
    call {:si_unique_call 641} status_29 := I8xPutBytePolled#1(0, 0, 2, 244);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} status_29 >= 0;
    goto L30;

  L30:
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} status_29 >= 0;
    goto L32;

  L32:
    assume {:nonnull} MouseExtension_13 != 0;
    assume MouseExtension_13 > 0;
    assume {:nonnull} MouseExtension_13 != 0;
    assume MouseExtension_13 > 0;
    Tmp_415 := status_29;
    return;

  anon18_Then:
    assume {:partition} 0 > status_29;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} errorCode_2 != 0;
    Tmp_420 := 48 + dumpCount_2 * 4;
    call {:si_unique_call 642} sdv_247 := IoAllocateErrorLogEntry(0, Tmp_420);
    errorLogEntry_2 := sdv_247;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} errorLogEntry_2 != 0;
    assume {:nonnull} errorLogEntry_2 != 0;
    assume errorLogEntry_2 > 0;
    assume {:nonnull} errorLogEntry_2 != 0;
    assume errorLogEntry_2 > 0;
    assume {:nonnull} errorLogEntry_2 != 0;
    assume errorLogEntry_2 > 0;
    assume {:nonnull} errorLogEntry_2 != 0;
    assume errorLogEntry_2 > 0;
    assume {:nonnull} errorLogEntry_2 != 0;
    assume errorLogEntry_2 > 0;
    assume {:nonnull} errorLogEntry_2 != 0;
    assume errorLogEntry_2 > 0;
    assume {:nonnull} errorLogEntry_2 != 0;
    assume errorLogEntry_2 > 0;
    assume {:nonnull} errorLogEntry_2 != 0;
    assume errorLogEntry_2 > 0;
    i_15 := 0;
    goto L50;

  L50:
    call {:si_unique_call 643} i_15, Tmp_418, Tmp_419, Tmp_421 := I8xMouseEnableTransmission_loop_L50(i_15, Tmp_418, errorLogEntry_2, dumpData_7, dumpCount_2, Tmp_419, Tmp_421);
    goto L50_last;

  L50_last:
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} dumpCount_2 > i_15;
    Tmp_418 := i_15;
    assume {:nonnull} errorLogEntry_2 != 0;
    assume errorLogEntry_2 > 0;
    havoc Tmp_421;
    Tmp_419 := i_15;
    assume {:nonnull} Tmp_421 != 0;
    assume Tmp_421 > 0;
    assume {:nonnull} dumpData_7 != 0;
    assume dumpData_7 > 0;
    i_15 := i_15 + 1;
    goto anon20_Else_dummy;

  anon20_Else_dummy:
    assume false;
    return;

  anon20_Then:
    assume {:partition} i_15 >= dumpCount_2;
    call {:si_unique_call 644} IoWriteErrorLogEntry(0);
    goto L32;

  anon21_Then:
    assume {:partition} errorLogEntry_2 == 0;
    goto L32;

  anon19_Then:
    assume {:partition} errorCode_2 == 0;
    goto L32;

  anon17_Then:
    assume {:partition} 0 > status_29;
    errorCode_2 := -1073414120;
    uniqueErrorValue_2 := 1475;
    assume {:nonnull} dumpData_7 != 0;
    assume dumpData_7 > 0;
    assume {:nonnull} dumpData_7 != 0;
    assume dumpData_7 > 0;
    assume {:nonnull} dumpData_7 != 0;
    assume dumpData_7 > 0;
    assume {:nonnull} dumpData_7 != 0;
    assume dumpData_7 > 0;
    dumpCount_2 := 4;
    goto L30;

  anon16_Then:
    goto L19;
}



procedure {:origName "MouseCopyWheelIDs"} MouseCopyWheelIDs(actual_Destination: int, actual_Source: int);
  modifies alloc;



implementation {:origName "MouseCopyWheelIDs"} MouseCopyWheelIDs(actual_Destination: int, actual_Source: int)
{
  var {:pointer} str: int;
  var {:scalar} Tmp_423: int;
  var {:pointer} sdv_248: int;
  var {:scalar} Tmp_425: int;
  var {:pointer} Destination: int;
  var {:pointer} Source: int;
  var vslice_dummy_var_104: int;
  var vslice_dummy_var_105: int;

  anon0:
    call {:si_unique_call 645} vslice_dummy_var_104 := __HAVOC_malloc(4);
    Destination := actual_Destination;
    Source := actual_Source;
    str := 0;
    call {:si_unique_call 646} sdv_do_paged_code_check();
    call {:si_unique_call 647} sdv_RtlZeroMemory(0, 8);
    assume {:nonnull} Source != 0;
    assume Source > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:nonnull} Source != 0;
    assume Source > 0;
    havoc Tmp_423;
    call {:si_unique_call 648} sdv_248 := ExAllocatePoolWithTag(512, Tmp_423, 842281016);
    assume {:nonnull} Destination != 0;
    assume Destination > 0;
    assume {:nonnull} Destination != 0;
    assume Destination > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} Source != 0;
    assume Source > 0;
    havoc Tmp_425;
    call {:si_unique_call 649} sdv_RtlCopyMemory(0, 0, Tmp_425);
    assume {:nonnull} Destination != 0;
    assume Destination > 0;
    assume {:nonnull} Source != 0;
    assume Source > 0;
    assume {:nonnull} Destination != 0;
    assume Destination > 0;
    assume {:nonnull} Destination != 0;
    assume Destination > 0;
    havoc str;
    goto L26;

  L26:
    call {:si_unique_call 650} vslice_dummy_var_105 := MouseCopyWheelIDs_loop_L26(str, vslice_dummy_var_105);
    goto L26_last;

  L26_last:
    assume {:nonnull} str != 0;
    assume str > 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    goto L33;

  L33:
    goto L33_dummy;

  L33_dummy:
    assume false;
    return;

  anon11_Then:
    call {:si_unique_call 651} vslice_dummy_var_105 := __HAVOC_malloc(1);
    goto L33;

  anon10_Then:
    goto L1;

  L1:
    return;

  anon12_Then:
    goto L1;

  anon9_Then:
    goto L1;
}



procedure {:origName "I8xMouseConfiguration"} I8xMouseConfiguration(actual_MouseExtension_15: int, actual_ResourceList_3: int) returns (Tmp_428: int);
  modifies alloc;
  free ensures Tmp_428 == 0 || Tmp_428 == -1073741670;



implementation {:origName "I8xMouseConfiguration"} I8xMouseConfiguration(actual_MouseExtension_15: int, actual_ResourceList_3: int) returns (Tmp_428: int)
{
  var {:scalar} i_16: int;
  var {:scalar} Tmp_429: int;
  var {:scalar} count_1: int;
  var {:pointer} partialResList_1: int;
  var {:scalar} defaultInterruptMode_1: int;
  var {:scalar} Tmp_431: int;
  var {:pointer} Tmp_432: int;
  var {:scalar} Tmp_433: int;
  var {:scalar} Tmp_434: int;
  var {:pointer} firstResDesc_1: int;
  var {:scalar} Tmp_435: int;
  var {:pointer} configuration_4: int;
  var {:pointer} currentResDesc_1: int;
  var {:pointer} fullResDesc_1: int;
  var {:scalar} status_30: int;
  var {:scalar} defaultInterruptShare_1: int;
  var {:pointer} Tmp_436: int;
  var {:pointer} MouseExtension_15: int;
  var {:pointer} ResourceList_3: int;

  anon0:
    MouseExtension_15 := actual_MouseExtension_15;
    ResourceList_3 := actual_ResourceList_3;
    call {:si_unique_call 652} Tmp_432 := __HAVOC_malloc(584);
    call {:si_unique_call 653} Tmp_436 := __HAVOC_malloc(584);
    status_30 := 0;
    partialResList_1 := 0;
    firstResDesc_1 := 0;
    currentResDesc_1 := 0;
    fullResDesc_1 := 0;
    call {:si_unique_call 654} sdv_do_paged_code_check();
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} ResourceList_3 != 0;
    assume {:nonnull} ResourceList_3 != 0;
    assume ResourceList_3 > 0;
    havoc fullResDesc_1;
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} fullResDesc_1 != 0;
    havoc configuration_4;
    assume {:nonnull} fullResDesc_1 != 0;
    assume fullResDesc_1 > 0;
    partialResList_1 := PartialResourceList__CM_FULL_RESOURCE_DESCRIPTOR(fullResDesc_1);
    assume {:nonnull} partialResList_1 != 0;
    assume partialResList_1 > 0;
    havoc firstResDesc_1;
    currentResDesc_1 := firstResDesc_1;
    assume {:nonnull} partialResList_1 != 0;
    assume partialResList_1 > 0;
    havoc count_1;
    assume {:nonnull} configuration_4 != 0;
    assume configuration_4 > 0;
    assume {:nonnull} configuration_4 != 0;
    assume configuration_4 > 0;
    assume {:nonnull} fullResDesc_1 != 0;
    assume fullResDesc_1 > 0;
    assume {:nonnull} configuration_4 != 0;
    assume configuration_4 > 0;
    assume {:nonnull} fullResDesc_1 != 0;
    assume fullResDesc_1 > 0;
    assume {:nonnull} configuration_4 != 0;
    assume configuration_4 > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    defaultInterruptShare_1 := 1;
    defaultInterruptMode_1 := 0;
    goto L39;

  L39:
    i_16 := 0;
    goto L40;

  L40:
    call {:si_unique_call 655} i_16, Tmp_429, Tmp_432, Tmp_433, Tmp_434, Tmp_436 := I8xMouseConfiguration_loop_L40(i_16, Tmp_429, count_1, Tmp_432, Tmp_433, Tmp_434, configuration_4, currentResDesc_1, defaultInterruptShare_1, Tmp_436, MouseExtension_15);
    goto L40_last;

  L40_last:
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} count_1 > i_16;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    goto L52;

  L52:
    i_16 := i_16 + 1;
    goto L52_dummy;

  L52_dummy:
    assume false;
    return;

  anon32_Then:
    goto L44;

  L44:
    assume {:nonnull} configuration_4 != 0;
    assume configuration_4 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:nonnull} configuration_4 != 0;
    assume configuration_4 > 0;
    havoc Tmp_434;
    assume {:nonnull} configuration_4 != 0;
    assume configuration_4 > 0;
    havoc Tmp_432;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} Tmp_432 != 0;
    assume Tmp_432 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} configuration_4 != 0;
    assume configuration_4 > 0;
    havoc Tmp_429;
    assume {:nonnull} configuration_4 != 0;
    assume configuration_4 > 0;
    havoc Tmp_436;
    assume {:nonnull} Tmp_436 != 0;
    assume Tmp_436 > 0;
    assume {:nonnull} configuration_4 != 0;
    assume configuration_4 > 0;
    goto L52;

  anon30_Then:
    goto L52;

  anon33_Then:
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} currentResDesc_1 != 0;
    assume currentResDesc_1 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} defaultInterruptShare_1 != 0;
    Tmp_433 := 3;
    goto L50;

  L50:
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    goto L52;

  anon36_Then:
    assume {:partition} defaultInterruptShare_1 == 0;
    Tmp_433 := 1;
    goto L50;

  anon29_Then:
    goto L44;

  anon28_Then:
    assume {:partition} i_16 >= count_1;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    goto L60;

  L60:
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} status_30 >= 0;
    goto L61;

  L61:
    Tmp_428 := status_30;
    goto L1;

  L1:
    return;

  anon31_Then:
    assume {:partition} 0 > status_30;
    goto L61;

  anon37_Then:
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} defaultInterruptShare_1 != 0;
    Tmp_431 := 3;
    goto L66;

  L66:
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} defaultInterruptMode_1 == 1;
    Tmp_435 := 1;
    goto L70;

  L70:
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    assume {:nonnull} MouseExtension_15 != 0;
    assume MouseExtension_15 > 0;
    goto L60;

  anon39_Then:
    assume {:partition} defaultInterruptMode_1 != 1;
    Tmp_435 := 0;
    goto L70;

  anon38_Then:
    assume {:partition} defaultInterruptShare_1 == 0;
    Tmp_431 := 1;
    goto L66;

  anon35_Then:
    defaultInterruptShare_1 := 0;
    defaultInterruptMode_1 := 1;
    goto L39;

  anon34_Then:
    assume {:partition} fullResDesc_1 == 0;
    Tmp_428 := -1073741670;
    goto L1;

  anon27_Then:
    assume {:partition} ResourceList_3 == 0;
    Tmp_428 := -1073741670;
    goto L1;
}



procedure {:origName "I8xMouseServiceParameters"} I8xMouseServiceParameters(actual_RegistryPath_3: int, actual_MouseExtension_16: int);
  modifies alloc;



implementation {:origName "I8xMouseServiceParameters"} I8xMouseServiceParameters(actual_RegistryPath_3: int, actual_MouseExtension_16: int)
{
  var {:scalar} Tmp_437: int;
  var {:dopa} {:scalar} mouseResolution: int;
  var {:scalar} Tmp_438: int;
  var {:scalar} Tmp_439: int;
  var {:dopa} {:scalar} enableWheelDetection: int;
  var {:scalar} Tmp_440: int;
  var {:scalar} Tmp_441: int;
  var {:scalar} Tmp_442: int;
  var {:dopa} {:scalar} defaultDataQueueSize_1: int;
  var {:scalar} Tmp_443: int;
  var {:scalar} Tmp_444: int;
  var {:scalar} IDs: int;
  var {:dopa} {:scalar} defaultEnableWheelDetection: int;
  var {:scalar} Tmp_445: int;
  var {:scalar} Tmp_446: int;
  var {:scalar} Tmp_447: int;
  var {:scalar} Tmp_448: int;
  var {:dopa} {:scalar} prevEnableWheelDetection: int;
  var {:scalar} Tmp_449: int;
  var {:scalar} Tmp_450: int;
  var {:scalar} Tmp_451: int;
  var {:scalar} Tmp_452: int;
  var {:scalar} Tmp_453: int;
  var {:scalar} Tmp_454: int;
  var {:scalar} Tmp_455: int;
  var {:scalar} Tmp_456: int;
  var {:scalar} Tmp_457: int;
  var {:dopa} {:scalar} sampleRate: int;
  var {:scalar} Tmp_458: int;
  var {:scalar} Tmp_459: int;
  var {:scalar} Tmp_461: int;
  var {:scalar} Tmp_463: int;
  var {:scalar} Tmp_464: int;
  var {:dopa} {:scalar} defaultNumberOfButtons: int;
  var {:scalar} Tmp_465: int;
  var {:scalar} Tmp_466: int;
  var {:pointer} sdv_257: int;
  var {:scalar} Tmp_467: int;
  var {:dopa} {:scalar} numberOfButtons: int;
  var {:scalar} Tmp_468: int;
  var {:scalar} Tmp_469: int;
  var {:scalar} Tmp_470: int;
  var {:scalar} Tmp_471: int;
  var {:scalar} queries_1: int;
  var {:scalar} Tmp_472: int;
  var {:dopa} {:scalar} prevInputDataQueueLength_1: int;
  var {:scalar} Tmp_473: int;
  var {:scalar} Tmp_474: int;
  var {:scalar} Tmp_475: int;
  var {:scalar} Tmp_476: int;
  var {:scalar} Tmp_477: int;
  var {:scalar} Tmp_478: int;
  var {:scalar} Tmp_479: int;
  var {:scalar} Tmp_480: int;
  var {:scalar} largeDetectionTimeout: int;
  var {:scalar} Tmp_481: int;
  var {:scalar} Tmp_482: int;
  var {:dopa} {:scalar} prevSynchPacket100ns: int;
  var {:scalar} Tmp_483: int;
  var {:scalar} Tmp_484: int;
  var {:scalar} Tmp_485: int;
  var {:scalar} Tmp_486: int;
  var {:scalar} Tmp_487: int;
  var {:scalar} Tmp_488: int;
  var {:scalar} Tmp_489: int;
  var {:scalar} Tmp_490: int;
  var {:scalar} i_17: int;
  var {:scalar} Tmp_491: int;
  var {:scalar} Tmp_492: int;
  var {:scalar} Tmp_493: int;
  var {:dopa} {:scalar} defaultInitializePolled: int;
  var {:scalar} Tmp_494: int;
  var {:scalar} Tmp_495: int;
  var {:dopa} {:scalar} prevInitializePolled: int;
  var {:scalar} Tmp_496: int;
  var {:scalar} Tmp_497: int;
  var {:scalar} Tmp_498: int;
  var {:scalar} Tmp_499: int;
  var {:scalar} Tmp_500: int;
  var {:scalar} Tmp_501: int;
  var {:pointer} keyHandle_1: int;
  var {:scalar} Tmp_502: int;
  var {:scalar} Tmp_503: int;
  var {:scalar} Tmp_504: int;
  var {:scalar} Tmp_505: int;
  var {:scalar} Tmp_506: int;
  var {:scalar} Tmp_507: int;
  var {:scalar} Tmp_508: int;
  var {:pointer} sdv_260: int;
  var {:scalar} Tmp_509: int;
  var {:scalar} Tmp_510: int;
  var {:dopa} {:scalar} defaultMouseResolution: int;
  var {:dopa} {:scalar} prevNumberOfButtons: int;
  var {:scalar} Tmp_511: int;
  var {:scalar} Tmp_512: int;
  var {:scalar} Tmp_513: int;
  var {:scalar} Tmp_514: int;
  var {:scalar} Tmp_515: int;
  var {:dopa} {:scalar} prevSampleRate: int;
  var {:scalar} Tmp_516: int;
  var {:scalar} Tmp_517: int;
  var {:scalar} Tmp_518: int;
  var {:scalar} Tmp_519: int;
  var {:scalar} Tmp_520: int;
  var {:scalar} Tmp_521: int;
  var {:pointer} szDefaultIDs_1: int;
  var {:scalar} sdv_261: int;
  var {:scalar} Tmp_522: int;
  var {:scalar} Tmp_523: int;
  var {:dopa} {:scalar} initializePolled: int;
  var {:scalar} sdv_262: int;
  var {:scalar} Tmp_525: int;
  var {:scalar} Tmp_526: int;
  var {:scalar} Tmp_527: int;
  var {:scalar} Tmp_528: int;
  var {:scalar} Tmp_529: int;
  var {:scalar} Tmp_530: int;
  var {:scalar} Tmp_531: int;
  var {:scalar} Tmp_532: int;
  var {:scalar} Tmp_533: int;
  var {:scalar} Tmp_534: int;
  var {:scalar} Tmp_535: int;
  var {:scalar} Tmp_536: int;
  var {:scalar} Tmp_537: int;
  var {:pointer} parameters_3: int;
  var {:dopa} {:scalar} defaultSynchPacket100ns: int;
  var {:scalar} Tmp_538: int;
  var {:scalar} status_31: int;
  var {:dopa} {:scalar} defaultStallTime: int;
  var {:dopa} {:scalar} defaultSampleRate: int;
  var {:scalar} parametersPath_3: int;
  var {:dopa} {:scalar} prevMouseResolution: int;
  var {:scalar} Tmp_539: int;
  var {:scalar} sdv_264: int;
  var {:dopa} {:scalar} defaultWheelDetectionTimeout: int;
  var {:scalar} Tmp_540: int;
  var {:scalar} Tmp_541: int;
  var {:scalar} Tmp_542: int;
  var {:scalar} Tmp_543: int;
  var {:scalar} Tmp_544: int;
  var {:scalar} Tmp_545: int;
  var {:pointer} RegistryPath_3: int;
  var {:pointer} MouseExtension_16: int;
  var vslice_dummy_var_106: int;
  var vslice_dummy_var_107: int;
  var vslice_dummy_var_108: int;
  var vslice_dummy_var_109: int;

  anon0:
    call {:si_unique_call 656} mouseResolution := __HAVOC_malloc(4);
    call {:si_unique_call 657} enableWheelDetection := __HAVOC_malloc(4);
    call {:si_unique_call 658} defaultDataQueueSize_1 := __HAVOC_malloc(4);
    call {:si_unique_call 659} IDs := __HAVOC_malloc(12);
    call {:si_unique_call 660} defaultEnableWheelDetection := __HAVOC_malloc(4);
    call {:si_unique_call 661} prevEnableWheelDetection := __HAVOC_malloc(4);
    call {:si_unique_call 662} sampleRate := __HAVOC_malloc(4);
    call {:si_unique_call 663} defaultNumberOfButtons := __HAVOC_malloc(4);
    call {:si_unique_call 664} numberOfButtons := __HAVOC_malloc(4);
    call {:si_unique_call 665} prevInputDataQueueLength_1 := __HAVOC_malloc(4);
    call {:si_unique_call 666} largeDetectionTimeout := __HAVOC_malloc(20);
    call {:si_unique_call 667} prevSynchPacket100ns := __HAVOC_malloc(4);
    call {:si_unique_call 668} defaultInitializePolled := __HAVOC_malloc(4);
    call {:si_unique_call 669} prevInitializePolled := __HAVOC_malloc(4);
    call {:si_unique_call 670} defaultMouseResolution := __HAVOC_malloc(4);
    call {:si_unique_call 671} prevNumberOfButtons := __HAVOC_malloc(4);
    call {:si_unique_call 672} prevSampleRate := __HAVOC_malloc(4);
    call {:si_unique_call 673} initializePolled := __HAVOC_malloc(4);
    call {:si_unique_call 674} vslice_dummy_var_106 := __HAVOC_malloc(4);
    call {:si_unique_call 675} defaultSynchPacket100ns := __HAVOC_malloc(4);
    call {:si_unique_call 676} defaultStallTime := __HAVOC_malloc(4);
    call {:si_unique_call 677} defaultSampleRate := __HAVOC_malloc(4);
    call {:si_unique_call 678} parametersPath_3 := __HAVOC_malloc(12);
    call {:si_unique_call 679} prevMouseResolution := __HAVOC_malloc(4);
    call {:si_unique_call 680} defaultWheelDetectionTimeout := __HAVOC_malloc(4);
    RegistryPath_3 := actual_RegistryPath_3;
    MouseExtension_16 := actual_MouseExtension_16;
    call {:si_unique_call 681} szDefaultIDs_1 := __HAVOC_malloc(8);
    status_31 := 0;
    parameters_3 := 0;
    assume {:nonnull} defaultDataQueueSize_1 != 0;
    assume defaultDataQueueSize_1 > 0;
    assume {:nonnull} defaultSynchPacket100ns != 0;
    assume defaultSynchPacket100ns > 0;
    assume {:nonnull} defaultEnableWheelDetection != 0;
    assume defaultEnableWheelDetection > 0;
    assume {:nonnull} defaultMouseResolution != 0;
    assume defaultMouseResolution > 0;
    assume {:nonnull} defaultNumberOfButtons != 0;
    assume defaultNumberOfButtons > 0;
    assume {:nonnull} defaultSampleRate != 0;
    assume defaultSampleRate > 0;
    assume {:nonnull} defaultWheelDetectionTimeout != 0;
    assume defaultWheelDetectionTimeout > 0;
    assume {:nonnull} defaultInitializePolled != 0;
    assume defaultInitializePolled > 0;
    assume {:nonnull} enableWheelDetection != 0;
    assume enableWheelDetection > 0;
    assume {:nonnull} mouseResolution != 0;
    assume mouseResolution > 0;
    assume {:nonnull} numberOfButtons != 0;
    assume numberOfButtons > 0;
    assume {:nonnull} sampleRate != 0;
    assume sampleRate > 0;
    assume {:nonnull} initializePolled != 0;
    assume initializePolled > 0;
    i_17 := 0;
    assume {:nonnull} defaultStallTime != 0;
    assume defaultStallTime > 0;
    queries_1 := 10;
    assume {:nonnull} szDefaultIDs_1 != 0;
    assume szDefaultIDs_1 > 0;
    call {:si_unique_call 682} sdv_do_paged_code_check();
    assume {:nonnull} parametersPath_3 != 0;
    assume parametersPath_3 > 0;
    assume {:nonnull} RegistryPath_3 != 0;
    assume RegistryPath_3 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} status_31 >= 0;
    Tmp_451 := 28 * (queries_1 + 1);
    call {:si_unique_call 683} sdv_260 := ExAllocatePoolWithTag(1, Tmp_451, 842281016);
    parameters_3 := sdv_260;
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:partition} parameters_3 != 0;
    Tmp_465 := 28 * (queries_1 + 1);
    call {:si_unique_call 684} sdv_RtlZeroMemory(0, Tmp_465);
    call {:si_unique_call 685} RtlInitUnicodeString(parametersPath_3, 0);
    assume {:nonnull} RegistryPath_3 != 0;
    assume RegistryPath_3 > 0;
    assume {:nonnull} parametersPath_3 != 0;
    assume parametersPath_3 > 0;
    assume {:nonnull} parametersPath_3 != 0;
    assume parametersPath_3 > 0;
    havoc Tmp_539;
    call {:si_unique_call 686} sdv_257 := ExAllocatePoolWithTag(1, Tmp_539, 842281016);
    assume {:nonnull} parametersPath_3 != 0;
    assume parametersPath_3 > 0;
    assume {:nonnull} parametersPath_3 != 0;
    assume parametersPath_3 > 0;
    goto anon38_Then, anon38_Else;

  anon38_Else:
    status_31 := -1073741823;
    goto L53;

  L53:
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} status_31 >= 0;
    assume {:nonnull} parametersPath_3 != 0;
    assume parametersPath_3 > 0;
    havoc Tmp_474;
    call {:si_unique_call 687} sdv_RtlZeroMemory(0, Tmp_474);
    call {:si_unique_call 688} vslice_dummy_var_107 := corral_nondet();
    call {:si_unique_call 689} vslice_dummy_var_108 := corral_nondet();
    Tmp_480 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_496 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_520 := i_17;
    assume {:nonnull} MouseExtension_16 != 0;
    assume MouseExtension_16 > 0;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_545 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_463 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_486 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    i_17 := i_17 + 1;
    Tmp_444 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_457 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_454 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_488 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_499 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_458 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    i_17 := i_17 + 1;
    Tmp_477 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_507 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_455 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_481 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_510 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_542 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    i_17 := i_17 + 1;
    Tmp_512 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_448 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_523 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_476 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_445 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_441 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    i_17 := i_17 + 1;
    Tmp_484 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_515 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_452 := i_17;
    assume {:nonnull} MouseExtension_16 != 0;
    assume MouseExtension_16 > 0;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_503 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_543 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_469 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    i_17 := i_17 + 1;
    Tmp_521 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_493 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_453 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_443 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_532 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_500 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    i_17 := i_17 + 1;
    Tmp_464 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_537 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_449 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_527 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_506 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_514 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    i_17 := i_17 + 1;
    Tmp_519 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_487 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_439 := i_17;
    assume {:nonnull} MouseExtension_16 != 0;
    assume MouseExtension_16 > 0;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_516 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_461 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_459 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    call {:si_unique_call 690} status_31 := sdv_RtlQueryRegistryValues(0, 0, 0, 0, 0);
    goto L79;

  L79:
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} status_31 >= 0;
    goto L144;

  L144:
    call {:si_unique_call 691} status_31 := IoOpenDeviceRegistryKey(0, 1, 131072, 0);
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} status_31 >= 0;
    call {:si_unique_call 692} RtlInitUnicodeString(IDs, 0);
    assume {:nonnull} MouseExtension_16 != 0;
    assume MouseExtension_16 > 0;
    assume {:nonnull} prevInputDataQueueLength_1 != 0;
    assume prevInputDataQueueLength_1 > 0;
    assume {:nonnull} numberOfButtons != 0;
    assume numberOfButtons > 0;
    assume {:nonnull} prevNumberOfButtons != 0;
    assume prevNumberOfButtons > 0;
    assume {:nonnull} prevSampleRate != 0;
    assume prevSampleRate > 0;
    assume {:nonnull} sampleRate != 0;
    assume sampleRate > 0;
    assume {:nonnull} mouseResolution != 0;
    assume mouseResolution > 0;
    assume {:nonnull} prevMouseResolution != 0;
    assume prevMouseResolution > 0;
    assume {:nonnull} MouseExtension_16 != 0;
    assume MouseExtension_16 > 0;
    assume {:nonnull} prevSynchPacket100ns != 0;
    assume prevSynchPacket100ns > 0;
    assume {:nonnull} enableWheelDetection != 0;
    assume enableWheelDetection > 0;
    assume {:nonnull} prevEnableWheelDetection != 0;
    assume prevEnableWheelDetection > 0;
    assume {:nonnull} MouseExtension_16 != 0;
    assume MouseExtension_16 > 0;
    assume {:nonnull} initializePolled != 0;
    assume initializePolled > 0;
    assume {:nonnull} prevInitializePolled != 0;
    assume prevInitializePolled > 0;
    i_17 := 0;
    Tmp_492 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_440 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_490 := i_17;
    assume {:nonnull} MouseExtension_16 != 0;
    assume MouseExtension_16 > 0;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_466 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_467 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_501 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    i_17 := i_17 + 1;
    Tmp_494 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_529 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_522 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_511 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_538 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_483 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    i_17 := i_17 + 1;
    Tmp_526 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_536 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_442 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_446 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_535 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_456 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    i_17 := i_17 + 1;
    Tmp_450 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_513 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_533 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_468 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_504 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_541 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    i_17 := i_17 + 1;
    Tmp_534 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_470 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_518 := i_17;
    assume {:nonnull} MouseExtension_16 != 0;
    assume MouseExtension_16 > 0;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_473 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_528 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_544 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    i_17 := i_17 + 1;
    Tmp_508 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_517 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_447 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_495 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_472 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_475 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    i_17 := i_17 + 1;
    Tmp_479 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_491 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_525 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_485 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_531 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_540 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    i_17 := i_17 + 1;
    Tmp_482 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_509 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_471 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_498 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_438 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_505 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    i_17 := i_17 + 1;
    Tmp_502 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_497 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_478 := i_17;
    assume {:nonnull} MouseExtension_16 != 0;
    assume MouseExtension_16 > 0;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_489 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_437 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    Tmp_530 := i_17;
    assume {:nonnull} parameters_3 != 0;
    assume parameters_3 > 0;
    call {:si_unique_call 693} status_31 := sdv_RtlQueryRegistryValues(-1073741824, 0, 0, 0, 0);
    call {:si_unique_call 694} vslice_dummy_var_109 := ZwClose(0);
    goto L149;

  L149:
    assume {:nonnull} MouseExtension_16 != 0;
    assume MouseExtension_16 > 0;
    call {:si_unique_call 695} MouseCopyWheelIDs(WheelDetectionIDs__PORT_MOUSE_EXTENSION(MouseExtension_16), IDs);
    call {:si_unique_call 696} RtlFreeUnicodeString(0);
    assume {:nonnull} MouseExtension_16 != 0;
    assume MouseExtension_16 > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    goto L240;

  L240:
    assume {:nonnull} MouseExtension_16 != 0;
    assume MouseExtension_16 > 0;
    assume {:nonnull} MouseExtension_16 != 0;
    assume MouseExtension_16 > 0;
    assume {:nonnull} initializePolled != 0;
    assume initializePolled > 0;
    assume {:nonnull} enableWheelDetection != 0;
    assume enableWheelDetection > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:nonnull} enableWheelDetection != 0;
    assume enableWheelDetection > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    goto L244;

  L244:
    assume {:nonnull} MouseExtension_16 != 0;
    assume MouseExtension_16 > 0;
    assume {:nonnull} enableWheelDetection != 0;
    assume enableWheelDetection > 0;
    goto L246;

  L246:
    assume {:nonnull} numberOfButtons != 0;
    assume numberOfButtons > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:nonnull} MouseExtension_16 != 0;
    assume MouseExtension_16 > 0;
    assume {:nonnull} numberOfButtons != 0;
    assume numberOfButtons > 0;
    assume {:nonnull} MouseExtension_16 != 0;
    assume MouseExtension_16 > 0;
    assume {:nonnull} numberOfButtons != 0;
    assume numberOfButtons > 0;
    goto L250;

  L250:
    assume {:nonnull} MouseExtension_16 != 0;
    assume MouseExtension_16 > 0;
    assume {:nonnull} sampleRate != 0;
    assume sampleRate > 0;
    assume {:nonnull} MouseExtension_16 != 0;
    assume MouseExtension_16 > 0;
    assume {:nonnull} mouseResolution != 0;
    assume mouseResolution > 0;
    assume {:nonnull} MouseExtension_16 != 0;
    assume MouseExtension_16 > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:nonnull} MouseExtension_16 != 0;
    assume MouseExtension_16 > 0;
    goto L253;

  L253:
    assume {:nonnull} MouseExtension_16 != 0;
    assume MouseExtension_16 > 0;
    assume {:nonnull} largeDetectionTimeout != 0;
    assume largeDetectionTimeout > 0;
    call {:si_unique_call 697} sdv_264 := corral_nondet();
    assume {:nonnull} largeDetectionTimeout != 0;
    assume largeDetectionTimeout > 0;
    assume {:nonnull} MouseExtension_16 != 0;
    assume MouseExtension_16 > 0;
    assume {:nonnull} largeDetectionTimeout != 0;
    assume largeDetectionTimeout > 0;
    assume {:nonnull} MouseExtension_16 != 0;
    assume MouseExtension_16 > 0;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    goto L262;

  L262:
    call {:si_unique_call 698} sdv_262 := corral_nondet();
    assume {:nonnull} MouseExtension_16 != 0;
    assume MouseExtension_16 > 0;
    assume {:nonnull} parametersPath_3 != 0;
    assume parametersPath_3 > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    call {:si_unique_call 699} sdv_ExFreePool(0);
    goto L267;

  L267:
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} parameters_3 != 0;
    call {:si_unique_call 700} sdv_ExFreePool(0);
    goto L1;

  L1:
    return;

  anon34_Then:
    assume {:partition} parameters_3 == 0;
    goto L1;

  anon42_Then:
    goto L267;

  anon41_Then:
    assume {:nonnull} MouseExtension_16 != 0;
    assume MouseExtension_16 > 0;
    assume {:nonnull} defaultSynchPacket100ns != 0;
    assume defaultSynchPacket100ns > 0;
    goto L262;

  anon40_Then:
    goto L253;

  anon33_Then:
    assume {:nonnull} MouseExtension_16 != 0;
    assume MouseExtension_16 > 0;
    assume {:nonnull} MouseExtension_16 != 0;
    assume MouseExtension_16 > 0;
    goto L250;

  anon35_Then:
    assume {:nonnull} MouseExtension_16 != 0;
    assume MouseExtension_16 > 0;
    goto L246;

  anon39_Then:
    goto L244;

  anon32_Then:
    assume {:nonnull} MouseExtension_16 != 0;
    assume MouseExtension_16 > 0;
    assume {:nonnull} defaultDataQueueSize_1 != 0;
    assume defaultDataQueueSize_1 > 0;
    goto L240;

  anon31_Then:
    assume {:partition} 0 > status_31;
    goto L149;

  anon30_Then:
    assume {:partition} 0 > status_31;
    assume {:nonnull} MouseExtension_16 != 0;
    assume MouseExtension_16 > 0;
    assume {:nonnull} defaultDataQueueSize_1 != 0;
    assume defaultDataQueueSize_1 > 0;
    assume {:nonnull} MouseExtension_16 != 0;
    assume MouseExtension_16 > 0;
    assume {:nonnull} defaultEnableWheelDetection != 0;
    assume defaultEnableWheelDetection > 0;
    assume {:nonnull} MouseExtension_16 != 0;
    assume MouseExtension_16 > 0;
    assume {:nonnull} defaultSynchPacket100ns != 0;
    assume defaultSynchPacket100ns > 0;
    goto L144;

  anon29_Then:
    assume {:partition} 0 > status_31;
    goto L79;

  anon38_Then:
    goto L53;

  anon37_Then:
    assume {:partition} parameters_3 == 0;
    status_31 := -1073741823;
    goto L53;

  anon36_Then:
    assume {:partition} 0 > status_31;
    goto L53;
}



procedure {:origName "I8042MouseInterruptService"} I8042MouseInterruptService(actual_Interrupt_1: int, actual_DeviceObjectIn_2: int) returns (Tmp_548: int);
  modifies alloc, yogi_error, Mem_T.CompletionRoutine__IO_STACK_LOCATION;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "I8042MouseInterruptService"} I8042MouseInterruptService(actual_Interrupt_1: int, actual_DeviceObjectIn_2: int) returns (Tmp_548: int)
{
  var {:scalar} Tmp_549: int;
  var {:scalar} previousButtons: int;
  var {:pointer} Tmp_550: int;
  var {:scalar} Tmp_551: int;
  var {:scalar} Tmp_552: int;
  var {:pointer} s_p_e_c_i_a_l_8: int;
  var {:scalar} tickDelta: int;
  var {:scalar} bSendCommand: int;
  var {:scalar} Tmp_553: int;
  var {:scalar} Tmp_554: int;
  var {:scalar} Tmp_555: int;
  var {:scalar} Tmp_556: int;
  var {:scalar} Tmp_557: int;
  var {:scalar} ret_1: int;
  var {:scalar} resendCommand: int;
  var {:pointer} DeviceObject_14: int;
  var {:pointer} Tmp_560: int;
  var {:pointer} Tmp_561: int;
  var {:scalar} Tmp_562: int;
  var {:scalar} newTick: int;
  var {:scalar} Tmp_563: int;
  var {:scalar} Tmp_564: int;
  var {:pointer} Tmp_565: int;
  var {:pointer} sdv_282: int;
  var {:pointer} Tmp_566: int;
  var {:scalar} Tmp_567: int;
  var {:scalar} previousSignAndOverflow: int;
  var {:dopa} {:scalar} byte_5: int;
  var {:scalar} Tmp_569: int;
  var {:pointer} Tmp_570: int;
  var {:scalar} Tmp_571: int;
  var {:scalar} Tmp_572: int;
  var {:scalar} Tmp_573: int;
  var {:scalar} Tmp_574: int;
  var {:scalar} sdv_287: int;
  var {:scalar} altCommand: int;
  var {:scalar} Tmp_575: int;
  var {:scalar} Tmp_576: int;
  var {:scalar} cont_1: int;
  var {:pointer} deviceExtension_6: int;
  var {:pointer} Tmp_577: int;
  var {:scalar} Tmp_578: int;
  var {:scalar} nextCommand: int;
  var {:scalar} statusByte_1: int;
  var {:pointer} DeviceObjectIn_2: int;
  var boogieTmp: int;
  var vslice_dummy_var_110: int;
  var vslice_dummy_var_111: int;
  var vslice_dummy_var_112: int;
  var vslice_dummy_var_113: int;
  var vslice_dummy_var_114: int;
  var vslice_dummy_var_115: int;
  var vslice_dummy_var_116: int;
  var vslice_dummy_var_117: int;
  var vslice_dummy_var_118: int;
  var vslice_dummy_var_119: int;
  var vslice_dummy_var_120: int;
  var vslice_dummy_var_121: int;
  var vslice_dummy_var_122: int;
  var vslice_dummy_var_123: int;
  var vslice_dummy_var_124: int;
  var vslice_dummy_var_125: int;
  var vslice_dummy_var_126: int;
  var vslice_dummy_var_127: int;
  var vslice_dummy_var_128: int;
  var vslice_dummy_var_129: int;
  var vslice_dummy_var_215: int;
  var vslice_dummy_var_216: int;
  var vslice_dummy_var_217: int;
  var vslice_dummy_var_218: int;

  anon0:
    call {:si_unique_call 701} tickDelta := __HAVOC_malloc(20);
    call {:si_unique_call 702} newTick := __HAVOC_malloc(20);
    call {:si_unique_call 703} byte_5 := __HAVOC_malloc(4);
    DeviceObjectIn_2 := actual_DeviceObjectIn_2;
    call {:si_unique_call 704} Tmp_561 := __HAVOC_malloc(32);
    call {:si_unique_call 705} Tmp_565 := __HAVOC_malloc(8);
    call {:si_unique_call 706} Tmp_577 := __HAVOC_malloc(8);
    DeviceObject_14 := DeviceObjectIn_2;
    ret_1 := 1;
    assume {:nonnull} DeviceObject_14 != 0;
    assume DeviceObject_14 > 0;
    havoc deviceExtension_6;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon589_Then, anon589_Else;

  anon589_Else:
    Tmp_548 := 0;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon589_Then:
    havoc Tmp_577;
    assume {:nonnull} Tmp_577 != 0;
    assume Tmp_577 > 0;
    goto anon590_Then, anon590_Else;

  anon590_Else:
    assume {:IndirectCall} true;
    call {:si_unique_call 707} statusByte_1 := corral_nondet();
    goto L29;

  L29:
    Tmp_555 := BAND(statusByte_1, BOR(1, 32));
    goto anon591_Then, anon591_Else;

  anon591_Else:
    assume {:partition} Tmp_555 != 33;
    havoc Tmp_565;
    assume {:nonnull} Tmp_565 != 0;
    assume Tmp_565 > 0;
    goto anon592_Then, anon592_Else;

  anon592_Else:
    assume {:IndirectCall} true;
    call {:si_unique_call 708} statusByte_1 := corral_nondet();
    goto L42;

  L42:
    Tmp_554 := BAND(statusByte_1, BOR(1, 32));
    goto anon593_Then, anon593_Else;

  anon593_Else:
    assume {:partition} Tmp_554 != 33;
    Tmp_548 := 0;
    goto L1;

  anon593_Then:
    assume {:partition} Tmp_554 == 33;
    goto L31;

  L31:
    call {:si_unique_call 709} I8xGetByteAsynchronous(2, byte_5);
    Tmp_566 := KeTickCount;
    assume {:nonnull} Tmp_566 != 0;
    assume Tmp_566 > 0;
    havoc s_p_e_c_i_a_l_8;
    goto L48;

  L48:
    call {:si_unique_call 710} I8042MouseInterruptService_loop_L48(s_p_e_c_i_a_l_8, newTick);
    goto L48_last;

  L48_last:
    assume {:nonnull} newTick != 0;
    assume newTick > 0;
    assume {:nonnull} s_p_e_c_i_a_l_8 != 0;
    assume s_p_e_c_i_a_l_8 > 0;
    assume {:nonnull} newTick != 0;
    assume newTick > 0;
    assume {:nonnull} s_p_e_c_i_a_l_8 != 0;
    assume s_p_e_c_i_a_l_8 > 0;
    assume {:nonnull} newTick != 0;
    assume newTick > 0;
    assume {:nonnull} s_p_e_c_i_a_l_8 != 0;
    assume s_p_e_c_i_a_l_8 > 0;
    goto anon594_Then, anon594_Else;

  anon594_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon433_Then, anon433_Else;

  anon433_Else:
    Tmp_548 := 1;
    goto L1;

  anon433_Then:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon434_Then, anon434_Else;

  anon434_Else:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon436_Then, anon436_Else;

  anon436_Else:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    ret_1 := 1;
    goto L63;

  L63:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon437_Then, anon437_Else;

  anon437_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L64;

  L64:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    call {:si_unique_call 711} vslice_dummy_var_128 := KeInsertQueueDpc#1(MouseIsrResetDpc__PORT_MOUSE_EXTENSION(deviceExtension_6), 0, 0);
    goto anon595_Then, anon595_Else;

  anon595_Else:
    assume {:partition} yogi_error != 1;
    Tmp_548 := ret_1;
    goto L1;

  anon595_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon437_Then:
    goto L64;

  anon436_Then:
    goto L58;

  L58:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon435_Then, anon435_Else;

  anon435_Else:
    cont_1 := 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon439_Then, anon439_Else;

  anon439_Else:
    assume {:partition} cont_1 == 0;
    Tmp_548 := ret_1;
    goto L1;

  anon439_Then:
    assume {:partition} cont_1 != 0;
    goto L70;

  L70:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon438_Then, anon438_Else;

  anon438_Else:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon441_Then, anon441_Else;

  anon441_Else:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon442_Then, anon442_Else;

  anon442_Else:
    goto L81;

  L81:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    call {:si_unique_call 712} sdv_282 := _InlineInterlockedCompareExchangePointer(ResetIrp__PORT_MOUSE_EXTENSION(deviceExtension_6), 0, 0);
    goto anon443_Then, anon443_Else;

  anon443_Else:
    assume {:partition} sdv_282 != 0;
    call {:si_unique_call 713} I8xPutByteAsynchronous(1, 212);
    call {:si_unique_call 714} I8xPutByteAsynchronous(0, 242);
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    Tmp_548 := 1;
    goto L1;

  anon443_Then:
    assume {:partition} sdv_282 == 0;
    goto L64;

  anon442_Then:
    goto L79;

  L79:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon440_Then, anon440_Else;

  anon440_Else:
    goto L99;

  L99:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    assume {:nonnull} newTick != 0;
    assume newTick > 0;
    assume {:nonnull} tickDelta != 0;
    assume tickDelta > 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon596_Then, anon596_Else;

  anon596_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon445_Then, anon445_Else;

  anon445_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon446_Then, anon446_Else;

  anon446_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    assume {:nonnull} tickDelta != 0;
    assume tickDelta > 0;
    goto anon447_Then, anon447_Else;

  anon447_Else:
    assume {:nonnull} tickDelta != 0;
    assume tickDelta > 0;
    goto anon448_Then, anon448_Else;

  anon448_Else:
    goto L103;

  L103:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    assume {:nonnull} newTick != 0;
    assume newTick > 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    assume {:nonnull} newTick != 0;
    assume newTick > 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    assume {:nonnull} newTick != 0;
    assume newTick > 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    assume {:nonnull} newTick != 0;
    assume newTick > 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    assume {:nonnull} newTick != 0;
    assume newTick > 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon597_Then, anon597_Else;

  anon597_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon535_Then, anon535_Else;

  anon535_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon534_Then, anon534_Else;

  anon534_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon533_Then, anon533_Else;

  anon533_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon532_Then, anon532_Else;

  anon532_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon531_Then, anon531_Else;

  anon531_Else:
    goto L118;

  L118:
    call {:si_unique_call 715} Tmp_550, bSendCommand, Tmp_561, Tmp_569, sdv_287, altCommand, Tmp_575 := I8042MouseInterruptService_loop_L118(Tmp_550, bSendCommand, Tmp_561, byte_5, Tmp_569, sdv_287, altCommand, Tmp_575, deviceExtension_6);
    goto L118_last;

  L118_last:
    bSendCommand := 1;
    altCommand := 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon613_Then, anon613_Else;

  anon613_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon586_Then, anon586_Else;

  anon586_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon585_Then, anon585_Else;

  anon585_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon584_Then, anon584_Else;

  anon584_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon583_Then, anon583_Else;

  anon583_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon582_Then, anon582_Else;

  anon582_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon581_Then, anon581_Else;

  anon581_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon580_Then, anon580_Else;

  anon580_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon579_Then, anon579_Else;

  anon579_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon578_Then, anon578_Else;

  anon578_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon577_Then, anon577_Else;

  anon577_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon576_Then, anon576_Else;

  anon576_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon575_Then, anon575_Else;

  anon575_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon574_Then, anon574_Else;

  anon574_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon573_Then, anon573_Else;

  anon573_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon572_Then, anon572_Else;

  anon572_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon571_Then, anon571_Else;

  anon571_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon570_Then, anon570_Else;

  anon570_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon569_Then, anon569_Else;

  anon569_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon568_Then, anon568_Else;

  anon568_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon567_Then, anon567_Else;

  anon567_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon566_Then, anon566_Else;

  anon566_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon565_Then, anon565_Else;

  anon565_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon564_Then, anon564_Else;

  anon564_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon563_Then, anon563_Else;

  anon563_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon562_Then, anon562_Else;

  anon562_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon561_Then, anon561_Else;

  anon561_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon560_Then, anon560_Else;

  anon560_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon559_Then, anon559_Else;

  anon559_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon558_Then, anon558_Else;

  anon558_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon557_Then, anon557_Else;

  anon557_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon556_Then, anon556_Else;

  anon556_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon555_Then, anon555_Else;

  anon555_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon554_Then, anon554_Else;

  anon554_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon553_Then, anon553_Else;

  anon553_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon552_Then, anon552_Else;

  anon552_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon551_Then, anon551_Else;

  anon551_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon550_Then, anon550_Else;

  anon550_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon549_Then, anon549_Else;

  anon549_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon548_Then, anon548_Else;

  anon548_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon547_Then, anon547_Else;

  anon547_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon546_Then, anon546_Else;

  anon546_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon545_Then, anon545_Else;

  anon545_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon544_Then, anon544_Else;

  anon544_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon543_Then, anon543_Else;

  anon543_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon542_Then, anon542_Else;

  anon542_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon541_Then, anon541_Else;

  anon541_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon540_Then, anon540_Else;

  anon540_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon539_Then, anon539_Else;

  anon539_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon538_Then, anon538_Else;

  anon538_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon537_Then, anon537_Else;

  anon537_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon536_Then, anon536_Else;

  anon536_Else:
    bSendCommand := 0;
    altCommand := 242;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L163;

  L163:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon470_Then, anon470_Else;

  anon470_Else:
    goto anon471_Then, anon471_Else;

  anon471_Else:
    assume {:partition} bSendCommand != 0;
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon473_Then, anon473_Else;

  anon473_Else:
    call {:si_unique_call 716} I8xPutByteAsynchronous(1, 212);
    call {:si_unique_call 717} I8xPutByteAsynchronous(0, nextCommand);
    goto L175;

  L175:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon475_Then, anon475_Else;

  anon475_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L164;

  L164:
    Tmp_548 := 1;
    goto L1;

  anon475_Then:
    goto L164;

  anon473_Then:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon474_Then, anon474_Else;

  anon474_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon601_Then, anon601_Else;

  anon601_Else:
    call {:si_unique_call 718} I8xPutByteAsynchronous(1, 212);
    call {:si_unique_call 719} I8xPutByteAsynchronous(0, resendCommand);
    goto L175;

  anon601_Then:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L63;

  anon474_Then:
    goto L175;

  anon471_Then:
    assume {:partition} bSendCommand == 0;
    goto anon472_Then, anon472_Else;

  anon472_Else:
    assume {:partition} altCommand != 0;
    call {:si_unique_call 720} I8xPutByteAsynchronous(1, 212);
    call {:si_unique_call 721} I8xPutByteAsynchronous(0, altCommand);
    goto L175;

  anon472_Then:
    assume {:partition} altCommand == 0;
    goto L175;

  anon470_Then:
    goto L164;

  anon536_Then:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    call {:si_unique_call 722} vslice_dummy_var_111 := KeInsertQueueDpc#1(ErrorLogDpc_COMMON_DATA(deviceExtension_6), 0, -1073414094);
    goto anon641_Then, anon641_Else;

  anon641_Else:
    assume {:partition} yogi_error != 1;
    goto L163;

  anon641_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon537_Then:
    goto L157;

  L157:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    bSendCommand := 0;
    goto L163;

  anon538_Then:
    goto L157;

  anon539_Then:
    goto L157;

  anon540_Then:
    goto L157;

  anon541_Then:
    goto L157;

  anon542_Then:
    goto L157;

  anon543_Then:
    goto L157;

  anon544_Then:
    goto L157;

  anon545_Then:
    goto L157;

  anon546_Then:
    goto L157;

  anon547_Then:
    goto L157;

  anon548_Then:
    Tmp_548 := 1;
    goto L1;

  anon549_Then:
    bSendCommand := 0;
    altCommand := 242;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L163;

  anon550_Then:
    bSendCommand := 0;
    altCommand := 242;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L163;

  anon551_Then:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    call {:si_unique_call 723} sdv_RtlZeroMemory(0, 16);
    bSendCommand := 0;
    goto L163;

  anon552_Then:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon552_Then_dummy;

  anon552_Then_dummy:
    assume false;
    return;

  anon553_Then:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon469_Then, anon469_Else;

  anon469_Else:
    bSendCommand := 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L163;

  anon469_Then:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon476_Then, anon476_Else;

  anon476_Else:
    resendCommand := 242;
    goto L163;

  anon476_Then:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    call {:si_unique_call 724} vslice_dummy_var_112 := KeInsertQueueDpc#1(ErrorLogDpc_COMMON_DATA(deviceExtension_6), 0, -1073414104);
    goto anon640_Then, anon640_Else;

  anon640_Else:
    assume {:partition} yogi_error != 1;
    goto L63;

  anon640_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon554_Then:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon468_Then, anon468_Else;

  anon468_Else:
    nextCommand := 244;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L163;

  anon468_Then:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon477_Then, anon477_Else;

  anon477_Else:
    resendCommand := 232;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L163;

  anon477_Then:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    call {:si_unique_call 725} vslice_dummy_var_113 := KeInsertQueueDpc#1(ErrorLogDpc_COMMON_DATA(deviceExtension_6), 0, -1073414121);
    goto anon639_Then, anon639_Else;

  anon639_Else:
    assume {:partition} yogi_error != 1;
    goto L63;

  anon639_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon555_Then:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon467_Then, anon467_Else;

  anon467_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    havoc nextCommand;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L163;

  anon467_Then:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon478_Then, anon478_Else;

  anon478_Else:
    resendCommand := 232;
    goto L163;

  anon478_Then:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    call {:si_unique_call 726} vslice_dummy_var_114 := KeInsertQueueDpc#1(ErrorLogDpc_COMMON_DATA(deviceExtension_6), 0, -1073414121);
    goto anon638_Then, anon638_Else;

  anon638_Else:
    assume {:partition} yogi_error != 1;
    goto L63;

  anon638_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon556_Then:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon466_Then, anon466_Else;

  anon466_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    call {:si_unique_call 727} I8xQueueCurrentMouseInput(DeviceObject_14);
    goto anon635_Then, anon635_Else;

  anon635_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    havoc vslice_dummy_var_215;
    call {:si_unique_call 728} sdv_IoRequestDpc(DeviceObject_14, vslice_dummy_var_215, 3);
    goto anon636_Then, anon636_Else;

  anon636_Else:
    assume {:partition} yogi_error != 1;
    goto L163;

  anon636_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon635_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon466_Then:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon479_Then, anon479_Else;

  anon479_Else:
    resendCommand := 244;
    goto L163;

  anon479_Then:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    call {:si_unique_call 729} vslice_dummy_var_115 := KeInsertQueueDpc#1(ErrorLogDpc_COMMON_DATA(deviceExtension_6), 0, -1073414103);
    goto anon637_Then, anon637_Else;

  anon637_Else:
    assume {:partition} yogi_error != 1;
    goto L63;

  anon637_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon557_Then:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon465_Then, anon465_Else;

  anon465_Else:
    nextCommand := 232;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L163;

  anon465_Then:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon480_Then, anon480_Else;

  anon480_Else:
    resendCommand := 243;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L163;

  anon480_Then:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    call {:si_unique_call 730} vslice_dummy_var_116 := KeInsertQueueDpc#1(ErrorLogDpc_COMMON_DATA(deviceExtension_6), 0, -1073414122);
    goto anon634_Then, anon634_Else;

  anon634_Else:
    assume {:partition} yogi_error != 1;
    goto L63;

  anon634_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon558_Then:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon464_Then, anon464_Else;

  anon464_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    havoc nextCommand;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L163;

  anon464_Then:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon481_Then, anon481_Else;

  anon481_Else:
    resendCommand := 243;
    goto L163;

  anon481_Then:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    call {:si_unique_call 731} vslice_dummy_var_117 := KeInsertQueueDpc#1(ErrorLogDpc_COMMON_DATA(deviceExtension_6), 0, -1073414122);
    goto anon633_Then, anon633_Else;

  anon633_Else:
    assume {:partition} yogi_error != 1;
    goto L63;

  anon633_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon559_Then:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon630_Then, anon630_Else;

  anon630_Else:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon588_Then, anon588_Else;

  anon588_Else:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon587_Then, anon587_Else;

  anon587_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L283;

  L283:
    bSendCommand := 0;
    altCommand := 243;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L163;

  anon587_Then:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    call {:si_unique_call 732} vslice_dummy_var_118 := KeInsertQueueDpc#1(ErrorLogDpc_COMMON_DATA(deviceExtension_6), 0, 327698);
    goto anon632_Then, anon632_Else;

  anon632_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L63;

  anon632_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon588_Then:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L283;

  anon630_Then:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon631_Then, anon631_Else;

  anon631_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L283;

  anon631_Then:
    goto L283;

  anon560_Then:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon463_Then, anon463_Else;

  anon463_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    bSendCommand := 0;
    goto L163;

  anon463_Then:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon482_Then, anon482_Else;

  anon482_Else:
    resendCommand := 242;
    goto L163;

  anon482_Then:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    call {:si_unique_call 733} vslice_dummy_var_119 := KeInsertQueueDpc#1(ErrorLogDpc_COMMON_DATA(deviceExtension_6), 0, -1073414104);
    goto anon629_Then, anon629_Else;

  anon629_Else:
    assume {:partition} yogi_error != 1;
    goto L63;

  anon629_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon561_Then:
    bSendCommand := 0;
    altCommand := 243;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L163;

  anon562_Then:
    bSendCommand := 0;
    altCommand := 243;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L163;

  anon563_Then:
    goto L140;

  L140:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon462_Then, anon462_Else;

  anon462_Else:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    havoc Tmp_569;
    goto L324;

  L324:
    bSendCommand := 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon627_Then, anon627_Else;

  anon627_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    havoc vslice_dummy_var_216;
    call {:si_unique_call 734} sdv_287 := I8xVerifyMousePnPID(deviceExtension_6, vslice_dummy_var_216);
    goto anon484_Then, anon484_Else;

  anon484_Else:
    assume {:partition} sdv_287 != 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon484_Else_dummy;

  anon484_Else_dummy:
    assume false;
    return;

  anon484_Then:
    assume {:partition} sdv_287 == 0;
    altCommand := 242;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L163;

  anon627_Then:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L163;

  anon462_Then:
    goto L324;

  anon564_Then:
    goto L140;

  anon565_Then:
    goto L140;

  anon566_Then:
    goto L140;

  anon567_Then:
    goto L140;

  anon568_Then:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    havoc Tmp_561;
    assume {:nonnull} Tmp_561 != 0;
    assume Tmp_561 > 0;
    goto anon628_Then, anon628_Else;

  anon628_Else:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon483_Then, anon483_Else;

  anon483_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    bSendCommand := 0;
    goto L163;

  anon483_Then:
    goto L140;

  anon628_Then:
    goto L140;

  anon569_Then:
    goto L140;

  anon570_Then:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon461_Then, anon461_Else;

  anon461_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    havoc Tmp_575;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    havoc Tmp_550;
    assume {:nonnull} Tmp_550 != 0;
    assume Tmp_550 > 0;
    goto anon625_Then, anon625_Else;

  anon625_Else:
    nextCommand := 243;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L163;

  anon625_Then:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon625_Then_dummy;

  anon625_Then_dummy:
    assume false;
    return;

  anon461_Then:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon485_Then, anon485_Else;

  anon485_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    havoc Tmp_564;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    havoc Tmp_570;
    assume {:nonnull} Tmp_570 != 0;
    assume Tmp_570 > 0;
    havoc resendCommand;
    goto L163;

  anon485_Then:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    call {:si_unique_call 735} vslice_dummy_var_120 := KeInsertQueueDpc#1(ErrorLogDpc_COMMON_DATA(deviceExtension_6), 0, -1073414122);
    goto anon626_Then, anon626_Else;

  anon626_Else:
    assume {:partition} yogi_error != 1;
    bSendCommand := 0;
    altCommand := 242;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L163;

  anon626_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon571_Then:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon460_Then, anon460_Else;

  anon460_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    havoc Tmp_557;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    havoc Tmp_560;
    assume {:nonnull} Tmp_560 != 0;
    assume Tmp_560 > 0;
    havoc nextCommand;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L163;

  anon460_Then:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon486_Then, anon486_Else;

  anon486_Else:
    resendCommand := 243;
    goto L163;

  anon486_Then:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    call {:si_unique_call 736} vslice_dummy_var_121 := KeInsertQueueDpc#1(ErrorLogDpc_COMMON_DATA(deviceExtension_6), 0, -1073414122);
    goto anon624_Then, anon624_Else;

  anon624_Else:
    assume {:partition} yogi_error != 1;
    bSendCommand := 0;
    altCommand := 242;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L163;

  anon624_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon572_Then:
    nextCommand := 243;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L163;

  anon573_Then:
    bSendCommand := 0;
    altCommand := 232;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L163;

  anon574_Then:
    bSendCommand := 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon623_Then, anon623_Else;

  anon623_Else:
    goto L373;

  L373:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L163;

  anon623_Then:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon487_Then, anon487_Else;

  anon487_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L163;

  anon487_Then:
    goto L373;

  anon575_Then:
    bSendCommand := 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L163;

  anon576_Then:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon459_Then, anon459_Else;

  anon459_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    bSendCommand := 0;
    goto L163;

  anon459_Then:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon488_Then, anon488_Else;

  anon488_Else:
    resendCommand := 233;
    goto L163;

  anon488_Then:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    call {:si_unique_call 737} vslice_dummy_var_122 := KeInsertQueueDpc#1(ErrorLogDpc_COMMON_DATA(deviceExtension_6), 0, -1073414110);
    goto anon622_Then, anon622_Else;

  anon622_Else:
    assume {:partition} yogi_error != 1;
    bSendCommand := 0;
    altCommand := 242;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L163;

  anon622_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon577_Then:
    goto L132;

  L132:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon458_Then, anon458_Else;

  anon458_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon490_Then, anon490_Else;

  anon490_Else:
    nextCommand := 233;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L163;

  anon490_Then:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    nextCommand := 230;
    goto L163;

  anon458_Then:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon489_Then, anon489_Else;

  anon489_Else:
    resendCommand := 230;
    goto L163;

  anon489_Then:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    call {:si_unique_call 738} vslice_dummy_var_123 := KeInsertQueueDpc#1(ErrorLogDpc_COMMON_DATA(deviceExtension_6), 0, -1073414110);
    goto anon621_Then, anon621_Else;

  anon621_Else:
    assume {:partition} yogi_error != 1;
    bSendCommand := 0;
    altCommand := 242;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L163;

  anon621_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon578_Then:
    goto L132;

  anon579_Then:
    goto L132;

  anon580_Then:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon457_Then, anon457_Else;

  anon457_Else:
    nextCommand := 230;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L163;

  anon457_Then:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon491_Then, anon491_Else;

  anon491_Else:
    resendCommand := 0;
    goto L163;

  anon491_Then:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    call {:si_unique_call 739} vslice_dummy_var_124 := KeInsertQueueDpc#1(ErrorLogDpc_COMMON_DATA(deviceExtension_6), 0, -1073414122);
    goto anon620_Then, anon620_Else;

  anon620_Else:
    assume {:partition} yogi_error != 1;
    bSendCommand := 0;
    altCommand := 242;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L163;

  anon620_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon581_Then:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon456_Then, anon456_Else;

  anon456_Else:
    nextCommand := 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L163;

  anon456_Then:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon492_Then, anon492_Else;

  anon492_Else:
    resendCommand := 232;
    goto L163;

  anon492_Then:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    call {:si_unique_call 740} vslice_dummy_var_125 := KeInsertQueueDpc#1(ErrorLogDpc_COMMON_DATA(deviceExtension_6), 0, -1073414121);
    goto anon619_Then, anon619_Else;

  anon619_Else:
    assume {:partition} yogi_error != 1;
    bSendCommand := 0;
    altCommand := 242;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L163;

  anon619_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon582_Then:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon455_Then, anon455_Else;

  anon455_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon494_Then, anon494_Else;

  anon494_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon494_Else_dummy;

  anon494_Else_dummy:
    assume false;
    return;

  anon494_Then:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon495_Then, anon495_Else;

  anon495_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon495_Else_dummy;

  anon495_Else_dummy:
    assume false;
    return;

  anon495_Then:
    nextCommand := 242;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L163;

  anon455_Then:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon493_Then, anon493_Else;

  anon493_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    resendCommand := 232;
    goto L163;

  anon493_Then:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    call {:si_unique_call 741} vslice_dummy_var_126 := KeInsertQueueDpc#1(ErrorLogDpc_COMMON_DATA(deviceExtension_6), 0, -1073414121);
    goto anon618_Then, anon618_Else;

  anon618_Else:
    assume {:partition} yogi_error != 1;
    goto L63;

  anon618_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon583_Then:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon454_Then, anon454_Else;

  anon454_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    havoc nextCommand;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L163;

  anon454_Then:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon496_Then, anon496_Else;

  anon496_Else:
    resendCommand := 232;
    goto L163;

  anon496_Then:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    call {:si_unique_call 742} vslice_dummy_var_127 := KeInsertQueueDpc#1(ErrorLogDpc_COMMON_DATA(deviceExtension_6), 0, -1073414121);
    goto anon617_Then, anon617_Else;

  anon617_Else:
    assume {:partition} yogi_error != 1;
    goto L63;

  anon617_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon584_Then:
    bSendCommand := 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon616_Then, anon616_Else;

  anon616_Else:
    altCommand := 232;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L163;

  anon616_Then:
    altCommand := 232;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L163;

  anon585_Then:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon453_Then, anon453_Else;

  anon453_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    bSendCommand := 0;
    goto L163;

  anon453_Then:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon497_Then, anon497_Else;

  anon497_Else:
    resendCommand := 242;
    goto L163;

  anon497_Then:
    goto L63;

  anon586_Then:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon615_Then, anon615_Else;

  anon615_Else:
    bSendCommand := 0;
    altCommand := 242;
    goto L163;

  anon615_Then:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L163;

  anon613_Then:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon452_Then, anon452_Else;

  anon452_Else:
    bSendCommand := 0;
    goto L163;

  anon452_Then:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon498_Then, anon498_Else;

  anon498_Else:
    bSendCommand := 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon614_Then, anon614_Else;

  anon614_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon500_Then, anon500_Else;

  anon500_Else:
    altCommand := 255;
    goto L163;

  anon500_Then:
    goto L163;

  anon614_Then:
    goto L163;

  anon498_Then:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon499_Then, anon499_Else;

  anon499_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon501_Then, anon501_Else;

  anon501_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L163;

  anon501_Then:
    goto L63;

  anon499_Then:
    goto L163;

  anon531_Then:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    call {:si_unique_call 743} vslice_dummy_var_110 := KeInsertQueueDpc#1(ErrorLogDpc_COMMON_DATA(deviceExtension_6), 0, -1073414094);
    goto anon642_Then, anon642_Else;

  anon642_Else:
    assume {:partition} yogi_error != 1;
    goto L163;

  anon642_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon532_Then:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon451_Then, anon451_Else;

  anon451_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L163;

  anon451_Then:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon502_Then, anon502_Else;

  anon502_Else:
    resendCommand := 244;
    goto L163;

  anon502_Then:
    goto L163;

  anon533_Then:
    havoc Tmp_574;
    goto anon610_Then, anon610_Else;

  anon610_Else:
    assume {:partition} Tmp_574 == 4096;
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon504_Then, anon504_Else;

  anon504_Else:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon505_Then, anon505_Else;

  anon505_Else:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    havoc Tmp_553;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L503;

  L503:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L498;

  L498:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    havoc previousButtons;
    goto anon611_Then, anon611_Else;

  anon611_Else:
    assume {:partition} BAND(previousButtons, 16) != 0;
    goto L507;

  L507:
    goto anon507_Then, anon507_Else;

  anon507_Else:
    assume {:partition} BAND(previousButtons, 16) != 0;
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon509_Then, anon509_Else;

  anon509_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L508;

  L508:
    goto anon508_Then, anon508_Else;

  anon508_Else:
    assume {:partition} BAND(previousButtons, 32) != 0;
    goto L512;

  L512:
    goto anon511_Then, anon511_Else;

  anon511_Else:
    assume {:partition} BAND(previousButtons, 32) != 0;
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon512_Then, anon512_Else;

  anon512_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L513;

  L513:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    havoc Tmp_567;
    Tmp_552 := BAND(previousButtons, BOR(BOR(1, 2), 4));
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L518;

  L518:
    call {:si_unique_call 744} I8xQueueCurrentMouseInput(DeviceObject_14);
    goto anon612_Then, anon612_Else;

  anon612_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L163;

  anon612_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon512_Then:
    goto L513;

  anon511_Then:
    assume {:partition} BAND(previousButtons, 32) == 0;
    goto L513;

  anon508_Then:
    assume {:partition} BAND(previousButtons, 32) == 0;
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon510_Then, anon510_Else;

  anon510_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L513;

  anon510_Then:
    goto L512;

  anon509_Then:
    goto L508;

  anon507_Then:
    assume {:partition} BAND(previousButtons, 16) == 0;
    goto L508;

  anon611_Then:
    assume {:partition} BAND(previousButtons, 16) == 0;
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon506_Then, anon506_Else;

  anon506_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L508;

  anon506_Then:
    goto L507;

  anon505_Then:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    havoc Tmp_563;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L503;

  anon504_Then:
    goto L498;

  anon610_Then:
    assume {:partition} Tmp_574 != 4096;
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon503_Then, anon503_Else;

  anon503_Else:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L518;

  anon503_Then:
    goto L518;

  anon534_Then:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon450_Then, anon450_Else;

  anon450_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    havoc previousSignAndOverflow;
    goto anon605_Then, anon605_Else;

  anon605_Else:
    assume {:partition} BAND(previousSignAndOverflow, 128) != 0;
    Tmp_556 := BAND(previousSignAndOverflow, 32);
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    havoc Tmp_573;
    goto anon606_Then, anon606_Else;

  anon606_Else:
    assume {:partition} Tmp_556 != Tmp_573;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    call {:si_unique_call 745} boogieTmp := corral_nondet();
    goto L530;

  L530:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon513_Then, anon513_Else;

  anon513_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L537;

  L537:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    havoc Tmp_576;
    goto anon607_Then, anon607_Else;

  anon607_Else:
    assume {:partition} Tmp_576 == 8;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L163;

  anon607_Then:
    assume {:partition} Tmp_576 != 8;
    call {:si_unique_call 746} I8xQueueCurrentMouseInput(DeviceObject_14);
    goto anon608_Then, anon608_Else;

  anon608_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L163;

  anon608_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon513_Then:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L537;

  anon606_Then:
    assume {:partition} Tmp_556 == Tmp_573;
    goto L530;

  anon605_Then:
    assume {:partition} BAND(previousSignAndOverflow, 128) == 0;
    goto L530;

  anon450_Then:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon609_Then, anon609_Else;

  anon609_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L547;

  L547:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L537;

  anon609_Then:
    goto L547;

  anon535_Then:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon449_Then, anon449_Else;

  anon449_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    havoc previousSignAndOverflow;
    goto anon602_Then, anon602_Else;

  anon602_Else:
    assume {:partition} BAND(previousSignAndOverflow, 64) != 0;
    Tmp_571 := BAND(previousSignAndOverflow, 16);
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    havoc Tmp_551;
    goto anon603_Then, anon603_Else;

  anon603_Else:
    assume {:partition} Tmp_571 != Tmp_551;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    call {:si_unique_call 747} boogieTmp := corral_nondet();
    goto L552;

  L552:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon514_Then, anon514_Else;

  anon514_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L559;

  L559:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L163;

  anon514_Then:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L559;

  anon603_Then:
    assume {:partition} Tmp_571 == Tmp_551;
    goto L552;

  anon602_Then:
    assume {:partition} BAND(previousSignAndOverflow, 64) == 0;
    goto L552;

  anon449_Then:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon604_Then, anon604_Else;

  anon604_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L559;

  anon604_Then:
    goto L559;

  anon597_Then:
    havoc Tmp_578;
    goto anon598_Then, anon598_Else;

  anon598_Else:
    assume {:partition} Tmp_578 == 8;
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    havoc Tmp_562;
    goto anon599_Then, anon599_Else;

  anon599_Else:
    assume {:partition} Tmp_562 == 8;
    goto L564;

  L564:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    havoc previousButtons;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon600_Then, anon600_Else;

  anon600_Else:
    assume {:partition} BAND(previousButtons, 1) != 0;
    goto L572;

  L572:
    goto anon516_Then, anon516_Else;

  anon516_Else:
    assume {:partition} BAND(previousButtons, 1) != 0;
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon518_Then, anon518_Else;

  anon518_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L573;

  L573:
    goto anon517_Then, anon517_Else;

  anon517_Else:
    assume {:partition} BAND(previousButtons, 2) != 0;
    goto L577;

  L577:
    goto anon520_Then, anon520_Else;

  anon520_Else:
    assume {:partition} BAND(previousButtons, 2) != 0;
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon522_Then, anon522_Else;

  anon522_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L578;

  L578:
    goto anon521_Then, anon521_Else;

  anon521_Else:
    assume {:partition} BAND(previousButtons, 4) != 0;
    goto L582;

  L582:
    goto anon524_Then, anon524_Else;

  anon524_Else:
    assume {:partition} BAND(previousButtons, 4) != 0;
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon525_Then, anon525_Else;

  anon525_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L583;

  L583:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    havoc Tmp_572;
    Tmp_549 := BAND(previousButtons, BOR(16, 32));
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L163;

  anon525_Then:
    goto L583;

  anon524_Then:
    assume {:partition} BAND(previousButtons, 4) == 0;
    goto L583;

  anon521_Then:
    assume {:partition} BAND(previousButtons, 4) == 0;
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon523_Then, anon523_Else;

  anon523_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L583;

  anon523_Then:
    goto L582;

  anon522_Then:
    goto L578;

  anon520_Then:
    assume {:partition} BAND(previousButtons, 2) == 0;
    goto L578;

  anon517_Then:
    assume {:partition} BAND(previousButtons, 2) == 0;
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon519_Then, anon519_Else;

  anon519_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L578;

  anon519_Then:
    goto L577;

  anon518_Then:
    goto L573;

  anon516_Then:
    assume {:partition} BAND(previousButtons, 1) == 0;
    goto L573;

  anon600_Then:
    assume {:partition} BAND(previousButtons, 1) == 0;
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon515_Then, anon515_Else;

  anon515_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto L573;

  anon515_Then:
    goto L572;

  anon599_Then:
    assume {:partition} Tmp_562 != 8;
    goto L63;

  anon598_Then:
    assume {:partition} Tmp_578 != 8;
    goto L564;

  anon448_Then:
    goto L63;

  anon447_Then:
    goto L63;

  anon446_Then:
    goto L103;

  anon445_Then:
    goto L103;

  anon596_Then:
    goto L103;

  anon440_Then:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon444_Then, anon444_Else;

  anon444_Else:
    assume {:nonnull} DeviceObject_14 != 0;
    assume DeviceObject_14 > 0;
    goto anon526_Then, anon526_Else;

  anon526_Else:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon527_Then, anon527_Else;

  anon527_Else:
    goto anon529_Then, anon529_Else;

  anon529_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon643_Then, anon643_Else;

  anon643_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    call {:si_unique_call 748} I8xInitiateIo(DeviceObject_14);
    goto anon644_Then, anon644_Else;

  anon644_Else:
    assume {:partition} yogi_error != 1;
    goto L99;

  anon644_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon643_Then:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    assume {:nonnull} DeviceObject_14 != 0;
    assume DeviceObject_14 > 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    havoc vslice_dummy_var_217;
    call {:si_unique_call 749} vslice_dummy_var_129 := KeInsertQueueDpc#1(RetriesExceededDpc_COMMON_DATA(deviceExtension_6), vslice_dummy_var_217, 0);
    goto anon645_Then, anon645_Else;

  anon645_Else:
    assume {:partition} yogi_error != 1;
    Tmp_548 := 1;
    goto L1;

  anon645_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon529_Then:
    Tmp_548 := 0;
    goto L1;

  anon527_Then:
    assume {:nonnull} byte_5 != 0;
    assume byte_5 > 0;
    goto anon528_Then, anon528_Else;

  anon528_Else:
    goto anon530_Then, anon530_Else;

  anon530_Else:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    goto anon646_Then, anon646_Else;

  anon646_Else:
    call {:si_unique_call 750} I8xInitiateIo(DeviceObject_14);
    goto anon647_Then, anon647_Else;

  anon647_Else:
    assume {:partition} yogi_error != 1;
    goto L621;

  L621:
    Tmp_548 := 1;
    goto L1;

  anon647_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon646_Then:
    assume {:nonnull} deviceExtension_6 != 0;
    assume deviceExtension_6 > 0;
    assume {:nonnull} DeviceObject_14 != 0;
    assume DeviceObject_14 > 0;
    havoc vslice_dummy_var_218;
    call {:si_unique_call 751} sdv_IoRequestDpc(DeviceObject_14, vslice_dummy_var_218, 2);
    goto anon648_Then, anon648_Else;

  anon648_Else:
    assume {:partition} yogi_error != 1;
    goto L621;

  anon648_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon530_Then:
    Tmp_548 := 0;
    goto L1;

  anon528_Then:
    goto L99;

  anon526_Then:
    goto L99;

  anon444_Then:
    goto L99;

  anon441_Then:
    goto L81;

  anon438_Then:
    goto L79;

  anon435_Then:
    goto L70;

  anon434_Then:
    goto L58;

  anon594_Then:
    goto anon594_Then_dummy;

  anon594_Then_dummy:
    assume false;
    return;

  anon592_Then:
    assume {:IndirectCall} true;
    call {:si_unique_call 752} statusByte_1 := corral_nondet();
    goto L42;

  anon591_Then:
    assume {:partition} Tmp_555 == 33;
    goto L31;

  anon590_Then:
    assume {:IndirectCall} true;
    call {:si_unique_call 753} statusByte_1 := corral_nondet();
    goto L29;
}



procedure {:origName "_sdv_init10"} _sdv_init10();
  modifies alloc;



implementation {:origName "_sdv_init10"} _sdv_init10()
{
  var vslice_dummy_var_130: int;

  anon0:
    call {:si_unique_call 754} vslice_dummy_var_130 := __HAVOC_malloc(4);
    assume ScanCodeToUCharCount_7 == 54;
    return;
}



procedure {:origName "I8xWriteDataToMouseQueue"} I8xWriteDataToMouseQueue(actual_MouseExtension_18: int, actual_InputData_1: int) returns (Tmp_581: int);
  free ensures Tmp_581 == 0 || Tmp_581 == 1;



implementation {:origName "I8xWriteDataToMouseQueue"} I8xWriteDataToMouseQueue(actual_MouseExtension_18: int, actual_InputData_1: int) returns (Tmp_581: int)
{
  var {:pointer} Tmp_582: int;
  var {:pointer} MouseExtension_18: int;
  var {:pointer} InputData_1: int;

  anon0:
    MouseExtension_18 := actual_MouseExtension_18;
    InputData_1 := actual_InputData_1;
    assume {:nonnull} MouseExtension_18 != 0;
    assume MouseExtension_18 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:nonnull} MouseExtension_18 != 0;
    assume MouseExtension_18 > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    Tmp_581 := 0;
    goto L1;

  L1:
    return;

  anon8_Then:
    goto L4;

  L4:
    assume {:nonnull} MouseExtension_18 != 0;
    assume MouseExtension_18 > 0;
    havoc Tmp_582;
    assume {:nonnull} InputData_1 != 0;
    assume InputData_1 > 0;
    assume {:nonnull} Tmp_582 != 0;
    assume Tmp_582 > 0;
    assume {:nonnull} InputData_1 != 0;
    assume InputData_1 > 0;
    assume {:nonnull} Tmp_582 != 0;
    assume Tmp_582 > 0;
    assume {:nonnull} InputData_1 != 0;
    assume InputData_1 > 0;
    assume {:nonnull} Tmp_582 != 0;
    assume Tmp_582 > 0;
    assume {:nonnull} InputData_1 != 0;
    assume InputData_1 > 0;
    assume {:nonnull} Tmp_582 != 0;
    assume Tmp_582 > 0;
    assume {:nonnull} InputData_1 != 0;
    assume InputData_1 > 0;
    assume {:nonnull} Tmp_582 != 0;
    assume Tmp_582 > 0;
    assume {:nonnull} InputData_1 != 0;
    assume InputData_1 > 0;
    assume {:nonnull} Tmp_582 != 0;
    assume Tmp_582 > 0;
    assume {:nonnull} InputData_1 != 0;
    assume InputData_1 > 0;
    assume {:nonnull} Tmp_582 != 0;
    assume Tmp_582 > 0;
    assume {:nonnull} InputData_1 != 0;
    assume InputData_1 > 0;
    assume {:nonnull} Tmp_582 != 0;
    assume Tmp_582 > 0;
    assume {:nonnull} InputData_1 != 0;
    assume InputData_1 > 0;
    assume {:nonnull} Tmp_582 != 0;
    assume Tmp_582 > 0;
    assume {:nonnull} MouseExtension_18 != 0;
    assume MouseExtension_18 > 0;
    assume {:nonnull} MouseExtension_18 != 0;
    assume MouseExtension_18 > 0;
    assume {:nonnull} MouseExtension_18 != 0;
    assume MouseExtension_18 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:nonnull} MouseExtension_18 != 0;
    assume MouseExtension_18 > 0;
    goto L10;

  L10:
    Tmp_581 := 1;
    goto L1;

  anon9_Then:
    goto L10;

  anon7_Then:
    goto L4;
}



procedure {:origName "I8042MouseIsrDpc"} I8042MouseIsrDpc(actual_Dpc_4: int, actual_DeviceObjectIn_3: int, actual_IrpIn_1: int, actual_Context_2: int);
  modifies alloc;



implementation {:origName "I8042MouseIsrDpc"} I8042MouseIsrDpc(actual_Dpc_4: int, actual_DeviceObjectIn_3: int, actual_IrpIn_1: int, actual_Context_2: int)
{
  var {:scalar} dataNotConsumed_1: int;
  var {:scalar} moreDpcProcessing_1: int;
  var {:scalar} inputDataConsumed_1: int;
  var {:pointer} DeviceObject_15: int;
  var {:scalar} operationContext_1: int;
  var {:pointer} classService_1: int;
  var {:dopa} {:scalar} interlockedResult_1: int;
  var {:scalar} setPointerContext_1: int;
  var {:scalar} deltaTime_1: int;
  var {:scalar} Tmp_584: int;
  var {:scalar} getPointerContext_1: int;
  var {:pointer} deviceExtension_7: int;
  var {:pointer} DeviceObjectIn_3: int;
  var {:pointer} IrpIn_1: int;
  var vslice_dummy_var_131: int;
  var vslice_dummy_var_132: int;
  var vslice_dummy_var_133: int;
  var vslice_dummy_var_134: int;
  var vslice_dummy_var_135: int;
  var vslice_dummy_var_136: int;
  var vslice_dummy_var_137: int;
  var vslice_dummy_var_138: int;

  anon0:
    call {:si_unique_call 755} operationContext_1 := __HAVOC_malloc(12);
    call {:si_unique_call 756} interlockedResult_1 := __HAVOC_malloc(4);
    call {:si_unique_call 757} setPointerContext_1 := __HAVOC_malloc(16);
    call {:si_unique_call 758} deltaTime_1 := __HAVOC_malloc(20);
    call {:si_unique_call 759} getPointerContext_1 := __HAVOC_malloc(20);
    call {:si_unique_call 760} vslice_dummy_var_131 := __HAVOC_malloc(4);
    DeviceObjectIn_3 := actual_DeviceObjectIn_3;
    IrpIn_1 := actual_IrpIn_1;
    DeviceObject_15 := DeviceObjectIn_3;
    dataNotConsumed_1 := 0;
    inputDataConsumed_1 := 0;
    assume {:nonnull} DeviceObject_15 != 0;
    assume DeviceObject_15 > 0;
    havoc deviceExtension_7;
    assume {:nonnull} deviceExtension_7 != 0;
    assume deviceExtension_7 > 0;
    assume {:nonnull} operationContext_1 != 0;
    assume operationContext_1 > 0;
    assume {:nonnull} operationContext_1 != 0;
    assume operationContext_1 > 0;
    assume {:nonnull} operationContext_1 != 0;
    assume operationContext_1 > 0;
    call {:si_unique_call 761} vslice_dummy_var_133 := KeSynchronizeExecution(0, li2bplFunctionConstant206, 0);
    assume {:nonnull} interlockedResult_1 != 0;
    assume interlockedResult_1 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    Tmp_584 := 0;
    goto L30;

  L30:
    moreDpcProcessing_1 := Tmp_584;
    goto L31;

  L31:
    call {:si_unique_call 762} dataNotConsumed_1, moreDpcProcessing_1, inputDataConsumed_1, classService_1, vslice_dummy_var_132, vslice_dummy_var_134, vslice_dummy_var_135, vslice_dummy_var_136, vslice_dummy_var_137, vslice_dummy_var_138 := I8042MouseIsrDpc_loop_L31(dataNotConsumed_1, moreDpcProcessing_1, inputDataConsumed_1, operationContext_1, classService_1, interlockedResult_1, setPointerContext_1, deltaTime_1, getPointerContext_1, deviceExtension_7, vslice_dummy_var_132, vslice_dummy_var_134, vslice_dummy_var_135, vslice_dummy_var_136, vslice_dummy_var_137, vslice_dummy_var_138);
    goto L31_last;

  L31_last:
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} moreDpcProcessing_1 != 0;
    dataNotConsumed_1 := 0;
    inputDataConsumed_1 := 0;
    assume {:nonnull} getPointerContext_1 != 0;
    assume getPointerContext_1 > 0;
    assume {:nonnull} setPointerContext_1 != 0;
    assume setPointerContext_1 > 0;
    assume {:nonnull} getPointerContext_1 != 0;
    assume getPointerContext_1 > 0;
    assume {:nonnull} setPointerContext_1 != 0;
    assume setPointerContext_1 > 0;
    assume {:nonnull} setPointerContext_1 != 0;
    assume setPointerContext_1 > 0;
    call {:si_unique_call 763} vslice_dummy_var_134 := KeSynchronizeExecution(0, li2bplFunctionConstant207, 0);
    assume {:nonnull} getPointerContext_1 != 0;
    assume getPointerContext_1 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} deviceExtension_7 != 0;
    assume deviceExtension_7 > 0;
    assume {:nonnull} deviceExtension_7 != 0;
    assume deviceExtension_7 > 0;
    havoc classService_1;
    assume {:nonnull} getPointerContext_1 != 0;
    assume getPointerContext_1 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume classService_1 == 0;
    assume {:nonnull} deviceExtension_7 != 0;
    assume deviceExtension_7 > 0;
    havoc dataNotConsumed_1;
    assume {:nonnull} setPointerContext_1 != 0;
    assume setPointerContext_1 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} dataNotConsumed_1 != 0;
    assume {:nonnull} getPointerContext_1 != 0;
    assume getPointerContext_1 > 0;
    assume {:nonnull} setPointerContext_1 != 0;
    assume setPointerContext_1 > 0;
    goto L47;

  L47:
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} dataNotConsumed_1 != 0;
    goto L58;

  L58:
    call {:si_unique_call 764} vslice_dummy_var_132 := KeSynchronizeExecution(0, li2bplFunctionConstant210, 0);
    goto L43;

  L43:
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} dataNotConsumed_1 != 0;
    assume {:nonnull} operationContext_1 != 0;
    assume operationContext_1 > 0;
    assume {:nonnull} interlockedResult_1 != 0;
    assume interlockedResult_1 > 0;
    assume {:nonnull} operationContext_1 != 0;
    assume operationContext_1 > 0;
    call {:si_unique_call 765} vslice_dummy_var_135 := KeSynchronizeExecution(0, li2bplFunctionConstant206, 0);
    assume {:nonnull} deltaTime_1 != 0;
    assume deltaTime_1 > 0;
    assume {:nonnull} deltaTime_1 != 0;
    assume deltaTime_1 > 0;
    call {:si_unique_call 766} vslice_dummy_var_136 := KeSetTimer(0, deltaTime_1, 0);
    moreDpcProcessing_1 := 0;
    goto anon22_Else_dummy;

  anon22_Else_dummy:
    assume false;
    return;

  anon22_Then:
    assume {:partition} dataNotConsumed_1 == 0;
    assume {:nonnull} operationContext_1 != 0;
    assume operationContext_1 > 0;
    assume {:nonnull} operationContext_1 != 0;
    assume operationContext_1 > 0;
    call {:si_unique_call 767} vslice_dummy_var_137 := KeSynchronizeExecution(0, li2bplFunctionConstant206, 0);
    assume {:nonnull} interlockedResult_1 != 0;
    assume interlockedResult_1 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:nonnull} operationContext_1 != 0;
    assume operationContext_1 > 0;
    assume {:nonnull} interlockedResult_1 != 0;
    assume interlockedResult_1 > 0;
    assume {:nonnull} operationContext_1 != 0;
    assume operationContext_1 > 0;
    call {:si_unique_call 768} vslice_dummy_var_138 := KeSynchronizeExecution(0, li2bplFunctionConstant206, 0);
    goto anon25_Else_dummy;

  anon25_Else_dummy:
    assume false;
    return;

  anon25_Then:
    moreDpcProcessing_1 := 0;
    goto anon25_Then_dummy;

  anon25_Then_dummy:
    assume false;
    return;

  anon23_Then:
    assume {:partition} dataNotConsumed_1 == 0;
    assume {:nonnull} getPointerContext_1 != 0;
    assume getPointerContext_1 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume classService_1 == 0;
    assume {:nonnull} getPointerContext_1 != 0;
    assume getPointerContext_1 > 0;
    havoc dataNotConsumed_1;
    assume {:nonnull} getPointerContext_1 != 0;
    assume getPointerContext_1 > 0;
    assume {:nonnull} setPointerContext_1 != 0;
    assume setPointerContext_1 > 0;
    assume {:nonnull} setPointerContext_1 != 0;
    assume setPointerContext_1 > 0;
    goto L58;

  anon24_Then:
    goto L58;

  anon27_Then:
    assume {:partition} dataNotConsumed_1 == 0;
    assume {:nonnull} deviceExtension_7 != 0;
    assume deviceExtension_7 > 0;
    assume {:nonnull} setPointerContext_1 != 0;
    assume setPointerContext_1 > 0;
    assume {:nonnull} getPointerContext_1 != 0;
    assume getPointerContext_1 > 0;
    assume {:nonnull} setPointerContext_1 != 0;
    assume setPointerContext_1 > 0;
    goto L47;

  anon26_Then:
    goto L47;

  anon21_Then:
    goto L43;

  anon20_Then:
    assume {:partition} moreDpcProcessing_1 == 0;
    return;

  anon19_Then:
    Tmp_584 := 1;
    goto L30;
}



procedure {:origName "sdv_IoReleaseRemoveLock"} sdv_IoReleaseRemoveLock(actual_sdv_306: int, actual_sdv_307: int) returns (Tmp_593: int);
  modifies alloc;



implementation {:origName "sdv_IoReleaseRemoveLock"} sdv_IoReleaseRemoveLock(actual_sdv_306: int, actual_sdv_307: int) returns (Tmp_593: int)
{
  var {:scalar} sdv_308: int;

  anon0:
    call {:si_unique_call 769} sdv_308 := __HAVOC_malloc(4);
    call {:si_unique_call 770} Tmp_593 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_593 != 0;
    assume Tmp_593 > 0;
    assume {:nonnull} sdv_308 != 0;
    assume sdv_308 > 0;
    return;
}



procedure {:origName "_sdv_init6"} _sdv_init6();
  modifies alloc;



implementation {:origName "_sdv_init6"} _sdv_init6()
{
  var vslice_dummy_var_139: int;

  anon0:
    call {:si_unique_call 771} vslice_dummy_var_139 := __HAVOC_malloc(4);
    assume ScanCodeToUCharCount_8 == 54;
    assume pBus == strConst__li2bpl20;
    assume pController == strConst__li2bpl21;
    assume pDriverName == strConst__li2bpl22;
    assume pIsrKb == strConst__li2bpl23;
    assume pIsrMou == strConst__li2bpl24;
    assume pEnter == strConst__li2bpl25;
    assume pExit == strConst__li2bpl26;
    assume pInfo == strConst__li2bpl27;
    assume pNumber == strConst__li2bpl28;
    assume pPeripheral == strConst__li2bpl29;
    assume pType == strConst__li2bpl30;
    assume pDumpHex == strConst__li2bpl31;
    assume pDumpDecimal == strConst__li2bpl32;
    assume pDumpWideString == strConst__li2bpl33;
    assume pDumpExpecting == strConst__li2bpl34;
    assume pDumpExpectingAck == strConst__li2bpl35;
    assume pDumpExpectingIdAck == strConst__li2bpl36;
    assume pFncDriverEntry == strConst__li2bpl37;
    assume pFncFindWheelMouse == strConst__li2bpl38;
    assume pFncInitializeMouse == strConst__li2bpl39;
    assume pFncKeyboardConfiguration == strConst__li2bpl40;
    assume pFncMouseEnable == strConst__li2bpl41;
    assume pFncMouseInterrupt == strConst__li2bpl42;
    assume pFncMousePeripheral == strConst__li2bpl43;
    assume pFncServiceParameters == strConst__li2bpl44;
    assume pwDebugFlags == strConst__li2bpl45;
    assume pwIsrDebugFlags == strConst__li2bpl46;
    assume pwDevice == strConst__li2bpl47;
    assume pwForwardSlash == strConst__li2bpl48;
    assume pwParameters == strConst__li2bpl49;
    assume pwResendIterations == strConst__li2bpl50;
    assume pwPollingIterations == strConst__li2bpl51;
    assume pwPollingIterationsMaximum == strConst__li2bpl52;
    assume pwKeyboardDataQueueSize == strConst__li2bpl53;
    assume pwMouseDataQueueSize == strConst__li2bpl54;
    assume pwNumberOfButtons == strConst__li2bpl55;
    assume pwSampleRate == strConst__li2bpl56;
    assume pwMouseResolution == strConst__li2bpl57;
    assume pwOverrideKeyboardType == strConst__li2bpl58;
    assume pwOverrideKeyboardSubtype == strConst__li2bpl59;
    assume pwKeyboardDeviceBaseName == strConst__li2bpl60;
    assume pwPointerDeviceBaseName == strConst__li2bpl61;
    assume pwMouseSynchIn100ns == strConst__li2bpl62;
    assume pwPollStatusIterations == strConst__li2bpl63;
    assume pwEnableWheelDetection == strConst__li2bpl64;
    assume pwPowerCaps == strConst__li2bpl65;
    assume pwDebugEnable == strConst__li2bpl66;
    return;
}



procedure {:origName "KeBugCheckEx"} {:osmodel} KeBugCheckEx(actual_BugCheckCode: int, actual_BugCheckParameter1: int, actual_BugCheckParameter2: int, actual_BugCheckParameter3: int, actual_BugCheckParameter4: int);
  modifies alloc;
  free ensures false;



implementation {:origName "KeBugCheckEx"} {:osmodel} KeBugCheckEx(actual_BugCheckCode: int, actual_BugCheckParameter1: int, actual_BugCheckParameter2: int, actual_BugCheckParameter3: int, actual_BugCheckParameter4: int)
{
  var vslice_dummy_var_140: int;

  anon0:
    call {:si_unique_call 772} vslice_dummy_var_140 := __HAVOC_malloc(4);
    call {:si_unique_call 773} SdvExit#1();
    return;
}



procedure {:origName "IoFreeWorkItem"} {:osmodel} IoFreeWorkItem(actual_IoWorkItem: int);
  modifies alloc;



implementation {:origName "IoFreeWorkItem"} {:osmodel} IoFreeWorkItem(actual_IoWorkItem: int)
{
  var vslice_dummy_var_141: int;

  anon0:
    call {:si_unique_call 774} vslice_dummy_var_141 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_KeAcquireSpinLockAtDpcLevel"} {:osmodel} sdv_KeAcquireSpinLockAtDpcLevel(actual_SpinLock: int);
  modifies alloc;



implementation {:origName "sdv_KeAcquireSpinLockAtDpcLevel"} {:osmodel} sdv_KeAcquireSpinLockAtDpcLevel(actual_SpinLock: int)
{
  var vslice_dummy_var_142: int;

  anon0:
    call {:si_unique_call 775} vslice_dummy_var_142 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "IoFreeController"} {:osmodel} IoFreeController(actual_ControllerObject: int);
  modifies alloc;



implementation {:origName "IoFreeController"} {:osmodel} IoFreeController(actual_ControllerObject: int)
{
  var vslice_dummy_var_143: int;

  anon0:
    call {:si_unique_call 776} vslice_dummy_var_143 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IoCopyCurrentIrpStackLocationToNext"} {:osmodel} sdv_IoCopyCurrentIrpStackLocationToNext(actual_pirp: int);
  modifies alloc;



implementation {:origName "sdv_IoCopyCurrentIrpStackLocationToNext"} {:osmodel} sdv_IoCopyCurrentIrpStackLocationToNext(actual_pirp: int)
{
  var {:pointer} pirp: int;
  var vslice_dummy_var_144: int;

  anon0:
    call {:si_unique_call 777} vslice_dummy_var_144 := __HAVOC_malloc(4);
    pirp := actual_pirp;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} pirp == sdv_harnessIrp;
    goto L4;

  L4:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} pirp == sdv_other_harnessIrp;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} pirp != sdv_other_harnessIrp;
    goto L1;

  anon5_Then:
    assume {:partition} pirp != sdv_harnessIrp;
    goto L4;
}



procedure {:origName "IoUnregisterPlugPlayNotification"} {:osmodel} IoUnregisterPlugPlayNotification(actual_NotificationEntry: int) returns (Tmp_619: int);
  free ensures Tmp_619 == 0 || Tmp_619 == -1073741823;



implementation {:origName "IoUnregisterPlugPlayNotification"} {:osmodel} IoUnregisterPlugPlayNotification(actual_NotificationEntry: int) returns (Tmp_619: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_619 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_619 := -1073741823;
    goto L1;
}



procedure {:origName "IoStartNextPacket"} {:osmodel} IoStartNextPacket(actual_DeviceObject_16: int, actual_Cancelable: int);
  modifies alloc;



implementation {:origName "IoStartNextPacket"} {:osmodel} IoStartNextPacket(actual_DeviceObject_16: int, actual_Cancelable: int)
{
  var vslice_dummy_var_145: int;

  anon0:
    call {:si_unique_call 778} vslice_dummy_var_145 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_KeAcquireSpinLock"} {:osmodel} sdv_KeAcquireSpinLock(actual_SpinLock_1: int, actual_p: int);
  modifies alloc;



implementation {:origName "sdv_KeAcquireSpinLock"} {:osmodel} sdv_KeAcquireSpinLock(actual_SpinLock_1: int, actual_p: int)
{
  var {:pointer} p: int;
  var vslice_dummy_var_146: int;

  anon0:
    call {:si_unique_call 779} vslice_dummy_var_146 := __HAVOC_malloc(4);
    p := actual_p;
    assume {:nonnull} p != 0;
    assume p > 0;
    return;
}



procedure {:origName "KeSetTimer"} {:osmodel} KeSetTimer(actual_Timer: int, actual_SD1_1: int, actual_Dpc_5: int) returns (Tmp_625: int);
  modifies alloc;
  free ensures Tmp_625 == 1 || Tmp_625 == 0;



implementation {:origName "KeSetTimer"} {:osmodel} KeSetTimer(actual_Timer: int, actual_SD1_1: int, actual_Dpc_5: int) returns (Tmp_625: int)
{
  var {:scalar} DueTime_1: int;
  var {:pointer} SD1_1: int;

  anon0:
    call {:si_unique_call 780} DueTime_1 := __HAVOC_malloc(20);
    SD1_1 := actual_SD1_1;
    assume {:nonnull} DueTime_1 != 0;
    assume DueTime_1 > 0;
    assume {:nonnull} SD1_1 != 0;
    assume SD1_1 > 0;
    assume {:nonnull} DueTime_1 != 0;
    assume DueTime_1 > 0;
    assume {:nonnull} SD1_1 != 0;
    assume SD1_1 > 0;
    assume {:nonnull} DueTime_1 != 0;
    assume DueTime_1 > 0;
    assume {:nonnull} SD1_1 != 0;
    assume SD1_1 > 0;
    assume {:nonnull} DueTime_1 != 0;
    assume DueTime_1 > 0;
    assume {:nonnull} SD1_1 != 0;
    assume SD1_1 > 0;
    assume {:nonnull} DueTime_1 != 0;
    assume DueTime_1 > 0;
    assume {:nonnull} SD1_1 != 0;
    assume SD1_1 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_625 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_625 := 0;
    goto L1;
}



procedure {:origName "sdv_KeReleaseSpinLockFromDpcLevel"} {:osmodel} sdv_KeReleaseSpinLockFromDpcLevel(actual_SpinLock_2: int);
  modifies alloc;



implementation {:origName "sdv_KeReleaseSpinLockFromDpcLevel"} {:osmodel} sdv_KeReleaseSpinLockFromDpcLevel(actual_SpinLock_2: int)
{
  var vslice_dummy_var_147: int;

  anon0:
    call {:si_unique_call 781} vslice_dummy_var_147 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IoGetNextIrpStackLocation"} {:osmodel} sdv_IoGetNextIrpStackLocation(actual_pirp_1: int) returns (Tmp_629: int);



implementation {:origName "sdv_IoGetNextIrpStackLocation"} {:osmodel} sdv_IoGetNextIrpStackLocation(actual_pirp_1: int) returns (Tmp_629: int)
{
  var {:pointer} pirp_1: int;

  anon0:
    pirp_1 := actual_pirp_1;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} pirp_1 == sdv_harnessIrp;
    Tmp_629 := sdv_harnessStackLocation_next;
    goto L1;

  L1:
    return;

  anon5_Then:
    assume {:partition} pirp_1 != sdv_harnessIrp;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} pirp_1 == sdv_other_harnessIrp;
    Tmp_629 := sdv_other_harnessStackLocation_next;
    goto L1;

  anon6_Then:
    assume {:partition} pirp_1 != sdv_other_harnessIrp;
    Tmp_629 := sdv_harnessStackLocation;
    goto L1;
}



procedure {:origName "KeInitializeDpc"} {:osmodel} KeInitializeDpc(actual_Dpc_6: int, actual_DeferredRoutine: int, actual_DeferredContext: int);
  modifies alloc;



implementation {:origName "KeInitializeDpc"} {:osmodel} KeInitializeDpc(actual_Dpc_6: int, actual_DeferredRoutine: int, actual_DeferredContext: int)
{
  var {:pointer} Dpc_6: int;
  var {:scalar} DeferredRoutine: int;
  var vslice_dummy_var_148: int;

  anon0:
    call {:si_unique_call 782} vslice_dummy_var_148 := __HAVOC_malloc(4);
    Dpc_6 := actual_Dpc_6;
    DeferredRoutine := actual_DeferredRoutine;
    assume {:nonnull} Dpc_6 != 0;
    assume Dpc_6 > 0;
    return;
}



procedure {:origName "sdv_IoReleaseRemoveLockAndWait"} {:osmodel} sdv_IoReleaseRemoveLockAndWait(actual_RemoveLock: int, actual_Tag: int);
  modifies alloc;



implementation {:origName "sdv_IoReleaseRemoveLockAndWait"} {:osmodel} sdv_IoReleaseRemoveLockAndWait(actual_RemoveLock: int, actual_Tag: int)
{
  var vslice_dummy_var_149: int;

  anon0:
    call {:si_unique_call 783} vslice_dummy_var_149 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "IoDetachDevice"} {:osmodel} IoDetachDevice(actual_TargetDevice: int);
  modifies alloc;



implementation {:origName "IoDetachDevice"} {:osmodel} IoDetachDevice(actual_TargetDevice: int)
{
  var vslice_dummy_var_150: int;

  anon0:
    call {:si_unique_call 784} vslice_dummy_var_150 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IoSetCancelRoutine"} {:osmodel} sdv_IoSetCancelRoutine(actual_pirp_2: int, actual_CancelRoutine: int) returns (Tmp_641: int);



implementation {:origName "sdv_IoSetCancelRoutine"} {:osmodel} sdv_IoSetCancelRoutine(actual_pirp_2: int, actual_CancelRoutine: int) returns (Tmp_641: int)
{
  var {:scalar} r: int;
  var {:pointer} pirp_2: int;
  var {:scalar} CancelRoutine: int;

  anon0:
    pirp_2 := actual_pirp_2;
    CancelRoutine := actual_CancelRoutine;
    assume {:nonnull} pirp_2 != 0;
    assume pirp_2 > 0;
    havoc r;
    assume {:nonnull} pirp_2 != 0;
    assume pirp_2 > 0;
    Tmp_641 := r;
    return;
}



procedure {:origName "sdv_RtlMoveMemory"} {:osmodel} sdv_RtlMoveMemory(actual_Destination_1: int, actual_Source_1: int, actual_Length: int);
  modifies alloc;



implementation {:origName "sdv_RtlMoveMemory"} {:osmodel} sdv_RtlMoveMemory(actual_Destination_1: int, actual_Source_1: int, actual_Length: int)
{
  var vslice_dummy_var_151: int;

  anon0:
    call {:si_unique_call 785} vslice_dummy_var_151 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_SetPowerIrpMinorFunction"} {:osmodel} sdv_SetPowerIrpMinorFunction(actual_pirp_3: int);
  modifies alloc;



implementation {:origName "sdv_SetPowerIrpMinorFunction"} {:osmodel} sdv_SetPowerIrpMinorFunction(actual_pirp_3: int)
{
  var {:pointer} r_1: int;
  var {:pointer} pirp_3: int;
  var vslice_dummy_var_152: int;

  anon0:
    call {:si_unique_call 786} vslice_dummy_var_152 := __HAVOC_malloc(4);
    pirp_3 := actual_pirp_3;
    assume {:nonnull} pirp_3 != 0;
    assume pirp_3 > 0;
    havoc r_1;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  L1:
    return;

  anon12_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  anon13_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  anon15_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  anon11_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;

  anon14_Then:
    assume {:nonnull} r_1 != 0;
    assume r_1 > 0;
    goto L1;
}



procedure {:origName "sdv_stub_dispatch_end"} {:osmodel} sdv_stub_dispatch_end(actual_s_1: int, actual_pirp_4: int);
  modifies alloc;



implementation {:origName "sdv_stub_dispatch_end"} {:osmodel} sdv_stub_dispatch_end(actual_s_1: int, actual_pirp_4: int)
{
  var vslice_dummy_var_153: int;

  anon0:
    call {:si_unique_call 787} vslice_dummy_var_153 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "OneOfTwoBOOLEAN"} {:osmodel} OneOfTwoBOOLEAN() returns (Tmp_649: int);
  free ensures Tmp_649 == 1 || Tmp_649 == 0;



implementation {:origName "OneOfTwoBOOLEAN"} {:osmodel} OneOfTwoBOOLEAN() returns (Tmp_649: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_649 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_649 := 0;
    goto L1;
}



procedure {:origName "sdv_RtlQueryRegistryValues"} {:osmodel} sdv_RtlQueryRegistryValues(actual_RelativeTo: int, actual_Path: int, actual_QueryTable: int, actual_Context_5: int, actual_Environment: int) returns (Tmp_653: int);
  free ensures Tmp_653 == 0 || Tmp_653 == -1073741823;



implementation {:origName "sdv_RtlQueryRegistryValues"} {:osmodel} sdv_RtlQueryRegistryValues(actual_RelativeTo: int, actual_Path: int, actual_QueryTable: int, actual_Context_5: int, actual_Environment: int) returns (Tmp_653: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_653 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_653 := -1073741823;
    goto L1;
}



procedure {:origName "sdv_RunISRRoutines"} {:osmodel} sdv_RunISRRoutines(actual_ki: int, actual_pv1: int);
  modifies alloc, yogi_error, Mem_T.CompletionRoutine__IO_STACK_LOCATION;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "sdv_RunISRRoutines"} {:osmodel} sdv_RunISRRoutines(actual_ki: int, actual_pv1: int)
{
  var {:pointer} ki: int;
  var {:pointer} pv1: int;
  var vslice_dummy_var_154: int;
  var vslice_dummy_var_155: int;
  var vslice_dummy_var_156: int;

  anon0:
    call {:si_unique_call 788} vslice_dummy_var_154 := __HAVOC_malloc(4);
    ki := actual_ki;
    pv1 := actual_pv1;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    call {:si_unique_call 789} vslice_dummy_var_155 := I8042KeyboardInterruptService(ki, pv1);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} yogi_error != 1;
    goto L4;

  L4:
    goto anon10_Then, anon10_Else;

  anon10_Else:
    call {:si_unique_call 790} vslice_dummy_var_156 := I8042MouseInterruptService(ki, pv1);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon10_Then:
    goto L1;

  anon11_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon9_Then:
    goto L4;
}



procedure {:origName "ExAcquireFastMutexUnsafe"} {:osmodel} ExAcquireFastMutexUnsafe(actual_FastMutex: int);
  modifies alloc;



implementation {:origName "ExAcquireFastMutexUnsafe"} {:osmodel} ExAcquireFastMutexUnsafe(actual_FastMutex: int)
{
  var vslice_dummy_var_157: int;

  anon0:
    call {:si_unique_call 791} vslice_dummy_var_157 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_SetStatus"} {:osmodel} sdv_SetStatus(actual_pirp_5: int);
  modifies alloc;



implementation {:origName "sdv_SetStatus"} {:osmodel} sdv_SetStatus(actual_pirp_5: int)
{
  var {:pointer} pirp_5: int;
  var vslice_dummy_var_158: int;

  anon0:
    call {:si_unique_call 792} vslice_dummy_var_158 := __HAVOC_malloc(4);
    pirp_5 := actual_pirp_5;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} pirp_5 != 0;
    assume pirp_5 > 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:nonnull} pirp_5 != 0;
    assume pirp_5 > 0;
    goto L1;
}



procedure {:origName "KeRemoveQueueDpc"} {:osmodel} KeRemoveQueueDpc(actual_Dpc_7: int) returns (Tmp_661: int);
  free ensures Tmp_661 == 1 || Tmp_661 == 0;



implementation {:origName "KeRemoveQueueDpc"} {:osmodel} KeRemoveQueueDpc(actual_Dpc_7: int) returns (Tmp_661: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_661 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_661 := 0;
    goto L1;
}



procedure {:origName "KeDelayExecutionThread"} {:osmodel} KeDelayExecutionThread(actual_WaitMode: int, actual_Alertable: int, actual_Interval: int) returns (Tmp_663: int);
  free ensures Tmp_663 == 0 || Tmp_663 == -1073741823;



implementation {:origName "KeDelayExecutionThread"} {:osmodel} KeDelayExecutionThread(actual_WaitMode: int, actual_Alertable: int, actual_Interval: int) returns (Tmp_663: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_663 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_663 := -1073741823;
    goto L1;
}



procedure {:nohoudini} {:origName "sdv_main"} {:osmodel} sdv_main();
  modifies alloc, SLAM_guard_S_0, Mem_T.CompletionRoutine__IO_STACK_LOCATION, forward_state, s, yogi_error;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "sdv_main"} {:osmodel} sdv_main()
{
  var vslice_dummy_var_159: int;
  var vslice_dummy_var_160: int;

  anon0:
    call {:si_unique_call 793} vslice_dummy_var_159 := __HAVOC_malloc(4);
    SLAM_guard_S_0 := sdv_irp;
    assume SLAM_guard_S_0 != 0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 794} sdv_stub_driver_init();
    call {:si_unique_call 795} vslice_dummy_var_160 := sdv_RunDispatchFunction(sdv_p_devobj_fdo, sdv_irp);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "IoAllocateErrorLogEntry"} {:osmodel} IoAllocateErrorLogEntry(actual_IoObject: int, actual_EntrySize: int) returns (Tmp_667: int);
  modifies alloc;



implementation {:origName "IoAllocateErrorLogEntry"} {:osmodel} IoAllocateErrorLogEntry(actual_IoObject: int, actual_EntrySize: int) returns (Tmp_667: int)
{
  var {:pointer} sdv_339: int;

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 796} sdv_339 := __HAVOC_malloc(1);
    Tmp_667 := sdv_339;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_667 := 0;
    goto L1;
}



procedure {:origName "PoCallDriver"} {:osmodel} PoCallDriver(actual_DeviceObject_17: int, actual_Irp_8: int) returns (Tmp_669: int);
  modifies alloc, s, yogi_error;
  free ensures old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "PoCallDriver"} {:osmodel} PoCallDriver(actual_DeviceObject_17: int, actual_Irp_8: int) returns (Tmp_669: int)
{
  var {:dopa} {:scalar} completion: int;
  var {:scalar} sdv_341: int;
  var {:scalar} sdv_342: int;
  var {:scalar} sdv_343: int;
  var {:scalar} sdv_344: int;
  var {:scalar} status_32: int;
  var {:pointer} Irp_8: int;
  var vslice_dummy_var_219: int;
  var vslice_dummy_var_220: int;
  var vslice_dummy_var_221: int;
  var vslice_dummy_var_222: int;

  anon0:
    call {:si_unique_call 797} completion := __HAVOC_malloc(4);
    Irp_8 := actual_Irp_8;
    assume {:nonnull} completion != 0;
    assume completion > 0;
    status_32 := 259;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    goto anon78_Then, anon78_Else;

  anon78_Else:
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:nonnull} Irp_8 != 0;
    assume Irp_8 > 0;
    assume {:nonnull} Irp_8 != 0;
    assume Irp_8 > 0;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_8;
    goto L19;

  L19:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_8;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    goto L21;

  L21:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_8;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L23;

  L23:
    goto anon64_Then, anon64_Else;

  anon64_Else:
    goto L29;

  L29:
    Tmp_669 := status_32;
    goto LM2;

  LM2:
    return;

  anon64_Then:
    havoc vslice_dummy_var_219;
    call {:si_unique_call 798} sdv_341 := sdv_RunIoCompletionRoutines(sdv_p_devobj_fdo, Irp_8, vslice_dummy_var_219, completion);
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} yogi_error != 1;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume Irp_8 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 799} SLIC_sdv_RunIoCompletionRoutines_exit(0, completion, sdv_341);
    goto L29;

  anon81_Then:
    assume !(Irp_8 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L29;

  anon88_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon63_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_8;
    goto L23;

  anon62_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_8;
    goto L21;

  anon87_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_8;
    goto L19;

  anon77_Then:
    assume {:nonnull} Irp_8 != 0;
    assume Irp_8 > 0;
    assume {:nonnull} Irp_8 != 0;
    assume Irp_8 > 0;
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_8;
    goto L58;

  L58:
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_8;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    goto L60;

  L60:
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_8;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L62;

  L62:
    goto anon75_Then, anon75_Else;

  anon75_Else:
    goto anon76_Then, anon76_Else;

  anon76_Else:
    havoc vslice_dummy_var_220;
    call {:si_unique_call 800} sdv_344 := sdv_RunIoCompletionRoutines(sdv_p_devobj_fdo, Irp_8, vslice_dummy_var_220, completion);
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} yogi_error != 1;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume Irp_8 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 801} SLIC_sdv_RunIoCompletionRoutines_exit(0, completion, sdv_344);
    goto L29;

  anon82_Then:
    assume !(Irp_8 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L29;

  anon90_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon76_Then:
    goto L29;

  anon75_Then:
    goto L29;

  anon74_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_8;
    goto L62;

  anon73_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_8;
    goto L60;

  anon89_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_8;
    goto L58;

  anon78_Then:
    assume {:nonnull} Irp_8 != 0;
    assume Irp_8 > 0;
    assume {:nonnull} Irp_8 != 0;
    assume Irp_8 > 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_8;
    goto L32;

  L32:
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_8;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    goto L34;

  L34:
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_8;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L36;

  L36:
    goto anon67_Then, anon67_Else;

  anon67_Else:
    goto anon68_Then, anon68_Else;

  anon68_Else:
    havoc vslice_dummy_var_221;
    call {:si_unique_call 802} sdv_342 := sdv_RunIoCompletionRoutines(sdv_p_devobj_fdo, Irp_8, vslice_dummy_var_221, completion);
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:partition} yogi_error != 1;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume Irp_8 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 803} SLIC_sdv_RunIoCompletionRoutines_exit(0, completion, sdv_342);
    goto L29;

  anon80_Then:
    assume !(Irp_8 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L29;

  anon86_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon68_Then:
    goto L29;

  anon67_Then:
    goto L29;

  anon66_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_8;
    goto L36;

  anon65_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_8;
    goto L34;

  anon85_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_8;
    goto L32;

  anon61_Then:
    assume {:nonnull} Irp_8 != 0;
    assume Irp_8 > 0;
    assume {:nonnull} Irp_8 != 0;
    assume Irp_8 > 0;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_8;
    goto L45;

  L45:
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_8;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    goto L47;

  L47:
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_8;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L49;

  L49:
    goto anon71_Then, anon71_Else;

  anon71_Else:
    goto anon72_Then, anon72_Else;

  anon72_Else:
    havoc vslice_dummy_var_222;
    call {:si_unique_call 804} sdv_343 := sdv_RunIoCompletionRoutines(sdv_p_devobj_fdo, Irp_8, vslice_dummy_var_222, completion);
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} yogi_error != 1;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume Irp_8 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 805} SLIC_sdv_RunIoCompletionRoutines_exit(0, completion, sdv_343);
    goto L29;

  anon79_Then:
    assume !(Irp_8 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L29;

  anon84_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon72_Then:
    goto L29;

  anon71_Then:
    goto L29;

  anon70_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_8;
    goto L49;

  anon69_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_8;
    goto L47;

  anon83_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_8;
    goto L45;
}



procedure {:origName "WmiSystemControl"} {:osmodel} WmiSystemControl(actual_WmiLibInfo: int, actual_DeviceObject_18: int, actual_pirp_6: int, actual_IrpDisposition: int) returns (Tmp_671: int);
  modifies alloc;
  free ensures Tmp_671 == 0 || Tmp_671 == -1073741808;



implementation {:origName "WmiSystemControl"} {:osmodel} WmiSystemControl(actual_WmiLibInfo: int, actual_DeviceObject_18: int, actual_pirp_6: int, actual_IrpDisposition: int) returns (Tmp_671: int)
{
  var {:scalar} s_2: int;
  var {:pointer} IrpDisposition: int;

  anon0:
    IrpDisposition := actual_IrpDisposition;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:nonnull} IrpDisposition != 0;
    assume IrpDisposition > 0;
    s_2 := 0;
    call {:si_unique_call 806} sdv_stub_WmiIrpForward(0);
    goto L24;

  L24:
    Tmp_671 := s_2;
    return;

  anon11_Then:
    assume {:nonnull} IrpDisposition != 0;
    assume IrpDisposition > 0;
    call {:si_unique_call 807} sdv_stub_WmiIrpForward(0);
    goto anon10_Then, anon10_Else;

  anon10_Else:
    s_2 := 0;
    goto L24;

  anon10_Then:
    s_2 := -1073741808;
    goto L24;

  anon12_Then:
    assume {:nonnull} IrpDisposition != 0;
    assume IrpDisposition > 0;
    s_2 := 0;
    call {:si_unique_call 808} sdv_stub_WmiIrpNotCompleted(0);
    goto L24;

  anon9_Then:
    assume {:nonnull} IrpDisposition != 0;
    assume IrpDisposition > 0;
    s_2 := 0;
    call {:si_unique_call 809} sdv_stub_WmiIrpProcessed(0);
    goto L24;
}



procedure {:origName "PoSetPowerState"} {:osmodel} PoSetPowerState(actual_DeviceObject_19: int, actual_Type: int, actual_structPtr888State: int) returns (SD1_2: int);
  modifies alloc;



implementation {:origName "PoSetPowerState"} {:osmodel} PoSetPowerState(actual_DeviceObject_19: int, actual_Type: int, actual_structPtr888State: int) returns (SD1_2: int)
{
  var {:scalar} State: int;
  var {:scalar} r_2: int;
  var {:scalar} Tmp_1: int;
  var {:pointer} structPtr888State: int;

  anon0:
    call {:si_unique_call 810} State := __HAVOC_malloc(8);
    call {:si_unique_call 811} r_2 := __HAVOC_malloc(8);
    call {:si_unique_call 812} Tmp_1 := __HAVOC_malloc(8);
    structPtr888State := actual_structPtr888State;
    assume {:nonnull} State != 0;
    assume State > 0;
    assume {:nonnull} structPtr888State != 0;
    assume structPtr888State > 0;
    assume {:nonnull} State != 0;
    assume State > 0;
    assume {:nonnull} structPtr888State != 0;
    assume structPtr888State > 0;
    assume {:nonnull} Tmp_1 != 0;
    assume Tmp_1 > 0;
    assume {:nonnull} r_2 != 0;
    assume r_2 > 0;
    assume {:nonnull} Tmp_1 != 0;
    assume Tmp_1 > 0;
    assume {:nonnull} r_2 != 0;
    assume r_2 > 0;
    SD1_2 := Tmp_1;
    return;
}



procedure {:origName "sdv_KeRaiseIrql"} {:osmodel} sdv_KeRaiseIrql(actual_new: int, actual_p_1: int);
  modifies alloc;



implementation {:origName "sdv_KeRaiseIrql"} {:osmodel} sdv_KeRaiseIrql(actual_new: int, actual_p_1: int)
{
  var {:scalar} new: int;
  var {:pointer} p_1: int;
  var vslice_dummy_var_161: int;

  anon0:
    call {:si_unique_call 813} vslice_dummy_var_161 := __HAVOC_malloc(4);
    new := actual_new;
    p_1 := actual_p_1;
    assume {:nonnull} p_1 != 0;
    assume p_1 > 0;
    return;
}



procedure {:origName "KeCancelTimer"} {:osmodel} KeCancelTimer(actual_Timer_1: int) returns (Tmp_676: int);
  free ensures Tmp_676 == 1 || Tmp_676 == 0;



implementation {:origName "KeCancelTimer"} {:osmodel} KeCancelTimer(actual_Timer_1: int) returns (Tmp_676: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_676 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_676 := 0;
    goto L1;
}



procedure {:origName "IoWriteErrorLogEntry"} {:osmodel} IoWriteErrorLogEntry(actual_ElEntry: int);
  modifies alloc;



implementation {:origName "IoWriteErrorLogEntry"} {:osmodel} IoWriteErrorLogEntry(actual_ElEntry: int)
{
  var vslice_dummy_var_162: int;

  anon0:
    call {:si_unique_call 814} vslice_dummy_var_162 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IoSetCompletionRoutine"} {:osmodel} sdv_IoSetCompletionRoutine(actual_pirp_7: int, actual_CompletionRoutine: int, actual_Context_6: int, actual_InvokeOnSuccess: int, actual_InvokeOnError: int, actual_InvokeOnCancel: int);
  modifies alloc, Mem_T.CompletionRoutine__IO_STACK_LOCATION;



implementation {:origName "sdv_IoSetCompletionRoutine"} {:osmodel} sdv_IoSetCompletionRoutine(actual_pirp_7: int, actual_CompletionRoutine: int, actual_Context_6: int, actual_InvokeOnSuccess: int, actual_InvokeOnError: int, actual_InvokeOnCancel: int)
{
  var {:pointer} irpSp: int;
  var {:pointer} pirp_7: int;
  var {:scalar} CompletionRoutine: int;
  var {:pointer} Context_6: int;
  var {:scalar} InvokeOnSuccess: int;
  var {:scalar} InvokeOnError: int;
  var {:scalar} InvokeOnCancel: int;
  var vslice_dummy_var_163: int;

  anon0:
    call {:si_unique_call 815} vslice_dummy_var_163 := __HAVOC_malloc(4);
    pirp_7 := actual_pirp_7;
    CompletionRoutine := actual_CompletionRoutine;
    Context_6 := actual_Context_6;
    InvokeOnSuccess := actual_InvokeOnSuccess;
    InvokeOnError := actual_InvokeOnError;
    InvokeOnCancel := actual_InvokeOnCancel;
    call {:si_unique_call 816} irpSp := sdv_IoGetNextIrpStackLocation(pirp_7);
    assume {:nonnull} irpSp != 0;
    assume irpSp > 0;
    Mem_T.CompletionRoutine__IO_STACK_LOCATION[CompletionRoutine__IO_STACK_LOCATION(irpSp)] := CompletionRoutine;
    return;
}



procedure {:origName "KeSetTimerEx"} {:osmodel} KeSetTimerEx(actual_Timer_2: int, actual_structPtr888DueTime: int, actual_Period: int, actual_Dpc_8: int) returns (Tmp_682: int);
  modifies alloc;
  free ensures Tmp_682 == 1 || Tmp_682 == 0;



implementation {:origName "KeSetTimerEx"} {:osmodel} KeSetTimerEx(actual_Timer_2: int, actual_structPtr888DueTime: int, actual_Period: int, actual_Dpc_8: int) returns (Tmp_682: int)
{
  var {:scalar} DueTime: int;
  var {:pointer} structPtr888DueTime: int;

  anon0:
    call {:si_unique_call 817} DueTime := __HAVOC_malloc(20);
    structPtr888DueTime := actual_structPtr888DueTime;
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    assume {:nonnull} DueTime != 0;
    assume DueTime > 0;
    assume {:nonnull} structPtr888DueTime != 0;
    assume structPtr888DueTime > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_682 := 1;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_682 := 0;
    goto L1;
}



procedure {:origName "PoStartNextPowerIrp"} {:osmodel} PoStartNextPowerIrp(actual_Irp_9: int);
  modifies alloc;



implementation {:origName "PoStartNextPowerIrp"} {:osmodel} PoStartNextPowerIrp(actual_Irp_9: int)
{
  var vslice_dummy_var_164: int;

  anon0:
    call {:si_unique_call 818} vslice_dummy_var_164 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeWaitForSingleObject"} {:osmodel} KeWaitForSingleObject(actual_Object: int, actual_WaitReason: int, actual_WaitMode_1: int, actual_Alertable_1: int, actual_Timeout: int) returns (Tmp_686: int);
  free ensures Tmp_686 == 258 || Tmp_686 == 0;



implementation {:origName "KeWaitForSingleObject"} {:osmodel} KeWaitForSingleObject(actual_Object: int, actual_WaitReason: int, actual_WaitMode_1: int, actual_Alertable_1: int, actual_Timeout: int) returns (Tmp_686: int)
{
  var {:pointer} Timeout: int;

  anon0:
    Timeout := actual_Timeout;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} Timeout != 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    Tmp_686 := 258;
    goto L1;

  L1:
    return;

  anon6_Then:
    Tmp_686 := 0;
    goto L1;

  anon5_Then:
    assume {:partition} Timeout == 0;
    Tmp_686 := 0;
    goto L1;
}



procedure {:origName "IoDeleteDevice"} {:osmodel} IoDeleteDevice(actual_DeviceObject_20: int);
  modifies alloc;



implementation {:origName "IoDeleteDevice"} {:osmodel} IoDeleteDevice(actual_DeviceObject_20: int)
{
  var vslice_dummy_var_165: int;

  anon0:
    call {:si_unique_call 819} vslice_dummy_var_165 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeSetEvent"} {:osmodel} KeSetEvent(actual_Event_1: int, actual_Increment: int, actual_Wait: int) returns (Tmp_690: int);



implementation {:origName "KeSetEvent"} {:osmodel} KeSetEvent(actual_Event_1: int, actual_Increment: int, actual_Wait: int) returns (Tmp_690: int)
{
  var {:scalar} OldState: int;
  var {:pointer} Event_1: int;

  anon0:
    Event_1 := actual_Event_1;
    assume {:nonnull} Event_1 != 0;
    assume Event_1 > 0;
    havoc OldState;
    assume {:nonnull} Event_1 != 0;
    assume Event_1 > 0;
    Tmp_690 := OldState;
    return;
}



procedure {:origName "sdv_MmLockPagableCodeSection"} {:osmodel} sdv_MmLockPagableCodeSection(actual_AddressWithinSection: int) returns (Tmp_694: int);
  free ensures Tmp_694 == actual_AddressWithinSection;



implementation {:origName "sdv_MmLockPagableCodeSection"} {:osmodel} sdv_MmLockPagableCodeSection(actual_AddressWithinSection: int) returns (Tmp_694: int)
{
  var {:pointer} AddressWithinSection: int;

  anon0:
    AddressWithinSection := actual_AddressWithinSection;
    Tmp_694 := AddressWithinSection;
    return;
}



procedure {:origName "sdv_IoGetCurrentIrpStackLocation"} {:osmodel} sdv_IoGetCurrentIrpStackLocation(actual_pirp_8: int) returns (Tmp_696: int);



implementation {:origName "sdv_IoGetCurrentIrpStackLocation"} {:osmodel} sdv_IoGetCurrentIrpStackLocation(actual_pirp_8: int) returns (Tmp_696: int)
{
  var {:pointer} pirp_8: int;

  anon0:
    pirp_8 := actual_pirp_8;
    assume {:nonnull} pirp_8 != 0;
    assume pirp_8 > 0;
    havoc Tmp_696;
    return;
}



procedure {:origName "sdv_InitializeObjectAttributes"} {:osmodel} sdv_InitializeObjectAttributes(actual_p_2: int, actual_n: int, actual_a: int, actual_r_3: int, actual_s_3: int);
  modifies alloc;



implementation {:origName "sdv_InitializeObjectAttributes"} {:osmodel} sdv_InitializeObjectAttributes(actual_p_2: int, actual_n: int, actual_a: int, actual_r_3: int, actual_s_3: int)
{
  var vslice_dummy_var_166: int;

  anon0:
    call {:si_unique_call 820} vslice_dummy_var_166 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "IoStartPacket"} {:osmodel} IoStartPacket(actual_DeviceObject_21: int, actual_Irp_10: int, actual_Key: int, actual_CancelFunction: int);
  modifies alloc;



implementation {:origName "IoStartPacket"} {:osmodel} IoStartPacket(actual_DeviceObject_21: int, actual_Irp_10: int, actual_Key: int, actual_CancelFunction: int)
{
  var vslice_dummy_var_167: int;

  anon0:
    call {:si_unique_call 821} vslice_dummy_var_167 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_KeGetCurrentIrql"} {:osmodel} sdv_KeGetCurrentIrql() returns (Tmp_704: int);



implementation {:origName "sdv_KeGetCurrentIrql"} {:osmodel} sdv_KeGetCurrentIrql() returns (Tmp_704: int)
{

  anon0:
    havoc Tmp_704;
    return;
}



procedure {:origName "sdv_IoSetNextIrpStackLocation"} {:osmodel} sdv_IoSetNextIrpStackLocation(actual_Irp_11: int);
  modifies alloc;



implementation {:origName "sdv_IoSetNextIrpStackLocation"} {:osmodel} sdv_IoSetNextIrpStackLocation(actual_Irp_11: int)
{
  var vslice_dummy_var_168: int;

  anon0:
    call {:si_unique_call 822} vslice_dummy_var_168 := __HAVOC_malloc(4);
    return;
}



procedure {:nohoudini} {:origName "main"} {:osmodel} {:entrypoint} main() returns (Tmp_708: int, dup_assertVar: bool);
  modifies alloc, SLAM_guard_S_0, forward_state, s, yogi_error, Mem_T.CompletionRoutine__IO_STACK_LOCATION;
  free ensures yogi_error == 1 || yogi_error == 0;
  free ensures old(yogi_error) == 0;
  free ensures alloc >= old(alloc);



implementation {:origName "main"} {:osmodel} main() returns (Tmp_708: int, dup_assertVar: bool)
{
  var {:scalar} Tmp_709: int;
  var {:scalar} Tmp_711: int;
  var boogieTmp: int;
  var KeTickCount__Loc: int;
  var WHEA_ERROR_PACKET_SECTION_GUID__Loc: int;
  var Globals__Loc: int;
  var GUID_PCMCIA_BUS_INTERFACE_STANDARD__Loc: int;
  var GUID_BUS_TYPE_PCMCIA__Loc: int;
  var GUID_TRANSLATOR_INTERFACE_STANDARD__Loc: int;
  var GUID_PCI_VIRTUALIZATION_INTERFACE__Loc: int;
  var GUID_ARBITER_INTERFACE_STANDARD__Loc: int;
  var GUID_QUERY_CRASHDUMP_FUNCTIONS__Loc: int;
  var GUID_ACPI_CMOS_INTERFACE_STANDARD__Loc: int;
  var GUID_BUS_TYPE_1394__Loc: int;
  var GUID_AGP_TARGET_BUS_INTERFACE_STANDARD__Loc: int;
  var GUID_TARGET_DEVICE_REMOVE_CANCELLED__Loc: int;
  var GUID_BUS_TYPE_ISAPNP__Loc: int;
  var GUID_MF_ENUMERATION_INTERFACE__Loc: int;
  var GUID_LEGACY_DEVICE_DETECTION_STANDARD__Loc: int;
  var GUID_PCC_INTERFACE_STANDARD__Loc: int;
  var GUID_BUS_INTERFACE_STANDARD__Loc: int;
  var GUID_PNP_POWER_SETTING_CHANGE__Loc: int;
  var GUID_BUS_TYPE_ACPI__Loc: int;
  var GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE__Loc: int;
  var GUID_BUS_TYPE_DOT4PRT__Loc: int;
  var GUID_BUS_TYPE_EISA__Loc: int;
  var GUID_ACPI_REGS_INTERFACE_STANDARD__Loc: int;
  var GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED__Loc: int;
  var GUID_ACPI_INTERFACE_STANDARD2__Loc: int;
  var GUID_PARTITION_UNIT_INTERFACE_STANDARD__Loc: int;
  var GUID_BUS_TYPE_IRDA__Loc: int;
  var GUID_PCI_BUS_INTERFACE_STANDARD2__Loc: int;
  var GUID_WUDF_DEVICE_HOST_PROBLEM__Loc: int;
  var GUID_DEVICE_INTERFACE_REMOVAL__Loc: int;
  var GUID_BUS_TYPE_SERENUM__Loc: int;
  var GUID_PCI_DEVICE_PRESENT_INTERFACE__Loc: int;
  var GUID_BUS_TYPE_MCA__Loc: int;
  var GUID_POWER_DEVICE_TIMEOUTS__Loc: int;
  var GUID_THERMAL_COOLING_INTERFACE__Loc: int;
  var GUID_HWPROFILE_CHANGE_CANCELLED__Loc: int;
  var GUID_PNP_LOCATION_INTERFACE__Loc: int;
  var GUID_MSIX_TABLE_CONFIG_INTERFACE__Loc: int;
  var GUID_BUS_TYPE_INTERNAL__Loc: int;
  var GUID_BUS_TYPE_LPTENUM__Loc: int;
  var GUID_HWPROFILE_CHANGE_COMPLETE__Loc: int;
  var GUID_DEVICE_INTERFACE_ARRIVAL__Loc: int;
  var GUID_BUS_TYPE_AVC__Loc: int;
  var GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD__Loc: int;
  var GUID_BUS_TYPE_USB__Loc: int;
  var GUID_INT_ROUTE_INTERFACE_STANDARD__Loc: int;
  var GUID_PROCESSOR_PCC_INTERFACE_STANDARD__Loc: int;
  var GUID_BUS_TYPE_USBPRINT__Loc: int;
  var GUID_BUS_TYPE_PCI__Loc: int;
  var GUID_TARGET_DEVICE_QUERY_REMOVE__Loc: int;
  var GUID_PCI_BUS_INTERFACE_STANDARD__Loc: int;
  var GUID_HWPROFILE_QUERY_CHANGE__Loc: int;
  var GUID_BUS_TYPE_SW_DEVICE__Loc: int;
  var GUID_POWER_DEVICE_ENABLE__Loc: int;
  var GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE__Loc: int;
  var GUID_PNP_CUSTOM_NOTIFICATION__Loc: int;
  var GUID_BUS_TYPE_SD__Loc: int;
  var GUID_PNP_POWER_NOTIFICATION__Loc: int;
  var GUID_PCC_INTERFACE_INTERNAL__Loc: int;
  var GUID_D3COLD_SUPPORT_INTERFACE__Loc: int;
  var GUID_REENUMERATE_SELF_INTERFACE_STANDARD__Loc: int;
  var GUID_BUS_TYPE_HID__Loc: int;
  var GUID_TARGET_DEVICE_REMOVE_COMPLETE__Loc: int;
  var GUID_ACPI_INTERFACE_STANDARD__Loc: int;
  var GUID_POWER_DEVICE_WAKE_ENABLE__Loc: int;
  var GUID_DEVICE_SYS_BUTTON__Loc: int;
  var sdv_harnessStackLocation_next__Loc: int;
  var sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX__Loc: int;
  var sdv_IoBuildAsynchronousFsdRequest_harnessIrp__Loc: int;
  var sdv_IoGetDeviceToVerify_DEVICE_OBJECT__Loc: int;
  var sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next__Loc: int;
  var sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock__Loc: int;
  var sdv_ControllerIrp__Loc: int;
  var sdv_devobj_pdo__Loc: int;
  var sdv_IoGetDmaAdapter_DMA_ADAPTER__Loc: int;
  var sdv_IoInitializeIrp_harnessIrp__Loc: int;
  var sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT__Loc: int;
  var sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next__Loc: int;
  var sdv_IoCreateSynchronizationEvent_KEVENT__Loc: int;
  var sdv_other_harnessStackLocation_next__Loc: int;
  var sdv_harnessStackLocation__Loc: int;
  var sdv_IoCreateController_CONTROLLER_OBJECT__Loc: int;
  var sdv_devobj_top__Loc: int;
  var sdv_kdpc_val3__Loc: int;
  var sdv_IoBuildSynchronousFsdRequest_harnessIrp__Loc: int;
  var sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT__Loc: int;
  var sdv_MapRegisterBase_val__Loc: int;
  var sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING__Loc: int;
  var sdv_IoMakeAssociatedIrp_harnessIrp__Loc: int;
  var sdv_devobj_child_pdo__Loc: int;
  var sdv_harnessIrp__Loc: int;
  var sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next__Loc: int;
  var sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock__Loc: int;
  var sdv_kinterrupt_val__Loc: int;
  var sdv_fx_dev_object__Loc: int;
  var sdv_devobj_fdo__Loc: int;
  var sdv_DpcContext__Loc: int;
  var sdv_StartIoIrp__Loc: int;
  var sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock__Loc: int;
  var sdv_PowerIrp__Loc: int;
  var sdv_IoBuildDeviceIoControlRequest_harnessIrp__Loc: int;
  var sdv_other_harnessIrp__Loc: int;
  var sdv_IoCreateNotificationEvent_KEVENT__Loc: int;
  var sdv_other_harnessStackLocation__Loc: int;
  var sdv_MmMapIoSpace_int__Loc: int;
  var SLAM_guard_S_0_init__Loc: int;
  var GUID_DEVICE_THERMAL_ZONE__Loc: int;
  var GUID_DEVICE_PROCESSOR__Loc: int;
  var GUID_DEVICE_ACPI_TIME__Loc: int;
  var GUID_DEVICE_BATTERY__Loc: int;
  var GUID_DEVICE_MEMORY__Loc: int;
  var GUID_DEVICE_APPLICATIONLAUNCH_BUTTON__Loc: int;
  var GUID_DEVICE_LID__Loc: int;
  var GUID_DEVICE_FAN__Loc: int;
  var PROCESSOR_NUMBER_PKEY__Loc: int;
  var GUID_CLASS_INPUT__Loc: int;
  var GUID_DEVICE_MESSAGE_INDICATOR__Loc: int;
  var MSRedbook_DriverInformationGuid__Loc: int;
  var GUID_PCIEXPRESS_SETTINGS_SUBGROUP__Loc: int;
  var MSNdis_VendorID_GUID__Loc: int;
  var MSMCAEvent_PCIComponentError_GUID__Loc: int;
  var MSSerial_CommInfo_GUID__Loc: int;
  var MSDiskDriver_Geometry_GUID__Loc: int;
  var MSNdis_CurrentPacketFilter_GUID__Loc: int;
  var MSNdis_WmiTcpIpChecksumOffload_IPv6TransmitReceive_GUID__Loc: int;
  var MSNdis_80211_DesiredDataRates_GUID__Loc: int;
  var GUID_NON_ADAPTIVE_INPUT_TIMEOUT__Loc: int;
  var GUID_ALLOW_RTC_WAKE__Loc: int;
  var MSNdis_EthernetCurrentAddress_GUID__Loc: int;
  var MSNdis_TcpOffloadHardwareConfig_GUID__Loc: int;
  var MSNdis_80211_ConfigurationFH_GUID__Loc: int;
  var GUID_BATTERY_DISCHARGE_LEVEL_2__Loc: int;
  var MSNdis_PMCapabilities_GUID__Loc: int;
  var MSRedbook_PerformanceGuid__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD__Loc: int;
  var MSNdis_StatusDot11RoamingStart_GUID__Loc: int;
  var WHEA_TLBCHECK_GUID__Loc: int;
  var MSMouse_ClassInformation_GUID__Loc: int;
  var MSNdis_80211_NetworkTypesSupported_GUID__Loc: int;
  var MSNdis_80211_NetworkInfrastructure_GUID__Loc: int;
  var MSNdis_NotifyVcArrival_GUID__Loc: int;
  var MSNdis_AtmMaxAal5PacketSize_GUID__Loc: int;
  var IPF_PROCESSOR_ERROR_SECTION_GUID__Loc: int;
  var MSNdis_FddiLConnectionState_GUID__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD__Loc: int;
  var MSMCAEvent_CPUError_GUID__Loc: int;
  var GUID_DISK_IDLE_TIMEOUT__Loc: int;
  var GUID_ACDC_POWER_SOURCE__Loc: int;
  var MSNdis_MaximumLookahead_GUID__Loc: int;
  var MSNdis_StatusMediaConnect_GUID__Loc: int;
  var MSStorageDriver_ScsiInfoExceptions_GUID__Loc: int;
  var MSNdis_ReceiveFilterInfoArray_GUID__Loc: int;
  var MSNdis_CurrentLookahead_GUID__Loc: int;
  var FIRMWARE_ERROR_RECORD_REFERENCE_GUID__Loc: int;
  var MSStorageDriver_ATAPISmartData_GUID__Loc: int;
  var MSNdis_AtmMaxActiveVciBits_GUID__Loc: int;
  var MSNdis_80211_NetworkTypeInUse_GUID__Loc: int;
  var ProcessorPerformance_GUID__Loc: int;
  var MouPointerPortGuid__Loc: int;
  var MSNdis_80211_Configuration_GUID__Loc: int;
  var MSMCAEvent_BusError_GUID__Loc: int;
  var MSNdis_MaximumTotalSize_GUID__Loc: int;
  var MSNdis_StatusPacketFilterChange_GUID__Loc: int;
  var GUID_SYSTEM_COOLING_POLICY__Loc: int;
  var WHEA_RECORD_CREATOR_GUID__Loc: int;
  var GUID_BATTERY_DISCHARGE_LEVEL_3__Loc: int;
  var MSNdis_AtmHardwareCurrentAddress_GUID__Loc: int;
  var MSChangerProblemDeviceError_GUID__Loc: int;
  var GUID_LOCK_CONSOLE_ON_WAKE__Loc: int;
  var MSNdis_TcpOffloadParameters_GUID__Loc: int;
  var GUID_VIDEO_POWERDOWN_TIMEOUT__Loc: int;
  var MSNdis_HDSplitParameters_GUID__Loc: int;
  var GUID_PROCESSOR_IDLESTATE_POLICY__Loc: int;
  var MSMCAEvent_TLBError_GUID__Loc: int;
  var MSPower_DeviceEnable_GUID__Loc: int;
  var MSNdis_MacOptions_GUID__Loc: int;
  var KernelIdleStateChange_GUID__Loc: int;
  var GUID_UNATTEND_SLEEP_TIMEOUT__Loc: int;
  var MSNdis_CoMediaSupported_GUID__Loc: int;
  var MSChangerParameters_GUID__Loc: int;
  var GENERIC_SECTION_GUID__Loc: int;
  var MSParallel_DeviceBytesTransferred_GUID__Loc: int;
  var GUID_CRITICAL_POWER_TRANSITION__Loc: int;
  var BOOT_NOTIFY_TYPE_GUID__Loc: int;
  var GUID_SLEEP_IDLE_THRESHOLD__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY__Loc: int;
  var GUID_PROCESSOR_THROTTLE_MAXIMUM__Loc: int;
  var MSNdis_StatusDot11Disassociation_GUID__Loc: int;
  var MSNdis_LinkSpeed_GUID__Loc: int;
  var MSNdis_StatusDevicePowerOnEx_GUID__Loc: int;
  var GUID_PROCESSOR_PERF_LATENCY_HINT__Loc: int;
  var MSNdis_TokenRingCurrentRingStatus_GUID__Loc: int;
  var IdleStateBucketEx_GUID__Loc: int;
  var GUID_STANDBY_TIMEOUT__Loc: int;
  var GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD__Loc: int;
  var MSNdis_StatusProtocolBind_GUID__Loc: int;
  var MSNdis_FddiFramesLost_GUID__Loc: int;
  var PCIEXPRESS_ERROR_SECTION_GUID__Loc: int;
  var KernelIdleStates_GUID__Loc: int;
  var MSNdis_WmiTcpLargeSendOffloadV1_IPv4_GUID__Loc: int;
  var MSNdis_HardwareStatus_GUID__Loc: int;
  var MSNdis_WmiTcpLargeSendOffloadV2_IPv4_GUID__Loc: int;
  var MSNdis_PMAdminConfigParam_GUID__Loc: int;
  var MSNdis_EthernetReceiveErrorAlignment_GUID__Loc: int;
  var MSNdis_80211_BaseServiceSetIdentifier_GUID__Loc: int;
  var MSNdis_80211_PrivacyFilter_GUID__Loc: int;
  var GUID_TYPICAL_POWER_SAVINGS__Loc: int;
  var MSNdis_WmiOutputInfo_GUID__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR__Loc: int;
  var MSChangerProblemEvent_GUID__Loc: int;
  var GUID_PROCESSOR_SETTINGS_SUBGROUP__Loc: int;
  var WHEA_BUSCHECK_GUID__Loc: int;
  var GUID_BATTERY_DISCHARGE_FLAGS_2__Loc: int;
  var WmiMonitorColorCharacteristics_GUID__Loc: int;
  var GUID_HIBERNATE_TIMEOUT__Loc: int;
  var MSNdis_DriverVersion_GUID__Loc: int;
  var MSNdis_StatusDot11AssociationCompletion_GUID__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME__Loc: int;
  var MSNdis_MediaSupported_GUID__Loc: int;
  var MSNdis_QueryReceiveFilterCurrentCapabilities_GUID__Loc: int;
  var MSNdis_CoTransmitPdusOk_GUID__Loc: int;
  var MSNdis_SetLinkParameters_GUID__Loc: int;
  var MSNdis_StatusNetworkChange_GUID__Loc: int;
  var PCIXBUS_ERROR_SECTION_GUID__Loc: int;
  var MSNdis_VendorDescription_GUID__Loc: int;
  var KernelThermalPolicyChange_GUID__Loc: int;
  var MSNdis_FddiLongMaximumListSize_GUID__Loc: int;
  var IdleAccountingEx_GUID__Loc: int;
  var GUID_BATTERY_DISCHARGE_ACTION_3__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_MIN_CORES__Loc: int;
  var MSNdis_StatusExternalConnectivityChange_GUID__Loc: int;
  var MSDiskDriver_Performance_GUID__Loc: int;
  var MSNdis_NotifyFilterRemoval_GUID__Loc: int;
  var MSNdis_TransmitBlockSize_GUID__Loc: int;
  var MSNdis_MediaConnectStatus_GUID__Loc: int;
  var MSNdis_CoReceivePdusOk_GUID__Loc: int;
  var IdleAccounting_GUID__Loc: int;
  var MSNdis_AtmSupportedAalTypes_GUID__Loc: int;
  var MSNdis_StatusDot11ScanConfirm_GUID__Loc: int;
  var MSNdis_TokenRingCurrentAddress_GUID__Loc: int;
  var MSNdis_CoMediaInUse_GUID__Loc: int;
  var KernelPerfState_GUID__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING__Loc: int;
  var MSNdis_WmiIPSecOffloadV1_Supported_GUID__Loc: int;
  var MSNdis_PMAdminConfigState_GUID__Loc: int;
  var GUID_POWERBUTTON_ACTION__Loc: int;
  var GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY__Loc: int;
  var MSNdis_NotifyAdapterRemoval_GUID__Loc: int;
  var MSNdis_FddiShortMaximumListSize_GUID__Loc: int;
  var GUID_AUDIO_PLAYBACK__Loc: int;
  var IPF_SAL_RECORD_SECTION_GUID__Loc: int;
  var GUID_PROCESSOR_THROTTLE_POLICY__Loc: int;
  var MSNdis_StatisticsInfo_GUID__Loc: int;
  var MSNdis_QueryNicSwitchHardwareCapabilities_GUID__Loc: int;
  var MSNdis_FddiLongPermanentAddress_GUID__Loc: int;
  var MSNdis_DeviceWakeOnMagicPacketOnly_GUID__Loc: int;
  var MSNdis_PortAuthParameters_GUID__Loc: int;
  var GUID_BATTERY_PERCENTAGE_REMAINING__Loc: int;
  var INIT_NOTIFY_TYPE_GUID__Loc: int;
  var PCIXDEVICE_ERROR_SECTION_GUID__Loc: int;
  var MSNdis_StatusDot11ConnectionStart_GUID__Loc: int;
  var GUID_GLOBAL_USER_PRESENCE__Loc: int;
  var MSAcpiInfo_GUID__Loc: int;
  var MSNdis_FddiLctFailures_GUID__Loc: int;
  var GUID_BATTERY_DISCHARGE_ACTION_2__Loc: int;
  var GUID_APPLAUNCH_BUTTON__Loc: int;
  var GUID_PROCESSOR_ALLOW_THROTTLING__Loc: int;
  var MSNdis_AtmMaxActiveVcs_GUID__Loc: int;
  var WmiMonitorDescriptorMethods_GUID__Loc: int;
  var MSNdis_CoReceivePduErrors_GUID__Loc: int;
  var MSNdis_AtmReceiveCellsDropped_GUID__Loc: int;
  var MSNdis_EnumeratePorts_GUID__Loc: int;
  var MSNdis_TokenRingCurrentRingState_GUID__Loc: int;
  var MSNdis_WmiMethodHeader_GUID__Loc: int;
  var MSNdis_TcpConnectionOffloadCurrentConfig_GUID__Loc: int;
  var GUID_IDLE_RESILIENCY_PERIOD__Loc: int;
  var GUID_PROCESSOR_DISTRIBUTE_UTILITY__Loc: int;
  var MSMCAEvent_MemoryHierarchyError_GUID__Loc: int;
  var MSNdis_PortChar_GUID__Loc: int;
  var GUID_SLEEPBUTTON_ACTION__Loc: int;
  var MSNdis_ReceiveQueueInfoArray_GUID__Loc: int;
  var GUID_PROCESSOR_PERF_LATENCY_HINT_PERF__Loc: int;
  var MCE_NOTIFY_TYPE_GUID__Loc: int;
  var MSNdis_80211_RemoveWEP_GUID__Loc: int;
  var GUID_PROCESSOR_IDLE_DISABLE__Loc: int;
  var MSNdis_StatusDot11ConnectionCompletion_GUID__Loc: int;
  var MSMCAEvent_SMBIOSError_GUID__Loc: int;
  var MSKeyboard_ClassInformation_GUID__Loc: int;
  var IdleStateAccounting_GUID__Loc: int;
  var MSNdis_NetworkDirectAdapterInfo_GUID__Loc: int;
  var GUID_CONSOLE_DISPLAY_STATE__Loc: int;
  var GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP__Loc: int;
  var GUID_BATTERY_DISCHARGE_FLAGS_0__Loc: int;
  var GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD__Loc: int;
  var MSNdis_EthernetMoreTransmitCollisions_GUID__Loc: int;
  var MSNdis_StatusDot11TkipmicFailure_GUID__Loc: int;
  var MSNdis_AtmMaxAal0PacketSize_GUID__Loc: int;
  var MSDiskDriver_PerformanceData_GUID__Loc: int;
  var MSNdis_EnumerateReceiveQueues_GUID__Loc: int;
  var GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS__Loc: int;
  var MSNdis_NotifyAdapterArrival_GUID__Loc: int;
  var MSMouse_PortInformation_GUID__Loc: int;
  var NMI_SECTION_GUID__Loc: int;
  var MSMCAEvent_PlatformSpecificError_GUID__Loc: int;
  var MSMCAEvent_SwitchToCMCPolling_GUID__Loc: int;
  var MSAcpi_ThermalZoneTemperature_GUID__Loc: int;
  var MSDeviceUI_FirmwareRevision_GUID__Loc: int;
  var KernelPerfStateDomainChange_GUID__Loc: int;
  var GUID_INTSTEER_TIME_UNPARK_TRIGGER__Loc: int;
  var MSVerifierIrpLogEntry_GUID__Loc: int;
  var MSNdis_CoVendorDescription_GUID__Loc: int;
  var MSNdis_NetworkDirectState_GUID__Loc: int;
  var MSNdis_QueryReceiveQueueParameters_GUID__Loc: int;
  var GUID_LIDSWITCH_STATE_CHANGE__Loc: int;
  var GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS__Loc: int;
  var MSWmi_Guid_GUID__Loc: int;
  var GUID_SESSION_DISPLAY_STATUS__Loc: int;
  var MSNdis_TokenRingLastOpenStatus_GUID__Loc: int;
  var CPE_NOTIFY_TYPE_GUID__Loc: int;
  var MSTapeProblemDeviceError_GUID__Loc: int;
  var WmiMonitorListedSupportedSourceModes_GUID__Loc: int;
  var MSNdis_FddiFrameErrors_GUID__Loc: int;
  var MSNdis_NetworkDirectAdapterCapabilities_GUID__Loc: int;
  var GUID_PROCESSOR_PERF_INCREASE_THRESHOLD__Loc: int;
  var GUID_PROCESSOR_IDLE_STATE_MAXIMUM__Loc: int;
  var GUID_VIDEO_ANNOYANCE_TIMEOUT__Loc: int;
  var GUID_BATTERY_DISCHARGE_FLAGS_3__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_MAX_CORES__Loc: int;
  var MSNdis_FddiLemRejects_GUID__Loc: int;
  var IdleStateAccountingEx_GUID__Loc: int;
  var GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE__Loc: int;
  var MSNdis_80211_WLanBssId_GUID__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD__Loc: int;
  var MSNdis_QueryReceiveFilterGlobalParameters_GUID__Loc: int;
  var GUID_MIN_POWER_SAVINGS__Loc: int;
  var GUID_DEVICE_IDLE_POLICY__Loc: int;
  var MSNdis_StatusLinkSpeedChange_GUID__Loc: int;
  var MSNdis_AtmMaxActiveVpiBits_GUID__Loc: int;
  var MSNdis_80211_NetworkType_GUID__Loc: int;
  var MSSerial_HardwareConfiguration_GUID__Loc: int;
  var MSMCAEvent_Header_GUID__Loc: int;
  var WHEAErrorInjectionMethods_GUID__Loc: int;
  var MSNdis_NetworkLinkSpeed_GUID__Loc: int;
  var MSNdis_StatusMediaSpecificIndication_GUID__Loc: int;
  var MSTapeSymbolicName_GUID__Loc: int;
  var GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT__Loc: int;
  var GUID_SLEEP_SUBGROUP__Loc: int;
  var MSNdis_NetworkDirectCapabilities_GUID__Loc: int;
  var MSNdis_StatusResetStart_GUID__Loc: int;
  var GUID_DEVINTERFACE_MOUSE__Loc: int;
  var MSNdis_WmiSetHeader_GUID__Loc: int;
  var MSNdis_80211_ConfigurationInfo_GUID__Loc: int;
  var MSNdis_80211_ServiceSetIdentifier_GUID__Loc: int;
  var MSSerial_PerformanceInformation_GUID__Loc: int;
  var WmiMonitorSupportedDisplayFeatures_GUID__Loc: int;
  var MSNdis_EthernetMaximumMulticastListSize_GUID__Loc: int;
  var MSNdis_SetHDSplitParameters_GUID__Loc: int;
  var MSNdis_WmiIPSecOffloadV1_IPv4AH_GUID__Loc: int;
  var MSNdis_TcpOffloadCurrentConfig_GUID__Loc: int;
  var MSNdis_RSSEnabled_GUID__Loc: int;
  var MSKeyboard_PortInformation_GUID__Loc: int;
  var MSAgp_Information_GUID__Loc: int;
  var MSNdis_ReceivesOk_GUID__Loc: int;
  var MSWmi_MofData_GUID__Loc: int;
  var MSNdis_EnumerateAdapterEx_GUID__Loc: int;
  var MSNdis_80211_PowerMode_GUID__Loc: int;
  var MSNdis_StatusDot11AssociationStart_GUID__Loc: int;
  var GUID_DISK_SUBGROUP__Loc: int;
  var MSSerial_CommProperties_GUID__Loc: int;
  var MSNdis_StatusDot11PhyStateChange_GUID__Loc: int;
  var GUID_BATTERY_DISCHARGE_LEVEL_1__Loc: int;
  var MSNdis_ReceiveBlockSize_GUID__Loc: int;
  var MSNdis_TransmitsOk_GUID__Loc: int;
  var MSNdis_TokenRingPermanentAddress_GUID__Loc: int;
  var MSNdis_SetInterruptModeration_GUID__Loc: int;
  var GUID_BATTERY_DISCHARGE_ACTION_0__Loc: int;
  var MSNdis_WmiOffload_GUID__Loc: int;
  var GUID_INTSTEER_LOAD_PER_PROC_TRIGGER__Loc: int;
  var MSNdis_WmiIPSecOffloadV1_IPv4ESP_GUID__Loc: int;
  var GUID_BATTERY_DISCHARGE_LEVEL_0__Loc: int;
  var MSNdis_WmiHDSplitCurrentConfig_GUID__Loc: int;
  var WmiMonitorAnalogVideoInputParams_GUID__Loc: int;
  var GUID_VIDEO_DIM_TIMEOUT__Loc: int;
  var MSNdis_FddiLongMulticastList_GUID__Loc: int;
  var GUID_PROCESSOR_PERF_TIME_CHECK__Loc: int;
  var MSNdis_EthernetMacOptions_GUID__Loc: int;
  var MSWmi_PnPDeviceId_GUID__Loc: int;
  var MSNdis_80211_BSSIList_GUID__Loc: int;
  var MSNdis_TokenRingLostFrames_GUID__Loc: int;
  var GUID_LIDOPEN_POWERSTATE__Loc: int;
  var GUID_PROCESSOR_PARKING_CORE_OVERRIDE__Loc: int;
  var MSNdis_FddiUpstreamNodeLong_GUID__Loc: int;
  var MSNdis_PortArray_GUID__Loc: int;
  var MSNdis_QueryPortState_GUID__Loc: int;
  var GUID_PROCESSOR_PERF_INCREASE_TIME__Loc: int;
  var MSNdis_StatusDot11PmkidCandidateList_GUID__Loc: int;
  var MSNdis_FddiLongCurrentAddress_GUID__Loc: int;
  var MSNdis_QueryReceiveFilterHardwareCapabilities_GUID__Loc: int;
  var MSSerial_PortName_GUID__Loc: int;
  var MSNdis_NotifyVcRemoval_GUID__Loc: int;
  var MSNdis_LinkParameters_GUID__Loc: int;
  var MSNdis_MaximumSendPackets_GUID__Loc: int;
  var MSMCAInfo_Entry_GUID__Loc: int;
  var MSNdis_GroupAffinity_GUID__Loc: int;
  var MSNdis_StatusDot11RoamingCompletion_GUID__Loc: int;
  var KernelPerfStateChange_GUID__Loc: int;
  var KbKeyboardPortGuid__Loc: int;
  var GUID_MONITOR_POWER_ON__Loc: int;
  var MSNdis_FddiShortMulticastList_GUID__Loc: int;
  var MSNdis_80211_ReceivedSignalStrengthEventTrigger_GUID__Loc: int;
  var XPF_MCA_SECTION_GUID__Loc: int;
  var MSNdis_StatusDevicePowerOn_GUID__Loc: int;
  var MSKeyboard_ExtendedID_GUID__Loc: int;
  var WHEAErrorSourceMethods_GUID__Loc: int;
  var MSNdis_AtmMaxAal34PacketSize_GUID__Loc: int;
  var MSNdis_TokenRingCurrentGroup_GUID__Loc: int;
  var MSWmi_ProviderInfo_GUID__Loc: int;
  var WHEA_MSCHECK_GUID__Loc: int;
  var MSNdis_FddiAttachmentType_GUID__Loc: int;
  var MSNdis_ReceiveFilterParameters_GUID__Loc: int;
  var MSMCAEvent_PCIBusError_GUID__Loc: int;
  var MSNdis_MediaInUse_GUID__Loc: int;
  var WmiMonitorID_GUID__Loc: int;
  var MSMCAInfo_RawCorrectedPlatformEvent_GUID__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME__Loc: int;
  var MSNdis_QueryPhysicalMediumTypeEx_GUID__Loc: int;
  var GUID_PROCESSOR_THROTTLE_MINIMUM__Loc: int;
  var GUID_ALLOW_AWAYMODE__Loc: int;
  var GUID_DISK_ADAPTIVE_POWERDOWN__Loc: int;
  var GUID_SYSTEM_BUTTON_SUBGROUP__Loc: int;
  var WmiMonitorBasicDisplayParams_GUID__Loc: int;
  var MSNdis_ReceiveBufferSpace_GUID__Loc: int;
  var MSPower_DeviceWakeEnable_GUID__Loc: int;
  var MSNdis_CoVendorId_GUID__Loc: int;
  var GUID_ALLOW_SYSTEM_REQUIRED__Loc: int;
  var MSNdis_WmiTcpIpChecksumOffload_IPv4TransmitReceive_GUID__Loc: int;
  var MSNdis_NdisEnumerateVc_GUID__Loc: int;
  var MSNdis_CoMacOptions_GUID__Loc: int;
  var MSNdis_FddiShortCurrentAddress_GUID__Loc: int;
  var MSNdis_80211_RTSThreshold_GUID__Loc: int;
  var MSNdis_80211_BssIdListScan_GUID__Loc: int;
  var GUID_ALLOW_DISPLAY_REQUIRED__Loc: int;
  var MSNdis_AtmTransmitCellsOk_GUID__Loc: int;
  var GENERIC_NOTIFY_TYPE_GUID__Loc: int;
  var MSSmBios_Sysid1394List_GUID__Loc: int;
  var MSNdis_TransmitsError_GUID__Loc: int;
  var MSNdis_CoMinimumLinkSpeed_GUID__Loc: int;
  var MSNdis_QueryReceiveFilterParameters_GUID__Loc: int;
  var MSNdis_QueryNicSwitchCurrentCapabilities_GUID__Loc: int;
  var GUID_PROCESSOR_PARKING_PERF_STATE__Loc: int;
  var MSNdis_NetworkDirectVersion_GUID__Loc: int;
  var GUID_PROCESSOR_PERF_DECREASE_POLICY__Loc: int;
  var MSNdis_80211_Disassociate_GUID__Loc: int;
  var MSStorageDriver_FailurePredictStatus_GUID__Loc: int;
  var MSNdis_WmiReceiveScaleCapabilities_GUID__Loc: int;
  var MSNdis_80211_AddWEP_GUID__Loc: int;
  var GUID_ALLOW_STANDBY_STATES__Loc: int;
  var GUID_PROCESSOR_PERFSTATE_POLICY__Loc: int;
  var MSNdis_TokenRingCurrentFunctional_GUID__Loc: int;
  var GUID_DEVINTERFACE_KEYBOARD__Loc: int;
  var MSNdis_InterruptModerationParameters_GUID__Loc: int;
  var MSNdis_PMCapabilitiesParam_GUID__Loc: int;
  var MSVerifierIrpLogInformation_GUID__Loc: int;
  var GUID_BATTERY_DISCHARGE_ACTION_1__Loc: int;
  var GUID_PROCESSOR_PERF_INCREASE_POLICY__Loc: int;
  var MSNdis_80211_TransmitPowerLevel_GUID__Loc: int;
  var WmiMonitorBrightnessEvent_GUID__Loc: int;
  var GUID_VIDEO_SUBGROUP__Loc: int;
  var MSNdis_StatusProtocolUnbind_GUID__Loc: int;
  var MSNdis_ReceiveFilterInfo_GUID__Loc: int;
  var GUID_HIBERNATE_FASTS4_POLICY__Loc: int;
  var KernelPerfStates_GUID__Loc: int;
  var XPF_PROCESSOR_ERROR_SECTION_GUID__Loc: int;
  var MSNdis_NicSwitchCapabilities_GUID__Loc: int;
  var MSNdis_LinkState_GUID__Loc: int;
  var MSNdis_80211_FragmentationThreshold_GUID__Loc: int;
  var WHEAPolicyManagementMethods_GUID__Loc: int;
  var MSNdis_NetworkAddress_GUID__Loc: int;
  var WmiMonitorDigitalVideoInputParams_GUID__Loc: int;
  var MSNdis_PortStateData_GUID__Loc: int;
  var GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS__Loc: int;
  var MSNdis_WmiIPSecOffloadV1_GUID__Loc: int;
  var MSNdis_80211_TransmitAntennaSelected_GUID__Loc: int;
  var MSTapeDriveParam_GUID__Loc: int;
  var MSSmBios_SysidUUID_GUID__Loc: int;
  var MSNdis_AtmSupportedServiceCategory_GUID__Loc: int;
  var MSNdis_AtmSupportedVcRates_GUID__Loc: int;
  var MSNdis_StatusMediaSpecificIndicationEx_GUID__Loc: int;
  var KernelThermalConstraintChange_GUID__Loc: int;
  var RegisteredGuids_GUID__Loc: int;
  var MSWmi_GuidRegistrationInfo_GUID__Loc: int;
  var MSMCAInfo_RawCMCEvent_GUID__Loc: int;
  var MSNdis_80211_WEPStatus_GUID__Loc: int;
  var GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD__Loc: int;
  var WmiMonitorBrightness_GUID__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR__Loc: int;
  var MSNdis_WmiTcpIpChecksumOffload_GUID__Loc: int;
  var MSNdis_StatusPortState_GUID__Loc: int;
  var MSNdis_StatusDot11MPDUMaxLengthChange_GUID__Loc: int;
  var MSNdis_ReceiveQueueParameters_GUID__Loc: int;
  var MSSmBios_Sysid1394_GUID__Loc: int;
  var MSNdis_ReceiveQueueInfo_GUID__Loc: int;
  var NMI_NOTIFY_TYPE_GUID__Loc: int;
  var MSStorageDriver_FailurePredictFunction_GUID__Loc: int;
  var GUID_DISK_COALESCING_POWERDOWN_TIMEOUT__Loc: int;
  var MSNdis_WmiTcpConnectionOffload_GUID__Loc: int;
  var PROCESSOR_GENERIC_ERROR_SECTION_GUID__Loc: int;
  var GUID_USERINTERFACEBUTTON_ACTION__Loc: int;
  var MSNdis_SetPortParameters_GUID__Loc: int;
  var WmiMonitorBrightnessMethods_GUID__Loc: int;
  var GUID_PCIEXPRESS_ASPM_POLICY__Loc: int;
  var MSNdis_EthernetPermanentAddress_GUID__Loc: int;
  var MSNdis_WmiTcpLargeSendOffloadV2_IPv6_GUID__Loc: int;
  var MSNdis_CoReceivePdusNoBuffer_GUID__Loc: int;
  var MSNdis_NetworkShortAddress_GUID__Loc: int;
  var MSNdis_ObjectHeader_GUID__Loc: int;
  var MSNdis_80211_DataRates_GUID__Loc: int;
  var MSNdis_StatusOperationalStatus_GUID__Loc: int;
  var GUID_BATTERY_DISCHARGE_FLAGS_1__Loc: int;
  var MSNdis_AtmReceiveCellsOk_GUID__Loc: int;
  var MSNdis_TcpConnectionOffloadHardwareConfig_GUID__Loc: int;
  var MSNdis_CoHardwareStatus_GUID__Loc: int;
  var MSNdis_PMAdminConfig_GUID__Loc: int;
  var GUID_PROCESSOR_PERF_INCREASE_HISTORY__Loc: int;
  var GUID_INTSTEER_SUBGROUP__Loc: int;
  var GUID_DISK_BURST_IGNORE_THRESHOLD__Loc: int;
  var MSNdis_TokenRingLineErrors_GUID__Loc: int;
  var WHEA_CACHECHECK_GUID__Loc: int;
  var MSNdis_QueryInterruptModeration_GUID__Loc: int;
  var MSNdis_NotifyFilterArrival_GUID__Loc: int;
  var MSNdis_QueryStatisticsInfo_GUID__Loc: int;
  var GUID_DISK_POWERDOWN_TIMEOUT__Loc: int;
  var MSNdis_EnumerateAdapter_GUID__Loc: int;
  var MSNdis_EthernetOneTransmitCollision_GUID__Loc: int;
  var MSNdis_StatusDot11LinkQuality_GUID__Loc: int;
  var GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD__Loc: int;
  var MSMCAInfo_RawMCAData_GUID__Loc: int;
  var MSNdis_CoMediaConnectStatus_GUID__Loc: int;
  var MSNdis_StatusLinkState_GUID__Loc: int;
  var MSStorageDriver_FailurePredictData_GUID__Loc: int;
  var MSNdis_ReceiveFilterFieldParameters_GUID__Loc: int;
  var MSNdis_80211_AuthenticationMode_GUID__Loc: int;
  var NO_SUBGROUP_GUID__Loc: int;
  var GUID_VIDEO_FULLSCREEN_PLAYBACK__Loc: int;
  var WmiMonitorListedFrequencyRanges_GUID__Loc: int;
  var GUID_PROCESSOR_PERF_BOOST_MODE__Loc: int;
  var ALL_POWERSCHEMES_GUID__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY__Loc: int;
  var MSMCAInfo_RawMCAEvent_GUID__Loc: int;
  var WmiMonitorRawEEdidV1Block_GUID__Loc: int;
  var MSNdis_StatusHDSplitCurrentConfig_GUID__Loc: int;
  var MSMCAEvent_InvalidError_GUID__Loc: int;
  var MSNdis_HDSplitCurrentConfig_GUID__Loc: int;
  var KernelIdleState_GUID__Loc: int;
  var GUID_PROCESSOR_IDLE_ALLOW_SCALING__Loc: int;
  var MSMCAEvent_MemoryPageRemoved_GUID__Loc: int;
  var MSTapeProblemIoError_GUID__Loc: int;
  var MSNdis_ReceiveFilterCapabilities_GUID__Loc: int;
  var MSNdis_FddiShortPermanentAddress_GUID__Loc: int;
  var MSNdis_80211_ReloadDefaults_GUID__Loc: int;
  var MSMCAEvent_SystemEventError_GUID__Loc: int;
  var MSNdis_VendorDriverVersion_GUID__Loc: int;
  var MSTapeDriveProblemEvent_GUID__Loc: int;
  var GUID_PROCESSOR_IDLE_TIME_CHECK__Loc: int;
  var GUID_INTSTEER_MODE__Loc: int;
  var MSNdis_WmiTcpLargeSendOffloadV2_GUID__Loc: int;
  var GUID_IDLE_RESILIENCY_PLATFORM_STATE__Loc: int;
  var GUID_BACKGROUND_TASK_NOTIFICATION__Loc: int;
  var WmiMonitorColorXYZinCIE_GUID__Loc: int;
  var GUID_PROCESSOR_PERF_HISTORY__Loc: int;
  var MSNdis_TransmitBufferSpace_GUID__Loc: int;
  var MSNdis_CoVendorDriverVersion_GUID__Loc: int;
  var MSNdis_FddiDownstreamNodeLong_GUID__Loc: int;
  var MSNdis_80211_NumberOfAntennas_GUID__Loc: int;
  var GUID_VIDEO_ADAPTIVE_POWERDOWN__Loc: int;
  var PCIe_NOTIFY_TYPE_GUID__Loc: int;
  var MSNdis_FddiRingManagmentState_GUID__Loc: int;
  var MSSmBios_SysidUUIDList_GUID__Loc: int;
  var MSNdis_ReceiveScaleCapabilities_GUID__Loc: int;
  var MSNdis_PMCapabilityState_GUID__Loc: int;
  var GUID_VIDEO_CONSOLE_LOCK_TIMEOUT__Loc: int;
  var GUID_PROCESSOR_PERF_BOOST_POLICY__Loc: int;
  var GUID_SESSION_USER_PRESENCE__Loc: int;
  var MSNdis_StatusResetEnd_GUID__Loc: int;
  var GUID_LIDCLOSE_ACTION__Loc: int;
  var MSNdis_EnumerateReceiveFilters_GUID__Loc: int;
  var MSNdis_StatusMediaDisconnect_GUID__Loc: int;
  var MSParallel_AllocFreeCounts_GUID__Loc: int;
  var WmiMonitorConnectionParams_GUID__Loc: int;
  var MSNdis_EthernetMulticastList_GUID__Loc: int;
  var MSNdis_ReceiveFilterGlobalParameters_GUID__Loc: int;
  var MSNdis_VlanIdentifier_GUID__Loc: int;
  var GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS__Loc: int;
  var MSNdis_AtmMaxAal1PacketSize_GUID__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD__Loc: int;
  var MSNdis_ReceiveNoBuffer_GUID__Loc: int;
  var MSNdis_WmiEnumAdapter_GUID__Loc: int;
  var MEMORY_ERROR_SECTION_GUID__Loc: int;
  var MSWmi_PnPInstanceNames_GUID__Loc: int;
  var GUID_PROCESSOR_PERF_DECREASE_TIME__Loc: int;
  var MSNdis_MaximumFrameSize_GUID__Loc: int;
  var GUID_MAX_POWER_SAVINGS__Loc: int;
  var GUID_BATTERY_SUBGROUP__Loc: int;
  var GUID_PROCESSOR_PERF_DECREASE_HISTORY__Loc: int;
  var MSNdis_80211_Statistics_GUID__Loc: int;
  var MSNdis_LinkStateData_GUID__Loc: int;
  var MSIde_PortDeviceInfo_GUID__Loc: int;
  var GUID_IDLE_BACKGROUND_TASK__Loc: int;
  var MSNdis_CountedString_GUID__Loc: int;
  var MSNdis_StatusDevicePowerOffEx_GUID__Loc: int;
  var MSSmBios_SMBiosEventlog_GUID__Loc: int;
  var MSNdis_PhysicalMediumType_GUID__Loc: int;
  var MSNdis_QueryPciDeviceCustomProperty_GUID__Loc: int;
  var MSNdis_80211_ReceivedSignalStrength_GUID__Loc: int;
  var CMC_NOTIFY_TYPE_GUID__Loc: int;
  var GUID_POWERSCHEME_PERSONALITY__Loc: int;
  var MSNdis_ReceiveError_GUID__Loc: int;
  var MSNdis_80211_InfrastructureMode_GUID__Loc: int;
  var MSNdis_80211_ReceiveAntennaSelected_GUID__Loc: int;
  var MSNdis_StatusTaskOffloadChange_GUID__Loc: int;
  var MSStorageDriver_FailurePredictThresholds_GUID__Loc: int;
  var FrequencyRangeDescriptor_GUID__Loc: int;
  var MSSmBios_RawSMBiosTables_GUID__Loc: int;
  var MSNdis_WmiTcpLargeSendOffloadV1_GUID__Loc: int;
  var MSNdis_SetTcpOffloadParameters_GUID__Loc: int;
  var MSNdis_CoTransmitPduErrors_GUID__Loc: int;
  var GUID_IDLE_RESILIENCY_SUBGROUP__Loc: int;
  var GUID_ENABLE_SWITCH_FORCED_SHUTDOWN__Loc: int;
  var MSNdis_PciDeviceProperty_GUID__Loc: int;
  var GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING__Loc: int;
  var MSMCAEvent_MemoryError_GUID__Loc: int;
  var GUID_PROCESSOR_PERF_DECREASE_THRESHOLD__Loc: int;
  var MSStorageDriver_FailurePredictEvent_GUID__Loc: int;
  var MSMCAEvent_SwitchToCPEPolling_GUID__Loc: int;
  var GUID_ACTIVE_POWERSCHEME__Loc: int;
  var GUID_SYSTEM_AWAYMODE__Loc: int;
  var MSNdis_CoDriverVersion_GUID__Loc: int;
  var MSNdis_CoLinkSpeed_GUID__Loc: int;
  var MSNdis_StatusDevicePowerOff_GUID__Loc: int;
  var VideoModeDescriptor_GUID__Loc: int;
  var MSTapeMediaCapacity_GUID__Loc: int;
  var vslice_dummy_var_281: int;
  var vslice_dummy_var_282: int;
  var vslice_dummy_var_283: int;
  var vslice_dummy_var_284: int;
  var vslice_dummy_var_285: int;
  var vslice_dummy_var_286: int;
  var vslice_dummy_var_287: int;
  var vslice_dummy_var_288: int;
  var vslice_dummy_var_289: int;
  var vslice_dummy_var_290: int;
  var vslice_dummy_var_291: int;
  var vslice_dummy_var_292: int;
  var vslice_dummy_var_293: int;
  var vslice_dummy_var_294: int;
  var vslice_dummy_var_295: int;
  var vslice_dummy_var_296: int;
  var vslice_dummy_var_297: int;
  var vslice_dummy_var_298: int;
  var vslice_dummy_var_299: int;
  var vslice_dummy_var_300: int;
  var vslice_dummy_var_301: int;
  var vslice_dummy_var_302: int;
  var vslice_dummy_var_303: int;
  var vslice_dummy_var_304: int;
  var vslice_dummy_var_305: int;
  var vslice_dummy_var_306: int;
  var vslice_dummy_var_307: int;
  var vslice_dummy_var_308: int;
  var vslice_dummy_var_309: int;
  var vslice_dummy_var_310: int;
  var vslice_dummy_var_311: int;
  var vslice_dummy_var_312: int;
  var vslice_dummy_var_313: int;
  var vslice_dummy_var_314: int;
  var vslice_dummy_var_315: int;
  var vslice_dummy_var_316: int;
  var vslice_dummy_var_317: int;
  var vslice_dummy_var_223: int;
  var vslice_dummy_var_224: int;
  var vslice_dummy_var_225: int;
  var vslice_dummy_var_226: int;
  var vslice_dummy_var_227: int;
  var vslice_dummy_var_228: int;
  var vslice_dummy_var_229: int;
  var vslice_dummy_var_230: int;
  var vslice_dummy_var_231: int;
  var vslice_dummy_var_232: int;
  var vslice_dummy_var_233: int;
  var vslice_dummy_var_234: int;
  var vslice_dummy_var_235: int;
  var vslice_dummy_var_236: int;
  var vslice_dummy_var_237: int;
  var vslice_dummy_var_238: int;
  var vslice_dummy_var_239: int;
  var vslice_dummy_var_240: int;
  var vslice_dummy_var_241: int;
  var vslice_dummy_var_242: int;

  anon0:
    dup_assertVar := true;
    assume alloc > 0;
    call {:si_unique_call 823} KeTickCount__Loc := __HAVOC_malloc_or_null(12);
    assume KeTickCount__Loc == KeTickCount;
    assume KeTickCount != 0;
    call {:si_unique_call 824} WHEA_ERROR_PACKET_SECTION_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume WHEA_ERROR_PACKET_SECTION_GUID__Loc == WHEA_ERROR_PACKET_SECTION_GUID;
    assume WHEA_ERROR_PACKET_SECTION_GUID != 0;
    call {:si_unique_call 825} Globals__Loc := __HAVOC_malloc_or_null(236);
    assume Globals__Loc == Globals;
    assume Globals != 0;
    call {:si_unique_call 826} GUID_PCMCIA_BUS_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCMCIA_BUS_INTERFACE_STANDARD__Loc == GUID_PCMCIA_BUS_INTERFACE_STANDARD;
    assume GUID_PCMCIA_BUS_INTERFACE_STANDARD != 0;
    call {:si_unique_call 827} GUID_BUS_TYPE_PCMCIA__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_PCMCIA__Loc == GUID_BUS_TYPE_PCMCIA;
    assume GUID_BUS_TYPE_PCMCIA != 0;
    call {:si_unique_call 828} GUID_TRANSLATOR_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_TRANSLATOR_INTERFACE_STANDARD__Loc == GUID_TRANSLATOR_INTERFACE_STANDARD;
    assume GUID_TRANSLATOR_INTERFACE_STANDARD != 0;
    call {:si_unique_call 829} GUID_PCI_VIRTUALIZATION_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCI_VIRTUALIZATION_INTERFACE__Loc == GUID_PCI_VIRTUALIZATION_INTERFACE;
    assume GUID_PCI_VIRTUALIZATION_INTERFACE != 0;
    call {:si_unique_call 830} GUID_ARBITER_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ARBITER_INTERFACE_STANDARD__Loc == GUID_ARBITER_INTERFACE_STANDARD;
    assume GUID_ARBITER_INTERFACE_STANDARD != 0;
    call {:si_unique_call 831} GUID_QUERY_CRASHDUMP_FUNCTIONS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_QUERY_CRASHDUMP_FUNCTIONS__Loc == GUID_QUERY_CRASHDUMP_FUNCTIONS;
    assume GUID_QUERY_CRASHDUMP_FUNCTIONS != 0;
    call {:si_unique_call 832} GUID_ACPI_CMOS_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACPI_CMOS_INTERFACE_STANDARD__Loc == GUID_ACPI_CMOS_INTERFACE_STANDARD;
    assume GUID_ACPI_CMOS_INTERFACE_STANDARD != 0;
    call {:si_unique_call 833} GUID_BUS_TYPE_1394__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_1394__Loc == GUID_BUS_TYPE_1394;
    assume GUID_BUS_TYPE_1394 != 0;
    call {:si_unique_call 834} GUID_AGP_TARGET_BUS_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_AGP_TARGET_BUS_INTERFACE_STANDARD__Loc == GUID_AGP_TARGET_BUS_INTERFACE_STANDARD;
    assume GUID_AGP_TARGET_BUS_INTERFACE_STANDARD != 0;
    call {:si_unique_call 835} GUID_TARGET_DEVICE_REMOVE_CANCELLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_TARGET_DEVICE_REMOVE_CANCELLED__Loc == GUID_TARGET_DEVICE_REMOVE_CANCELLED;
    assume GUID_TARGET_DEVICE_REMOVE_CANCELLED != 0;
    call {:si_unique_call 836} GUID_BUS_TYPE_ISAPNP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_ISAPNP__Loc == GUID_BUS_TYPE_ISAPNP;
    assume GUID_BUS_TYPE_ISAPNP != 0;
    call {:si_unique_call 837} GUID_MF_ENUMERATION_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_MF_ENUMERATION_INTERFACE__Loc == GUID_MF_ENUMERATION_INTERFACE;
    assume GUID_MF_ENUMERATION_INTERFACE != 0;
    call {:si_unique_call 838} GUID_LEGACY_DEVICE_DETECTION_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_LEGACY_DEVICE_DETECTION_STANDARD__Loc == GUID_LEGACY_DEVICE_DETECTION_STANDARD;
    assume GUID_LEGACY_DEVICE_DETECTION_STANDARD != 0;
    call {:si_unique_call 839} GUID_PCC_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCC_INTERFACE_STANDARD__Loc == GUID_PCC_INTERFACE_STANDARD;
    assume GUID_PCC_INTERFACE_STANDARD != 0;
    call {:si_unique_call 840} GUID_BUS_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_INTERFACE_STANDARD__Loc == GUID_BUS_INTERFACE_STANDARD;
    assume GUID_BUS_INTERFACE_STANDARD != 0;
    call {:si_unique_call 841} GUID_PNP_POWER_SETTING_CHANGE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PNP_POWER_SETTING_CHANGE__Loc == GUID_PNP_POWER_SETTING_CHANGE;
    assume GUID_PNP_POWER_SETTING_CHANGE != 0;
    call {:si_unique_call 842} GUID_BUS_TYPE_ACPI__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_ACPI__Loc == GUID_BUS_TYPE_ACPI;
    assume GUID_BUS_TYPE_ACPI != 0;
    call {:si_unique_call 843} GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE__Loc == GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE;
    assume GUID_PCI_EXPRESS_LINK_QUIESCENT_INTERFACE != 0;
    call {:si_unique_call 844} GUID_BUS_TYPE_DOT4PRT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_DOT4PRT__Loc == GUID_BUS_TYPE_DOT4PRT;
    assume GUID_BUS_TYPE_DOT4PRT != 0;
    call {:si_unique_call 845} GUID_BUS_TYPE_EISA__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_EISA__Loc == GUID_BUS_TYPE_EISA;
    assume GUID_BUS_TYPE_EISA != 0;
    call {:si_unique_call 846} GUID_ACPI_REGS_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACPI_REGS_INTERFACE_STANDARD__Loc == GUID_ACPI_REGS_INTERFACE_STANDARD;
    assume GUID_ACPI_REGS_INTERFACE_STANDARD != 0;
    call {:si_unique_call 847} GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED__Loc == GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED;
    assume GUID_TARGET_DEVICE_TRANSPORT_RELATIONS_CHANGED != 0;
    call {:si_unique_call 848} GUID_ACPI_INTERFACE_STANDARD2__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACPI_INTERFACE_STANDARD2__Loc == GUID_ACPI_INTERFACE_STANDARD2;
    assume GUID_ACPI_INTERFACE_STANDARD2 != 0;
    call {:si_unique_call 849} GUID_PARTITION_UNIT_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PARTITION_UNIT_INTERFACE_STANDARD__Loc == GUID_PARTITION_UNIT_INTERFACE_STANDARD;
    assume GUID_PARTITION_UNIT_INTERFACE_STANDARD != 0;
    call {:si_unique_call 850} GUID_BUS_TYPE_IRDA__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_IRDA__Loc == GUID_BUS_TYPE_IRDA;
    assume GUID_BUS_TYPE_IRDA != 0;
    call {:si_unique_call 851} GUID_PCI_BUS_INTERFACE_STANDARD2__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCI_BUS_INTERFACE_STANDARD2__Loc == GUID_PCI_BUS_INTERFACE_STANDARD2;
    assume GUID_PCI_BUS_INTERFACE_STANDARD2 != 0;
    call {:si_unique_call 852} GUID_WUDF_DEVICE_HOST_PROBLEM__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_WUDF_DEVICE_HOST_PROBLEM__Loc == GUID_WUDF_DEVICE_HOST_PROBLEM;
    assume GUID_WUDF_DEVICE_HOST_PROBLEM != 0;
    call {:si_unique_call 853} GUID_DEVICE_INTERFACE_REMOVAL__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVICE_INTERFACE_REMOVAL__Loc == GUID_DEVICE_INTERFACE_REMOVAL;
    assume GUID_DEVICE_INTERFACE_REMOVAL != 0;
    call {:si_unique_call 854} GUID_BUS_TYPE_SERENUM__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_SERENUM__Loc == GUID_BUS_TYPE_SERENUM;
    assume GUID_BUS_TYPE_SERENUM != 0;
    call {:si_unique_call 855} GUID_PCI_DEVICE_PRESENT_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCI_DEVICE_PRESENT_INTERFACE__Loc == GUID_PCI_DEVICE_PRESENT_INTERFACE;
    assume GUID_PCI_DEVICE_PRESENT_INTERFACE != 0;
    call {:si_unique_call 856} GUID_BUS_TYPE_MCA__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_MCA__Loc == GUID_BUS_TYPE_MCA;
    assume GUID_BUS_TYPE_MCA != 0;
    call {:si_unique_call 857} GUID_POWER_DEVICE_TIMEOUTS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_POWER_DEVICE_TIMEOUTS__Loc == GUID_POWER_DEVICE_TIMEOUTS;
    assume GUID_POWER_DEVICE_TIMEOUTS != 0;
    call {:si_unique_call 858} GUID_THERMAL_COOLING_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_THERMAL_COOLING_INTERFACE__Loc == GUID_THERMAL_COOLING_INTERFACE;
    assume GUID_THERMAL_COOLING_INTERFACE != 0;
    call {:si_unique_call 859} GUID_HWPROFILE_CHANGE_CANCELLED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_HWPROFILE_CHANGE_CANCELLED__Loc == GUID_HWPROFILE_CHANGE_CANCELLED;
    assume GUID_HWPROFILE_CHANGE_CANCELLED != 0;
    call {:si_unique_call 860} GUID_PNP_LOCATION_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PNP_LOCATION_INTERFACE__Loc == GUID_PNP_LOCATION_INTERFACE;
    assume GUID_PNP_LOCATION_INTERFACE != 0;
    call {:si_unique_call 861} GUID_MSIX_TABLE_CONFIG_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_MSIX_TABLE_CONFIG_INTERFACE__Loc == GUID_MSIX_TABLE_CONFIG_INTERFACE;
    assume GUID_MSIX_TABLE_CONFIG_INTERFACE != 0;
    call {:si_unique_call 862} GUID_BUS_TYPE_INTERNAL__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_INTERNAL__Loc == GUID_BUS_TYPE_INTERNAL;
    assume GUID_BUS_TYPE_INTERNAL != 0;
    call {:si_unique_call 863} GUID_BUS_TYPE_LPTENUM__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_LPTENUM__Loc == GUID_BUS_TYPE_LPTENUM;
    assume GUID_BUS_TYPE_LPTENUM != 0;
    call {:si_unique_call 864} GUID_HWPROFILE_CHANGE_COMPLETE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_HWPROFILE_CHANGE_COMPLETE__Loc == GUID_HWPROFILE_CHANGE_COMPLETE;
    assume GUID_HWPROFILE_CHANGE_COMPLETE != 0;
    call {:si_unique_call 865} GUID_DEVICE_INTERFACE_ARRIVAL__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVICE_INTERFACE_ARRIVAL__Loc == GUID_DEVICE_INTERFACE_ARRIVAL;
    assume GUID_DEVICE_INTERFACE_ARRIVAL != 0;
    call {:si_unique_call 866} GUID_BUS_TYPE_AVC__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_AVC__Loc == GUID_BUS_TYPE_AVC;
    assume GUID_BUS_TYPE_AVC != 0;
    call {:si_unique_call 867} GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD__Loc == GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD;
    assume GUID_ACPI_PORT_RANGES_INTERFACE_STANDARD != 0;
    call {:si_unique_call 868} GUID_BUS_TYPE_USB__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_USB__Loc == GUID_BUS_TYPE_USB;
    assume GUID_BUS_TYPE_USB != 0;
    call {:si_unique_call 869} GUID_INT_ROUTE_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_INT_ROUTE_INTERFACE_STANDARD__Loc == GUID_INT_ROUTE_INTERFACE_STANDARD;
    assume GUID_INT_ROUTE_INTERFACE_STANDARD != 0;
    call {:si_unique_call 870} GUID_PROCESSOR_PCC_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PCC_INTERFACE_STANDARD__Loc == GUID_PROCESSOR_PCC_INTERFACE_STANDARD;
    assume GUID_PROCESSOR_PCC_INTERFACE_STANDARD != 0;
    call {:si_unique_call 871} GUID_BUS_TYPE_USBPRINT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_USBPRINT__Loc == GUID_BUS_TYPE_USBPRINT;
    assume GUID_BUS_TYPE_USBPRINT != 0;
    call {:si_unique_call 872} GUID_BUS_TYPE_PCI__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_PCI__Loc == GUID_BUS_TYPE_PCI;
    assume GUID_BUS_TYPE_PCI != 0;
    call {:si_unique_call 873} GUID_TARGET_DEVICE_QUERY_REMOVE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_TARGET_DEVICE_QUERY_REMOVE__Loc == GUID_TARGET_DEVICE_QUERY_REMOVE;
    assume GUID_TARGET_DEVICE_QUERY_REMOVE != 0;
    call {:si_unique_call 874} GUID_PCI_BUS_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCI_BUS_INTERFACE_STANDARD__Loc == GUID_PCI_BUS_INTERFACE_STANDARD;
    assume GUID_PCI_BUS_INTERFACE_STANDARD != 0;
    call {:si_unique_call 875} GUID_HWPROFILE_QUERY_CHANGE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_HWPROFILE_QUERY_CHANGE__Loc == GUID_HWPROFILE_QUERY_CHANGE;
    assume GUID_HWPROFILE_QUERY_CHANGE != 0;
    call {:si_unique_call 876} GUID_BUS_TYPE_SW_DEVICE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_SW_DEVICE__Loc == GUID_BUS_TYPE_SW_DEVICE;
    assume GUID_BUS_TYPE_SW_DEVICE != 0;
    call {:si_unique_call 877} GUID_POWER_DEVICE_ENABLE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_POWER_DEVICE_ENABLE__Loc == GUID_POWER_DEVICE_ENABLE;
    assume GUID_POWER_DEVICE_ENABLE != 0;
    call {:si_unique_call 878} GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE__Loc == GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE;
    assume GUID_PCI_EXPRESS_ROOT_PORT_INTERFACE != 0;
    call {:si_unique_call 879} GUID_PNP_CUSTOM_NOTIFICATION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PNP_CUSTOM_NOTIFICATION__Loc == GUID_PNP_CUSTOM_NOTIFICATION;
    assume GUID_PNP_CUSTOM_NOTIFICATION != 0;
    call {:si_unique_call 880} GUID_BUS_TYPE_SD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_SD__Loc == GUID_BUS_TYPE_SD;
    assume GUID_BUS_TYPE_SD != 0;
    call {:si_unique_call 881} GUID_PNP_POWER_NOTIFICATION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PNP_POWER_NOTIFICATION__Loc == GUID_PNP_POWER_NOTIFICATION;
    assume GUID_PNP_POWER_NOTIFICATION != 0;
    call {:si_unique_call 882} GUID_PCC_INTERFACE_INTERNAL__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCC_INTERFACE_INTERNAL__Loc == GUID_PCC_INTERFACE_INTERNAL;
    assume GUID_PCC_INTERFACE_INTERNAL != 0;
    call {:si_unique_call 883} GUID_D3COLD_SUPPORT_INTERFACE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_D3COLD_SUPPORT_INTERFACE__Loc == GUID_D3COLD_SUPPORT_INTERFACE;
    assume GUID_D3COLD_SUPPORT_INTERFACE != 0;
    call {:si_unique_call 884} GUID_REENUMERATE_SELF_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_REENUMERATE_SELF_INTERFACE_STANDARD__Loc == GUID_REENUMERATE_SELF_INTERFACE_STANDARD;
    assume GUID_REENUMERATE_SELF_INTERFACE_STANDARD != 0;
    call {:si_unique_call 885} GUID_BUS_TYPE_HID__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BUS_TYPE_HID__Loc == GUID_BUS_TYPE_HID;
    assume GUID_BUS_TYPE_HID != 0;
    call {:si_unique_call 886} GUID_TARGET_DEVICE_REMOVE_COMPLETE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_TARGET_DEVICE_REMOVE_COMPLETE__Loc == GUID_TARGET_DEVICE_REMOVE_COMPLETE;
    assume GUID_TARGET_DEVICE_REMOVE_COMPLETE != 0;
    call {:si_unique_call 887} GUID_ACPI_INTERFACE_STANDARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACPI_INTERFACE_STANDARD__Loc == GUID_ACPI_INTERFACE_STANDARD;
    assume GUID_ACPI_INTERFACE_STANDARD != 0;
    call {:si_unique_call 888} GUID_POWER_DEVICE_WAKE_ENABLE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_POWER_DEVICE_WAKE_ENABLE__Loc == GUID_POWER_DEVICE_WAKE_ENABLE;
    assume GUID_POWER_DEVICE_WAKE_ENABLE != 0;
    call {:si_unique_call 889} GUID_DEVICE_SYS_BUTTON__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVICE_SYS_BUTTON__Loc == GUID_DEVICE_SYS_BUTTON;
    assume GUID_DEVICE_SYS_BUTTON != 0;
    call {:si_unique_call 890} sdv_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_harnessStackLocation_next__Loc == sdv_harnessStackLocation_next;
    assume sdv_harnessStackLocation_next != 0;
    call {:si_unique_call 891} sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX__Loc := __HAVOC_malloc_or_null(76);
    assume sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX__Loc == sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX;
    assume sdv_IoReadPartitionTableEx_DRIVE_LAYOUT_INFORMATION_EX != 0;
    call {:si_unique_call 892} sdv_IoBuildAsynchronousFsdRequest_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoBuildAsynchronousFsdRequest_harnessIrp__Loc == sdv_IoBuildAsynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildAsynchronousFsdRequest_harnessIrp != 0;
    call {:si_unique_call 893} sdv_IoGetDeviceToVerify_DEVICE_OBJECT__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_IoGetDeviceToVerify_DEVICE_OBJECT__Loc == sdv_IoGetDeviceToVerify_DEVICE_OBJECT;
    assume sdv_IoGetDeviceToVerify_DEVICE_OBJECT != 0;
    call {:si_unique_call 894} sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next__Loc == sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next;
    assume sdv_IoBuildDeviceIoControlRequest_harnessStackLocation_next != 0;
    call {:si_unique_call 895} sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock__Loc == sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock;
    assume sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    call {:si_unique_call 896} sdv_ControllerIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_ControllerIrp__Loc == sdv_ControllerIrp;
    assume sdv_ControllerIrp != 0;
    call {:si_unique_call 897} sdv_devobj_pdo__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_devobj_pdo__Loc == sdv_devobj_pdo;
    assume sdv_devobj_pdo != 0;
    call {:si_unique_call 898} sdv_IoGetDmaAdapter_DMA_ADAPTER__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_IoGetDmaAdapter_DMA_ADAPTER__Loc == sdv_IoGetDmaAdapter_DMA_ADAPTER;
    assume sdv_IoGetDmaAdapter_DMA_ADAPTER != 0;
    call {:si_unique_call 899} sdv_IoInitializeIrp_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoInitializeIrp_harnessIrp__Loc == sdv_IoInitializeIrp_harnessIrp;
    assume sdv_IoInitializeIrp_harnessIrp != 0;
    call {:si_unique_call 900} sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT__Loc == sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT;
    assume sdv_IoGetRelatedDeviceObject_DEVICE_OBJECT != 0;
    call {:si_unique_call 901} sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next__Loc == sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next;
    assume sdv_IoBuildSynchronousFsdRequest_harnessStackLocation_next != 0;
    call {:si_unique_call 902} sdv_IoCreateSynchronizationEvent_KEVENT__Loc := __HAVOC_malloc_or_null(156);
    assume sdv_IoCreateSynchronizationEvent_KEVENT__Loc == sdv_IoCreateSynchronizationEvent_KEVENT;
    assume sdv_IoCreateSynchronizationEvent_KEVENT != 0;
    call {:si_unique_call 903} sdv_other_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_other_harnessStackLocation_next__Loc == sdv_other_harnessStackLocation_next;
    assume sdv_other_harnessStackLocation_next != 0;
    call {:si_unique_call 904} sdv_harnessStackLocation__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_harnessStackLocation__Loc == sdv_harnessStackLocation;
    assume sdv_harnessStackLocation != 0;
    call {:si_unique_call 905} sdv_IoCreateController_CONTROLLER_OBJECT__Loc := __HAVOC_malloc_or_null(60);
    assume sdv_IoCreateController_CONTROLLER_OBJECT__Loc == sdv_IoCreateController_CONTROLLER_OBJECT;
    assume sdv_IoCreateController_CONTROLLER_OBJECT != 0;
    call {:si_unique_call 906} sdv_devobj_top__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_devobj_top__Loc == sdv_devobj_top;
    assume sdv_devobj_top != 0;
    call {:si_unique_call 907} sdv_kdpc_val3__Loc := __HAVOC_malloc_or_null(44);
    assume sdv_kdpc_val3__Loc == sdv_kdpc_val3;
    assume sdv_kdpc_val3 != 0;
    call {:si_unique_call 908} sdv_IoBuildSynchronousFsdRequest_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoBuildSynchronousFsdRequest_harnessIrp__Loc == sdv_IoBuildSynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildSynchronousFsdRequest_harnessIrp != 0;
    call {:si_unique_call 909} sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT__Loc == sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT;
    assume sdv_IoGetDeviceObjectPointer_DEVICE_OBJECT != 0;
    call {:si_unique_call 910} sdv_MapRegisterBase_val__Loc := __HAVOC_malloc_or_null(4);
    assume sdv_MapRegisterBase_val__Loc == sdv_MapRegisterBase_val;
    assume sdv_MapRegisterBase_val != 0;
    call {:si_unique_call 911} sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING__Loc := __HAVOC_malloc_or_null(16);
    assume sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING__Loc == sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING;
    assume sdv_IoGetFileObjectGenericMapping_GENERIC_MAPPING != 0;
    call {:si_unique_call 912} sdv_IoMakeAssociatedIrp_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoMakeAssociatedIrp_harnessIrp__Loc == sdv_IoMakeAssociatedIrp_harnessIrp;
    assume sdv_IoMakeAssociatedIrp_harnessIrp != 0;
    call {:si_unique_call 913} sdv_devobj_child_pdo__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_devobj_child_pdo__Loc == sdv_devobj_child_pdo;
    assume sdv_devobj_child_pdo != 0;
    call {:si_unique_call 914} sdv_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_harnessIrp__Loc == sdv_harnessIrp;
    assume sdv_harnessIrp != 0;
    call {:si_unique_call 915} sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next__Loc == sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next;
    assume sdv_IoBuildAsynchronousFsdRequest_harnessStackLocation_next != 0;
    call {:si_unique_call 916} sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock__Loc == sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock;
    assume sdv_harness_IoBuildDeviceIoControlRequest_IoStatusBlock != 0;
    call {:si_unique_call 917} sdv_kinterrupt_val__Loc := __HAVOC_malloc_or_null(0);
    assume sdv_kinterrupt_val__Loc == sdv_kinterrupt_val;
    assume sdv_kinterrupt_val != 0;
    call {:si_unique_call 918} sdv_fx_dev_object__Loc := __HAVOC_malloc_or_null(40);
    assume sdv_fx_dev_object__Loc == sdv_fx_dev_object;
    assume sdv_fx_dev_object != 0;
    call {:si_unique_call 919} sdv_devobj_fdo__Loc := __HAVOC_malloc_or_null(380);
    assume sdv_devobj_fdo__Loc == sdv_devobj_fdo;
    assume sdv_devobj_fdo != 0;
    call {:si_unique_call 920} sdv_DpcContext__Loc := __HAVOC_malloc_or_null(4);
    assume sdv_DpcContext__Loc == sdv_DpcContext;
    assume sdv_DpcContext != 0;
    call {:si_unique_call 921} sdv_StartIoIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_StartIoIrp__Loc == sdv_StartIoIrp;
    assume sdv_StartIoIrp != 0;
    call {:si_unique_call 922} sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock__Loc := __HAVOC_malloc_or_null(12);
    assume sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock__Loc == sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock;
    assume sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    call {:si_unique_call 923} sdv_PowerIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_PowerIrp__Loc == sdv_PowerIrp;
    assume sdv_PowerIrp != 0;
    call {:si_unique_call 924} sdv_IoBuildDeviceIoControlRequest_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_IoBuildDeviceIoControlRequest_harnessIrp__Loc == sdv_IoBuildDeviceIoControlRequest_harnessIrp;
    assume sdv_IoBuildDeviceIoControlRequest_harnessIrp != 0;
    call {:si_unique_call 925} sdv_other_harnessIrp__Loc := __HAVOC_malloc_or_null(240);
    assume sdv_other_harnessIrp__Loc == sdv_other_harnessIrp;
    assume sdv_other_harnessIrp != 0;
    call {:si_unique_call 926} sdv_IoCreateNotificationEvent_KEVENT__Loc := __HAVOC_malloc_or_null(156);
    assume sdv_IoCreateNotificationEvent_KEVENT__Loc == sdv_IoCreateNotificationEvent_KEVENT;
    assume sdv_IoCreateNotificationEvent_KEVENT != 0;
    call {:si_unique_call 927} sdv_other_harnessStackLocation__Loc := __HAVOC_malloc_or_null(536);
    assume sdv_other_harnessStackLocation__Loc == sdv_other_harnessStackLocation;
    assume sdv_other_harnessStackLocation != 0;
    call {:si_unique_call 928} sdv_MmMapIoSpace_int__Loc := __HAVOC_malloc_or_null(4);
    assume sdv_MmMapIoSpace_int__Loc == sdv_MmMapIoSpace_int;
    assume sdv_MmMapIoSpace_int != 0;
    call {:si_unique_call 929} SLAM_guard_S_0_init__Loc := __HAVOC_malloc_or_null(240);
    assume SLAM_guard_S_0_init__Loc == SLAM_guard_S_0_init;
    assume SLAM_guard_S_0_init != 0;
    call {:si_unique_call 930} GUID_DEVICE_THERMAL_ZONE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVICE_THERMAL_ZONE__Loc == GUID_DEVICE_THERMAL_ZONE;
    assume GUID_DEVICE_THERMAL_ZONE != 0;
    call {:si_unique_call 931} GUID_DEVICE_PROCESSOR__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVICE_PROCESSOR__Loc == GUID_DEVICE_PROCESSOR;
    assume GUID_DEVICE_PROCESSOR != 0;
    call {:si_unique_call 932} GUID_DEVICE_ACPI_TIME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVICE_ACPI_TIME__Loc == GUID_DEVICE_ACPI_TIME;
    assume GUID_DEVICE_ACPI_TIME != 0;
    call {:si_unique_call 933} GUID_DEVICE_BATTERY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVICE_BATTERY__Loc == GUID_DEVICE_BATTERY;
    assume GUID_DEVICE_BATTERY != 0;
    call {:si_unique_call 934} GUID_DEVICE_MEMORY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVICE_MEMORY__Loc == GUID_DEVICE_MEMORY;
    assume GUID_DEVICE_MEMORY != 0;
    call {:si_unique_call 935} GUID_DEVICE_APPLICATIONLAUNCH_BUTTON__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVICE_APPLICATIONLAUNCH_BUTTON__Loc == GUID_DEVICE_APPLICATIONLAUNCH_BUTTON;
    assume GUID_DEVICE_APPLICATIONLAUNCH_BUTTON != 0;
    call {:si_unique_call 936} GUID_DEVICE_LID__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVICE_LID__Loc == GUID_DEVICE_LID;
    assume GUID_DEVICE_LID != 0;
    call {:si_unique_call 937} GUID_DEVICE_FAN__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVICE_FAN__Loc == GUID_DEVICE_FAN;
    assume GUID_DEVICE_FAN != 0;
    call {:si_unique_call 938} PROCESSOR_NUMBER_PKEY__Loc := __HAVOC_malloc_or_null(20);
    assume PROCESSOR_NUMBER_PKEY__Loc == PROCESSOR_NUMBER_PKEY;
    assume PROCESSOR_NUMBER_PKEY != 0;
    call {:si_unique_call 939} GUID_CLASS_INPUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_CLASS_INPUT__Loc == GUID_CLASS_INPUT;
    assume GUID_CLASS_INPUT != 0;
    call {:si_unique_call 940} GUID_DEVICE_MESSAGE_INDICATOR__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVICE_MESSAGE_INDICATOR__Loc == GUID_DEVICE_MESSAGE_INDICATOR;
    assume GUID_DEVICE_MESSAGE_INDICATOR != 0;
    call {:si_unique_call 941} MSRedbook_DriverInformationGuid__Loc := __HAVOC_malloc_or_null(16);
    assume MSRedbook_DriverInformationGuid__Loc == MSRedbook_DriverInformationGuid;
    assume MSRedbook_DriverInformationGuid != 0;
    call {:si_unique_call 942} GUID_PCIEXPRESS_SETTINGS_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCIEXPRESS_SETTINGS_SUBGROUP__Loc == GUID_PCIEXPRESS_SETTINGS_SUBGROUP;
    assume GUID_PCIEXPRESS_SETTINGS_SUBGROUP != 0;
    call {:si_unique_call 943} MSNdis_VendorID_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_VendorID_GUID__Loc == MSNdis_VendorID_GUID;
    assume MSNdis_VendorID_GUID != 0;
    call {:si_unique_call 944} MSMCAEvent_PCIComponentError_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSMCAEvent_PCIComponentError_GUID__Loc == MSMCAEvent_PCIComponentError_GUID;
    assume MSMCAEvent_PCIComponentError_GUID != 0;
    call {:si_unique_call 945} MSSerial_CommInfo_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSSerial_CommInfo_GUID__Loc == MSSerial_CommInfo_GUID;
    assume MSSerial_CommInfo_GUID != 0;
    call {:si_unique_call 946} MSDiskDriver_Geometry_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSDiskDriver_Geometry_GUID__Loc == MSDiskDriver_Geometry_GUID;
    assume MSDiskDriver_Geometry_GUID != 0;
    call {:si_unique_call 947} MSNdis_CurrentPacketFilter_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_CurrentPacketFilter_GUID__Loc == MSNdis_CurrentPacketFilter_GUID;
    assume MSNdis_CurrentPacketFilter_GUID != 0;
    call {:si_unique_call 948} MSNdis_WmiTcpIpChecksumOffload_IPv6TransmitReceive_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_WmiTcpIpChecksumOffload_IPv6TransmitReceive_GUID__Loc == MSNdis_WmiTcpIpChecksumOffload_IPv6TransmitReceive_GUID;
    assume MSNdis_WmiTcpIpChecksumOffload_IPv6TransmitReceive_GUID != 0;
    call {:si_unique_call 949} MSNdis_80211_DesiredDataRates_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_80211_DesiredDataRates_GUID__Loc == MSNdis_80211_DesiredDataRates_GUID;
    assume MSNdis_80211_DesiredDataRates_GUID != 0;
    call {:si_unique_call 950} GUID_NON_ADAPTIVE_INPUT_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_NON_ADAPTIVE_INPUT_TIMEOUT__Loc == GUID_NON_ADAPTIVE_INPUT_TIMEOUT;
    assume GUID_NON_ADAPTIVE_INPUT_TIMEOUT != 0;
    call {:si_unique_call 951} GUID_ALLOW_RTC_WAKE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ALLOW_RTC_WAKE__Loc == GUID_ALLOW_RTC_WAKE;
    assume GUID_ALLOW_RTC_WAKE != 0;
    call {:si_unique_call 952} MSNdis_EthernetCurrentAddress_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_EthernetCurrentAddress_GUID__Loc == MSNdis_EthernetCurrentAddress_GUID;
    assume MSNdis_EthernetCurrentAddress_GUID != 0;
    call {:si_unique_call 953} MSNdis_TcpOffloadHardwareConfig_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_TcpOffloadHardwareConfig_GUID__Loc == MSNdis_TcpOffloadHardwareConfig_GUID;
    assume MSNdis_TcpOffloadHardwareConfig_GUID != 0;
    call {:si_unique_call 954} MSNdis_80211_ConfigurationFH_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_80211_ConfigurationFH_GUID__Loc == MSNdis_80211_ConfigurationFH_GUID;
    assume MSNdis_80211_ConfigurationFH_GUID != 0;
    call {:si_unique_call 955} GUID_BATTERY_DISCHARGE_LEVEL_2__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_LEVEL_2__Loc == GUID_BATTERY_DISCHARGE_LEVEL_2;
    assume GUID_BATTERY_DISCHARGE_LEVEL_2 != 0;
    call {:si_unique_call 956} MSNdis_PMCapabilities_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_PMCapabilities_GUID__Loc == MSNdis_PMCapabilities_GUID;
    assume MSNdis_PMCapabilities_GUID != 0;
    call {:si_unique_call 957} MSRedbook_PerformanceGuid__Loc := __HAVOC_malloc_or_null(16);
    assume MSRedbook_PerformanceGuid__Loc == MSRedbook_PerformanceGuid;
    assume MSRedbook_PerformanceGuid != 0;
    call {:si_unique_call 958} GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD__Loc == GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD;
    assume GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD != 0;
    call {:si_unique_call 959} MSNdis_StatusDot11RoamingStart_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_StatusDot11RoamingStart_GUID__Loc == MSNdis_StatusDot11RoamingStart_GUID;
    assume MSNdis_StatusDot11RoamingStart_GUID != 0;
    call {:si_unique_call 960} WHEA_TLBCHECK_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume WHEA_TLBCHECK_GUID__Loc == WHEA_TLBCHECK_GUID;
    assume WHEA_TLBCHECK_GUID != 0;
    call {:si_unique_call 961} MSMouse_ClassInformation_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSMouse_ClassInformation_GUID__Loc == MSMouse_ClassInformation_GUID;
    assume MSMouse_ClassInformation_GUID != 0;
    call {:si_unique_call 962} MSNdis_80211_NetworkTypesSupported_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_80211_NetworkTypesSupported_GUID__Loc == MSNdis_80211_NetworkTypesSupported_GUID;
    assume MSNdis_80211_NetworkTypesSupported_GUID != 0;
    call {:si_unique_call 963} MSNdis_80211_NetworkInfrastructure_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_80211_NetworkInfrastructure_GUID__Loc == MSNdis_80211_NetworkInfrastructure_GUID;
    assume MSNdis_80211_NetworkInfrastructure_GUID != 0;
    call {:si_unique_call 964} MSNdis_NotifyVcArrival_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_NotifyVcArrival_GUID__Loc == MSNdis_NotifyVcArrival_GUID;
    assume MSNdis_NotifyVcArrival_GUID != 0;
    call {:si_unique_call 965} MSNdis_AtmMaxAal5PacketSize_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_AtmMaxAal5PacketSize_GUID__Loc == MSNdis_AtmMaxAal5PacketSize_GUID;
    assume MSNdis_AtmMaxAal5PacketSize_GUID != 0;
    call {:si_unique_call 966} IPF_PROCESSOR_ERROR_SECTION_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume IPF_PROCESSOR_ERROR_SECTION_GUID__Loc == IPF_PROCESSOR_ERROR_SECTION_GUID;
    assume IPF_PROCESSOR_ERROR_SECTION_GUID != 0;
    call {:si_unique_call 967} MSNdis_FddiLConnectionState_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_FddiLConnectionState_GUID__Loc == MSNdis_FddiLConnectionState_GUID;
    assume MSNdis_FddiLConnectionState_GUID != 0;
    call {:si_unique_call 968} GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD__Loc == GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD;
    assume GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD != 0;
    call {:si_unique_call 969} MSMCAEvent_CPUError_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSMCAEvent_CPUError_GUID__Loc == MSMCAEvent_CPUError_GUID;
    assume MSMCAEvent_CPUError_GUID != 0;
    call {:si_unique_call 970} GUID_DISK_IDLE_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DISK_IDLE_TIMEOUT__Loc == GUID_DISK_IDLE_TIMEOUT;
    assume GUID_DISK_IDLE_TIMEOUT != 0;
    call {:si_unique_call 971} GUID_ACDC_POWER_SOURCE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACDC_POWER_SOURCE__Loc == GUID_ACDC_POWER_SOURCE;
    assume GUID_ACDC_POWER_SOURCE != 0;
    call {:si_unique_call 972} MSNdis_MaximumLookahead_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_MaximumLookahead_GUID__Loc == MSNdis_MaximumLookahead_GUID;
    assume MSNdis_MaximumLookahead_GUID != 0;
    call {:si_unique_call 973} MSNdis_StatusMediaConnect_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_StatusMediaConnect_GUID__Loc == MSNdis_StatusMediaConnect_GUID;
    assume MSNdis_StatusMediaConnect_GUID != 0;
    call {:si_unique_call 974} MSStorageDriver_ScsiInfoExceptions_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSStorageDriver_ScsiInfoExceptions_GUID__Loc == MSStorageDriver_ScsiInfoExceptions_GUID;
    assume MSStorageDriver_ScsiInfoExceptions_GUID != 0;
    call {:si_unique_call 975} MSNdis_ReceiveFilterInfoArray_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_ReceiveFilterInfoArray_GUID__Loc == MSNdis_ReceiveFilterInfoArray_GUID;
    assume MSNdis_ReceiveFilterInfoArray_GUID != 0;
    call {:si_unique_call 976} MSNdis_CurrentLookahead_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_CurrentLookahead_GUID__Loc == MSNdis_CurrentLookahead_GUID;
    assume MSNdis_CurrentLookahead_GUID != 0;
    call {:si_unique_call 977} FIRMWARE_ERROR_RECORD_REFERENCE_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume FIRMWARE_ERROR_RECORD_REFERENCE_GUID__Loc == FIRMWARE_ERROR_RECORD_REFERENCE_GUID;
    assume FIRMWARE_ERROR_RECORD_REFERENCE_GUID != 0;
    call {:si_unique_call 978} MSStorageDriver_ATAPISmartData_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSStorageDriver_ATAPISmartData_GUID__Loc == MSStorageDriver_ATAPISmartData_GUID;
    assume MSStorageDriver_ATAPISmartData_GUID != 0;
    call {:si_unique_call 979} MSNdis_AtmMaxActiveVciBits_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_AtmMaxActiveVciBits_GUID__Loc == MSNdis_AtmMaxActiveVciBits_GUID;
    assume MSNdis_AtmMaxActiveVciBits_GUID != 0;
    call {:si_unique_call 980} MSNdis_80211_NetworkTypeInUse_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_80211_NetworkTypeInUse_GUID__Loc == MSNdis_80211_NetworkTypeInUse_GUID;
    assume MSNdis_80211_NetworkTypeInUse_GUID != 0;
    call {:si_unique_call 981} ProcessorPerformance_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume ProcessorPerformance_GUID__Loc == ProcessorPerformance_GUID;
    assume ProcessorPerformance_GUID != 0;
    call {:si_unique_call 982} MouPointerPortGuid__Loc := __HAVOC_malloc_or_null(16);
    assume MouPointerPortGuid__Loc == MouPointerPortGuid;
    assume MouPointerPortGuid != 0;
    call {:si_unique_call 983} MSNdis_80211_Configuration_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_80211_Configuration_GUID__Loc == MSNdis_80211_Configuration_GUID;
    assume MSNdis_80211_Configuration_GUID != 0;
    call {:si_unique_call 984} MSMCAEvent_BusError_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSMCAEvent_BusError_GUID__Loc == MSMCAEvent_BusError_GUID;
    assume MSMCAEvent_BusError_GUID != 0;
    call {:si_unique_call 985} MSNdis_MaximumTotalSize_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_MaximumTotalSize_GUID__Loc == MSNdis_MaximumTotalSize_GUID;
    assume MSNdis_MaximumTotalSize_GUID != 0;
    call {:si_unique_call 986} MSNdis_StatusPacketFilterChange_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_StatusPacketFilterChange_GUID__Loc == MSNdis_StatusPacketFilterChange_GUID;
    assume MSNdis_StatusPacketFilterChange_GUID != 0;
    call {:si_unique_call 987} GUID_SYSTEM_COOLING_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_SYSTEM_COOLING_POLICY__Loc == GUID_SYSTEM_COOLING_POLICY;
    assume GUID_SYSTEM_COOLING_POLICY != 0;
    call {:si_unique_call 988} WHEA_RECORD_CREATOR_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume WHEA_RECORD_CREATOR_GUID__Loc == WHEA_RECORD_CREATOR_GUID;
    assume WHEA_RECORD_CREATOR_GUID != 0;
    call {:si_unique_call 989} GUID_BATTERY_DISCHARGE_LEVEL_3__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_LEVEL_3__Loc == GUID_BATTERY_DISCHARGE_LEVEL_3;
    assume GUID_BATTERY_DISCHARGE_LEVEL_3 != 0;
    call {:si_unique_call 990} MSNdis_AtmHardwareCurrentAddress_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_AtmHardwareCurrentAddress_GUID__Loc == MSNdis_AtmHardwareCurrentAddress_GUID;
    assume MSNdis_AtmHardwareCurrentAddress_GUID != 0;
    call {:si_unique_call 991} MSChangerProblemDeviceError_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSChangerProblemDeviceError_GUID__Loc == MSChangerProblemDeviceError_GUID;
    assume MSChangerProblemDeviceError_GUID != 0;
    call {:si_unique_call 992} GUID_LOCK_CONSOLE_ON_WAKE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_LOCK_CONSOLE_ON_WAKE__Loc == GUID_LOCK_CONSOLE_ON_WAKE;
    assume GUID_LOCK_CONSOLE_ON_WAKE != 0;
    call {:si_unique_call 993} MSNdis_TcpOffloadParameters_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_TcpOffloadParameters_GUID__Loc == MSNdis_TcpOffloadParameters_GUID;
    assume MSNdis_TcpOffloadParameters_GUID != 0;
    call {:si_unique_call 994} GUID_VIDEO_POWERDOWN_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_POWERDOWN_TIMEOUT__Loc == GUID_VIDEO_POWERDOWN_TIMEOUT;
    assume GUID_VIDEO_POWERDOWN_TIMEOUT != 0;
    call {:si_unique_call 995} MSNdis_HDSplitParameters_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_HDSplitParameters_GUID__Loc == MSNdis_HDSplitParameters_GUID;
    assume MSNdis_HDSplitParameters_GUID != 0;
    call {:si_unique_call 996} GUID_PROCESSOR_IDLESTATE_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_IDLESTATE_POLICY__Loc == GUID_PROCESSOR_IDLESTATE_POLICY;
    assume GUID_PROCESSOR_IDLESTATE_POLICY != 0;
    call {:si_unique_call 997} MSMCAEvent_TLBError_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSMCAEvent_TLBError_GUID__Loc == MSMCAEvent_TLBError_GUID;
    assume MSMCAEvent_TLBError_GUID != 0;
    call {:si_unique_call 998} MSPower_DeviceEnable_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSPower_DeviceEnable_GUID__Loc == MSPower_DeviceEnable_GUID;
    assume MSPower_DeviceEnable_GUID != 0;
    call {:si_unique_call 999} MSNdis_MacOptions_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_MacOptions_GUID__Loc == MSNdis_MacOptions_GUID;
    assume MSNdis_MacOptions_GUID != 0;
    call {:si_unique_call 1000} KernelIdleStateChange_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume KernelIdleStateChange_GUID__Loc == KernelIdleStateChange_GUID;
    assume KernelIdleStateChange_GUID != 0;
    call {:si_unique_call 1001} GUID_UNATTEND_SLEEP_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_UNATTEND_SLEEP_TIMEOUT__Loc == GUID_UNATTEND_SLEEP_TIMEOUT;
    assume GUID_UNATTEND_SLEEP_TIMEOUT != 0;
    call {:si_unique_call 1002} MSNdis_CoMediaSupported_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_CoMediaSupported_GUID__Loc == MSNdis_CoMediaSupported_GUID;
    assume MSNdis_CoMediaSupported_GUID != 0;
    call {:si_unique_call 1003} MSChangerParameters_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSChangerParameters_GUID__Loc == MSChangerParameters_GUID;
    assume MSChangerParameters_GUID != 0;
    call {:si_unique_call 1004} GENERIC_SECTION_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume GENERIC_SECTION_GUID__Loc == GENERIC_SECTION_GUID;
    assume GENERIC_SECTION_GUID != 0;
    call {:si_unique_call 1005} MSParallel_DeviceBytesTransferred_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSParallel_DeviceBytesTransferred_GUID__Loc == MSParallel_DeviceBytesTransferred_GUID;
    assume MSParallel_DeviceBytesTransferred_GUID != 0;
    call {:si_unique_call 1006} GUID_CRITICAL_POWER_TRANSITION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_CRITICAL_POWER_TRANSITION__Loc == GUID_CRITICAL_POWER_TRANSITION;
    assume GUID_CRITICAL_POWER_TRANSITION != 0;
    call {:si_unique_call 1007} BOOT_NOTIFY_TYPE_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume BOOT_NOTIFY_TYPE_GUID__Loc == BOOT_NOTIFY_TYPE_GUID;
    assume BOOT_NOTIFY_TYPE_GUID != 0;
    call {:si_unique_call 1008} GUID_SLEEP_IDLE_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_SLEEP_IDLE_THRESHOLD__Loc == GUID_SLEEP_IDLE_THRESHOLD;
    assume GUID_SLEEP_IDLE_THRESHOLD != 0;
    call {:si_unique_call 1009} GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY__Loc == GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY;
    assume GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY != 0;
    call {:si_unique_call 1010} GUID_PROCESSOR_THROTTLE_MAXIMUM__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_THROTTLE_MAXIMUM__Loc == GUID_PROCESSOR_THROTTLE_MAXIMUM;
    assume GUID_PROCESSOR_THROTTLE_MAXIMUM != 0;
    call {:si_unique_call 1011} MSNdis_StatusDot11Disassociation_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_StatusDot11Disassociation_GUID__Loc == MSNdis_StatusDot11Disassociation_GUID;
    assume MSNdis_StatusDot11Disassociation_GUID != 0;
    call {:si_unique_call 1012} MSNdis_LinkSpeed_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_LinkSpeed_GUID__Loc == MSNdis_LinkSpeed_GUID;
    assume MSNdis_LinkSpeed_GUID != 0;
    call {:si_unique_call 1013} MSNdis_StatusDevicePowerOnEx_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_StatusDevicePowerOnEx_GUID__Loc == MSNdis_StatusDevicePowerOnEx_GUID;
    assume MSNdis_StatusDevicePowerOnEx_GUID != 0;
    call {:si_unique_call 1014} GUID_PROCESSOR_PERF_LATENCY_HINT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_LATENCY_HINT__Loc == GUID_PROCESSOR_PERF_LATENCY_HINT;
    assume GUID_PROCESSOR_PERF_LATENCY_HINT != 0;
    call {:si_unique_call 1015} MSNdis_TokenRingCurrentRingStatus_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_TokenRingCurrentRingStatus_GUID__Loc == MSNdis_TokenRingCurrentRingStatus_GUID;
    assume MSNdis_TokenRingCurrentRingStatus_GUID != 0;
    call {:si_unique_call 1016} IdleStateBucketEx_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume IdleStateBucketEx_GUID__Loc == IdleStateBucketEx_GUID;
    assume IdleStateBucketEx_GUID != 0;
    call {:si_unique_call 1017} GUID_STANDBY_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_STANDBY_TIMEOUT__Loc == GUID_STANDBY_TIMEOUT;
    assume GUID_STANDBY_TIMEOUT != 0;
    call {:si_unique_call 1018} GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD__Loc == GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD;
    assume GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD != 0;
    call {:si_unique_call 1019} MSNdis_StatusProtocolBind_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_StatusProtocolBind_GUID__Loc == MSNdis_StatusProtocolBind_GUID;
    assume MSNdis_StatusProtocolBind_GUID != 0;
    call {:si_unique_call 1020} MSNdis_FddiFramesLost_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_FddiFramesLost_GUID__Loc == MSNdis_FddiFramesLost_GUID;
    assume MSNdis_FddiFramesLost_GUID != 0;
    call {:si_unique_call 1021} PCIEXPRESS_ERROR_SECTION_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume PCIEXPRESS_ERROR_SECTION_GUID__Loc == PCIEXPRESS_ERROR_SECTION_GUID;
    assume PCIEXPRESS_ERROR_SECTION_GUID != 0;
    call {:si_unique_call 1022} KernelIdleStates_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume KernelIdleStates_GUID__Loc == KernelIdleStates_GUID;
    assume KernelIdleStates_GUID != 0;
    call {:si_unique_call 1023} MSNdis_WmiTcpLargeSendOffloadV1_IPv4_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_WmiTcpLargeSendOffloadV1_IPv4_GUID__Loc == MSNdis_WmiTcpLargeSendOffloadV1_IPv4_GUID;
    assume MSNdis_WmiTcpLargeSendOffloadV1_IPv4_GUID != 0;
    call {:si_unique_call 1024} MSNdis_HardwareStatus_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_HardwareStatus_GUID__Loc == MSNdis_HardwareStatus_GUID;
    assume MSNdis_HardwareStatus_GUID != 0;
    call {:si_unique_call 1025} MSNdis_WmiTcpLargeSendOffloadV2_IPv4_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_WmiTcpLargeSendOffloadV2_IPv4_GUID__Loc == MSNdis_WmiTcpLargeSendOffloadV2_IPv4_GUID;
    assume MSNdis_WmiTcpLargeSendOffloadV2_IPv4_GUID != 0;
    call {:si_unique_call 1026} MSNdis_PMAdminConfigParam_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_PMAdminConfigParam_GUID__Loc == MSNdis_PMAdminConfigParam_GUID;
    assume MSNdis_PMAdminConfigParam_GUID != 0;
    call {:si_unique_call 1027} MSNdis_EthernetReceiveErrorAlignment_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_EthernetReceiveErrorAlignment_GUID__Loc == MSNdis_EthernetReceiveErrorAlignment_GUID;
    assume MSNdis_EthernetReceiveErrorAlignment_GUID != 0;
    call {:si_unique_call 1028} MSNdis_80211_BaseServiceSetIdentifier_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_80211_BaseServiceSetIdentifier_GUID__Loc == MSNdis_80211_BaseServiceSetIdentifier_GUID;
    assume MSNdis_80211_BaseServiceSetIdentifier_GUID != 0;
    call {:si_unique_call 1029} MSNdis_80211_PrivacyFilter_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_80211_PrivacyFilter_GUID__Loc == MSNdis_80211_PrivacyFilter_GUID;
    assume MSNdis_80211_PrivacyFilter_GUID != 0;
    call {:si_unique_call 1030} GUID_TYPICAL_POWER_SAVINGS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_TYPICAL_POWER_SAVINGS__Loc == GUID_TYPICAL_POWER_SAVINGS;
    assume GUID_TYPICAL_POWER_SAVINGS != 0;
    call {:si_unique_call 1031} MSNdis_WmiOutputInfo_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_WmiOutputInfo_GUID__Loc == MSNdis_WmiOutputInfo_GUID;
    assume MSNdis_WmiOutputInfo_GUID != 0;
    call {:si_unique_call 1032} GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR__Loc == GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR;
    assume GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR != 0;
    call {:si_unique_call 1033} MSChangerProblemEvent_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSChangerProblemEvent_GUID__Loc == MSChangerProblemEvent_GUID;
    assume MSChangerProblemEvent_GUID != 0;
    call {:si_unique_call 1034} GUID_PROCESSOR_SETTINGS_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_SETTINGS_SUBGROUP__Loc == GUID_PROCESSOR_SETTINGS_SUBGROUP;
    assume GUID_PROCESSOR_SETTINGS_SUBGROUP != 0;
    call {:si_unique_call 1035} WHEA_BUSCHECK_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume WHEA_BUSCHECK_GUID__Loc == WHEA_BUSCHECK_GUID;
    assume WHEA_BUSCHECK_GUID != 0;
    call {:si_unique_call 1036} GUID_BATTERY_DISCHARGE_FLAGS_2__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_FLAGS_2__Loc == GUID_BATTERY_DISCHARGE_FLAGS_2;
    assume GUID_BATTERY_DISCHARGE_FLAGS_2 != 0;
    call {:si_unique_call 1037} WmiMonitorColorCharacteristics_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume WmiMonitorColorCharacteristics_GUID__Loc == WmiMonitorColorCharacteristics_GUID;
    assume WmiMonitorColorCharacteristics_GUID != 0;
    call {:si_unique_call 1038} GUID_HIBERNATE_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_HIBERNATE_TIMEOUT__Loc == GUID_HIBERNATE_TIMEOUT;
    assume GUID_HIBERNATE_TIMEOUT != 0;
    call {:si_unique_call 1039} MSNdis_DriverVersion_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_DriverVersion_GUID__Loc == MSNdis_DriverVersion_GUID;
    assume MSNdis_DriverVersion_GUID != 0;
    call {:si_unique_call 1040} MSNdis_StatusDot11AssociationCompletion_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_StatusDot11AssociationCompletion_GUID__Loc == MSNdis_StatusDot11AssociationCompletion_GUID;
    assume MSNdis_StatusDot11AssociationCompletion_GUID != 0;
    call {:si_unique_call 1041} GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME__Loc == GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME;
    assume GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME != 0;
    call {:si_unique_call 1042} MSNdis_MediaSupported_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_MediaSupported_GUID__Loc == MSNdis_MediaSupported_GUID;
    assume MSNdis_MediaSupported_GUID != 0;
    call {:si_unique_call 1043} MSNdis_QueryReceiveFilterCurrentCapabilities_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_QueryReceiveFilterCurrentCapabilities_GUID__Loc == MSNdis_QueryReceiveFilterCurrentCapabilities_GUID;
    assume MSNdis_QueryReceiveFilterCurrentCapabilities_GUID != 0;
    call {:si_unique_call 1044} MSNdis_CoTransmitPdusOk_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_CoTransmitPdusOk_GUID__Loc == MSNdis_CoTransmitPdusOk_GUID;
    assume MSNdis_CoTransmitPdusOk_GUID != 0;
    call {:si_unique_call 1045} MSNdis_SetLinkParameters_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_SetLinkParameters_GUID__Loc == MSNdis_SetLinkParameters_GUID;
    assume MSNdis_SetLinkParameters_GUID != 0;
    call {:si_unique_call 1046} MSNdis_StatusNetworkChange_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_StatusNetworkChange_GUID__Loc == MSNdis_StatusNetworkChange_GUID;
    assume MSNdis_StatusNetworkChange_GUID != 0;
    call {:si_unique_call 1047} PCIXBUS_ERROR_SECTION_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume PCIXBUS_ERROR_SECTION_GUID__Loc == PCIXBUS_ERROR_SECTION_GUID;
    assume PCIXBUS_ERROR_SECTION_GUID != 0;
    call {:si_unique_call 1048} MSNdis_VendorDescription_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_VendorDescription_GUID__Loc == MSNdis_VendorDescription_GUID;
    assume MSNdis_VendorDescription_GUID != 0;
    call {:si_unique_call 1049} KernelThermalPolicyChange_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume KernelThermalPolicyChange_GUID__Loc == KernelThermalPolicyChange_GUID;
    assume KernelThermalPolicyChange_GUID != 0;
    call {:si_unique_call 1050} MSNdis_FddiLongMaximumListSize_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_FddiLongMaximumListSize_GUID__Loc == MSNdis_FddiLongMaximumListSize_GUID;
    assume MSNdis_FddiLongMaximumListSize_GUID != 0;
    call {:si_unique_call 1051} IdleAccountingEx_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume IdleAccountingEx_GUID__Loc == IdleAccountingEx_GUID;
    assume IdleAccountingEx_GUID != 0;
    call {:si_unique_call 1052} GUID_BATTERY_DISCHARGE_ACTION_3__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_ACTION_3__Loc == GUID_BATTERY_DISCHARGE_ACTION_3;
    assume GUID_BATTERY_DISCHARGE_ACTION_3 != 0;
    call {:si_unique_call 1053} GUID_PROCESSOR_CORE_PARKING_MIN_CORES__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_MIN_CORES__Loc == GUID_PROCESSOR_CORE_PARKING_MIN_CORES;
    assume GUID_PROCESSOR_CORE_PARKING_MIN_CORES != 0;
    call {:si_unique_call 1054} MSNdis_StatusExternalConnectivityChange_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_StatusExternalConnectivityChange_GUID__Loc == MSNdis_StatusExternalConnectivityChange_GUID;
    assume MSNdis_StatusExternalConnectivityChange_GUID != 0;
    call {:si_unique_call 1055} MSDiskDriver_Performance_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSDiskDriver_Performance_GUID__Loc == MSDiskDriver_Performance_GUID;
    assume MSDiskDriver_Performance_GUID != 0;
    call {:si_unique_call 1056} MSNdis_NotifyFilterRemoval_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_NotifyFilterRemoval_GUID__Loc == MSNdis_NotifyFilterRemoval_GUID;
    assume MSNdis_NotifyFilterRemoval_GUID != 0;
    call {:si_unique_call 1057} MSNdis_TransmitBlockSize_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_TransmitBlockSize_GUID__Loc == MSNdis_TransmitBlockSize_GUID;
    assume MSNdis_TransmitBlockSize_GUID != 0;
    call {:si_unique_call 1058} MSNdis_MediaConnectStatus_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_MediaConnectStatus_GUID__Loc == MSNdis_MediaConnectStatus_GUID;
    assume MSNdis_MediaConnectStatus_GUID != 0;
    call {:si_unique_call 1059} MSNdis_CoReceivePdusOk_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_CoReceivePdusOk_GUID__Loc == MSNdis_CoReceivePdusOk_GUID;
    assume MSNdis_CoReceivePdusOk_GUID != 0;
    call {:si_unique_call 1060} IdleAccounting_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume IdleAccounting_GUID__Loc == IdleAccounting_GUID;
    assume IdleAccounting_GUID != 0;
    call {:si_unique_call 1061} MSNdis_AtmSupportedAalTypes_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_AtmSupportedAalTypes_GUID__Loc == MSNdis_AtmSupportedAalTypes_GUID;
    assume MSNdis_AtmSupportedAalTypes_GUID != 0;
    call {:si_unique_call 1062} MSNdis_StatusDot11ScanConfirm_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_StatusDot11ScanConfirm_GUID__Loc == MSNdis_StatusDot11ScanConfirm_GUID;
    assume MSNdis_StatusDot11ScanConfirm_GUID != 0;
    call {:si_unique_call 1063} MSNdis_TokenRingCurrentAddress_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_TokenRingCurrentAddress_GUID__Loc == MSNdis_TokenRingCurrentAddress_GUID;
    assume MSNdis_TokenRingCurrentAddress_GUID != 0;
    call {:si_unique_call 1064} MSNdis_CoMediaInUse_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_CoMediaInUse_GUID__Loc == MSNdis_CoMediaInUse_GUID;
    assume MSNdis_CoMediaInUse_GUID != 0;
    call {:si_unique_call 1065} KernelPerfState_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume KernelPerfState_GUID__Loc == KernelPerfState_GUID;
    assume KernelPerfState_GUID != 0;
    call {:si_unique_call 1066} GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING__Loc == GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING;
    assume GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING != 0;
    call {:si_unique_call 1067} MSNdis_WmiIPSecOffloadV1_Supported_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_WmiIPSecOffloadV1_Supported_GUID__Loc == MSNdis_WmiIPSecOffloadV1_Supported_GUID;
    assume MSNdis_WmiIPSecOffloadV1_Supported_GUID != 0;
    call {:si_unique_call 1068} MSNdis_PMAdminConfigState_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_PMAdminConfigState_GUID__Loc == MSNdis_PMAdminConfigState_GUID;
    assume MSNdis_PMAdminConfigState_GUID != 0;
    call {:si_unique_call 1069} GUID_POWERBUTTON_ACTION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_POWERBUTTON_ACTION__Loc == GUID_POWERBUTTON_ACTION;
    assume GUID_POWERBUTTON_ACTION != 0;
    call {:si_unique_call 1070} GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY__Loc == GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY;
    assume GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY != 0;
    call {:si_unique_call 1071} MSNdis_NotifyAdapterRemoval_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_NotifyAdapterRemoval_GUID__Loc == MSNdis_NotifyAdapterRemoval_GUID;
    assume MSNdis_NotifyAdapterRemoval_GUID != 0;
    call {:si_unique_call 1072} MSNdis_FddiShortMaximumListSize_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_FddiShortMaximumListSize_GUID__Loc == MSNdis_FddiShortMaximumListSize_GUID;
    assume MSNdis_FddiShortMaximumListSize_GUID != 0;
    call {:si_unique_call 1073} GUID_AUDIO_PLAYBACK__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_AUDIO_PLAYBACK__Loc == GUID_AUDIO_PLAYBACK;
    assume GUID_AUDIO_PLAYBACK != 0;
    call {:si_unique_call 1074} IPF_SAL_RECORD_SECTION_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume IPF_SAL_RECORD_SECTION_GUID__Loc == IPF_SAL_RECORD_SECTION_GUID;
    assume IPF_SAL_RECORD_SECTION_GUID != 0;
    call {:si_unique_call 1075} GUID_PROCESSOR_THROTTLE_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_THROTTLE_POLICY__Loc == GUID_PROCESSOR_THROTTLE_POLICY;
    assume GUID_PROCESSOR_THROTTLE_POLICY != 0;
    call {:si_unique_call 1076} MSNdis_StatisticsInfo_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_StatisticsInfo_GUID__Loc == MSNdis_StatisticsInfo_GUID;
    assume MSNdis_StatisticsInfo_GUID != 0;
    call {:si_unique_call 1077} MSNdis_QueryNicSwitchHardwareCapabilities_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_QueryNicSwitchHardwareCapabilities_GUID__Loc == MSNdis_QueryNicSwitchHardwareCapabilities_GUID;
    assume MSNdis_QueryNicSwitchHardwareCapabilities_GUID != 0;
    call {:si_unique_call 1078} MSNdis_FddiLongPermanentAddress_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_FddiLongPermanentAddress_GUID__Loc == MSNdis_FddiLongPermanentAddress_GUID;
    assume MSNdis_FddiLongPermanentAddress_GUID != 0;
    call {:si_unique_call 1079} MSNdis_DeviceWakeOnMagicPacketOnly_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_DeviceWakeOnMagicPacketOnly_GUID__Loc == MSNdis_DeviceWakeOnMagicPacketOnly_GUID;
    assume MSNdis_DeviceWakeOnMagicPacketOnly_GUID != 0;
    call {:si_unique_call 1080} MSNdis_PortAuthParameters_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_PortAuthParameters_GUID__Loc == MSNdis_PortAuthParameters_GUID;
    assume MSNdis_PortAuthParameters_GUID != 0;
    call {:si_unique_call 1081} GUID_BATTERY_PERCENTAGE_REMAINING__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_PERCENTAGE_REMAINING__Loc == GUID_BATTERY_PERCENTAGE_REMAINING;
    assume GUID_BATTERY_PERCENTAGE_REMAINING != 0;
    call {:si_unique_call 1082} INIT_NOTIFY_TYPE_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume INIT_NOTIFY_TYPE_GUID__Loc == INIT_NOTIFY_TYPE_GUID;
    assume INIT_NOTIFY_TYPE_GUID != 0;
    call {:si_unique_call 1083} PCIXDEVICE_ERROR_SECTION_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume PCIXDEVICE_ERROR_SECTION_GUID__Loc == PCIXDEVICE_ERROR_SECTION_GUID;
    assume PCIXDEVICE_ERROR_SECTION_GUID != 0;
    call {:si_unique_call 1084} MSNdis_StatusDot11ConnectionStart_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_StatusDot11ConnectionStart_GUID__Loc == MSNdis_StatusDot11ConnectionStart_GUID;
    assume MSNdis_StatusDot11ConnectionStart_GUID != 0;
    call {:si_unique_call 1085} GUID_GLOBAL_USER_PRESENCE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_GLOBAL_USER_PRESENCE__Loc == GUID_GLOBAL_USER_PRESENCE;
    assume GUID_GLOBAL_USER_PRESENCE != 0;
    call {:si_unique_call 1086} MSAcpiInfo_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSAcpiInfo_GUID__Loc == MSAcpiInfo_GUID;
    assume MSAcpiInfo_GUID != 0;
    call {:si_unique_call 1087} MSNdis_FddiLctFailures_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_FddiLctFailures_GUID__Loc == MSNdis_FddiLctFailures_GUID;
    assume MSNdis_FddiLctFailures_GUID != 0;
    call {:si_unique_call 1088} GUID_BATTERY_DISCHARGE_ACTION_2__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_ACTION_2__Loc == GUID_BATTERY_DISCHARGE_ACTION_2;
    assume GUID_BATTERY_DISCHARGE_ACTION_2 != 0;
    call {:si_unique_call 1089} GUID_APPLAUNCH_BUTTON__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_APPLAUNCH_BUTTON__Loc == GUID_APPLAUNCH_BUTTON;
    assume GUID_APPLAUNCH_BUTTON != 0;
    call {:si_unique_call 1090} GUID_PROCESSOR_ALLOW_THROTTLING__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_ALLOW_THROTTLING__Loc == GUID_PROCESSOR_ALLOW_THROTTLING;
    assume GUID_PROCESSOR_ALLOW_THROTTLING != 0;
    call {:si_unique_call 1091} MSNdis_AtmMaxActiveVcs_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_AtmMaxActiveVcs_GUID__Loc == MSNdis_AtmMaxActiveVcs_GUID;
    assume MSNdis_AtmMaxActiveVcs_GUID != 0;
    call {:si_unique_call 1092} WmiMonitorDescriptorMethods_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume WmiMonitorDescriptorMethods_GUID__Loc == WmiMonitorDescriptorMethods_GUID;
    assume WmiMonitorDescriptorMethods_GUID != 0;
    call {:si_unique_call 1093} MSNdis_CoReceivePduErrors_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_CoReceivePduErrors_GUID__Loc == MSNdis_CoReceivePduErrors_GUID;
    assume MSNdis_CoReceivePduErrors_GUID != 0;
    call {:si_unique_call 1094} MSNdis_AtmReceiveCellsDropped_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_AtmReceiveCellsDropped_GUID__Loc == MSNdis_AtmReceiveCellsDropped_GUID;
    assume MSNdis_AtmReceiveCellsDropped_GUID != 0;
    call {:si_unique_call 1095} MSNdis_EnumeratePorts_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_EnumeratePorts_GUID__Loc == MSNdis_EnumeratePorts_GUID;
    assume MSNdis_EnumeratePorts_GUID != 0;
    call {:si_unique_call 1096} MSNdis_TokenRingCurrentRingState_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_TokenRingCurrentRingState_GUID__Loc == MSNdis_TokenRingCurrentRingState_GUID;
    assume MSNdis_TokenRingCurrentRingState_GUID != 0;
    call {:si_unique_call 1097} MSNdis_WmiMethodHeader_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_WmiMethodHeader_GUID__Loc == MSNdis_WmiMethodHeader_GUID;
    assume MSNdis_WmiMethodHeader_GUID != 0;
    call {:si_unique_call 1098} MSNdis_TcpConnectionOffloadCurrentConfig_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_TcpConnectionOffloadCurrentConfig_GUID__Loc == MSNdis_TcpConnectionOffloadCurrentConfig_GUID;
    assume MSNdis_TcpConnectionOffloadCurrentConfig_GUID != 0;
    call {:si_unique_call 1099} GUID_IDLE_RESILIENCY_PERIOD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_IDLE_RESILIENCY_PERIOD__Loc == GUID_IDLE_RESILIENCY_PERIOD;
    assume GUID_IDLE_RESILIENCY_PERIOD != 0;
    call {:si_unique_call 1100} GUID_PROCESSOR_DISTRIBUTE_UTILITY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_DISTRIBUTE_UTILITY__Loc == GUID_PROCESSOR_DISTRIBUTE_UTILITY;
    assume GUID_PROCESSOR_DISTRIBUTE_UTILITY != 0;
    call {:si_unique_call 1101} MSMCAEvent_MemoryHierarchyError_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSMCAEvent_MemoryHierarchyError_GUID__Loc == MSMCAEvent_MemoryHierarchyError_GUID;
    assume MSMCAEvent_MemoryHierarchyError_GUID != 0;
    call {:si_unique_call 1102} MSNdis_PortChar_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_PortChar_GUID__Loc == MSNdis_PortChar_GUID;
    assume MSNdis_PortChar_GUID != 0;
    call {:si_unique_call 1103} GUID_SLEEPBUTTON_ACTION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_SLEEPBUTTON_ACTION__Loc == GUID_SLEEPBUTTON_ACTION;
    assume GUID_SLEEPBUTTON_ACTION != 0;
    call {:si_unique_call 1104} MSNdis_ReceiveQueueInfoArray_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_ReceiveQueueInfoArray_GUID__Loc == MSNdis_ReceiveQueueInfoArray_GUID;
    assume MSNdis_ReceiveQueueInfoArray_GUID != 0;
    call {:si_unique_call 1105} GUID_PROCESSOR_PERF_LATENCY_HINT_PERF__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_LATENCY_HINT_PERF__Loc == GUID_PROCESSOR_PERF_LATENCY_HINT_PERF;
    assume GUID_PROCESSOR_PERF_LATENCY_HINT_PERF != 0;
    call {:si_unique_call 1106} MCE_NOTIFY_TYPE_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MCE_NOTIFY_TYPE_GUID__Loc == MCE_NOTIFY_TYPE_GUID;
    assume MCE_NOTIFY_TYPE_GUID != 0;
    call {:si_unique_call 1107} MSNdis_80211_RemoveWEP_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_80211_RemoveWEP_GUID__Loc == MSNdis_80211_RemoveWEP_GUID;
    assume MSNdis_80211_RemoveWEP_GUID != 0;
    call {:si_unique_call 1108} GUID_PROCESSOR_IDLE_DISABLE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_IDLE_DISABLE__Loc == GUID_PROCESSOR_IDLE_DISABLE;
    assume GUID_PROCESSOR_IDLE_DISABLE != 0;
    call {:si_unique_call 1109} MSNdis_StatusDot11ConnectionCompletion_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_StatusDot11ConnectionCompletion_GUID__Loc == MSNdis_StatusDot11ConnectionCompletion_GUID;
    assume MSNdis_StatusDot11ConnectionCompletion_GUID != 0;
    call {:si_unique_call 1110} MSMCAEvent_SMBIOSError_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSMCAEvent_SMBIOSError_GUID__Loc == MSMCAEvent_SMBIOSError_GUID;
    assume MSMCAEvent_SMBIOSError_GUID != 0;
    call {:si_unique_call 1111} MSKeyboard_ClassInformation_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSKeyboard_ClassInformation_GUID__Loc == MSKeyboard_ClassInformation_GUID;
    assume MSKeyboard_ClassInformation_GUID != 0;
    call {:si_unique_call 1112} IdleStateAccounting_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume IdleStateAccounting_GUID__Loc == IdleStateAccounting_GUID;
    assume IdleStateAccounting_GUID != 0;
    call {:si_unique_call 1113} MSNdis_NetworkDirectAdapterInfo_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_NetworkDirectAdapterInfo_GUID__Loc == MSNdis_NetworkDirectAdapterInfo_GUID;
    assume MSNdis_NetworkDirectAdapterInfo_GUID != 0;
    call {:si_unique_call 1114} GUID_CONSOLE_DISPLAY_STATE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_CONSOLE_DISPLAY_STATE__Loc == GUID_CONSOLE_DISPLAY_STATE;
    assume GUID_CONSOLE_DISPLAY_STATE != 0;
    call {:si_unique_call 1115} GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP__Loc == GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP;
    assume GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP != 0;
    call {:si_unique_call 1116} GUID_BATTERY_DISCHARGE_FLAGS_0__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_FLAGS_0__Loc == GUID_BATTERY_DISCHARGE_FLAGS_0;
    assume GUID_BATTERY_DISCHARGE_FLAGS_0 != 0;
    call {:si_unique_call 1117} GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD__Loc == GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD;
    assume GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD != 0;
    call {:si_unique_call 1118} MSNdis_EthernetMoreTransmitCollisions_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_EthernetMoreTransmitCollisions_GUID__Loc == MSNdis_EthernetMoreTransmitCollisions_GUID;
    assume MSNdis_EthernetMoreTransmitCollisions_GUID != 0;
    call {:si_unique_call 1119} MSNdis_StatusDot11TkipmicFailure_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_StatusDot11TkipmicFailure_GUID__Loc == MSNdis_StatusDot11TkipmicFailure_GUID;
    assume MSNdis_StatusDot11TkipmicFailure_GUID != 0;
    call {:si_unique_call 1120} MSNdis_AtmMaxAal0PacketSize_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_AtmMaxAal0PacketSize_GUID__Loc == MSNdis_AtmMaxAal0PacketSize_GUID;
    assume MSNdis_AtmMaxAal0PacketSize_GUID != 0;
    call {:si_unique_call 1121} MSDiskDriver_PerformanceData_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSDiskDriver_PerformanceData_GUID__Loc == MSDiskDriver_PerformanceData_GUID;
    assume MSDiskDriver_PerformanceData_GUID != 0;
    call {:si_unique_call 1122} MSNdis_EnumerateReceiveQueues_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_EnumerateReceiveQueues_GUID__Loc == MSNdis_EnumerateReceiveQueues_GUID;
    assume MSNdis_EnumerateReceiveQueues_GUID != 0;
    call {:si_unique_call 1123} GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS__Loc == GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS;
    assume GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS != 0;
    call {:si_unique_call 1124} MSNdis_NotifyAdapterArrival_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_NotifyAdapterArrival_GUID__Loc == MSNdis_NotifyAdapterArrival_GUID;
    assume MSNdis_NotifyAdapterArrival_GUID != 0;
    call {:si_unique_call 1125} MSMouse_PortInformation_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSMouse_PortInformation_GUID__Loc == MSMouse_PortInformation_GUID;
    assume MSMouse_PortInformation_GUID != 0;
    call {:si_unique_call 1126} NMI_SECTION_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume NMI_SECTION_GUID__Loc == NMI_SECTION_GUID;
    assume NMI_SECTION_GUID != 0;
    call {:si_unique_call 1127} MSMCAEvent_PlatformSpecificError_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSMCAEvent_PlatformSpecificError_GUID__Loc == MSMCAEvent_PlatformSpecificError_GUID;
    assume MSMCAEvent_PlatformSpecificError_GUID != 0;
    call {:si_unique_call 1128} MSMCAEvent_SwitchToCMCPolling_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSMCAEvent_SwitchToCMCPolling_GUID__Loc == MSMCAEvent_SwitchToCMCPolling_GUID;
    assume MSMCAEvent_SwitchToCMCPolling_GUID != 0;
    call {:si_unique_call 1129} MSAcpi_ThermalZoneTemperature_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSAcpi_ThermalZoneTemperature_GUID__Loc == MSAcpi_ThermalZoneTemperature_GUID;
    assume MSAcpi_ThermalZoneTemperature_GUID != 0;
    call {:si_unique_call 1130} MSDeviceUI_FirmwareRevision_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSDeviceUI_FirmwareRevision_GUID__Loc == MSDeviceUI_FirmwareRevision_GUID;
    assume MSDeviceUI_FirmwareRevision_GUID != 0;
    call {:si_unique_call 1131} KernelPerfStateDomainChange_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume KernelPerfStateDomainChange_GUID__Loc == KernelPerfStateDomainChange_GUID;
    assume KernelPerfStateDomainChange_GUID != 0;
    call {:si_unique_call 1132} GUID_INTSTEER_TIME_UNPARK_TRIGGER__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_INTSTEER_TIME_UNPARK_TRIGGER__Loc == GUID_INTSTEER_TIME_UNPARK_TRIGGER;
    assume GUID_INTSTEER_TIME_UNPARK_TRIGGER != 0;
    call {:si_unique_call 1133} MSVerifierIrpLogEntry_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSVerifierIrpLogEntry_GUID__Loc == MSVerifierIrpLogEntry_GUID;
    assume MSVerifierIrpLogEntry_GUID != 0;
    call {:si_unique_call 1134} MSNdis_CoVendorDescription_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_CoVendorDescription_GUID__Loc == MSNdis_CoVendorDescription_GUID;
    assume MSNdis_CoVendorDescription_GUID != 0;
    call {:si_unique_call 1135} MSNdis_NetworkDirectState_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_NetworkDirectState_GUID__Loc == MSNdis_NetworkDirectState_GUID;
    assume MSNdis_NetworkDirectState_GUID != 0;
    call {:si_unique_call 1136} MSNdis_QueryReceiveQueueParameters_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_QueryReceiveQueueParameters_GUID__Loc == MSNdis_QueryReceiveQueueParameters_GUID;
    assume MSNdis_QueryReceiveQueueParameters_GUID != 0;
    call {:si_unique_call 1137} GUID_LIDSWITCH_STATE_CHANGE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_LIDSWITCH_STATE_CHANGE__Loc == GUID_LIDSWITCH_STATE_CHANGE;
    assume GUID_LIDSWITCH_STATE_CHANGE != 0;
    call {:si_unique_call 1138} GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS__Loc == GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS;
    assume GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS != 0;
    call {:si_unique_call 1139} MSWmi_Guid_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSWmi_Guid_GUID__Loc == MSWmi_Guid_GUID;
    assume MSWmi_Guid_GUID != 0;
    call {:si_unique_call 1140} GUID_SESSION_DISPLAY_STATUS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_SESSION_DISPLAY_STATUS__Loc == GUID_SESSION_DISPLAY_STATUS;
    assume GUID_SESSION_DISPLAY_STATUS != 0;
    call {:si_unique_call 1141} MSNdis_TokenRingLastOpenStatus_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_TokenRingLastOpenStatus_GUID__Loc == MSNdis_TokenRingLastOpenStatus_GUID;
    assume MSNdis_TokenRingLastOpenStatus_GUID != 0;
    call {:si_unique_call 1142} CPE_NOTIFY_TYPE_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume CPE_NOTIFY_TYPE_GUID__Loc == CPE_NOTIFY_TYPE_GUID;
    assume CPE_NOTIFY_TYPE_GUID != 0;
    call {:si_unique_call 1143} MSTapeProblemDeviceError_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSTapeProblemDeviceError_GUID__Loc == MSTapeProblemDeviceError_GUID;
    assume MSTapeProblemDeviceError_GUID != 0;
    call {:si_unique_call 1144} WmiMonitorListedSupportedSourceModes_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume WmiMonitorListedSupportedSourceModes_GUID__Loc == WmiMonitorListedSupportedSourceModes_GUID;
    assume WmiMonitorListedSupportedSourceModes_GUID != 0;
    call {:si_unique_call 1145} MSNdis_FddiFrameErrors_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_FddiFrameErrors_GUID__Loc == MSNdis_FddiFrameErrors_GUID;
    assume MSNdis_FddiFrameErrors_GUID != 0;
    call {:si_unique_call 1146} MSNdis_NetworkDirectAdapterCapabilities_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_NetworkDirectAdapterCapabilities_GUID__Loc == MSNdis_NetworkDirectAdapterCapabilities_GUID;
    assume MSNdis_NetworkDirectAdapterCapabilities_GUID != 0;
    call {:si_unique_call 1147} GUID_PROCESSOR_PERF_INCREASE_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_INCREASE_THRESHOLD__Loc == GUID_PROCESSOR_PERF_INCREASE_THRESHOLD;
    assume GUID_PROCESSOR_PERF_INCREASE_THRESHOLD != 0;
    call {:si_unique_call 1148} GUID_PROCESSOR_IDLE_STATE_MAXIMUM__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_IDLE_STATE_MAXIMUM__Loc == GUID_PROCESSOR_IDLE_STATE_MAXIMUM;
    assume GUID_PROCESSOR_IDLE_STATE_MAXIMUM != 0;
    call {:si_unique_call 1149} GUID_VIDEO_ANNOYANCE_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_ANNOYANCE_TIMEOUT__Loc == GUID_VIDEO_ANNOYANCE_TIMEOUT;
    assume GUID_VIDEO_ANNOYANCE_TIMEOUT != 0;
    call {:si_unique_call 1150} GUID_BATTERY_DISCHARGE_FLAGS_3__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_FLAGS_3__Loc == GUID_BATTERY_DISCHARGE_FLAGS_3;
    assume GUID_BATTERY_DISCHARGE_FLAGS_3 != 0;
    call {:si_unique_call 1151} GUID_PROCESSOR_CORE_PARKING_MAX_CORES__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_MAX_CORES__Loc == GUID_PROCESSOR_CORE_PARKING_MAX_CORES;
    assume GUID_PROCESSOR_CORE_PARKING_MAX_CORES != 0;
    call {:si_unique_call 1152} MSNdis_FddiLemRejects_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_FddiLemRejects_GUID__Loc == MSNdis_FddiLemRejects_GUID;
    assume MSNdis_FddiLemRejects_GUID != 0;
    call {:si_unique_call 1153} IdleStateAccountingEx_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume IdleStateAccountingEx_GUID__Loc == IdleStateAccountingEx_GUID;
    assume IdleStateAccountingEx_GUID != 0;
    call {:si_unique_call 1154} GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE__Loc == GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE;
    assume GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE != 0;
    call {:si_unique_call 1155} MSNdis_80211_WLanBssId_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_80211_WLanBssId_GUID__Loc == MSNdis_80211_WLanBssId_GUID;
    assume MSNdis_80211_WLanBssId_GUID != 0;
    call {:si_unique_call 1156} GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD__Loc == GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD;
    assume GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD != 0;
    call {:si_unique_call 1157} MSNdis_QueryReceiveFilterGlobalParameters_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_QueryReceiveFilterGlobalParameters_GUID__Loc == MSNdis_QueryReceiveFilterGlobalParameters_GUID;
    assume MSNdis_QueryReceiveFilterGlobalParameters_GUID != 0;
    call {:si_unique_call 1158} GUID_MIN_POWER_SAVINGS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_MIN_POWER_SAVINGS__Loc == GUID_MIN_POWER_SAVINGS;
    assume GUID_MIN_POWER_SAVINGS != 0;
    call {:si_unique_call 1159} GUID_DEVICE_IDLE_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVICE_IDLE_POLICY__Loc == GUID_DEVICE_IDLE_POLICY;
    assume GUID_DEVICE_IDLE_POLICY != 0;
    call {:si_unique_call 1160} MSNdis_StatusLinkSpeedChange_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_StatusLinkSpeedChange_GUID__Loc == MSNdis_StatusLinkSpeedChange_GUID;
    assume MSNdis_StatusLinkSpeedChange_GUID != 0;
    call {:si_unique_call 1161} MSNdis_AtmMaxActiveVpiBits_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_AtmMaxActiveVpiBits_GUID__Loc == MSNdis_AtmMaxActiveVpiBits_GUID;
    assume MSNdis_AtmMaxActiveVpiBits_GUID != 0;
    call {:si_unique_call 1162} MSNdis_80211_NetworkType_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_80211_NetworkType_GUID__Loc == MSNdis_80211_NetworkType_GUID;
    assume MSNdis_80211_NetworkType_GUID != 0;
    call {:si_unique_call 1163} MSSerial_HardwareConfiguration_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSSerial_HardwareConfiguration_GUID__Loc == MSSerial_HardwareConfiguration_GUID;
    assume MSSerial_HardwareConfiguration_GUID != 0;
    call {:si_unique_call 1164} MSMCAEvent_Header_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSMCAEvent_Header_GUID__Loc == MSMCAEvent_Header_GUID;
    assume MSMCAEvent_Header_GUID != 0;
    call {:si_unique_call 1165} WHEAErrorInjectionMethods_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume WHEAErrorInjectionMethods_GUID__Loc == WHEAErrorInjectionMethods_GUID;
    assume WHEAErrorInjectionMethods_GUID != 0;
    call {:si_unique_call 1166} MSNdis_NetworkLinkSpeed_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_NetworkLinkSpeed_GUID__Loc == MSNdis_NetworkLinkSpeed_GUID;
    assume MSNdis_NetworkLinkSpeed_GUID != 0;
    call {:si_unique_call 1167} MSNdis_StatusMediaSpecificIndication_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_StatusMediaSpecificIndication_GUID__Loc == MSNdis_StatusMediaSpecificIndication_GUID;
    assume MSNdis_StatusMediaSpecificIndication_GUID != 0;
    call {:si_unique_call 1168} MSTapeSymbolicName_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSTapeSymbolicName_GUID__Loc == MSTapeSymbolicName_GUID;
    assume MSTapeSymbolicName_GUID != 0;
    call {:si_unique_call 1169} GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT__Loc == GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT;
    assume GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT != 0;
    call {:si_unique_call 1170} GUID_SLEEP_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_SLEEP_SUBGROUP__Loc == GUID_SLEEP_SUBGROUP;
    assume GUID_SLEEP_SUBGROUP != 0;
    call {:si_unique_call 1171} MSNdis_NetworkDirectCapabilities_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_NetworkDirectCapabilities_GUID__Loc == MSNdis_NetworkDirectCapabilities_GUID;
    assume MSNdis_NetworkDirectCapabilities_GUID != 0;
    call {:si_unique_call 1172} MSNdis_StatusResetStart_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_StatusResetStart_GUID__Loc == MSNdis_StatusResetStart_GUID;
    assume MSNdis_StatusResetStart_GUID != 0;
    call {:si_unique_call 1173} GUID_DEVINTERFACE_MOUSE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVINTERFACE_MOUSE__Loc == GUID_DEVINTERFACE_MOUSE;
    assume GUID_DEVINTERFACE_MOUSE != 0;
    call {:si_unique_call 1174} MSNdis_WmiSetHeader_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_WmiSetHeader_GUID__Loc == MSNdis_WmiSetHeader_GUID;
    assume MSNdis_WmiSetHeader_GUID != 0;
    call {:si_unique_call 1175} MSNdis_80211_ConfigurationInfo_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_80211_ConfigurationInfo_GUID__Loc == MSNdis_80211_ConfigurationInfo_GUID;
    assume MSNdis_80211_ConfigurationInfo_GUID != 0;
    call {:si_unique_call 1176} MSNdis_80211_ServiceSetIdentifier_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_80211_ServiceSetIdentifier_GUID__Loc == MSNdis_80211_ServiceSetIdentifier_GUID;
    assume MSNdis_80211_ServiceSetIdentifier_GUID != 0;
    call {:si_unique_call 1177} MSSerial_PerformanceInformation_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSSerial_PerformanceInformation_GUID__Loc == MSSerial_PerformanceInformation_GUID;
    assume MSSerial_PerformanceInformation_GUID != 0;
    call {:si_unique_call 1178} WmiMonitorSupportedDisplayFeatures_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume WmiMonitorSupportedDisplayFeatures_GUID__Loc == WmiMonitorSupportedDisplayFeatures_GUID;
    assume WmiMonitorSupportedDisplayFeatures_GUID != 0;
    call {:si_unique_call 1179} MSNdis_EthernetMaximumMulticastListSize_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_EthernetMaximumMulticastListSize_GUID__Loc == MSNdis_EthernetMaximumMulticastListSize_GUID;
    assume MSNdis_EthernetMaximumMulticastListSize_GUID != 0;
    call {:si_unique_call 1180} MSNdis_SetHDSplitParameters_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_SetHDSplitParameters_GUID__Loc == MSNdis_SetHDSplitParameters_GUID;
    assume MSNdis_SetHDSplitParameters_GUID != 0;
    call {:si_unique_call 1181} MSNdis_WmiIPSecOffloadV1_IPv4AH_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_WmiIPSecOffloadV1_IPv4AH_GUID__Loc == MSNdis_WmiIPSecOffloadV1_IPv4AH_GUID;
    assume MSNdis_WmiIPSecOffloadV1_IPv4AH_GUID != 0;
    call {:si_unique_call 1182} MSNdis_TcpOffloadCurrentConfig_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_TcpOffloadCurrentConfig_GUID__Loc == MSNdis_TcpOffloadCurrentConfig_GUID;
    assume MSNdis_TcpOffloadCurrentConfig_GUID != 0;
    call {:si_unique_call 1183} MSNdis_RSSEnabled_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_RSSEnabled_GUID__Loc == MSNdis_RSSEnabled_GUID;
    assume MSNdis_RSSEnabled_GUID != 0;
    call {:si_unique_call 1184} MSKeyboard_PortInformation_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSKeyboard_PortInformation_GUID__Loc == MSKeyboard_PortInformation_GUID;
    assume MSKeyboard_PortInformation_GUID != 0;
    call {:si_unique_call 1185} MSAgp_Information_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSAgp_Information_GUID__Loc == MSAgp_Information_GUID;
    assume MSAgp_Information_GUID != 0;
    call {:si_unique_call 1186} MSNdis_ReceivesOk_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_ReceivesOk_GUID__Loc == MSNdis_ReceivesOk_GUID;
    assume MSNdis_ReceivesOk_GUID != 0;
    call {:si_unique_call 1187} MSWmi_MofData_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSWmi_MofData_GUID__Loc == MSWmi_MofData_GUID;
    assume MSWmi_MofData_GUID != 0;
    call {:si_unique_call 1188} MSNdis_EnumerateAdapterEx_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_EnumerateAdapterEx_GUID__Loc == MSNdis_EnumerateAdapterEx_GUID;
    assume MSNdis_EnumerateAdapterEx_GUID != 0;
    call {:si_unique_call 1189} MSNdis_80211_PowerMode_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_80211_PowerMode_GUID__Loc == MSNdis_80211_PowerMode_GUID;
    assume MSNdis_80211_PowerMode_GUID != 0;
    call {:si_unique_call 1190} MSNdis_StatusDot11AssociationStart_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_StatusDot11AssociationStart_GUID__Loc == MSNdis_StatusDot11AssociationStart_GUID;
    assume MSNdis_StatusDot11AssociationStart_GUID != 0;
    call {:si_unique_call 1191} GUID_DISK_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DISK_SUBGROUP__Loc == GUID_DISK_SUBGROUP;
    assume GUID_DISK_SUBGROUP != 0;
    call {:si_unique_call 1192} MSSerial_CommProperties_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSSerial_CommProperties_GUID__Loc == MSSerial_CommProperties_GUID;
    assume MSSerial_CommProperties_GUID != 0;
    call {:si_unique_call 1193} MSNdis_StatusDot11PhyStateChange_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_StatusDot11PhyStateChange_GUID__Loc == MSNdis_StatusDot11PhyStateChange_GUID;
    assume MSNdis_StatusDot11PhyStateChange_GUID != 0;
    call {:si_unique_call 1194} GUID_BATTERY_DISCHARGE_LEVEL_1__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_LEVEL_1__Loc == GUID_BATTERY_DISCHARGE_LEVEL_1;
    assume GUID_BATTERY_DISCHARGE_LEVEL_1 != 0;
    call {:si_unique_call 1195} MSNdis_ReceiveBlockSize_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_ReceiveBlockSize_GUID__Loc == MSNdis_ReceiveBlockSize_GUID;
    assume MSNdis_ReceiveBlockSize_GUID != 0;
    call {:si_unique_call 1196} MSNdis_TransmitsOk_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_TransmitsOk_GUID__Loc == MSNdis_TransmitsOk_GUID;
    assume MSNdis_TransmitsOk_GUID != 0;
    call {:si_unique_call 1197} MSNdis_TokenRingPermanentAddress_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_TokenRingPermanentAddress_GUID__Loc == MSNdis_TokenRingPermanentAddress_GUID;
    assume MSNdis_TokenRingPermanentAddress_GUID != 0;
    call {:si_unique_call 1198} MSNdis_SetInterruptModeration_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_SetInterruptModeration_GUID__Loc == MSNdis_SetInterruptModeration_GUID;
    assume MSNdis_SetInterruptModeration_GUID != 0;
    call {:si_unique_call 1199} GUID_BATTERY_DISCHARGE_ACTION_0__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_ACTION_0__Loc == GUID_BATTERY_DISCHARGE_ACTION_0;
    assume GUID_BATTERY_DISCHARGE_ACTION_0 != 0;
    call {:si_unique_call 1200} MSNdis_WmiOffload_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_WmiOffload_GUID__Loc == MSNdis_WmiOffload_GUID;
    assume MSNdis_WmiOffload_GUID != 0;
    call {:si_unique_call 1201} GUID_INTSTEER_LOAD_PER_PROC_TRIGGER__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_INTSTEER_LOAD_PER_PROC_TRIGGER__Loc == GUID_INTSTEER_LOAD_PER_PROC_TRIGGER;
    assume GUID_INTSTEER_LOAD_PER_PROC_TRIGGER != 0;
    call {:si_unique_call 1202} MSNdis_WmiIPSecOffloadV1_IPv4ESP_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_WmiIPSecOffloadV1_IPv4ESP_GUID__Loc == MSNdis_WmiIPSecOffloadV1_IPv4ESP_GUID;
    assume MSNdis_WmiIPSecOffloadV1_IPv4ESP_GUID != 0;
    call {:si_unique_call 1203} GUID_BATTERY_DISCHARGE_LEVEL_0__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_LEVEL_0__Loc == GUID_BATTERY_DISCHARGE_LEVEL_0;
    assume GUID_BATTERY_DISCHARGE_LEVEL_0 != 0;
    call {:si_unique_call 1204} MSNdis_WmiHDSplitCurrentConfig_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_WmiHDSplitCurrentConfig_GUID__Loc == MSNdis_WmiHDSplitCurrentConfig_GUID;
    assume MSNdis_WmiHDSplitCurrentConfig_GUID != 0;
    call {:si_unique_call 1205} WmiMonitorAnalogVideoInputParams_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume WmiMonitorAnalogVideoInputParams_GUID__Loc == WmiMonitorAnalogVideoInputParams_GUID;
    assume WmiMonitorAnalogVideoInputParams_GUID != 0;
    call {:si_unique_call 1206} GUID_VIDEO_DIM_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_DIM_TIMEOUT__Loc == GUID_VIDEO_DIM_TIMEOUT;
    assume GUID_VIDEO_DIM_TIMEOUT != 0;
    call {:si_unique_call 1207} MSNdis_FddiLongMulticastList_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_FddiLongMulticastList_GUID__Loc == MSNdis_FddiLongMulticastList_GUID;
    assume MSNdis_FddiLongMulticastList_GUID != 0;
    call {:si_unique_call 1208} GUID_PROCESSOR_PERF_TIME_CHECK__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_TIME_CHECK__Loc == GUID_PROCESSOR_PERF_TIME_CHECK;
    assume GUID_PROCESSOR_PERF_TIME_CHECK != 0;
    call {:si_unique_call 1209} MSNdis_EthernetMacOptions_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_EthernetMacOptions_GUID__Loc == MSNdis_EthernetMacOptions_GUID;
    assume MSNdis_EthernetMacOptions_GUID != 0;
    call {:si_unique_call 1210} MSWmi_PnPDeviceId_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSWmi_PnPDeviceId_GUID__Loc == MSWmi_PnPDeviceId_GUID;
    assume MSWmi_PnPDeviceId_GUID != 0;
    call {:si_unique_call 1211} MSNdis_80211_BSSIList_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_80211_BSSIList_GUID__Loc == MSNdis_80211_BSSIList_GUID;
    assume MSNdis_80211_BSSIList_GUID != 0;
    call {:si_unique_call 1212} MSNdis_TokenRingLostFrames_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_TokenRingLostFrames_GUID__Loc == MSNdis_TokenRingLostFrames_GUID;
    assume MSNdis_TokenRingLostFrames_GUID != 0;
    call {:si_unique_call 1213} GUID_LIDOPEN_POWERSTATE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_LIDOPEN_POWERSTATE__Loc == GUID_LIDOPEN_POWERSTATE;
    assume GUID_LIDOPEN_POWERSTATE != 0;
    call {:si_unique_call 1214} GUID_PROCESSOR_PARKING_CORE_OVERRIDE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PARKING_CORE_OVERRIDE__Loc == GUID_PROCESSOR_PARKING_CORE_OVERRIDE;
    assume GUID_PROCESSOR_PARKING_CORE_OVERRIDE != 0;
    call {:si_unique_call 1215} MSNdis_FddiUpstreamNodeLong_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_FddiUpstreamNodeLong_GUID__Loc == MSNdis_FddiUpstreamNodeLong_GUID;
    assume MSNdis_FddiUpstreamNodeLong_GUID != 0;
    call {:si_unique_call 1216} MSNdis_PortArray_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_PortArray_GUID__Loc == MSNdis_PortArray_GUID;
    assume MSNdis_PortArray_GUID != 0;
    call {:si_unique_call 1217} MSNdis_QueryPortState_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_QueryPortState_GUID__Loc == MSNdis_QueryPortState_GUID;
    assume MSNdis_QueryPortState_GUID != 0;
    call {:si_unique_call 1218} GUID_PROCESSOR_PERF_INCREASE_TIME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_INCREASE_TIME__Loc == GUID_PROCESSOR_PERF_INCREASE_TIME;
    assume GUID_PROCESSOR_PERF_INCREASE_TIME != 0;
    call {:si_unique_call 1219} MSNdis_StatusDot11PmkidCandidateList_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_StatusDot11PmkidCandidateList_GUID__Loc == MSNdis_StatusDot11PmkidCandidateList_GUID;
    assume MSNdis_StatusDot11PmkidCandidateList_GUID != 0;
    call {:si_unique_call 1220} MSNdis_FddiLongCurrentAddress_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_FddiLongCurrentAddress_GUID__Loc == MSNdis_FddiLongCurrentAddress_GUID;
    assume MSNdis_FddiLongCurrentAddress_GUID != 0;
    call {:si_unique_call 1221} MSNdis_QueryReceiveFilterHardwareCapabilities_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_QueryReceiveFilterHardwareCapabilities_GUID__Loc == MSNdis_QueryReceiveFilterHardwareCapabilities_GUID;
    assume MSNdis_QueryReceiveFilterHardwareCapabilities_GUID != 0;
    call {:si_unique_call 1222} MSSerial_PortName_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSSerial_PortName_GUID__Loc == MSSerial_PortName_GUID;
    assume MSSerial_PortName_GUID != 0;
    call {:si_unique_call 1223} MSNdis_NotifyVcRemoval_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_NotifyVcRemoval_GUID__Loc == MSNdis_NotifyVcRemoval_GUID;
    assume MSNdis_NotifyVcRemoval_GUID != 0;
    call {:si_unique_call 1224} MSNdis_LinkParameters_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_LinkParameters_GUID__Loc == MSNdis_LinkParameters_GUID;
    assume MSNdis_LinkParameters_GUID != 0;
    call {:si_unique_call 1225} MSNdis_MaximumSendPackets_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_MaximumSendPackets_GUID__Loc == MSNdis_MaximumSendPackets_GUID;
    assume MSNdis_MaximumSendPackets_GUID != 0;
    call {:si_unique_call 1226} MSMCAInfo_Entry_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSMCAInfo_Entry_GUID__Loc == MSMCAInfo_Entry_GUID;
    assume MSMCAInfo_Entry_GUID != 0;
    call {:si_unique_call 1227} MSNdis_GroupAffinity_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_GroupAffinity_GUID__Loc == MSNdis_GroupAffinity_GUID;
    assume MSNdis_GroupAffinity_GUID != 0;
    call {:si_unique_call 1228} MSNdis_StatusDot11RoamingCompletion_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_StatusDot11RoamingCompletion_GUID__Loc == MSNdis_StatusDot11RoamingCompletion_GUID;
    assume MSNdis_StatusDot11RoamingCompletion_GUID != 0;
    call {:si_unique_call 1229} KernelPerfStateChange_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume KernelPerfStateChange_GUID__Loc == KernelPerfStateChange_GUID;
    assume KernelPerfStateChange_GUID != 0;
    call {:si_unique_call 1230} KbKeyboardPortGuid__Loc := __HAVOC_malloc_or_null(16);
    assume KbKeyboardPortGuid__Loc == KbKeyboardPortGuid;
    assume KbKeyboardPortGuid != 0;
    call {:si_unique_call 1231} GUID_MONITOR_POWER_ON__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_MONITOR_POWER_ON__Loc == GUID_MONITOR_POWER_ON;
    assume GUID_MONITOR_POWER_ON != 0;
    call {:si_unique_call 1232} MSNdis_FddiShortMulticastList_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_FddiShortMulticastList_GUID__Loc == MSNdis_FddiShortMulticastList_GUID;
    assume MSNdis_FddiShortMulticastList_GUID != 0;
    call {:si_unique_call 1233} MSNdis_80211_ReceivedSignalStrengthEventTrigger_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_80211_ReceivedSignalStrengthEventTrigger_GUID__Loc == MSNdis_80211_ReceivedSignalStrengthEventTrigger_GUID;
    assume MSNdis_80211_ReceivedSignalStrengthEventTrigger_GUID != 0;
    call {:si_unique_call 1234} XPF_MCA_SECTION_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume XPF_MCA_SECTION_GUID__Loc == XPF_MCA_SECTION_GUID;
    assume XPF_MCA_SECTION_GUID != 0;
    call {:si_unique_call 1235} MSNdis_StatusDevicePowerOn_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_StatusDevicePowerOn_GUID__Loc == MSNdis_StatusDevicePowerOn_GUID;
    assume MSNdis_StatusDevicePowerOn_GUID != 0;
    call {:si_unique_call 1236} MSKeyboard_ExtendedID_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSKeyboard_ExtendedID_GUID__Loc == MSKeyboard_ExtendedID_GUID;
    assume MSKeyboard_ExtendedID_GUID != 0;
    call {:si_unique_call 1237} WHEAErrorSourceMethods_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume WHEAErrorSourceMethods_GUID__Loc == WHEAErrorSourceMethods_GUID;
    assume WHEAErrorSourceMethods_GUID != 0;
    call {:si_unique_call 1238} MSNdis_AtmMaxAal34PacketSize_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_AtmMaxAal34PacketSize_GUID__Loc == MSNdis_AtmMaxAal34PacketSize_GUID;
    assume MSNdis_AtmMaxAal34PacketSize_GUID != 0;
    call {:si_unique_call 1239} MSNdis_TokenRingCurrentGroup_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_TokenRingCurrentGroup_GUID__Loc == MSNdis_TokenRingCurrentGroup_GUID;
    assume MSNdis_TokenRingCurrentGroup_GUID != 0;
    call {:si_unique_call 1240} MSWmi_ProviderInfo_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSWmi_ProviderInfo_GUID__Loc == MSWmi_ProviderInfo_GUID;
    assume MSWmi_ProviderInfo_GUID != 0;
    call {:si_unique_call 1241} WHEA_MSCHECK_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume WHEA_MSCHECK_GUID__Loc == WHEA_MSCHECK_GUID;
    assume WHEA_MSCHECK_GUID != 0;
    call {:si_unique_call 1242} MSNdis_FddiAttachmentType_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_FddiAttachmentType_GUID__Loc == MSNdis_FddiAttachmentType_GUID;
    assume MSNdis_FddiAttachmentType_GUID != 0;
    call {:si_unique_call 1243} MSNdis_ReceiveFilterParameters_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_ReceiveFilterParameters_GUID__Loc == MSNdis_ReceiveFilterParameters_GUID;
    assume MSNdis_ReceiveFilterParameters_GUID != 0;
    call {:si_unique_call 1244} MSMCAEvent_PCIBusError_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSMCAEvent_PCIBusError_GUID__Loc == MSMCAEvent_PCIBusError_GUID;
    assume MSMCAEvent_PCIBusError_GUID != 0;
    call {:si_unique_call 1245} MSNdis_MediaInUse_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_MediaInUse_GUID__Loc == MSNdis_MediaInUse_GUID;
    assume MSNdis_MediaInUse_GUID != 0;
    call {:si_unique_call 1246} WmiMonitorID_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume WmiMonitorID_GUID__Loc == WmiMonitorID_GUID;
    assume WmiMonitorID_GUID != 0;
    call {:si_unique_call 1247} MSMCAInfo_RawCorrectedPlatformEvent_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSMCAInfo_RawCorrectedPlatformEvent_GUID__Loc == MSMCAInfo_RawCorrectedPlatformEvent_GUID;
    assume MSMCAInfo_RawCorrectedPlatformEvent_GUID != 0;
    call {:si_unique_call 1248} GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME__Loc == GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME;
    assume GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME != 0;
    call {:si_unique_call 1249} MSNdis_QueryPhysicalMediumTypeEx_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_QueryPhysicalMediumTypeEx_GUID__Loc == MSNdis_QueryPhysicalMediumTypeEx_GUID;
    assume MSNdis_QueryPhysicalMediumTypeEx_GUID != 0;
    call {:si_unique_call 1250} GUID_PROCESSOR_THROTTLE_MINIMUM__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_THROTTLE_MINIMUM__Loc == GUID_PROCESSOR_THROTTLE_MINIMUM;
    assume GUID_PROCESSOR_THROTTLE_MINIMUM != 0;
    call {:si_unique_call 1251} GUID_ALLOW_AWAYMODE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ALLOW_AWAYMODE__Loc == GUID_ALLOW_AWAYMODE;
    assume GUID_ALLOW_AWAYMODE != 0;
    call {:si_unique_call 1252} GUID_DISK_ADAPTIVE_POWERDOWN__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DISK_ADAPTIVE_POWERDOWN__Loc == GUID_DISK_ADAPTIVE_POWERDOWN;
    assume GUID_DISK_ADAPTIVE_POWERDOWN != 0;
    call {:si_unique_call 1253} GUID_SYSTEM_BUTTON_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_SYSTEM_BUTTON_SUBGROUP__Loc == GUID_SYSTEM_BUTTON_SUBGROUP;
    assume GUID_SYSTEM_BUTTON_SUBGROUP != 0;
    call {:si_unique_call 1254} WmiMonitorBasicDisplayParams_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume WmiMonitorBasicDisplayParams_GUID__Loc == WmiMonitorBasicDisplayParams_GUID;
    assume WmiMonitorBasicDisplayParams_GUID != 0;
    call {:si_unique_call 1255} MSNdis_ReceiveBufferSpace_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_ReceiveBufferSpace_GUID__Loc == MSNdis_ReceiveBufferSpace_GUID;
    assume MSNdis_ReceiveBufferSpace_GUID != 0;
    call {:si_unique_call 1256} MSPower_DeviceWakeEnable_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSPower_DeviceWakeEnable_GUID__Loc == MSPower_DeviceWakeEnable_GUID;
    assume MSPower_DeviceWakeEnable_GUID != 0;
    call {:si_unique_call 1257} MSNdis_CoVendorId_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_CoVendorId_GUID__Loc == MSNdis_CoVendorId_GUID;
    assume MSNdis_CoVendorId_GUID != 0;
    call {:si_unique_call 1258} GUID_ALLOW_SYSTEM_REQUIRED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ALLOW_SYSTEM_REQUIRED__Loc == GUID_ALLOW_SYSTEM_REQUIRED;
    assume GUID_ALLOW_SYSTEM_REQUIRED != 0;
    call {:si_unique_call 1259} MSNdis_WmiTcpIpChecksumOffload_IPv4TransmitReceive_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_WmiTcpIpChecksumOffload_IPv4TransmitReceive_GUID__Loc == MSNdis_WmiTcpIpChecksumOffload_IPv4TransmitReceive_GUID;
    assume MSNdis_WmiTcpIpChecksumOffload_IPv4TransmitReceive_GUID != 0;
    call {:si_unique_call 1260} MSNdis_NdisEnumerateVc_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_NdisEnumerateVc_GUID__Loc == MSNdis_NdisEnumerateVc_GUID;
    assume MSNdis_NdisEnumerateVc_GUID != 0;
    call {:si_unique_call 1261} MSNdis_CoMacOptions_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_CoMacOptions_GUID__Loc == MSNdis_CoMacOptions_GUID;
    assume MSNdis_CoMacOptions_GUID != 0;
    call {:si_unique_call 1262} MSNdis_FddiShortCurrentAddress_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_FddiShortCurrentAddress_GUID__Loc == MSNdis_FddiShortCurrentAddress_GUID;
    assume MSNdis_FddiShortCurrentAddress_GUID != 0;
    call {:si_unique_call 1263} MSNdis_80211_RTSThreshold_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_80211_RTSThreshold_GUID__Loc == MSNdis_80211_RTSThreshold_GUID;
    assume MSNdis_80211_RTSThreshold_GUID != 0;
    call {:si_unique_call 1264} MSNdis_80211_BssIdListScan_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_80211_BssIdListScan_GUID__Loc == MSNdis_80211_BssIdListScan_GUID;
    assume MSNdis_80211_BssIdListScan_GUID != 0;
    call {:si_unique_call 1265} GUID_ALLOW_DISPLAY_REQUIRED__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ALLOW_DISPLAY_REQUIRED__Loc == GUID_ALLOW_DISPLAY_REQUIRED;
    assume GUID_ALLOW_DISPLAY_REQUIRED != 0;
    call {:si_unique_call 1266} MSNdis_AtmTransmitCellsOk_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_AtmTransmitCellsOk_GUID__Loc == MSNdis_AtmTransmitCellsOk_GUID;
    assume MSNdis_AtmTransmitCellsOk_GUID != 0;
    call {:si_unique_call 1267} GENERIC_NOTIFY_TYPE_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume GENERIC_NOTIFY_TYPE_GUID__Loc == GENERIC_NOTIFY_TYPE_GUID;
    assume GENERIC_NOTIFY_TYPE_GUID != 0;
    call {:si_unique_call 1268} MSSmBios_Sysid1394List_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSSmBios_Sysid1394List_GUID__Loc == MSSmBios_Sysid1394List_GUID;
    assume MSSmBios_Sysid1394List_GUID != 0;
    call {:si_unique_call 1269} MSNdis_TransmitsError_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_TransmitsError_GUID__Loc == MSNdis_TransmitsError_GUID;
    assume MSNdis_TransmitsError_GUID != 0;
    call {:si_unique_call 1270} MSNdis_CoMinimumLinkSpeed_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_CoMinimumLinkSpeed_GUID__Loc == MSNdis_CoMinimumLinkSpeed_GUID;
    assume MSNdis_CoMinimumLinkSpeed_GUID != 0;
    call {:si_unique_call 1271} MSNdis_QueryReceiveFilterParameters_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_QueryReceiveFilterParameters_GUID__Loc == MSNdis_QueryReceiveFilterParameters_GUID;
    assume MSNdis_QueryReceiveFilterParameters_GUID != 0;
    call {:si_unique_call 1272} MSNdis_QueryNicSwitchCurrentCapabilities_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_QueryNicSwitchCurrentCapabilities_GUID__Loc == MSNdis_QueryNicSwitchCurrentCapabilities_GUID;
    assume MSNdis_QueryNicSwitchCurrentCapabilities_GUID != 0;
    call {:si_unique_call 1273} GUID_PROCESSOR_PARKING_PERF_STATE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PARKING_PERF_STATE__Loc == GUID_PROCESSOR_PARKING_PERF_STATE;
    assume GUID_PROCESSOR_PARKING_PERF_STATE != 0;
    call {:si_unique_call 1274} MSNdis_NetworkDirectVersion_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_NetworkDirectVersion_GUID__Loc == MSNdis_NetworkDirectVersion_GUID;
    assume MSNdis_NetworkDirectVersion_GUID != 0;
    call {:si_unique_call 1275} GUID_PROCESSOR_PERF_DECREASE_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_DECREASE_POLICY__Loc == GUID_PROCESSOR_PERF_DECREASE_POLICY;
    assume GUID_PROCESSOR_PERF_DECREASE_POLICY != 0;
    call {:si_unique_call 1276} MSNdis_80211_Disassociate_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_80211_Disassociate_GUID__Loc == MSNdis_80211_Disassociate_GUID;
    assume MSNdis_80211_Disassociate_GUID != 0;
    call {:si_unique_call 1277} MSStorageDriver_FailurePredictStatus_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSStorageDriver_FailurePredictStatus_GUID__Loc == MSStorageDriver_FailurePredictStatus_GUID;
    assume MSStorageDriver_FailurePredictStatus_GUID != 0;
    call {:si_unique_call 1278} MSNdis_WmiReceiveScaleCapabilities_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_WmiReceiveScaleCapabilities_GUID__Loc == MSNdis_WmiReceiveScaleCapabilities_GUID;
    assume MSNdis_WmiReceiveScaleCapabilities_GUID != 0;
    call {:si_unique_call 1279} MSNdis_80211_AddWEP_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_80211_AddWEP_GUID__Loc == MSNdis_80211_AddWEP_GUID;
    assume MSNdis_80211_AddWEP_GUID != 0;
    call {:si_unique_call 1280} GUID_ALLOW_STANDBY_STATES__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ALLOW_STANDBY_STATES__Loc == GUID_ALLOW_STANDBY_STATES;
    assume GUID_ALLOW_STANDBY_STATES != 0;
    call {:si_unique_call 1281} GUID_PROCESSOR_PERFSTATE_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERFSTATE_POLICY__Loc == GUID_PROCESSOR_PERFSTATE_POLICY;
    assume GUID_PROCESSOR_PERFSTATE_POLICY != 0;
    call {:si_unique_call 1282} MSNdis_TokenRingCurrentFunctional_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_TokenRingCurrentFunctional_GUID__Loc == MSNdis_TokenRingCurrentFunctional_GUID;
    assume MSNdis_TokenRingCurrentFunctional_GUID != 0;
    call {:si_unique_call 1283} GUID_DEVINTERFACE_KEYBOARD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVINTERFACE_KEYBOARD__Loc == GUID_DEVINTERFACE_KEYBOARD;
    assume GUID_DEVINTERFACE_KEYBOARD != 0;
    call {:si_unique_call 1284} MSNdis_InterruptModerationParameters_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_InterruptModerationParameters_GUID__Loc == MSNdis_InterruptModerationParameters_GUID;
    assume MSNdis_InterruptModerationParameters_GUID != 0;
    call {:si_unique_call 1285} MSNdis_PMCapabilitiesParam_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_PMCapabilitiesParam_GUID__Loc == MSNdis_PMCapabilitiesParam_GUID;
    assume MSNdis_PMCapabilitiesParam_GUID != 0;
    call {:si_unique_call 1286} MSVerifierIrpLogInformation_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSVerifierIrpLogInformation_GUID__Loc == MSVerifierIrpLogInformation_GUID;
    assume MSVerifierIrpLogInformation_GUID != 0;
    call {:si_unique_call 1287} GUID_BATTERY_DISCHARGE_ACTION_1__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_ACTION_1__Loc == GUID_BATTERY_DISCHARGE_ACTION_1;
    assume GUID_BATTERY_DISCHARGE_ACTION_1 != 0;
    call {:si_unique_call 1288} GUID_PROCESSOR_PERF_INCREASE_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_INCREASE_POLICY__Loc == GUID_PROCESSOR_PERF_INCREASE_POLICY;
    assume GUID_PROCESSOR_PERF_INCREASE_POLICY != 0;
    call {:si_unique_call 1289} MSNdis_80211_TransmitPowerLevel_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_80211_TransmitPowerLevel_GUID__Loc == MSNdis_80211_TransmitPowerLevel_GUID;
    assume MSNdis_80211_TransmitPowerLevel_GUID != 0;
    call {:si_unique_call 1290} WmiMonitorBrightnessEvent_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume WmiMonitorBrightnessEvent_GUID__Loc == WmiMonitorBrightnessEvent_GUID;
    assume WmiMonitorBrightnessEvent_GUID != 0;
    call {:si_unique_call 1291} GUID_VIDEO_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_SUBGROUP__Loc == GUID_VIDEO_SUBGROUP;
    assume GUID_VIDEO_SUBGROUP != 0;
    call {:si_unique_call 1292} MSNdis_StatusProtocolUnbind_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_StatusProtocolUnbind_GUID__Loc == MSNdis_StatusProtocolUnbind_GUID;
    assume MSNdis_StatusProtocolUnbind_GUID != 0;
    call {:si_unique_call 1293} MSNdis_ReceiveFilterInfo_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_ReceiveFilterInfo_GUID__Loc == MSNdis_ReceiveFilterInfo_GUID;
    assume MSNdis_ReceiveFilterInfo_GUID != 0;
    call {:si_unique_call 1294} GUID_HIBERNATE_FASTS4_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_HIBERNATE_FASTS4_POLICY__Loc == GUID_HIBERNATE_FASTS4_POLICY;
    assume GUID_HIBERNATE_FASTS4_POLICY != 0;
    call {:si_unique_call 1295} KernelPerfStates_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume KernelPerfStates_GUID__Loc == KernelPerfStates_GUID;
    assume KernelPerfStates_GUID != 0;
    call {:si_unique_call 1296} XPF_PROCESSOR_ERROR_SECTION_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume XPF_PROCESSOR_ERROR_SECTION_GUID__Loc == XPF_PROCESSOR_ERROR_SECTION_GUID;
    assume XPF_PROCESSOR_ERROR_SECTION_GUID != 0;
    call {:si_unique_call 1297} MSNdis_NicSwitchCapabilities_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_NicSwitchCapabilities_GUID__Loc == MSNdis_NicSwitchCapabilities_GUID;
    assume MSNdis_NicSwitchCapabilities_GUID != 0;
    call {:si_unique_call 1298} MSNdis_LinkState_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_LinkState_GUID__Loc == MSNdis_LinkState_GUID;
    assume MSNdis_LinkState_GUID != 0;
    call {:si_unique_call 1299} MSNdis_80211_FragmentationThreshold_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_80211_FragmentationThreshold_GUID__Loc == MSNdis_80211_FragmentationThreshold_GUID;
    assume MSNdis_80211_FragmentationThreshold_GUID != 0;
    call {:si_unique_call 1300} WHEAPolicyManagementMethods_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume WHEAPolicyManagementMethods_GUID__Loc == WHEAPolicyManagementMethods_GUID;
    assume WHEAPolicyManagementMethods_GUID != 0;
    call {:si_unique_call 1301} MSNdis_NetworkAddress_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_NetworkAddress_GUID__Loc == MSNdis_NetworkAddress_GUID;
    assume MSNdis_NetworkAddress_GUID != 0;
    call {:si_unique_call 1302} WmiMonitorDigitalVideoInputParams_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume WmiMonitorDigitalVideoInputParams_GUID__Loc == WmiMonitorDigitalVideoInputParams_GUID;
    assume WmiMonitorDigitalVideoInputParams_GUID != 0;
    call {:si_unique_call 1303} MSNdis_PortStateData_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_PortStateData_GUID__Loc == MSNdis_PortStateData_GUID;
    assume MSNdis_PortStateData_GUID != 0;
    call {:si_unique_call 1304} GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS__Loc == GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS;
    assume GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS != 0;
    call {:si_unique_call 1305} MSNdis_WmiIPSecOffloadV1_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_WmiIPSecOffloadV1_GUID__Loc == MSNdis_WmiIPSecOffloadV1_GUID;
    assume MSNdis_WmiIPSecOffloadV1_GUID != 0;
    call {:si_unique_call 1306} MSNdis_80211_TransmitAntennaSelected_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_80211_TransmitAntennaSelected_GUID__Loc == MSNdis_80211_TransmitAntennaSelected_GUID;
    assume MSNdis_80211_TransmitAntennaSelected_GUID != 0;
    call {:si_unique_call 1307} MSTapeDriveParam_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSTapeDriveParam_GUID__Loc == MSTapeDriveParam_GUID;
    assume MSTapeDriveParam_GUID != 0;
    call {:si_unique_call 1308} MSSmBios_SysidUUID_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSSmBios_SysidUUID_GUID__Loc == MSSmBios_SysidUUID_GUID;
    assume MSSmBios_SysidUUID_GUID != 0;
    call {:si_unique_call 1309} MSNdis_AtmSupportedServiceCategory_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_AtmSupportedServiceCategory_GUID__Loc == MSNdis_AtmSupportedServiceCategory_GUID;
    assume MSNdis_AtmSupportedServiceCategory_GUID != 0;
    call {:si_unique_call 1310} MSNdis_AtmSupportedVcRates_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_AtmSupportedVcRates_GUID__Loc == MSNdis_AtmSupportedVcRates_GUID;
    assume MSNdis_AtmSupportedVcRates_GUID != 0;
    call {:si_unique_call 1311} MSNdis_StatusMediaSpecificIndicationEx_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_StatusMediaSpecificIndicationEx_GUID__Loc == MSNdis_StatusMediaSpecificIndicationEx_GUID;
    assume MSNdis_StatusMediaSpecificIndicationEx_GUID != 0;
    call {:si_unique_call 1312} KernelThermalConstraintChange_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume KernelThermalConstraintChange_GUID__Loc == KernelThermalConstraintChange_GUID;
    assume KernelThermalConstraintChange_GUID != 0;
    call {:si_unique_call 1313} RegisteredGuids_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume RegisteredGuids_GUID__Loc == RegisteredGuids_GUID;
    assume RegisteredGuids_GUID != 0;
    call {:si_unique_call 1314} MSWmi_GuidRegistrationInfo_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSWmi_GuidRegistrationInfo_GUID__Loc == MSWmi_GuidRegistrationInfo_GUID;
    assume MSWmi_GuidRegistrationInfo_GUID != 0;
    call {:si_unique_call 1315} MSMCAInfo_RawCMCEvent_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSMCAInfo_RawCMCEvent_GUID__Loc == MSMCAInfo_RawCMCEvent_GUID;
    assume MSMCAInfo_RawCMCEvent_GUID != 0;
    call {:si_unique_call 1316} MSNdis_80211_WEPStatus_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_80211_WEPStatus_GUID__Loc == MSNdis_80211_WEPStatus_GUID;
    assume MSNdis_80211_WEPStatus_GUID != 0;
    call {:si_unique_call 1317} GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD__Loc == GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD;
    assume GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD != 0;
    call {:si_unique_call 1318} WmiMonitorBrightness_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume WmiMonitorBrightness_GUID__Loc == WmiMonitorBrightness_GUID;
    assume WmiMonitorBrightness_GUID != 0;
    call {:si_unique_call 1319} GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD__Loc == GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD;
    assume GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD != 0;
    call {:si_unique_call 1320} GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR__Loc == GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR;
    assume GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR != 0;
    call {:si_unique_call 1321} MSNdis_WmiTcpIpChecksumOffload_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_WmiTcpIpChecksumOffload_GUID__Loc == MSNdis_WmiTcpIpChecksumOffload_GUID;
    assume MSNdis_WmiTcpIpChecksumOffload_GUID != 0;
    call {:si_unique_call 1322} MSNdis_StatusPortState_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_StatusPortState_GUID__Loc == MSNdis_StatusPortState_GUID;
    assume MSNdis_StatusPortState_GUID != 0;
    call {:si_unique_call 1323} MSNdis_StatusDot11MPDUMaxLengthChange_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_StatusDot11MPDUMaxLengthChange_GUID__Loc == MSNdis_StatusDot11MPDUMaxLengthChange_GUID;
    assume MSNdis_StatusDot11MPDUMaxLengthChange_GUID != 0;
    call {:si_unique_call 1324} MSNdis_ReceiveQueueParameters_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_ReceiveQueueParameters_GUID__Loc == MSNdis_ReceiveQueueParameters_GUID;
    assume MSNdis_ReceiveQueueParameters_GUID != 0;
    call {:si_unique_call 1325} MSSmBios_Sysid1394_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSSmBios_Sysid1394_GUID__Loc == MSSmBios_Sysid1394_GUID;
    assume MSSmBios_Sysid1394_GUID != 0;
    call {:si_unique_call 1326} MSNdis_ReceiveQueueInfo_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_ReceiveQueueInfo_GUID__Loc == MSNdis_ReceiveQueueInfo_GUID;
    assume MSNdis_ReceiveQueueInfo_GUID != 0;
    call {:si_unique_call 1327} NMI_NOTIFY_TYPE_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume NMI_NOTIFY_TYPE_GUID__Loc == NMI_NOTIFY_TYPE_GUID;
    assume NMI_NOTIFY_TYPE_GUID != 0;
    call {:si_unique_call 1328} MSStorageDriver_FailurePredictFunction_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSStorageDriver_FailurePredictFunction_GUID__Loc == MSStorageDriver_FailurePredictFunction_GUID;
    assume MSStorageDriver_FailurePredictFunction_GUID != 0;
    call {:si_unique_call 1329} GUID_DISK_COALESCING_POWERDOWN_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DISK_COALESCING_POWERDOWN_TIMEOUT__Loc == GUID_DISK_COALESCING_POWERDOWN_TIMEOUT;
    assume GUID_DISK_COALESCING_POWERDOWN_TIMEOUT != 0;
    call {:si_unique_call 1330} MSNdis_WmiTcpConnectionOffload_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_WmiTcpConnectionOffload_GUID__Loc == MSNdis_WmiTcpConnectionOffload_GUID;
    assume MSNdis_WmiTcpConnectionOffload_GUID != 0;
    call {:si_unique_call 1331} PROCESSOR_GENERIC_ERROR_SECTION_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume PROCESSOR_GENERIC_ERROR_SECTION_GUID__Loc == PROCESSOR_GENERIC_ERROR_SECTION_GUID;
    assume PROCESSOR_GENERIC_ERROR_SECTION_GUID != 0;
    call {:si_unique_call 1332} GUID_USERINTERFACEBUTTON_ACTION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_USERINTERFACEBUTTON_ACTION__Loc == GUID_USERINTERFACEBUTTON_ACTION;
    assume GUID_USERINTERFACEBUTTON_ACTION != 0;
    call {:si_unique_call 1333} MSNdis_SetPortParameters_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_SetPortParameters_GUID__Loc == MSNdis_SetPortParameters_GUID;
    assume MSNdis_SetPortParameters_GUID != 0;
    call {:si_unique_call 1334} WmiMonitorBrightnessMethods_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume WmiMonitorBrightnessMethods_GUID__Loc == WmiMonitorBrightnessMethods_GUID;
    assume WmiMonitorBrightnessMethods_GUID != 0;
    call {:si_unique_call 1335} GUID_PCIEXPRESS_ASPM_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PCIEXPRESS_ASPM_POLICY__Loc == GUID_PCIEXPRESS_ASPM_POLICY;
    assume GUID_PCIEXPRESS_ASPM_POLICY != 0;
    call {:si_unique_call 1336} MSNdis_EthernetPermanentAddress_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_EthernetPermanentAddress_GUID__Loc == MSNdis_EthernetPermanentAddress_GUID;
    assume MSNdis_EthernetPermanentAddress_GUID != 0;
    call {:si_unique_call 1337} MSNdis_WmiTcpLargeSendOffloadV2_IPv6_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_WmiTcpLargeSendOffloadV2_IPv6_GUID__Loc == MSNdis_WmiTcpLargeSendOffloadV2_IPv6_GUID;
    assume MSNdis_WmiTcpLargeSendOffloadV2_IPv6_GUID != 0;
    call {:si_unique_call 1338} MSNdis_CoReceivePdusNoBuffer_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_CoReceivePdusNoBuffer_GUID__Loc == MSNdis_CoReceivePdusNoBuffer_GUID;
    assume MSNdis_CoReceivePdusNoBuffer_GUID != 0;
    call {:si_unique_call 1339} MSNdis_NetworkShortAddress_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_NetworkShortAddress_GUID__Loc == MSNdis_NetworkShortAddress_GUID;
    assume MSNdis_NetworkShortAddress_GUID != 0;
    call {:si_unique_call 1340} MSNdis_ObjectHeader_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_ObjectHeader_GUID__Loc == MSNdis_ObjectHeader_GUID;
    assume MSNdis_ObjectHeader_GUID != 0;
    call {:si_unique_call 1341} MSNdis_80211_DataRates_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_80211_DataRates_GUID__Loc == MSNdis_80211_DataRates_GUID;
    assume MSNdis_80211_DataRates_GUID != 0;
    call {:si_unique_call 1342} MSNdis_StatusOperationalStatus_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_StatusOperationalStatus_GUID__Loc == MSNdis_StatusOperationalStatus_GUID;
    assume MSNdis_StatusOperationalStatus_GUID != 0;
    call {:si_unique_call 1343} GUID_BATTERY_DISCHARGE_FLAGS_1__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_DISCHARGE_FLAGS_1__Loc == GUID_BATTERY_DISCHARGE_FLAGS_1;
    assume GUID_BATTERY_DISCHARGE_FLAGS_1 != 0;
    call {:si_unique_call 1344} MSNdis_AtmReceiveCellsOk_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_AtmReceiveCellsOk_GUID__Loc == MSNdis_AtmReceiveCellsOk_GUID;
    assume MSNdis_AtmReceiveCellsOk_GUID != 0;
    call {:si_unique_call 1345} MSNdis_TcpConnectionOffloadHardwareConfig_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_TcpConnectionOffloadHardwareConfig_GUID__Loc == MSNdis_TcpConnectionOffloadHardwareConfig_GUID;
    assume MSNdis_TcpConnectionOffloadHardwareConfig_GUID != 0;
    call {:si_unique_call 1346} MSNdis_CoHardwareStatus_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_CoHardwareStatus_GUID__Loc == MSNdis_CoHardwareStatus_GUID;
    assume MSNdis_CoHardwareStatus_GUID != 0;
    call {:si_unique_call 1347} MSNdis_PMAdminConfig_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_PMAdminConfig_GUID__Loc == MSNdis_PMAdminConfig_GUID;
    assume MSNdis_PMAdminConfig_GUID != 0;
    call {:si_unique_call 1348} GUID_PROCESSOR_PERF_INCREASE_HISTORY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_INCREASE_HISTORY__Loc == GUID_PROCESSOR_PERF_INCREASE_HISTORY;
    assume GUID_PROCESSOR_PERF_INCREASE_HISTORY != 0;
    call {:si_unique_call 1349} GUID_INTSTEER_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_INTSTEER_SUBGROUP__Loc == GUID_INTSTEER_SUBGROUP;
    assume GUID_INTSTEER_SUBGROUP != 0;
    call {:si_unique_call 1350} GUID_DISK_BURST_IGNORE_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DISK_BURST_IGNORE_THRESHOLD__Loc == GUID_DISK_BURST_IGNORE_THRESHOLD;
    assume GUID_DISK_BURST_IGNORE_THRESHOLD != 0;
    call {:si_unique_call 1351} MSNdis_TokenRingLineErrors_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_TokenRingLineErrors_GUID__Loc == MSNdis_TokenRingLineErrors_GUID;
    assume MSNdis_TokenRingLineErrors_GUID != 0;
    call {:si_unique_call 1352} WHEA_CACHECHECK_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume WHEA_CACHECHECK_GUID__Loc == WHEA_CACHECHECK_GUID;
    assume WHEA_CACHECHECK_GUID != 0;
    call {:si_unique_call 1353} MSNdis_QueryInterruptModeration_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_QueryInterruptModeration_GUID__Loc == MSNdis_QueryInterruptModeration_GUID;
    assume MSNdis_QueryInterruptModeration_GUID != 0;
    call {:si_unique_call 1354} MSNdis_NotifyFilterArrival_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_NotifyFilterArrival_GUID__Loc == MSNdis_NotifyFilterArrival_GUID;
    assume MSNdis_NotifyFilterArrival_GUID != 0;
    call {:si_unique_call 1355} MSNdis_QueryStatisticsInfo_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_QueryStatisticsInfo_GUID__Loc == MSNdis_QueryStatisticsInfo_GUID;
    assume MSNdis_QueryStatisticsInfo_GUID != 0;
    call {:si_unique_call 1356} GUID_DISK_POWERDOWN_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_DISK_POWERDOWN_TIMEOUT__Loc == GUID_DISK_POWERDOWN_TIMEOUT;
    assume GUID_DISK_POWERDOWN_TIMEOUT != 0;
    call {:si_unique_call 1357} MSNdis_EnumerateAdapter_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_EnumerateAdapter_GUID__Loc == MSNdis_EnumerateAdapter_GUID;
    assume MSNdis_EnumerateAdapter_GUID != 0;
    call {:si_unique_call 1358} MSNdis_EthernetOneTransmitCollision_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_EthernetOneTransmitCollision_GUID__Loc == MSNdis_EthernetOneTransmitCollision_GUID;
    assume MSNdis_EthernetOneTransmitCollision_GUID != 0;
    call {:si_unique_call 1359} MSNdis_StatusDot11LinkQuality_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_StatusDot11LinkQuality_GUID__Loc == MSNdis_StatusDot11LinkQuality_GUID;
    assume MSNdis_StatusDot11LinkQuality_GUID != 0;
    call {:si_unique_call 1360} GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD__Loc == GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD;
    assume GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD != 0;
    call {:si_unique_call 1361} MSMCAInfo_RawMCAData_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSMCAInfo_RawMCAData_GUID__Loc == MSMCAInfo_RawMCAData_GUID;
    assume MSMCAInfo_RawMCAData_GUID != 0;
    call {:si_unique_call 1362} MSNdis_CoMediaConnectStatus_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_CoMediaConnectStatus_GUID__Loc == MSNdis_CoMediaConnectStatus_GUID;
    assume MSNdis_CoMediaConnectStatus_GUID != 0;
    call {:si_unique_call 1363} MSNdis_StatusLinkState_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_StatusLinkState_GUID__Loc == MSNdis_StatusLinkState_GUID;
    assume MSNdis_StatusLinkState_GUID != 0;
    call {:si_unique_call 1364} MSStorageDriver_FailurePredictData_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSStorageDriver_FailurePredictData_GUID__Loc == MSStorageDriver_FailurePredictData_GUID;
    assume MSStorageDriver_FailurePredictData_GUID != 0;
    call {:si_unique_call 1365} MSNdis_ReceiveFilterFieldParameters_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_ReceiveFilterFieldParameters_GUID__Loc == MSNdis_ReceiveFilterFieldParameters_GUID;
    assume MSNdis_ReceiveFilterFieldParameters_GUID != 0;
    call {:si_unique_call 1366} MSNdis_80211_AuthenticationMode_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_80211_AuthenticationMode_GUID__Loc == MSNdis_80211_AuthenticationMode_GUID;
    assume MSNdis_80211_AuthenticationMode_GUID != 0;
    call {:si_unique_call 1367} NO_SUBGROUP_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume NO_SUBGROUP_GUID__Loc == NO_SUBGROUP_GUID;
    assume NO_SUBGROUP_GUID != 0;
    call {:si_unique_call 1368} GUID_VIDEO_FULLSCREEN_PLAYBACK__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_FULLSCREEN_PLAYBACK__Loc == GUID_VIDEO_FULLSCREEN_PLAYBACK;
    assume GUID_VIDEO_FULLSCREEN_PLAYBACK != 0;
    call {:si_unique_call 1369} WmiMonitorListedFrequencyRanges_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume WmiMonitorListedFrequencyRanges_GUID__Loc == WmiMonitorListedFrequencyRanges_GUID;
    assume WmiMonitorListedFrequencyRanges_GUID != 0;
    call {:si_unique_call 1370} GUID_PROCESSOR_PERF_BOOST_MODE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_BOOST_MODE__Loc == GUID_PROCESSOR_PERF_BOOST_MODE;
    assume GUID_PROCESSOR_PERF_BOOST_MODE != 0;
    call {:si_unique_call 1371} ALL_POWERSCHEMES_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume ALL_POWERSCHEMES_GUID__Loc == ALL_POWERSCHEMES_GUID;
    assume ALL_POWERSCHEMES_GUID != 0;
    call {:si_unique_call 1372} GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY__Loc == GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY;
    assume GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY != 0;
    call {:si_unique_call 1373} MSMCAInfo_RawMCAEvent_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSMCAInfo_RawMCAEvent_GUID__Loc == MSMCAInfo_RawMCAEvent_GUID;
    assume MSMCAInfo_RawMCAEvent_GUID != 0;
    call {:si_unique_call 1374} WmiMonitorRawEEdidV1Block_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume WmiMonitorRawEEdidV1Block_GUID__Loc == WmiMonitorRawEEdidV1Block_GUID;
    assume WmiMonitorRawEEdidV1Block_GUID != 0;
    call {:si_unique_call 1375} MSNdis_StatusHDSplitCurrentConfig_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_StatusHDSplitCurrentConfig_GUID__Loc == MSNdis_StatusHDSplitCurrentConfig_GUID;
    assume MSNdis_StatusHDSplitCurrentConfig_GUID != 0;
    call {:si_unique_call 1376} MSMCAEvent_InvalidError_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSMCAEvent_InvalidError_GUID__Loc == MSMCAEvent_InvalidError_GUID;
    assume MSMCAEvent_InvalidError_GUID != 0;
    call {:si_unique_call 1377} MSNdis_HDSplitCurrentConfig_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_HDSplitCurrentConfig_GUID__Loc == MSNdis_HDSplitCurrentConfig_GUID;
    assume MSNdis_HDSplitCurrentConfig_GUID != 0;
    call {:si_unique_call 1378} KernelIdleState_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume KernelIdleState_GUID__Loc == KernelIdleState_GUID;
    assume KernelIdleState_GUID != 0;
    call {:si_unique_call 1379} GUID_PROCESSOR_IDLE_ALLOW_SCALING__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_IDLE_ALLOW_SCALING__Loc == GUID_PROCESSOR_IDLE_ALLOW_SCALING;
    assume GUID_PROCESSOR_IDLE_ALLOW_SCALING != 0;
    call {:si_unique_call 1380} MSMCAEvent_MemoryPageRemoved_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSMCAEvent_MemoryPageRemoved_GUID__Loc == MSMCAEvent_MemoryPageRemoved_GUID;
    assume MSMCAEvent_MemoryPageRemoved_GUID != 0;
    call {:si_unique_call 1381} MSTapeProblemIoError_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSTapeProblemIoError_GUID__Loc == MSTapeProblemIoError_GUID;
    assume MSTapeProblemIoError_GUID != 0;
    call {:si_unique_call 1382} MSNdis_ReceiveFilterCapabilities_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_ReceiveFilterCapabilities_GUID__Loc == MSNdis_ReceiveFilterCapabilities_GUID;
    assume MSNdis_ReceiveFilterCapabilities_GUID != 0;
    call {:si_unique_call 1383} MSNdis_FddiShortPermanentAddress_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_FddiShortPermanentAddress_GUID__Loc == MSNdis_FddiShortPermanentAddress_GUID;
    assume MSNdis_FddiShortPermanentAddress_GUID != 0;
    call {:si_unique_call 1384} MSNdis_80211_ReloadDefaults_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_80211_ReloadDefaults_GUID__Loc == MSNdis_80211_ReloadDefaults_GUID;
    assume MSNdis_80211_ReloadDefaults_GUID != 0;
    call {:si_unique_call 1385} MSMCAEvent_SystemEventError_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSMCAEvent_SystemEventError_GUID__Loc == MSMCAEvent_SystemEventError_GUID;
    assume MSMCAEvent_SystemEventError_GUID != 0;
    call {:si_unique_call 1386} MSNdis_VendorDriverVersion_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_VendorDriverVersion_GUID__Loc == MSNdis_VendorDriverVersion_GUID;
    assume MSNdis_VendorDriverVersion_GUID != 0;
    call {:si_unique_call 1387} MSTapeDriveProblemEvent_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSTapeDriveProblemEvent_GUID__Loc == MSTapeDriveProblemEvent_GUID;
    assume MSTapeDriveProblemEvent_GUID != 0;
    call {:si_unique_call 1388} GUID_PROCESSOR_IDLE_TIME_CHECK__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_IDLE_TIME_CHECK__Loc == GUID_PROCESSOR_IDLE_TIME_CHECK;
    assume GUID_PROCESSOR_IDLE_TIME_CHECK != 0;
    call {:si_unique_call 1389} GUID_INTSTEER_MODE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_INTSTEER_MODE__Loc == GUID_INTSTEER_MODE;
    assume GUID_INTSTEER_MODE != 0;
    call {:si_unique_call 1390} MSNdis_WmiTcpLargeSendOffloadV2_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_WmiTcpLargeSendOffloadV2_GUID__Loc == MSNdis_WmiTcpLargeSendOffloadV2_GUID;
    assume MSNdis_WmiTcpLargeSendOffloadV2_GUID != 0;
    call {:si_unique_call 1391} GUID_IDLE_RESILIENCY_PLATFORM_STATE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_IDLE_RESILIENCY_PLATFORM_STATE__Loc == GUID_IDLE_RESILIENCY_PLATFORM_STATE;
    assume GUID_IDLE_RESILIENCY_PLATFORM_STATE != 0;
    call {:si_unique_call 1392} GUID_BACKGROUND_TASK_NOTIFICATION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BACKGROUND_TASK_NOTIFICATION__Loc == GUID_BACKGROUND_TASK_NOTIFICATION;
    assume GUID_BACKGROUND_TASK_NOTIFICATION != 0;
    call {:si_unique_call 1393} WmiMonitorColorXYZinCIE_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume WmiMonitorColorXYZinCIE_GUID__Loc == WmiMonitorColorXYZinCIE_GUID;
    assume WmiMonitorColorXYZinCIE_GUID != 0;
    call {:si_unique_call 1394} GUID_PROCESSOR_PERF_HISTORY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_HISTORY__Loc == GUID_PROCESSOR_PERF_HISTORY;
    assume GUID_PROCESSOR_PERF_HISTORY != 0;
    call {:si_unique_call 1395} MSNdis_TransmitBufferSpace_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_TransmitBufferSpace_GUID__Loc == MSNdis_TransmitBufferSpace_GUID;
    assume MSNdis_TransmitBufferSpace_GUID != 0;
    call {:si_unique_call 1396} MSNdis_CoVendorDriverVersion_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_CoVendorDriverVersion_GUID__Loc == MSNdis_CoVendorDriverVersion_GUID;
    assume MSNdis_CoVendorDriverVersion_GUID != 0;
    call {:si_unique_call 1397} MSNdis_FddiDownstreamNodeLong_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_FddiDownstreamNodeLong_GUID__Loc == MSNdis_FddiDownstreamNodeLong_GUID;
    assume MSNdis_FddiDownstreamNodeLong_GUID != 0;
    call {:si_unique_call 1398} MSNdis_80211_NumberOfAntennas_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_80211_NumberOfAntennas_GUID__Loc == MSNdis_80211_NumberOfAntennas_GUID;
    assume MSNdis_80211_NumberOfAntennas_GUID != 0;
    call {:si_unique_call 1399} GUID_VIDEO_ADAPTIVE_POWERDOWN__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_ADAPTIVE_POWERDOWN__Loc == GUID_VIDEO_ADAPTIVE_POWERDOWN;
    assume GUID_VIDEO_ADAPTIVE_POWERDOWN != 0;
    call {:si_unique_call 1400} PCIe_NOTIFY_TYPE_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume PCIe_NOTIFY_TYPE_GUID__Loc == PCIe_NOTIFY_TYPE_GUID;
    assume PCIe_NOTIFY_TYPE_GUID != 0;
    call {:si_unique_call 1401} MSNdis_FddiRingManagmentState_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_FddiRingManagmentState_GUID__Loc == MSNdis_FddiRingManagmentState_GUID;
    assume MSNdis_FddiRingManagmentState_GUID != 0;
    call {:si_unique_call 1402} MSSmBios_SysidUUIDList_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSSmBios_SysidUUIDList_GUID__Loc == MSSmBios_SysidUUIDList_GUID;
    assume MSSmBios_SysidUUIDList_GUID != 0;
    call {:si_unique_call 1403} MSNdis_ReceiveScaleCapabilities_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_ReceiveScaleCapabilities_GUID__Loc == MSNdis_ReceiveScaleCapabilities_GUID;
    assume MSNdis_ReceiveScaleCapabilities_GUID != 0;
    call {:si_unique_call 1404} MSNdis_PMCapabilityState_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_PMCapabilityState_GUID__Loc == MSNdis_PMCapabilityState_GUID;
    assume MSNdis_PMCapabilityState_GUID != 0;
    call {:si_unique_call 1405} GUID_VIDEO_CONSOLE_LOCK_TIMEOUT__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_CONSOLE_LOCK_TIMEOUT__Loc == GUID_VIDEO_CONSOLE_LOCK_TIMEOUT;
    assume GUID_VIDEO_CONSOLE_LOCK_TIMEOUT != 0;
    call {:si_unique_call 1406} GUID_PROCESSOR_PERF_BOOST_POLICY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_BOOST_POLICY__Loc == GUID_PROCESSOR_PERF_BOOST_POLICY;
    assume GUID_PROCESSOR_PERF_BOOST_POLICY != 0;
    call {:si_unique_call 1407} GUID_SESSION_USER_PRESENCE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_SESSION_USER_PRESENCE__Loc == GUID_SESSION_USER_PRESENCE;
    assume GUID_SESSION_USER_PRESENCE != 0;
    call {:si_unique_call 1408} MSNdis_StatusResetEnd_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_StatusResetEnd_GUID__Loc == MSNdis_StatusResetEnd_GUID;
    assume MSNdis_StatusResetEnd_GUID != 0;
    call {:si_unique_call 1409} GUID_LIDCLOSE_ACTION__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_LIDCLOSE_ACTION__Loc == GUID_LIDCLOSE_ACTION;
    assume GUID_LIDCLOSE_ACTION != 0;
    call {:si_unique_call 1410} MSNdis_EnumerateReceiveFilters_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_EnumerateReceiveFilters_GUID__Loc == MSNdis_EnumerateReceiveFilters_GUID;
    assume MSNdis_EnumerateReceiveFilters_GUID != 0;
    call {:si_unique_call 1411} MSNdis_StatusMediaDisconnect_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_StatusMediaDisconnect_GUID__Loc == MSNdis_StatusMediaDisconnect_GUID;
    assume MSNdis_StatusMediaDisconnect_GUID != 0;
    call {:si_unique_call 1412} MSParallel_AllocFreeCounts_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSParallel_AllocFreeCounts_GUID__Loc == MSParallel_AllocFreeCounts_GUID;
    assume MSParallel_AllocFreeCounts_GUID != 0;
    call {:si_unique_call 1413} WmiMonitorConnectionParams_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume WmiMonitorConnectionParams_GUID__Loc == WmiMonitorConnectionParams_GUID;
    assume WmiMonitorConnectionParams_GUID != 0;
    call {:si_unique_call 1414} MSNdis_EthernetMulticastList_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_EthernetMulticastList_GUID__Loc == MSNdis_EthernetMulticastList_GUID;
    assume MSNdis_EthernetMulticastList_GUID != 0;
    call {:si_unique_call 1415} MSNdis_ReceiveFilterGlobalParameters_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_ReceiveFilterGlobalParameters_GUID__Loc == MSNdis_ReceiveFilterGlobalParameters_GUID;
    assume MSNdis_ReceiveFilterGlobalParameters_GUID != 0;
    call {:si_unique_call 1416} MSNdis_VlanIdentifier_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_VlanIdentifier_GUID__Loc == MSNdis_VlanIdentifier_GUID;
    assume MSNdis_VlanIdentifier_GUID != 0;
    call {:si_unique_call 1417} GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS__Loc == GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS;
    assume GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS != 0;
    call {:si_unique_call 1418} MSNdis_AtmMaxAal1PacketSize_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_AtmMaxAal1PacketSize_GUID__Loc == MSNdis_AtmMaxAal1PacketSize_GUID;
    assume MSNdis_AtmMaxAal1PacketSize_GUID != 0;
    call {:si_unique_call 1419} GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD__Loc == GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD;
    assume GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD != 0;
    call {:si_unique_call 1420} MSNdis_ReceiveNoBuffer_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_ReceiveNoBuffer_GUID__Loc == MSNdis_ReceiveNoBuffer_GUID;
    assume MSNdis_ReceiveNoBuffer_GUID != 0;
    call {:si_unique_call 1421} MSNdis_WmiEnumAdapter_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_WmiEnumAdapter_GUID__Loc == MSNdis_WmiEnumAdapter_GUID;
    assume MSNdis_WmiEnumAdapter_GUID != 0;
    call {:si_unique_call 1422} MEMORY_ERROR_SECTION_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MEMORY_ERROR_SECTION_GUID__Loc == MEMORY_ERROR_SECTION_GUID;
    assume MEMORY_ERROR_SECTION_GUID != 0;
    call {:si_unique_call 1423} MSWmi_PnPInstanceNames_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSWmi_PnPInstanceNames_GUID__Loc == MSWmi_PnPInstanceNames_GUID;
    assume MSWmi_PnPInstanceNames_GUID != 0;
    call {:si_unique_call 1424} GUID_PROCESSOR_PERF_DECREASE_TIME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_DECREASE_TIME__Loc == GUID_PROCESSOR_PERF_DECREASE_TIME;
    assume GUID_PROCESSOR_PERF_DECREASE_TIME != 0;
    call {:si_unique_call 1425} MSNdis_MaximumFrameSize_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_MaximumFrameSize_GUID__Loc == MSNdis_MaximumFrameSize_GUID;
    assume MSNdis_MaximumFrameSize_GUID != 0;
    call {:si_unique_call 1426} GUID_MAX_POWER_SAVINGS__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_MAX_POWER_SAVINGS__Loc == GUID_MAX_POWER_SAVINGS;
    assume GUID_MAX_POWER_SAVINGS != 0;
    call {:si_unique_call 1427} GUID_BATTERY_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_BATTERY_SUBGROUP__Loc == GUID_BATTERY_SUBGROUP;
    assume GUID_BATTERY_SUBGROUP != 0;
    call {:si_unique_call 1428} GUID_PROCESSOR_PERF_DECREASE_HISTORY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_DECREASE_HISTORY__Loc == GUID_PROCESSOR_PERF_DECREASE_HISTORY;
    assume GUID_PROCESSOR_PERF_DECREASE_HISTORY != 0;
    call {:si_unique_call 1429} MSNdis_80211_Statistics_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_80211_Statistics_GUID__Loc == MSNdis_80211_Statistics_GUID;
    assume MSNdis_80211_Statistics_GUID != 0;
    call {:si_unique_call 1430} MSNdis_LinkStateData_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_LinkStateData_GUID__Loc == MSNdis_LinkStateData_GUID;
    assume MSNdis_LinkStateData_GUID != 0;
    call {:si_unique_call 1431} MSIde_PortDeviceInfo_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSIde_PortDeviceInfo_GUID__Loc == MSIde_PortDeviceInfo_GUID;
    assume MSIde_PortDeviceInfo_GUID != 0;
    call {:si_unique_call 1432} GUID_IDLE_BACKGROUND_TASK__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_IDLE_BACKGROUND_TASK__Loc == GUID_IDLE_BACKGROUND_TASK;
    assume GUID_IDLE_BACKGROUND_TASK != 0;
    call {:si_unique_call 1433} MSNdis_CountedString_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_CountedString_GUID__Loc == MSNdis_CountedString_GUID;
    assume MSNdis_CountedString_GUID != 0;
    call {:si_unique_call 1434} MSNdis_StatusDevicePowerOffEx_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_StatusDevicePowerOffEx_GUID__Loc == MSNdis_StatusDevicePowerOffEx_GUID;
    assume MSNdis_StatusDevicePowerOffEx_GUID != 0;
    call {:si_unique_call 1435} MSSmBios_SMBiosEventlog_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSSmBios_SMBiosEventlog_GUID__Loc == MSSmBios_SMBiosEventlog_GUID;
    assume MSSmBios_SMBiosEventlog_GUID != 0;
    call {:si_unique_call 1436} MSNdis_PhysicalMediumType_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_PhysicalMediumType_GUID__Loc == MSNdis_PhysicalMediumType_GUID;
    assume MSNdis_PhysicalMediumType_GUID != 0;
    call {:si_unique_call 1437} MSNdis_QueryPciDeviceCustomProperty_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_QueryPciDeviceCustomProperty_GUID__Loc == MSNdis_QueryPciDeviceCustomProperty_GUID;
    assume MSNdis_QueryPciDeviceCustomProperty_GUID != 0;
    call {:si_unique_call 1438} MSNdis_80211_ReceivedSignalStrength_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_80211_ReceivedSignalStrength_GUID__Loc == MSNdis_80211_ReceivedSignalStrength_GUID;
    assume MSNdis_80211_ReceivedSignalStrength_GUID != 0;
    call {:si_unique_call 1439} CMC_NOTIFY_TYPE_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume CMC_NOTIFY_TYPE_GUID__Loc == CMC_NOTIFY_TYPE_GUID;
    assume CMC_NOTIFY_TYPE_GUID != 0;
    call {:si_unique_call 1440} GUID_POWERSCHEME_PERSONALITY__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_POWERSCHEME_PERSONALITY__Loc == GUID_POWERSCHEME_PERSONALITY;
    assume GUID_POWERSCHEME_PERSONALITY != 0;
    call {:si_unique_call 1441} MSNdis_ReceiveError_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_ReceiveError_GUID__Loc == MSNdis_ReceiveError_GUID;
    assume MSNdis_ReceiveError_GUID != 0;
    call {:si_unique_call 1442} MSNdis_80211_InfrastructureMode_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_80211_InfrastructureMode_GUID__Loc == MSNdis_80211_InfrastructureMode_GUID;
    assume MSNdis_80211_InfrastructureMode_GUID != 0;
    call {:si_unique_call 1443} MSNdis_80211_ReceiveAntennaSelected_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_80211_ReceiveAntennaSelected_GUID__Loc == MSNdis_80211_ReceiveAntennaSelected_GUID;
    assume MSNdis_80211_ReceiveAntennaSelected_GUID != 0;
    call {:si_unique_call 1444} MSNdis_StatusTaskOffloadChange_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_StatusTaskOffloadChange_GUID__Loc == MSNdis_StatusTaskOffloadChange_GUID;
    assume MSNdis_StatusTaskOffloadChange_GUID != 0;
    call {:si_unique_call 1445} MSStorageDriver_FailurePredictThresholds_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSStorageDriver_FailurePredictThresholds_GUID__Loc == MSStorageDriver_FailurePredictThresholds_GUID;
    assume MSStorageDriver_FailurePredictThresholds_GUID != 0;
    call {:si_unique_call 1446} FrequencyRangeDescriptor_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume FrequencyRangeDescriptor_GUID__Loc == FrequencyRangeDescriptor_GUID;
    assume FrequencyRangeDescriptor_GUID != 0;
    call {:si_unique_call 1447} MSSmBios_RawSMBiosTables_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSSmBios_RawSMBiosTables_GUID__Loc == MSSmBios_RawSMBiosTables_GUID;
    assume MSSmBios_RawSMBiosTables_GUID != 0;
    call {:si_unique_call 1448} MSNdis_WmiTcpLargeSendOffloadV1_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_WmiTcpLargeSendOffloadV1_GUID__Loc == MSNdis_WmiTcpLargeSendOffloadV1_GUID;
    assume MSNdis_WmiTcpLargeSendOffloadV1_GUID != 0;
    call {:si_unique_call 1449} MSNdis_SetTcpOffloadParameters_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_SetTcpOffloadParameters_GUID__Loc == MSNdis_SetTcpOffloadParameters_GUID;
    assume MSNdis_SetTcpOffloadParameters_GUID != 0;
    call {:si_unique_call 1450} MSNdis_CoTransmitPduErrors_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_CoTransmitPduErrors_GUID__Loc == MSNdis_CoTransmitPduErrors_GUID;
    assume MSNdis_CoTransmitPduErrors_GUID != 0;
    call {:si_unique_call 1451} GUID_IDLE_RESILIENCY_SUBGROUP__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_IDLE_RESILIENCY_SUBGROUP__Loc == GUID_IDLE_RESILIENCY_SUBGROUP;
    assume GUID_IDLE_RESILIENCY_SUBGROUP != 0;
    call {:si_unique_call 1452} GUID_ENABLE_SWITCH_FORCED_SHUTDOWN__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ENABLE_SWITCH_FORCED_SHUTDOWN__Loc == GUID_ENABLE_SWITCH_FORCED_SHUTDOWN;
    assume GUID_ENABLE_SWITCH_FORCED_SHUTDOWN != 0;
    call {:si_unique_call 1453} MSNdis_PciDeviceProperty_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_PciDeviceProperty_GUID__Loc == MSNdis_PciDeviceProperty_GUID;
    assume MSNdis_PciDeviceProperty_GUID != 0;
    call {:si_unique_call 1454} GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING__Loc == GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING;
    assume GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING != 0;
    call {:si_unique_call 1455} MSMCAEvent_MemoryError_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSMCAEvent_MemoryError_GUID__Loc == MSMCAEvent_MemoryError_GUID;
    assume MSMCAEvent_MemoryError_GUID != 0;
    call {:si_unique_call 1456} GUID_PROCESSOR_PERF_DECREASE_THRESHOLD__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_PROCESSOR_PERF_DECREASE_THRESHOLD__Loc == GUID_PROCESSOR_PERF_DECREASE_THRESHOLD;
    assume GUID_PROCESSOR_PERF_DECREASE_THRESHOLD != 0;
    call {:si_unique_call 1457} MSStorageDriver_FailurePredictEvent_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSStorageDriver_FailurePredictEvent_GUID__Loc == MSStorageDriver_FailurePredictEvent_GUID;
    assume MSStorageDriver_FailurePredictEvent_GUID != 0;
    call {:si_unique_call 1458} MSMCAEvent_SwitchToCPEPolling_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSMCAEvent_SwitchToCPEPolling_GUID__Loc == MSMCAEvent_SwitchToCPEPolling_GUID;
    assume MSMCAEvent_SwitchToCPEPolling_GUID != 0;
    call {:si_unique_call 1459} GUID_ACTIVE_POWERSCHEME__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_ACTIVE_POWERSCHEME__Loc == GUID_ACTIVE_POWERSCHEME;
    assume GUID_ACTIVE_POWERSCHEME != 0;
    call {:si_unique_call 1460} GUID_SYSTEM_AWAYMODE__Loc := __HAVOC_malloc_or_null(16);
    assume GUID_SYSTEM_AWAYMODE__Loc == GUID_SYSTEM_AWAYMODE;
    assume GUID_SYSTEM_AWAYMODE != 0;
    call {:si_unique_call 1461} MSNdis_CoDriverVersion_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_CoDriverVersion_GUID__Loc == MSNdis_CoDriverVersion_GUID;
    assume MSNdis_CoDriverVersion_GUID != 0;
    call {:si_unique_call 1462} MSNdis_CoLinkSpeed_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_CoLinkSpeed_GUID__Loc == MSNdis_CoLinkSpeed_GUID;
    assume MSNdis_CoLinkSpeed_GUID != 0;
    call {:si_unique_call 1463} MSNdis_StatusDevicePowerOff_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSNdis_StatusDevicePowerOff_GUID__Loc == MSNdis_StatusDevicePowerOff_GUID;
    assume MSNdis_StatusDevicePowerOff_GUID != 0;
    call {:si_unique_call 1464} VideoModeDescriptor_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume VideoModeDescriptor_GUID__Loc == VideoModeDescriptor_GUID;
    assume VideoModeDescriptor_GUID != 0;
    call {:si_unique_call 1465} MSTapeMediaCapacity_GUID__Loc := __HAVOC_malloc_or_null(16);
    assume MSTapeMediaCapacity_GUID__Loc == MSTapeMediaCapacity_GUID;
    assume MSTapeMediaCapacity_GUID != 0;
    call {:si_unique_call 1466} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 1467} boogieTmp := __HAVOC_malloc_or_null(20);
    call {:si_unique_call 1468} boogieTmp := __HAVOC_malloc_or_null(12);
    call {:si_unique_call 1469} boogieTmp := __HAVOC_malloc_or_null(8);
    call {:si_unique_call 1470} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 1471} boogieTmp := __HAVOC_malloc_or_null(20);
    call {:si_unique_call 1472} boogieTmp := __HAVOC_malloc_or_null(4);
    assume KdDebuggerNotPresent == boogieTmp;
    call {:si_unique_call 1473} boogieTmp := __HAVOC_malloc_or_null(4);
    assume KdDebuggerEnabled == boogieTmp;
    call {:si_unique_call 1474} boogieTmp := __HAVOC_malloc_or_null(12);
    call {:si_unique_call 1475} boogieTmp := __HAVOC_malloc_or_null(8);
    call {:si_unique_call 1476} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 1477} boogieTmp := __HAVOC_malloc_or_null(20);
    call {:si_unique_call 1478} boogieTmp := __HAVOC_malloc_or_null(12);
    call {:si_unique_call 1479} boogieTmp := __HAVOC_malloc_or_null(8);
    call {:si_unique_call 1480} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 1481} boogieTmp := __HAVOC_malloc_or_null(20);
    call {:si_unique_call 1482} boogieTmp := __HAVOC_malloc_or_null(12);
    call {:si_unique_call 1483} boogieTmp := __HAVOC_malloc_or_null(8);
    call {:si_unique_call 1484} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 1485} boogieTmp := __HAVOC_malloc_or_null(12);
    call {:si_unique_call 1486} boogieTmp := __HAVOC_malloc_or_null(8);
    call {:si_unique_call 1487} boogieTmp := __HAVOC_malloc_or_null(20);
    call {:si_unique_call 1488} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 1489} boogieTmp := __HAVOC_malloc_or_null(20);
    call {:si_unique_call 1490} boogieTmp := __HAVOC_malloc_or_null(12);
    call {:si_unique_call 1491} boogieTmp := __HAVOC_malloc_or_null(8);
    call {:si_unique_call 1492} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 1493} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 1494} boogieTmp := __HAVOC_malloc_or_null(20);
    call {:si_unique_call 1495} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 1496} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 1497} boogieTmp := __HAVOC_malloc_or_null(12);
    call {:si_unique_call 1498} boogieTmp := __HAVOC_malloc_or_null(8);
    call {:si_unique_call 1499} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 1500} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 1501} boogieTmp := __HAVOC_malloc_or_null(20);
    call {:si_unique_call 1502} boogieTmp := __HAVOC_malloc_or_null(12);
    call {:si_unique_call 1503} boogieTmp := __HAVOC_malloc_or_null(8);
    call {:si_unique_call 1504} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 1505} boogieTmp := __HAVOC_malloc_or_null(20);
    call {:si_unique_call 1506} boogieTmp := __HAVOC_malloc_or_null(12);
    call {:si_unique_call 1507} boogieTmp := __HAVOC_malloc_or_null(8);
    call {:si_unique_call 1508} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_harnessDeviceExtension_two == boogieTmp;
    call {:si_unique_call 1509} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 1510} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_pv3 == boogieTmp;
    call {:si_unique_call 1511} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_pv2 == boogieTmp;
    call {:si_unique_call 1512} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 1513} boogieTmp := __HAVOC_malloc_or_null(4);
    assume sdv_harnessDeviceExtension == boogieTmp;
    call {:si_unique_call 1514} boogieTmp := __HAVOC_malloc_or_null(4);
    assume igdoe == boogieTmp;
    call {:si_unique_call 1515} boogieTmp := __HAVOC_malloc_or_null(240);
    assume sicrni == boogieTmp;
    call {:si_unique_call 1516} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 1517} boogieTmp := __HAVOC_malloc_or_null(20);
    call {:si_unique_call 1518} boogieTmp := __HAVOC_malloc_or_null(12);
    call {:si_unique_call 1519} boogieTmp := __HAVOC_malloc_or_null(8);
    call {:si_unique_call 1520} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 1521} boogieTmp := __HAVOC_malloc_or_null(20);
    call {:si_unique_call 1522} boogieTmp := __HAVOC_malloc_or_null(12);
    call {:si_unique_call 1523} boogieTmp := __HAVOC_malloc_or_null(8);
    call {:si_unique_call 1524} boogieTmp := __HAVOC_malloc_or_null(20);
    call {:si_unique_call 1525} boogieTmp := __HAVOC_malloc_or_null(8);
    call {:si_unique_call 1526} boogieTmp := __HAVOC_malloc_or_null(12);
    call {:si_unique_call 1527} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 1528} boogieTmp := __HAVOC_malloc_or_null(12);
    call {:si_unique_call 1529} boogieTmp := __HAVOC_malloc_or_null(12);
    call {:si_unique_call 1530} boogieTmp := __HAVOC_malloc_or_null(4);
    call {:si_unique_call 1531} boogieTmp := __HAVOC_malloc_or_null(20);
    call {:si_unique_call 1532} boogieTmp := __HAVOC_malloc_or_null(12);
    call {:si_unique_call 1533} boogieTmp := __HAVOC_malloc_or_null(8);
    call {:si_unique_call 1534} vslice_dummy_var_223 := __HAVOC_malloc(216);
    call {:si_unique_call 1535} vslice_dummy_var_281 := __HAVOC_malloc(260);
    call {:si_unique_call 1536} vslice_dummy_var_282 := __HAVOC_malloc(96);
    call {:si_unique_call 1537} vslice_dummy_var_283 := __HAVOC_malloc(24);
    call {:si_unique_call 1538} vslice_dummy_var_224 := __HAVOC_malloc(216);
    call {:si_unique_call 1539} vslice_dummy_var_225 := __HAVOC_malloc(260);
    call {:si_unique_call 1540} vslice_dummy_var_226 := __HAVOC_malloc(96);
    call {:si_unique_call 1541} vslice_dummy_var_284 := __HAVOC_malloc(24);
    call {:si_unique_call 1542} vslice_dummy_var_227 := __HAVOC_malloc(216);
    call {:si_unique_call 1543} vslice_dummy_var_285 := __HAVOC_malloc(260);
    call {:si_unique_call 1544} vslice_dummy_var_286 := __HAVOC_malloc(96);
    call {:si_unique_call 1545} vslice_dummy_var_287 := __HAVOC_malloc(24);
    call {:si_unique_call 1546} vslice_dummy_var_228 := __HAVOC_malloc(216);
    call {:si_unique_call 1547} vslice_dummy_var_288 := __HAVOC_malloc(260);
    call {:si_unique_call 1548} vslice_dummy_var_289 := __HAVOC_malloc(96);
    call {:si_unique_call 1549} vslice_dummy_var_290 := __HAVOC_malloc(24);
    call {:si_unique_call 1550} vslice_dummy_var_229 := __HAVOC_malloc(216);
    call {:si_unique_call 1551} vslice_dummy_var_291 := __HAVOC_malloc(96);
    call {:si_unique_call 1552} vslice_dummy_var_292 := __HAVOC_malloc(24);
    call {:si_unique_call 1553} vslice_dummy_var_293 := __HAVOC_malloc(260);
    call {:si_unique_call 1554} vslice_dummy_var_230 := __HAVOC_malloc(216);
    call {:si_unique_call 1555} vslice_dummy_var_294 := __HAVOC_malloc(260);
    call {:si_unique_call 1556} vslice_dummy_var_295 := __HAVOC_malloc(96);
    call {:si_unique_call 1557} vslice_dummy_var_296 := __HAVOC_malloc(24);
    call {:si_unique_call 1558} vslice_dummy_var_231 := __HAVOC_malloc(16);
    call {:si_unique_call 1559} vslice_dummy_var_232 := __HAVOC_malloc(216);
    call {:si_unique_call 1560} vslice_dummy_var_297 := __HAVOC_malloc(260);
    call {:si_unique_call 1561} vslice_dummy_var_233 := __HAVOC_malloc(16);
    call {:si_unique_call 1562} vslice_dummy_var_298 := __HAVOC_malloc(96);
    call {:si_unique_call 1563} vslice_dummy_var_299 := __HAVOC_malloc(24);
    call {:si_unique_call 1564} vslice_dummy_var_234 := __HAVOC_malloc(16);
    call {:si_unique_call 1565} vslice_dummy_var_235 := __HAVOC_malloc(216);
    call {:si_unique_call 1566} vslice_dummy_var_300 := __HAVOC_malloc(260);
    call {:si_unique_call 1567} vslice_dummy_var_301 := __HAVOC_malloc(96);
    call {:si_unique_call 1568} vslice_dummy_var_302 := __HAVOC_malloc(24);
    call {:si_unique_call 1569} vslice_dummy_var_236 := __HAVOC_malloc(216);
    call {:si_unique_call 1570} vslice_dummy_var_303 := __HAVOC_malloc(260);
    call {:si_unique_call 1571} vslice_dummy_var_304 := __HAVOC_malloc(96);
    call {:si_unique_call 1572} vslice_dummy_var_305 := __HAVOC_malloc(24);
    call {:si_unique_call 1573} vslice_dummy_var_237 := __HAVOC_malloc(216);
    call {:si_unique_call 1574} vslice_dummy_var_306 := __HAVOC_malloc(260);
    call {:si_unique_call 1575} vslice_dummy_var_307 := __HAVOC_malloc(96);
    call {:si_unique_call 1576} vslice_dummy_var_308 := __HAVOC_malloc(24);
    call {:si_unique_call 1577} vslice_dummy_var_238 := __HAVOC_malloc(216);
    call {:si_unique_call 1578} vslice_dummy_var_309 := __HAVOC_malloc(260);
    call {:si_unique_call 1579} vslice_dummy_var_310 := __HAVOC_malloc(96);
    call {:si_unique_call 1580} vslice_dummy_var_311 := __HAVOC_malloc(24);
    call {:si_unique_call 1581} vslice_dummy_var_312 := __HAVOC_malloc(260);
    call {:si_unique_call 1582} vslice_dummy_var_313 := __HAVOC_malloc(24);
    call {:si_unique_call 1583} vslice_dummy_var_314 := __HAVOC_malloc(96);
    call {:si_unique_call 1584} vslice_dummy_var_239 := __HAVOC_malloc(216);
    call {:si_unique_call 1585} vslice_dummy_var_240 := __HAVOC_malloc(12);
    call {:si_unique_call 1586} vslice_dummy_var_241 := __HAVOC_malloc(24);
    call {:si_unique_call 1587} vslice_dummy_var_242 := __HAVOC_malloc(216);
    call {:si_unique_call 1588} vslice_dummy_var_315 := __HAVOC_malloc(260);
    call {:si_unique_call 1589} vslice_dummy_var_316 := __HAVOC_malloc(96);
    call {:si_unique_call 1590} vslice_dummy_var_317 := __HAVOC_malloc(24);
    assume {:mainInitDone} true;
    call {:si_unique_call 1591} corralExtraInit();
    call {:si_unique_call 1592} corralExplainErrorInit();
    call {:si_unique_call 1593} _sdv_init16();
    call {:si_unique_call 1594} _sdv_init1();
    call {:si_unique_call 1595} _sdv_init4();
    call {:si_unique_call 1596} _sdv_init5();
    call {:si_unique_call 1597} _sdv_init3();
    call {:si_unique_call 1598} _sdv_init14();
    call {:si_unique_call 1599} _sdv_init6();
    call {:si_unique_call 1600} _sdv_init10();
    call {:si_unique_call 1601} _sdv_init11();
    call {:si_unique_call 1602} _sdv_init9();
    call {:si_unique_call 1603} _sdv_init12();
    call {:si_unique_call 1604} _sdv_init13();
    call {:si_unique_call 1605} _sdv_init7();
    call {:si_unique_call 1606} _sdv_init8();
    call {:si_unique_call 1607} _sdv_init2();
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} sdv_harnessDeviceExtension == 0;
    Tmp_709 := 0;
    goto L39;

  L39:
    assume Tmp_709 != 0;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} sdv_harnessDeviceExtension_two == 0;
    Tmp_711 := 0;
    goto L43;

  L43:
    assume Tmp_711 != 0;
    assume {:nonnull} sdv_irp != 0;
    assume sdv_irp > 0;
    assume {:nonnull} sdv_other_irp != 0;
    assume sdv_other_irp > 0;
    call {:si_unique_call 1608} sdv_main();
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error == 1;
    goto L37;

  L37:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume yogi_error == 1;
    dup_assertVar := false;
    goto L_BAF_0, L_BAF_1;

  L_BAF_1:
    assume dup_assertVar;
    goto L_BAF_2;

  L_BAF_2:
    return;

  L_BAF_0:
    assume !dup_assertVar;
    return;

  anon11_Then:
    assume yogi_error == 0;
    goto LM2;

  LM2:
    return;

  anon12_Then:
    assume {:partition} yogi_error != 1;
    goto L37;

  anon10_Then:
    assume {:partition} sdv_harnessDeviceExtension_two != 0;
    Tmp_711 := 1;
    goto L43;

  anon9_Then:
    assume {:partition} sdv_harnessDeviceExtension != 0;
    Tmp_709 := 1;
    goto L39;
}



procedure {:origName "ZwSetValueKey"} {:osmodel} ZwSetValueKey(actual_KeyHandle: int, actual_ValueName: int, actual_TitleIndex: int, actual_Type_1: int, actual_Data: int, actual_DataSize: int) returns (Tmp_712: int);
  free ensures Tmp_712 == -1073741790 || Tmp_712 == -1073741816 || Tmp_712 == -1073741823 || Tmp_712 == 0;



implementation {:origName "ZwSetValueKey"} {:osmodel} ZwSetValueKey(actual_KeyHandle: int, actual_ValueName: int, actual_TitleIndex: int, actual_Type_1: int, actual_Data: int, actual_DataSize: int) returns (Tmp_712: int)
{

  anon0:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    Tmp_712 := -1073741790;
    goto L1;

  L1:
    return;

  anon8_Then:
    Tmp_712 := -1073741816;
    goto L1;

  anon9_Then:
    Tmp_712 := -1073741823;
    goto L1;

  anon7_Then:
    Tmp_712 := 0;
    goto L1;
}



procedure {:origName "sdv_ExQueueWorkItem"} {:osmodel} sdv_ExQueueWorkItem(actual_WorkItem: int, actual_QueueType_2: int);
  modifies alloc;



implementation {:origName "sdv_ExQueueWorkItem"} {:osmodel} sdv_ExQueueWorkItem(actual_WorkItem: int, actual_QueueType_2: int)
{
  var {:pointer} WorkItem: int;
  var vslice_dummy_var_169: int;
  var vslice_dummy_var_243: int;

  anon0:
    call {:si_unique_call 1609} vslice_dummy_var_169 := __HAVOC_malloc(4);
    WorkItem := actual_WorkItem;
    assume {:nonnull} WorkItem != 0;
    assume WorkItem > 0;
    havoc vslice_dummy_var_243;
    call {:si_unique_call 1610} sdv_RunExQueueWorkItems(vslice_dummy_var_243, 0);
    return;
}



procedure {:origName "sdv_IoSkipCurrentIrpStackLocation"} {:osmodel} sdv_IoSkipCurrentIrpStackLocation(actual_pirp_9: int);
  modifies alloc;



implementation {:origName "sdv_IoSkipCurrentIrpStackLocation"} {:osmodel} sdv_IoSkipCurrentIrpStackLocation(actual_pirp_9: int)
{
  var {:pointer} pirp_9: int;
  var vslice_dummy_var_170: int;

  anon0:
    call {:si_unique_call 1611} vslice_dummy_var_170 := __HAVOC_malloc(4);
    pirp_9 := actual_pirp_9;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} pirp_9 == sdv_harnessIrp;
    goto L4;

  L4:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} pirp_9 == sdv_other_harnessIrp;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} pirp_9 != sdv_other_harnessIrp;
    goto L1;

  anon5_Then:
    assume {:partition} pirp_9 != sdv_harnessIrp;
    goto L4;
}



procedure {:origName "sdv_InterlockedDecrement"} {:osmodel} sdv_InterlockedDecrement(actual_Addend: int) returns (Tmp_718: int);



implementation {:origName "sdv_InterlockedDecrement"} {:osmodel} sdv_InterlockedDecrement(actual_Addend: int) returns (Tmp_718: int)
{
  var {:pointer} Addend: int;

  anon0:
    Addend := actual_Addend;
    assume {:nonnull} Addend != 0;
    assume Addend > 0;
    assume {:nonnull} Addend != 0;
    assume Addend > 0;
    havoc Tmp_718;
    return;
}



procedure {:origName "DbgBreakPointWithStatus"} {:osmodel} DbgBreakPointWithStatus(actual_Status: int);
  modifies alloc;



implementation {:origName "DbgBreakPointWithStatus"} {:osmodel} DbgBreakPointWithStatus(actual_Status: int)
{
  var vslice_dummy_var_171: int;

  anon0:
    call {:si_unique_call 1612} vslice_dummy_var_171 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "RtlInitUnicodeString"} {:osmodel} RtlInitUnicodeString(actual_DestinationString: int, actual_SourceString: int);
  modifies alloc;



implementation {:origName "RtlInitUnicodeString"} {:osmodel} RtlInitUnicodeString(actual_DestinationString: int, actual_SourceString: int)
{
  var {:pointer} DestinationString: int;
  var {:pointer} SourceString: int;
  var vslice_dummy_var_172: int;

  anon0:
    call {:si_unique_call 1613} vslice_dummy_var_172 := __HAVOC_malloc(4);
    DestinationString := actual_DestinationString;
    SourceString := actual_SourceString;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} DestinationString != 0;
    assume {:nonnull} DestinationString != 0;
    assume DestinationString > 0;
    assume {:nonnull} DestinationString != 0;
    assume DestinationString > 0;
    goto L4;

  L4:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} SourceString == 0;
    assume {:nonnull} DestinationString != 0;
    assume DestinationString > 0;
    assume {:nonnull} DestinationString != 0;
    assume DestinationString > 0;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} SourceString != 0;
    goto L1;

  anon5_Then:
    assume {:partition} DestinationString == 0;
    goto L4;
}



procedure {:origName "sdv_IoRequestDpc"} {:osmodel} sdv_IoRequestDpc(actual_DeviceObject_22: int, actual_Irp_12: int, actual_Context_7: int);
  modifies alloc, yogi_error, Mem_T.CompletionRoutine__IO_STACK_LOCATION;
  free ensures yogi_error == 0;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "sdv_IoRequestDpc"} {:osmodel} sdv_IoRequestDpc(actual_DeviceObject_22: int, actual_Irp_12: int, actual_Context_7: int)
{
  var {:pointer} DeviceObject_22: int;
  var {:pointer} Irp_12: int;
  var {:pointer} Context_7: int;
  var vslice_dummy_var_173: int;

  anon0:
    call {:si_unique_call 1614} vslice_dummy_var_173 := __HAVOC_malloc(4);
    DeviceObject_22 := actual_DeviceObject_22;
    Irp_12 := actual_Irp_12;
    Context_7 := actual_Context_7;
    call {:si_unique_call 1615} sdv_RunIoDpcRoutines(Context_7, DeviceObject_22, Irp_12, Context_7);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "IoGetAttachedDeviceReference"} {:osmodel} IoGetAttachedDeviceReference(actual_DeviceObject_23: int) returns (Tmp_726: int);



implementation {:origName "IoGetAttachedDeviceReference"} {:osmodel} IoGetAttachedDeviceReference(actual_DeviceObject_23: int) returns (Tmp_726: int)
{
  var {:pointer} DeviceObject_23: int;

  anon0:
    DeviceObject_23 := actual_DeviceObject_23;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_726 := sdv_p_devobj_top;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_726 := DeviceObject_23;
    goto L1;
}



procedure {:origName "_sdv_init14"} {:osmodel} _sdv_init14();
  modifies alloc;



implementation {:origName "_sdv_init14"} {:osmodel} _sdv_init14()
{
  var vslice_dummy_var_174: int;

  anon0:
    call {:si_unique_call 1616} vslice_dummy_var_174 := __HAVOC_malloc(4);
    assume sdv_apc_disabled == 0;
    assume sdv_ControllerPirp == sdv_ControllerIrp;
    assume sdv_StartIopirp == sdv_StartIoIrp;
    assume sdv_power_irp == sdv_PowerIrp;
    assume sdv_irp == sdv_harnessIrp;
    assume sdv_other_irp == sdv_other_harnessIrp;
    assume sdv_IoMakeAssociatedIrp_irp == sdv_IoMakeAssociatedIrp_harnessIrp;
    assume sdv_IoBuildDeviceIoControlRequest_irp == sdv_IoBuildDeviceIoControlRequest_harnessIrp;
    assume sdv_IoBuildSynchronousFsdRequest_irp == sdv_IoBuildSynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock == sdv_harness_IoBuildSynchronousFsdRequest_IoStatusBlock;
    assume sdv_IoBuildAsynchronousFsdRequest_irp == sdv_IoBuildAsynchronousFsdRequest_harnessIrp;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock == sdv_harness_IoBuildAsynchronousFsdRequest_IoStatusBlock;
    assume sdv_IoInitializeIrp_irp == sdv_IoInitializeIrp_harnessIrp;
    assume sdv_io_create_device_called == 0;
    assume sdv_maskedEflags == 0;
    assume sdv_p_devobj_fdo == sdv_devobj_fdo;
    assume sdv_inside_init_entrypoint == 0;
    assume sdv_p_devobj_pdo == sdv_devobj_pdo;
    assume sdv_p_devobj_child_pdo == sdv_devobj_child_pdo;
    assume sdv_kinterrupt == sdv_kinterrupt_val;
    assume sdv_MapRegisterBase == sdv_MapRegisterBase_val;
    assume p_sdv_fx_dev_object == sdv_fx_dev_object;
    assume sdv_start_irp_already_issued == 0;
    assume sdv_ke_dpc == li2bplFunctionConstant1134;
    assume sdv_io_dpc == li2bplFunctionConstant1137;
    assume sdv_p_devobj_top == sdv_devobj_top;
    return;
}



procedure {:origName "sdv_RtlZeroMemory"} {:osmodel} sdv_RtlZeroMemory(actual_Destination_2: int, actual_Length_1: int);
  modifies alloc;



implementation {:origName "sdv_RtlZeroMemory"} {:osmodel} sdv_RtlZeroMemory(actual_Destination_2: int, actual_Length_1: int)
{
  var vslice_dummy_var_175: int;

  anon0:
    call {:si_unique_call 1617} vslice_dummy_var_175 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "ExReleaseFastMutexUnsafe"} {:osmodel} ExReleaseFastMutexUnsafe(actual_FastMutex_1: int);
  modifies alloc;



implementation {:origName "ExReleaseFastMutexUnsafe"} {:osmodel} ExReleaseFastMutexUnsafe(actual_FastMutex_1: int)
{
  var vslice_dummy_var_176: int;

  anon0:
    call {:si_unique_call 1618} vslice_dummy_var_176 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_do_paged_code_check"} {:osmodel} sdv_do_paged_code_check();
  modifies alloc;



implementation {:origName "sdv_do_paged_code_check"} {:osmodel} sdv_do_paged_code_check()
{
  var vslice_dummy_var_177: int;

  anon0:
    call {:si_unique_call 1619} vslice_dummy_var_177 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "IoInvalidateDeviceState"} {:osmodel} IoInvalidateDeviceState(actual_PhysicalDeviceObject: int);
  modifies alloc;



implementation {:origName "IoInvalidateDeviceState"} {:osmodel} IoInvalidateDeviceState(actual_PhysicalDeviceObject: int)
{
  var vslice_dummy_var_178: int;

  anon0:
    call {:si_unique_call 1620} vslice_dummy_var_178 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_KeLowerIrql"} {:osmodel} sdv_KeLowerIrql(actual_NewIrql: int);
  modifies alloc;



implementation {:origName "sdv_KeLowerIrql"} {:osmodel} sdv_KeLowerIrql(actual_NewIrql: int)
{
  var {:scalar} NewIrql: int;
  var vslice_dummy_var_179: int;

  anon0:
    call {:si_unique_call 1621} vslice_dummy_var_179 := __HAVOC_malloc(4);
    NewIrql := actual_NewIrql;
    return;
}



procedure {:origName "IoQueryDeviceDescription"} {:osmodel} IoQueryDeviceDescription(actual_BusType: int, actual_BusNumber: int, actual_ControllerType: int, actual_ControllerNumber: int, actual_PeripheralType: int, actual_PeripheralNumber: int, actual_CalloutRoutine: int, actual_Context_8: int) returns (Tmp_740: int);
  free ensures Tmp_740 == 0 || Tmp_740 == -1073741823;



implementation {:origName "IoQueryDeviceDescription"} {:osmodel} IoQueryDeviceDescription(actual_BusType: int, actual_BusNumber: int, actual_ControllerType: int, actual_ControllerNumber: int, actual_PeripheralType: int, actual_PeripheralNumber: int, actual_CalloutRoutine: int, actual_Context_8: int) returns (Tmp_740: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_740 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_740 := -1073741823;
    goto L1;
}



procedure {:origName "sdv_IoMarkIrpPending"} {:osmodel} sdv_IoMarkIrpPending(actual_pirp_10: int);
  modifies alloc;



implementation {:origName "sdv_IoMarkIrpPending"} {:osmodel} sdv_IoMarkIrpPending(actual_pirp_10: int)
{
  var vslice_dummy_var_180: int;

  anon0:
    call {:si_unique_call 1622} vslice_dummy_var_180 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_stub_WmiIrpNotCompleted"} {:osmodel} sdv_stub_WmiIrpNotCompleted(actual_pirp_11: int);
  modifies alloc;



implementation {:origName "sdv_stub_WmiIrpNotCompleted"} {:osmodel} sdv_stub_WmiIrpNotCompleted(actual_pirp_11: int)
{
  var vslice_dummy_var_181: int;

  anon0:
    call {:si_unique_call 1623} vslice_dummy_var_181 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RunDispatchFunction"} {:osmodel} sdv_RunDispatchFunction(actual_po: int, actual_pirp_12: int) returns (Tmp_746: int);
  modifies alloc, Mem_T.CompletionRoutine__IO_STACK_LOCATION, forward_state, s, yogi_error;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "sdv_RunDispatchFunction"} {:osmodel} sdv_RunDispatchFunction(actual_po: int, actual_pirp_12: int) returns (Tmp_746: int)
{
  var {:pointer} ps: int;
  var {:scalar} minor: int;
  var {:scalar} Tmp_747: int;
  var {:scalar} Tmp_748: int;
  var {:scalar} sdv_362: int;
  var {:scalar} status_33: int;
  var {:pointer} po: int;
  var {:pointer} pirp_12: int;

  anon0:
    po := actual_po;
    pirp_12 := actual_pirp_12;
    status_33 := 0;
    minor := sdv_362;
    assume {:nonnull} pirp_12 != 0;
    assume pirp_12 > 0;
    havoc ps;
    assume {:nonnull} pirp_12 != 0;
    assume pirp_12 > 0;
    assume {:nonnull} pirp_12 != 0;
    assume pirp_12 > 0;
    call {:si_unique_call 1624} sdv_SetStatus(pirp_12);
    assume {:nonnull} pirp_12 != 0;
    assume pirp_12 > 0;
    assume {:nonnull} pirp_12 != 0;
    assume pirp_12 > 0;
    assume {:nonnull} ps != 0;
    assume ps > 0;
    assume {:nonnull} ps != 0;
    assume ps > 0;
    Mem_T.CompletionRoutine__IO_STACK_LOCATION[CompletionRoutine__IO_STACK_LOCATION(ps)] := 0;
    Mem_T.CompletionRoutine__IO_STACK_LOCATION[CompletionRoutine__IO_STACK_LOCATION(sdv_harnessStackLocation_next)] := 0;
    Mem_T.CompletionRoutine__IO_STACK_LOCATION[CompletionRoutine__IO_STACK_LOCATION(sdv_other_harnessStackLocation_next)] := 0;
    Mem_T.CompletionRoutine__IO_STACK_LOCATION[CompletionRoutine__IO_STACK_LOCATION(sdv_harnessStackLocation)] := 0;
    call {:si_unique_call 1625} sdv_stub_dispatch_begin();
    goto anon59_Then, anon59_Else;

  anon59_Else:
    goto anon78_Then, anon78_Else;

  anon78_Else:
    goto anon77_Then, anon77_Else;

  anon77_Else:
    goto anon76_Then, anon76_Else;

  anon76_Else:
    goto anon75_Then, anon75_Else;

  anon75_Else:
    goto anon74_Then, anon74_Else;

  anon74_Else:
    goto anon73_Then, anon73_Else;

  anon73_Else:
    goto anon72_Then, anon72_Else;

  anon72_Else:
    goto anon71_Then, anon71_Else;

  anon71_Else:
    goto anon70_Then, anon70_Else;

  anon70_Else:
    goto anon69_Then, anon69_Else;

  anon69_Else:
    goto anon68_Then, anon68_Else;

  anon68_Else:
    goto anon67_Then, anon67_Else;

  anon67_Else:
    goto anon66_Then, anon66_Else;

  anon66_Else:
    goto anon65_Then, anon65_Else;

  anon65_Else:
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    assume {:nonnull} ps != 0;
    assume ps > 0;
    goto anon86_Then, anon86_Else;

  anon86_Else:
    goto L60;

  L60:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    goto anon61_Then, anon61_Else;

  anon61_Else:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    Tmp_748 := 0;
    goto L215;

  L215:
    assume Tmp_748 != 0;
    goto L61;

  L61:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    goto L66;

  L66:
    call {:si_unique_call 1626} status_33 := I8xPnP(po, pirp_12);
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  L72:
    call {:si_unique_call 1627} sdv_stub_dispatch_end(status_33, 0);
    assume {:nonnull} pirp_12 != 0;
    assume pirp_12 > 0;
    Tmp_746 := status_33;
    goto LM2;

  LM2:
    return;

  anon87_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon62_Then:
    goto L66;

  anon63_Then:
    Tmp_748 := 1;
    goto L215;

  anon61_Then:
    goto L61;

  anon86_Then:
    goto anon60_Then, anon60_Else;

  anon60_Else:
    assume {:partition} sdv_start_irp_already_issued != 0;
    Tmp_747 := 0;
    goto L221;

  L221:
    assume Tmp_747 != 0;
    goto L60;

  anon60_Then:
    assume {:partition} sdv_start_irp_already_issued == 0;
    Tmp_747 := 1;
    goto L221;

  anon64_Then:
    call {:si_unique_call 1628} status_33 := sdv_DoNothing();
    goto L72;

  anon65_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1629} status_33 := I8xSystemControl(po, pirp_12);
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon85_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon66_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1630} sdv_SetPowerIrpMinorFunction(pirp_12);
    call {:si_unique_call 1631} status_33 := I8xPower(po, pirp_12);
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon84_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon67_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1632} status_33 := sdv_DoNothing();
    goto L72;

  anon68_Then:
    call {:si_unique_call 1633} status_33 := sdv_DoNothing();
    goto L72;

  anon69_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1634} status_33 := sdv_DoNothing();
    goto L72;

  anon70_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1635} status_33 := I8xInternalDeviceControl(po, pirp_12);
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon83_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon71_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1636} status_33 := I8xDeviceControl(po, pirp_12);
    goto anon82_Then, anon82_Else;

  anon82_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon82_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon72_Then:
    call {:si_unique_call 1637} status_33 := sdv_DoNothing();
    goto L72;

  anon73_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1638} status_33 := I8xFlush(po, pirp_12);
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon81_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon74_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1639} status_33 := sdv_DoNothing();
    goto L72;

  anon75_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1640} status_33 := sdv_DoNothing();
    goto L72;

  anon76_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1641} status_33 := sdv_DoNothing();
    goto L72;

  anon77_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1642} status_33 := sdv_DoNothing();
    goto L72;

  anon78_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1643} status_33 := I8xClose(po, pirp_12);
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon80_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon59_Then:
    assume {:nonnull} ps != 0;
    assume ps > 0;
    call {:si_unique_call 1644} status_33 := I8xCreate(po, pirp_12);
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} yogi_error != 1;
    goto L72;

  anon79_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "RtlFreeUnicodeString"} {:osmodel} RtlFreeUnicodeString(actual_UnicodeString: int);
  modifies alloc;



implementation {:origName "RtlFreeUnicodeString"} {:osmodel} RtlFreeUnicodeString(actual_UnicodeString: int)
{
  var vslice_dummy_var_182: int;

  anon0:
    call {:si_unique_call 1645} vslice_dummy_var_182 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "IoRegisterDeviceInterface"} {:osmodel} IoRegisterDeviceInterface(actual_PhysicalDeviceObject_1: int, actual_InterfaceClassGuid: int, actual_ReferenceString: int, actual_SymbolicLinkName: int) returns (Tmp_752: int);
  free ensures Tmp_752 == -1073741823 || Tmp_752 == -1073741808 || Tmp_752 == 0;



implementation {:origName "IoRegisterDeviceInterface"} {:osmodel} IoRegisterDeviceInterface(actual_PhysicalDeviceObject_1: int, actual_InterfaceClassGuid: int, actual_ReferenceString: int, actual_SymbolicLinkName: int) returns (Tmp_752: int)
{
  var {:scalar} Tmp_754: int;
  var {:pointer} SymbolicLinkName: int;

  anon0:
    SymbolicLinkName := actual_SymbolicLinkName;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    Tmp_752 := -1073741823;
    goto L1;

  L1:
    return;

  anon9_Then:
    Tmp_752 := -1073741808;
    goto L1;

  anon7_Then:
    assume {:nonnull} SymbolicLinkName != 0;
    assume SymbolicLinkName > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    Tmp_754 := 0;
    goto L22;

  L22:
    assume Tmp_754 != 0;
    Tmp_752 := 0;
    goto L1;

  anon8_Then:
    Tmp_754 := 1;
    goto L22;
}



procedure {:origName "IoRegisterPlugPlayNotification"} {:osmodel} IoRegisterPlugPlayNotification(actual_EventCategory: int, actual_EventCategoryFlags: int, actual_EventCategoryData: int, actual_DriverObject: int, actual_CallbackRoutine: int, actual_Context_9: int, actual_NotificationEntry_1: int) returns (Tmp_755: int);
  free ensures Tmp_755 == 0 || Tmp_755 == -1073741823;



implementation {:origName "IoRegisterPlugPlayNotification"} {:osmodel} IoRegisterPlugPlayNotification(actual_EventCategory: int, actual_EventCategoryFlags: int, actual_EventCategoryData: int, actual_DriverObject: int, actual_CallbackRoutine: int, actual_Context_9: int, actual_NotificationEntry_1: int) returns (Tmp_755: int)
{

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    Tmp_755 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_755 := -1073741823;
    goto L1;
}



procedure {:origName "sdv_KeReleaseSpinLock"} {:osmodel} sdv_KeReleaseSpinLock(actual_SpinLock_3: int, actual_new_1: int);
  modifies alloc;



implementation {:origName "sdv_KeReleaseSpinLock"} {:osmodel} sdv_KeReleaseSpinLock(actual_SpinLock_3: int, actual_new_1: int)
{
  var {:scalar} new_1: int;
  var vslice_dummy_var_183: int;

  anon0:
    call {:si_unique_call 1646} vslice_dummy_var_183 := __HAVOC_malloc(4);
    new_1 := actual_new_1;
    return;
}



procedure {:origName "sdv_IoCompleteRequest"} {:osmodel} sdv_IoCompleteRequest(actual_pirp_13: int, actual_PriorityBoost: int);
  modifies alloc;



implementation {:origName "sdv_IoCompleteRequest"} {:osmodel} sdv_IoCompleteRequest(actual_pirp_13: int, actual_PriorityBoost: int)
{
  var vslice_dummy_var_184: int;

  anon0:
    call {:si_unique_call 1647} vslice_dummy_var_184 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RtlCopyMemory"} {:osmodel} sdv_RtlCopyMemory(actual_Destination_3: int, actual_Source_2: int, actual_Length_2: int);
  modifies alloc;



implementation {:origName "sdv_RtlCopyMemory"} {:osmodel} sdv_RtlCopyMemory(actual_Destination_3: int, actual_Source_2: int, actual_Length_2: int)
{
  var vslice_dummy_var_185: int;

  anon0:
    call {:si_unique_call 1648} vslice_dummy_var_185 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RunIoDpcRoutines"} {:osmodel} sdv_RunIoDpcRoutines(actual_Dpc_9: int, actual_DeviceObject_24: int, actual_Irp_13: int, actual_Context_10: int);
  modifies alloc, yogi_error, Mem_T.CompletionRoutine__IO_STACK_LOCATION;
  free ensures yogi_error == 0;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "sdv_RunIoDpcRoutines"} {:osmodel} sdv_RunIoDpcRoutines(actual_Dpc_9: int, actual_DeviceObject_24: int, actual_Irp_13: int, actual_Context_10: int)
{
  var {:pointer} Dpc_9: int;
  var {:pointer} DeviceObject_24: int;
  var {:pointer} Irp_13: int;
  var {:pointer} Context_10: int;
  var vslice_dummy_var_186: int;

  anon0:
    call {:si_unique_call 1649} vslice_dummy_var_186 := __HAVOC_malloc(4);
    Dpc_9 := actual_Dpc_9;
    DeviceObject_24 := actual_DeviceObject_24;
    Irp_13 := actual_Irp_13;
    Context_10 := actual_Context_10;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} sdv_io_dpc == li2bplFunctionConstant189;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    call {:si_unique_call 1650} I8042CompletionDpc(Dpc_9, DeviceObject_24, Irp_13, Context_10);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon8_Then:
    goto L1;

  anon7_Then:
    assume {:partition} sdv_io_dpc != li2bplFunctionConstant189;
    goto L1;
}



procedure {:origName "MmMapIoSpace"} {:osmodel} MmMapIoSpace(actual_structPtr888PhysicalAddress: int, actual_NumberOfBytes: int, actual_CacheType: int) returns (Tmp_765: int);
  modifies alloc;



implementation {:origName "MmMapIoSpace"} {:osmodel} MmMapIoSpace(actual_structPtr888PhysicalAddress: int, actual_NumberOfBytes: int, actual_CacheType: int) returns (Tmp_765: int)
{
  var {:scalar} PhysicalAddress: int;
  var {:pointer} structPtr888PhysicalAddress: int;

  anon0:
    call {:si_unique_call 1651} PhysicalAddress := __HAVOC_malloc(20);
    structPtr888PhysicalAddress := actual_structPtr888PhysicalAddress;
    assume {:nonnull} PhysicalAddress != 0;
    assume PhysicalAddress > 0;
    assume {:nonnull} structPtr888PhysicalAddress != 0;
    assume structPtr888PhysicalAddress > 0;
    assume {:nonnull} PhysicalAddress != 0;
    assume PhysicalAddress > 0;
    assume {:nonnull} structPtr888PhysicalAddress != 0;
    assume structPtr888PhysicalAddress > 0;
    assume {:nonnull} PhysicalAddress != 0;
    assume PhysicalAddress > 0;
    assume {:nonnull} structPtr888PhysicalAddress != 0;
    assume structPtr888PhysicalAddress > 0;
    assume {:nonnull} PhysicalAddress != 0;
    assume PhysicalAddress > 0;
    assume {:nonnull} structPtr888PhysicalAddress != 0;
    assume structPtr888PhysicalAddress > 0;
    assume {:nonnull} PhysicalAddress != 0;
    assume PhysicalAddress > 0;
    assume {:nonnull} structPtr888PhysicalAddress != 0;
    assume structPtr888PhysicalAddress > 0;
    Tmp_765 := sdv_MmMapIoSpace_int;
    return;
}



procedure {:origName "sdv_stub_WmiIrpForward"} {:osmodel} sdv_stub_WmiIrpForward(actual_pirp_14: int);
  modifies alloc;



implementation {:origName "sdv_stub_WmiIrpForward"} {:osmodel} sdv_stub_WmiIrpForward(actual_pirp_14: int)
{
  var vslice_dummy_var_187: int;

  anon0:
    call {:si_unique_call 1652} vslice_dummy_var_187 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_RunExQueueWorkItems"} {:osmodel} sdv_RunExQueueWorkItems(actual_WorkerRoutine_2: int, actual_Context_11: int);
  modifies alloc;



implementation {:origName "sdv_RunExQueueWorkItems"} {:osmodel} sdv_RunExQueueWorkItems(actual_WorkerRoutine_2: int, actual_Context_11: int)
{
  var vslice_dummy_var_188: int;

  anon0:
    call {:si_unique_call 1653} vslice_dummy_var_188 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "KeSynchronizeExecution"} {:osmodel} KeSynchronizeExecution(actual_Interrupt_2: int, actual_SynchronizeRoutine: int, actual_SynchronizeContext: int) returns (Tmp_771: int);
  free ensures Tmp_771 == 1 || Tmp_771 == 0;



implementation {:origName "KeSynchronizeExecution"} {:osmodel} KeSynchronizeExecution(actual_Interrupt_2: int, actual_SynchronizeRoutine: int, actual_SynchronizeContext: int) returns (Tmp_771: int)
{
  var {:scalar} b: int;

  anon0:
    call {:si_unique_call 1654} b := OneOfTwoBOOLEAN();
    Tmp_771 := b;
    return;
}



procedure {:origName "sdv_ExFreePool"} {:osmodel} sdv_ExFreePool(actual_P: int);
  modifies alloc;



implementation {:origName "sdv_ExFreePool"} {:osmodel} sdv_ExFreePool(actual_P: int)
{
  var vslice_dummy_var_189: int;

  anon0:
    call {:si_unique_call 1655} vslice_dummy_var_189 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_stub_WmiIrpProcessed"} {:osmodel} sdv_stub_WmiIrpProcessed(actual_pirp_15: int);
  modifies alloc;



implementation {:origName "sdv_stub_WmiIrpProcessed"} {:osmodel} sdv_stub_WmiIrpProcessed(actual_pirp_15: int)
{
  var vslice_dummy_var_190: int;

  anon0:
    call {:si_unique_call 1656} vslice_dummy_var_190 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IoAcquireRemoveLock"} {:osmodel} sdv_IoAcquireRemoveLock(actual_RemoveLock_1: int, actual_Tag_1: int) returns (Tmp_779: int);
  free ensures Tmp_779 == -1073741823 || Tmp_779 == -1073741738 || Tmp_779 == 0;



implementation {:origName "sdv_IoAcquireRemoveLock"} {:osmodel} sdv_IoAcquireRemoveLock(actual_RemoveLock_1: int, actual_Tag_1: int) returns (Tmp_779: int)
{

  anon0:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    Tmp_779 := -1073741823;
    goto L1;

  L1:
    return;

  anon5_Then:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    Tmp_779 := -1073741738;
    goto L1;

  anon6_Then:
    Tmp_779 := 0;
    goto L1;
}



procedure {:origName "sdv_InterlockedIncrement"} {:osmodel} sdv_InterlockedIncrement(actual_Addend_1: int) returns (Tmp_781: int);



implementation {:origName "sdv_InterlockedIncrement"} {:osmodel} sdv_InterlockedIncrement(actual_Addend_1: int) returns (Tmp_781: int)
{
  var {:pointer} Addend_1: int;

  anon0:
    Addend_1 := actual_Addend_1;
    assume {:nonnull} Addend_1 != 0;
    assume Addend_1 > 0;
    assume {:nonnull} Addend_1 != 0;
    assume Addend_1 > 0;
    havoc Tmp_781;
    return;
}



procedure {:origName "IoAllocateIrp"} {:osmodel} IoAllocateIrp(actual_StackSize: int, actual_ChargeQuota: int) returns (Tmp_783: int);
  modifies Mem_T.CompletionRoutine__IO_STACK_LOCATION;



implementation {:origName "IoAllocateIrp"} {:osmodel} IoAllocateIrp(actual_StackSize: int, actual_ChargeQuota: int) returns (Tmp_783: int)
{
  var {:pointer} irpSp_1: int;

  anon0:
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} sdv_other_irp != 0;
    assume sdv_other_irp > 0;
    call {:si_unique_call 1657} irpSp_1 := sdv_IoGetNextIrpStackLocation(sdv_other_irp);
    assume {:nonnull} irpSp_1 != 0;
    assume irpSp_1 > 0;
    Mem_T.CompletionRoutine__IO_STACK_LOCATION[CompletionRoutine__IO_STACK_LOCATION(irpSp_1)] := 0;
    Tmp_783 := sdv_other_irp;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_783 := 0;
    goto L1;
}



procedure {:origName "IofCallDriver"} {:osmodel} IofCallDriver(actual_DeviceObject_25: int, actual_Irp_14: int) returns (Tmp_785: int);
  modifies alloc, s, yogi_error;
  free ensures old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "IofCallDriver"} {:osmodel} IofCallDriver(actual_DeviceObject_25: int, actual_Irp_14: int) returns (Tmp_785: int)
{
  var {:dopa} {:scalar} completion_1: int;
  var {:scalar} sdv_380: int;
  var {:scalar} sdv_381: int;
  var {:scalar} sdv_382: int;
  var {:scalar} sdv_383: int;
  var {:scalar} status_34: int;
  var {:pointer} Irp_14: int;
  var vslice_dummy_var_244: int;
  var vslice_dummy_var_245: int;
  var vslice_dummy_var_246: int;
  var vslice_dummy_var_247: int;

  anon0:
    call {:si_unique_call 1658} completion_1 := __HAVOC_malloc(4);
    Irp_14 := actual_Irp_14;
    assume {:nonnull} completion_1 != 0;
    assume completion_1 > 0;
    status_34 := 259;
    goto anon82_Then, anon82_Else;

  anon82_Else:
    goto anon77_Then, anon77_Else;

  anon77_Else:
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:nonnull} Irp_14 != 0;
    assume Irp_14 > 0;
    assume {:nonnull} Irp_14 != 0;
    assume Irp_14 > 0;
    goto anon87_Then, anon87_Else;

  anon87_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_14;
    goto L19;

  L19:
    goto anon61_Then, anon61_Else;

  anon61_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_14;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    goto L21;

  L21:
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_14;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L23;

  L23:
    goto anon63_Then, anon63_Else;

  anon63_Else:
    goto L29;

  L29:
    Tmp_785 := status_34;
    goto LM2;

  LM2:
    return;

  anon63_Then:
    havoc vslice_dummy_var_244;
    call {:si_unique_call 1659} sdv_380 := sdv_RunIoCompletionRoutines(sdv_p_devobj_fdo, Irp_14, vslice_dummy_var_244, completion_1);
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} yogi_error != 1;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume Irp_14 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1660} SLIC_sdv_RunIoCompletionRoutines_exit(0, completion_1, sdv_380);
    goto L29;

  anon80_Then:
    assume !(Irp_14 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L29;

  anon88_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon62_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_14;
    goto L23;

  anon61_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_14;
    goto L21;

  anon87_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_14;
    goto L19;

  anon76_Then:
    assume {:nonnull} Irp_14 != 0;
    assume Irp_14 > 0;
    assume {:nonnull} Irp_14 != 0;
    assume Irp_14 > 0;
    goto anon89_Then, anon89_Else;

  anon89_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_14;
    goto L58;

  L58:
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_14;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    goto L60;

  L60:
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_14;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L62;

  L62:
    goto anon74_Then, anon74_Else;

  anon74_Else:
    goto anon75_Then, anon75_Else;

  anon75_Else:
    havoc vslice_dummy_var_245;
    call {:si_unique_call 1661} sdv_383 := sdv_RunIoCompletionRoutines(sdv_p_devobj_fdo, Irp_14, vslice_dummy_var_245, completion_1);
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} yogi_error != 1;
    goto anon81_Then, anon81_Else;

  anon81_Else:
    assume Irp_14 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1662} SLIC_sdv_RunIoCompletionRoutines_exit(0, completion_1, sdv_383);
    goto L29;

  anon81_Then:
    assume !(Irp_14 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L29;

  anon90_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon75_Then:
    goto L29;

  anon74_Then:
    goto L29;

  anon73_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_14;
    goto L62;

  anon72_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_14;
    goto L60;

  anon89_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_14;
    goto L58;

  anon77_Then:
    assume {:nonnull} Irp_14 != 0;
    assume Irp_14 > 0;
    assume {:nonnull} Irp_14 != 0;
    assume Irp_14 > 0;
    goto anon85_Then, anon85_Else;

  anon85_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_14;
    goto L32;

  L32:
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_14;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    goto L34;

  L34:
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_14;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L36;

  L36:
    goto anon66_Then, anon66_Else;

  anon66_Else:
    goto anon67_Then, anon67_Else;

  anon67_Else:
    havoc vslice_dummy_var_246;
    call {:si_unique_call 1663} sdv_381 := sdv_RunIoCompletionRoutines(sdv_p_devobj_fdo, Irp_14, vslice_dummy_var_246, completion_1);
    goto anon86_Then, anon86_Else;

  anon86_Else:
    assume {:partition} yogi_error != 1;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume Irp_14 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1664} SLIC_sdv_RunIoCompletionRoutines_exit(0, completion_1, sdv_381);
    goto L29;

  anon79_Then:
    assume !(Irp_14 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L29;

  anon86_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon67_Then:
    goto L29;

  anon66_Then:
    goto L29;

  anon65_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_14;
    goto L36;

  anon64_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_14;
    goto L34;

  anon85_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_14;
    goto L32;

  anon82_Then:
    assume {:nonnull} Irp_14 != 0;
    assume Irp_14 > 0;
    assume {:nonnull} Irp_14 != 0;
    assume Irp_14 > 0;
    goto anon83_Then, anon83_Else;

  anon83_Else:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp == Irp_14;
    goto L45;

  L45:
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp == Irp_14;
    assume {:nonnull} sdv_IoBuildSynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildSynchronousFsdRequest_IoStatusBlock > 0;
    goto L47;

  L47:
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp == Irp_14;
    assume {:nonnull} sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock != 0;
    assume sdv_IoBuildAsynchronousFsdRequest_IoStatusBlock > 0;
    goto L49;

  L49:
    goto anon70_Then, anon70_Else;

  anon70_Else:
    goto anon71_Then, anon71_Else;

  anon71_Else:
    havoc vslice_dummy_var_247;
    call {:si_unique_call 1665} sdv_382 := sdv_RunIoCompletionRoutines(sdv_p_devobj_fdo, Irp_14, vslice_dummy_var_247, completion_1);
    goto anon84_Then, anon84_Else;

  anon84_Else:
    assume {:partition} yogi_error != 1;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume Irp_14 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1666} SLIC_sdv_RunIoCompletionRoutines_exit(0, completion_1, sdv_382);
    goto L29;

  anon78_Then:
    assume !(Irp_14 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L29;

  anon84_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon71_Then:
    goto L29;

  anon70_Then:
    goto L29;

  anon69_Then:
    assume {:partition} sdv_IoBuildAsynchronousFsdRequest_irp != Irp_14;
    goto L49;

  anon68_Then:
    assume {:partition} sdv_IoBuildSynchronousFsdRequest_irp != Irp_14;
    goto L47;

  anon83_Then:
    assume {:partition} sdv_IoBuildDeviceIoControlRequest_irp != Irp_14;
    goto L45;
}



procedure {:origName "KeInitializeTimerEx"} {:osmodel} KeInitializeTimerEx(actual_Timer_3: int, actual_Type_2: int);
  modifies alloc;



implementation {:origName "KeInitializeTimerEx"} {:osmodel} KeInitializeTimerEx(actual_Timer_3: int, actual_Type_2: int)
{
  var vslice_dummy_var_191: int;

  anon0:
    call {:si_unique_call 1667} vslice_dummy_var_191 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "IoDisconnectInterrupt"} {:osmodel} IoDisconnectInterrupt(actual_InterruptObject: int);
  modifies alloc;



implementation {:origName "IoDisconnectInterrupt"} {:osmodel} IoDisconnectInterrupt(actual_InterruptObject: int)
{
  var vslice_dummy_var_192: int;

  anon0:
    call {:si_unique_call 1668} vslice_dummy_var_192 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "ZwOpenKey"} {:osmodel} ZwOpenKey(actual_KeyHandle_1: int, actual_DesiredAccess: int, actual_ObjectAttributes: int) returns (Tmp_791: int);
  modifies alloc;
  free ensures Tmp_791 == 0 || Tmp_791 == -1073741727;



implementation {:origName "ZwOpenKey"} {:osmodel} ZwOpenKey(actual_KeyHandle_1: int, actual_DesiredAccess: int, actual_ObjectAttributes: int) returns (Tmp_791: int)
{
  var {:pointer} sdv_385: int;
  var {:pointer} KeyHandle_1: int;

  anon0:
    KeyHandle_1 := actual_KeyHandle_1;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 1669} sdv_385 := __HAVOC_malloc(4);
    assume {:nonnull} KeyHandle_1 != 0;
    assume KeyHandle_1 > 0;
    Tmp_791 := 0;
    goto L1;

  L1:
    return;

  anon3_Then:
    assume {:nonnull} KeyHandle_1 != 0;
    assume KeyHandle_1 > 0;
    Tmp_791 := -1073741727;
    goto L1;
}



procedure {:origName "sdv_RunIoCompletionRoutines"} {:osmodel} sdv_RunIoCompletionRoutines(actual_DeviceObject_26: int, actual_Irp_15: int, actual_Context_12: int, actual_Completion: int) returns (Tmp_793: int);
  modifies alloc, yogi_error;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "sdv_RunIoCompletionRoutines"} {:osmodel} sdv_RunIoCompletionRoutines(actual_DeviceObject_26: int, actual_Irp_15: int, actual_Context_12: int, actual_Completion: int) returns (Tmp_793: int)
{
  var {:scalar} Status_1: int;
  var {:pointer} irpsp: int;
  var {:pointer} DeviceObject_26: int;
  var {:pointer} Irp_15: int;
  var {:pointer} Context_12: int;
  var {:pointer} Completion: int;

  anon0:
    DeviceObject_26 := actual_DeviceObject_26;
    Irp_15 := actual_Irp_15;
    Context_12 := actual_Context_12;
    Completion := actual_Completion;
    call {:si_unique_call 1670} irpsp := sdv_IoGetNextIrpStackLocation(Irp_15);
    Status_1 := 0;
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} Mem_T.CompletionRoutine__IO_STACK_LOCATION[CompletionRoutine__IO_STACK_LOCATION(irpsp)] == li2bplFunctionConstant1075;
    call {:si_unique_call 1671} Status_1 := I8xPnPComplete(DeviceObject_26, Irp_15, Context_12);
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    goto L11;

  L11:
    assume {:nonnull} irpsp != 0;
    assume irpsp > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} Mem_T.CompletionRoutine__IO_STACK_LOCATION[CompletionRoutine__IO_STACK_LOCATION(irpsp)] == li2bplFunctionConstant1083;
    call {:si_unique_call 1672} Status_1 := I8xPowerUpToD0Complete(DeviceObject_26, Irp_15, Context_12);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    assume {:nonnull} Completion != 0;
    assume Completion > 0;
    goto L28;

  L28:
    Tmp_793 := Status_1;
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} Mem_T.CompletionRoutine__IO_STACK_LOCATION[CompletionRoutine__IO_STACK_LOCATION(irpsp)] != li2bplFunctionConstant1083;
    goto L28;

  anon8_Then:
    assume {:partition} Mem_T.CompletionRoutine__IO_STACK_LOCATION[CompletionRoutine__IO_STACK_LOCATION(irpsp)] != li2bplFunctionConstant1075;
    goto L11;
}



procedure {:origName "KeInitializeEvent"} {:osmodel} KeInitializeEvent(actual_Event_2: int, actual_Type_3: int, actual_State_2: int);
  modifies alloc;



implementation {:origName "KeInitializeEvent"} {:osmodel} KeInitializeEvent(actual_Event_2: int, actual_Type_3: int, actual_State_2: int)
{
  var {:pointer} Event_2: int;
  var {:scalar} Type_3: int;
  var {:scalar} State_2: int;
  var vslice_dummy_var_193: int;

  anon0:
    call {:si_unique_call 1673} vslice_dummy_var_193 := __HAVOC_malloc(4);
    Event_2 := actual_Event_2;
    Type_3 := actual_Type_3;
    State_2 := actual_State_2;
    assume {:nonnull} Event_2 != 0;
    assume Event_2 > 0;
    assume {:nonnull} Event_2 != 0;
    assume Event_2 > 0;
    assume {:nonnull} Event_2 != 0;
    assume Event_2 > 0;
    assume {:nonnull} Event_2 != 0;
    assume Event_2 > 0;
    return;
}



procedure {:origName "KeInitializeTimer"} {:osmodel} KeInitializeTimer(actual_Timer_4: int);
  modifies alloc;



implementation {:origName "KeInitializeTimer"} {:osmodel} KeInitializeTimer(actual_Timer_4: int)
{
  var vslice_dummy_var_194: int;

  anon0:
    call {:si_unique_call 1674} vslice_dummy_var_194 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_IoCallDriver"} {:osmodel} sdv_IoCallDriver(actual_DeviceObject_27: int, actual_Irp_16: int) returns (Tmp_799: int);
  modifies alloc, s, yogi_error;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "sdv_IoCallDriver"} {:osmodel} sdv_IoCallDriver(actual_DeviceObject_27: int, actual_Irp_16: int) returns (Tmp_799: int)
{
  var {:pointer} Irp_16: int;

  anon0:
    Irp_16 := actual_Irp_16;
    call {:si_unique_call 1675} Tmp_799 := IofCallDriver(0, Irp_16);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "IoBuildDeviceIoControlRequest"} {:osmodel} IoBuildDeviceIoControlRequest(actual_IoControlCode: int, actual_DeviceObject_28: int, actual_InputBuffer: int, actual_InputBufferLength: int, actual_OutputBuffer: int, actual_OutputBufferLength: int, actual_InternalDeviceIoControl: int, actual_Event_3: int, actual_IoStatusBlock: int) returns (Tmp_801: int);



implementation {:origName "IoBuildDeviceIoControlRequest"} {:osmodel} IoBuildDeviceIoControlRequest(actual_IoControlCode: int, actual_DeviceObject_28: int, actual_InputBuffer: int, actual_InputBufferLength: int, actual_OutputBuffer: int, actual_OutputBufferLength: int, actual_InternalDeviceIoControl: int, actual_Event_3: int, actual_IoStatusBlock: int) returns (Tmp_801: int)
{
  var {:pointer} Tmp_802: int;
  var {:pointer} Tmp_804: int;
  var {:scalar} InternalDeviceIoControl: int;
  var {:pointer} IoStatusBlock: int;

  anon0:
    InternalDeviceIoControl := actual_InternalDeviceIoControl;
    IoStatusBlock := actual_IoStatusBlock;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} InternalDeviceIoControl != 0;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_irp != 0;
    assume sdv_IoBuildDeviceIoControlRequest_irp > 0;
    havoc Tmp_802;
    assume {:nonnull} Tmp_802 != 0;
    assume Tmp_802 > 0;
    goto L14;

  L14:
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_irp != 0;
    assume sdv_IoBuildDeviceIoControlRequest_irp > 0;
    assume {:nonnull} IoStatusBlock != 0;
    assume IoStatusBlock > 0;
    Tmp_801 := sdv_IoBuildDeviceIoControlRequest_irp;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} InternalDeviceIoControl == 0;
    assume {:nonnull} sdv_IoBuildDeviceIoControlRequest_irp != 0;
    assume sdv_IoBuildDeviceIoControlRequest_irp > 0;
    havoc Tmp_804;
    assume {:nonnull} Tmp_804 != 0;
    assume Tmp_804 > 0;
    goto L14;

  anon5_Then:
    assume {:nonnull} IoStatusBlock != 0;
    assume IoStatusBlock > 0;
    Tmp_801 := 0;
    goto L1;
}



procedure {:origName "IoFreeIrp"} {:osmodel} IoFreeIrp(actual_pirp_16: int);
  modifies alloc;



implementation {:origName "IoFreeIrp"} {:osmodel} IoFreeIrp(actual_pirp_16: int)
{
  var vslice_dummy_var_195: int;

  anon0:
    call {:si_unique_call 1676} vslice_dummy_var_195 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_KeInitializeSpinLock"} {:osmodel} sdv_KeInitializeSpinLock(actual_SpinLock_4: int);
  modifies alloc;



implementation {:origName "sdv_KeInitializeSpinLock"} {:osmodel} sdv_KeInitializeSpinLock(actual_SpinLock_4: int)
{
  var {:pointer} SpinLock_4: int;
  var vslice_dummy_var_196: int;

  anon0:
    call {:si_unique_call 1677} vslice_dummy_var_196 := __HAVOC_malloc(4);
    SpinLock_4 := actual_SpinLock_4;
    assume {:nonnull} SpinLock_4 != 0;
    assume SpinLock_4 > 0;
    return;
}



procedure {:origName "ExAllocatePoolWithTag"} {:osmodel} ExAllocatePoolWithTag(actual_PoolType: int, actual_NumberOfBytes_1: int, actual_Tag_2: int) returns (Tmp_811: int);
  modifies alloc;



implementation {:origName "ExAllocatePoolWithTag"} {:osmodel} ExAllocatePoolWithTag(actual_PoolType: int, actual_NumberOfBytes_1: int, actual_Tag_2: int) returns (Tmp_811: int)
{
  var {:pointer} sdv_393: int;
  var {:scalar} NumberOfBytes_1: int;

  anon0:
    NumberOfBytes_1 := actual_NumberOfBytes_1;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    call {:si_unique_call 1678} sdv_393 := __HAVOC_malloc(NumberOfBytes_1);
    Tmp_811 := sdv_393;
    goto L1;

  L1:
    return;

  anon3_Then:
    Tmp_811 := 0;
    goto L1;
}



procedure {:origName "IoAllocateWorkItem"} {:osmodel} IoAllocateWorkItem(actual_DeviceObject_29: int) returns (Tmp_813: int);
  modifies alloc;



implementation {:origName "IoAllocateWorkItem"} {:osmodel} IoAllocateWorkItem(actual_DeviceObject_29: int) returns (Tmp_813: int)
{
  var {:pointer} ioWorkItem: int;
  var {:pointer} sdv_395: int;
  var {:scalar} Tmp_814: int;

  anon0:
    call {:si_unique_call 1679} sdv_395 := __HAVOC_malloc(1);
    ioWorkItem := sdv_395;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} ioWorkItem == 0;
    Tmp_814 := 0;
    goto L27;

  L27:
    assume Tmp_814 != 0;
    assume {:nonnull} ioWorkItem != 0;
    assume ioWorkItem > 0;
    Tmp_813 := ioWorkItem;
    goto L1;

  L1:
    return;

  anon5_Then:
    assume {:partition} ioWorkItem != 0;
    Tmp_814 := 1;
    goto L27;

  anon6_Then:
    Tmp_813 := 0;
    goto L1;
}



procedure {:origName "IoSetDeviceInterfaceState"} {:osmodel} IoSetDeviceInterfaceState(actual_SymbolicLinkName_1: int, actual_Enable_1: int) returns (Tmp_816: int);
  free ensures Tmp_816 == -1073741772 || Tmp_816 == -1073741824 || Tmp_816 == -1073741789 || Tmp_816 == -1073741670 || Tmp_816 == -1073741808 || Tmp_816 == 0;



implementation {:origName "IoSetDeviceInterfaceState"} {:osmodel} IoSetDeviceInterfaceState(actual_SymbolicLinkName_1: int, actual_Enable_1: int) returns (Tmp_816: int)
{

  anon0:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    goto anon13_Then, anon13_Else;

  anon13_Else:
    goto anon12_Then, anon12_Else;

  anon12_Else:
    Tmp_816 := -1073741772;
    goto L1;

  L1:
    return;

  anon12_Then:
    Tmp_816 := -1073741824;
    goto L1;

  anon13_Then:
    Tmp_816 := -1073741789;
    goto L1;

  anon14_Then:
    Tmp_816 := -1073741670;
    goto L1;

  anon15_Then:
    Tmp_816 := -1073741808;
    goto L1;

  anon11_Then:
    Tmp_816 := 0;
    goto L1;
}



procedure {:origName "IoConnectInterrupt"} {:osmodel} IoConnectInterrupt(actual_InterruptObject_1: int, actual_ServiceRoutine: int, actual_ServiceContext: int, actual_SpinLock_5: int, actual_Vector: int, actual_Irql: int, actual_SynchronizeIrql: int, actual_InterruptMode: int, actual_ShareVector: int, actual_ProcessorEnableMask: int, actual_FloatingSave: int) returns (Tmp_818: int);
  modifies alloc, yogi_error, Mem_T.CompletionRoutine__IO_STACK_LOCATION;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "IoConnectInterrupt"} {:osmodel} IoConnectInterrupt(actual_InterruptObject_1: int, actual_ServiceRoutine: int, actual_ServiceContext: int, actual_SpinLock_5: int, actual_Vector: int, actual_Irql: int, actual_SynchronizeIrql: int, actual_InterruptMode: int, actual_ShareVector: int, actual_ProcessorEnableMask: int, actual_FloatingSave: int) returns (Tmp_818: int)
{
  var {:pointer} InterruptObject_1: int;
  var {:scalar} ServiceRoutine: int;
  var {:pointer} ServiceContext: int;

  anon0:
    InterruptObject_1 := actual_InterruptObject_1;
    ServiceRoutine := actual_ServiceRoutine;
    ServiceContext := actual_ServiceContext;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    Tmp_818 := -1073741811;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon7_Then:
    Tmp_818 := -1073741670;
    goto L1;

  anon8_Then:
    call {:si_unique_call 1680} sdv_RunISRRoutines(InterruptObject_1, ServiceContext);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    Tmp_818 := 0;
    goto L1;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "sdv_stub_driver_init"} {:osmodel} sdv_stub_driver_init();
  modifies alloc;



implementation {:origName "sdv_stub_driver_init"} {:osmodel} sdv_stub_driver_init()
{
  var vslice_dummy_var_197: int;

  anon0:
    call {:si_unique_call 1681} vslice_dummy_var_197 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "sdv_stub_dispatch_begin"} {:osmodel} sdv_stub_dispatch_begin();
  modifies alloc;



implementation {:origName "sdv_stub_dispatch_begin"} {:osmodel} sdv_stub_dispatch_begin()
{
  var vslice_dummy_var_198: int;

  anon0:
    call {:si_unique_call 1682} vslice_dummy_var_198 := __HAVOC_malloc(4);
    return;
}



procedure {:origName "IoOpenDeviceRegistryKey"} {:osmodel} IoOpenDeviceRegistryKey(actual_DeviceObject_30: int, actual_DevInstKeyType: int, actual_DesiredAccess_1: int, actual_DevInstRegKey: int) returns (Tmp_824: int);
  free ensures Tmp_824 == -1073741811 || Tmp_824 == -1073741808 || Tmp_824 == -1073741823 || Tmp_824 == 0;



implementation {:origName "IoOpenDeviceRegistryKey"} {:osmodel} IoOpenDeviceRegistryKey(actual_DeviceObject_30: int, actual_DevInstKeyType: int, actual_DesiredAccess_1: int, actual_DevInstRegKey: int) returns (Tmp_824: int)
{

  anon0:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    goto anon9_Then, anon9_Else;

  anon9_Else:
    goto anon8_Then, anon8_Else;

  anon8_Else:
    Tmp_824 := -1073741811;
    goto L1;

  L1:
    return;

  anon8_Then:
    Tmp_824 := -1073741808;
    goto L1;

  anon9_Then:
    Tmp_824 := -1073741823;
    goto L1;

  anon7_Then:
    Tmp_824 := 0;
    goto L1;
}



procedure {:origName "sdv_ObDereferenceObject"} {:osmodel} sdv_ObDereferenceObject(actual_Object_1: int) returns (Tmp_826: int);



implementation {:origName "sdv_ObDereferenceObject"} {:osmodel} sdv_ObDereferenceObject(actual_Object_1: int) returns (Tmp_826: int)
{
  var {:scalar} p_4: int;

  anon0:
    Tmp_826 := p_4;
    return;
}



procedure {:origName "ZwClose"} {:osmodel} ZwClose(actual_Handle: int) returns (Tmp_828: int);
  free ensures Tmp_828 == 0;



implementation {:origName "ZwClose"} {:osmodel} ZwClose(actual_Handle: int) returns (Tmp_828: int)
{

  anon0:
    Tmp_828 := 0;
    return;
}



procedure {:origName "sdv_DoNothing"} {:osmodel} sdv_DoNothing() returns (Tmp_830: int);
  free ensures Tmp_830 == -1073741823;



implementation {:origName "sdv_DoNothing"} {:osmodel} sdv_DoNothing() returns (Tmp_830: int)
{

  anon0:
    Tmp_830 := -1073741823;
    return;
}



procedure {:origName "IoWMIRegistrationControl"} {:osmodel} IoWMIRegistrationControl(actual_DeviceObject_31: int, actual_Action: int) returns (Tmp_832: int);
  free ensures Tmp_832 == -1073741823 || Tmp_832 == -1073741811 || Tmp_832 == 0;



implementation {:origName "IoWMIRegistrationControl"} {:osmodel} IoWMIRegistrationControl(actual_DeviceObject_31: int, actual_Action: int) returns (Tmp_832: int)
{

  anon0:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    goto anon6_Then, anon6_Else;

  anon6_Else:
    Tmp_832 := -1073741823;
    goto L1;

  L1:
    return;

  anon6_Then:
    Tmp_832 := -1073741811;
    goto L1;

  anon5_Then:
    Tmp_832 := 0;
    goto L1;
}



procedure {:origName "SLIC_I8xInternalDeviceControl_exit"} {:osmodel} SLIC_I8xInternalDeviceControl_exit(actual_caller_2: int, actual_I8xInternalDeviceControl_1: int);
  modifies yogi_error;
  free ensures old(s) == 0 ==> yogi_error == 0;
  free ensures old(s) == 1 ==> yogi_error == 0;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;
  free ensures false || old(s) == 0 || old(s) == 2 || old(s) == 1;
  free ensures false || s == 0 || s == 2 || s == 1;



implementation {:origName "SLIC_I8xInternalDeviceControl_exit"} {:osmodel} SLIC_I8xInternalDeviceControl_exit(actual_caller_2: int, actual_I8xInternalDeviceControl_1: int)
{
  var {:pointer} caller_2: int;
  var {:scalar} I8xInternalDeviceControl_1: int;

  anon0:
    caller_2 := actual_caller_2;
    I8xInternalDeviceControl_1 := actual_I8xInternalDeviceControl_1;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} s == 2;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} I8xInternalDeviceControl_1 != 259;
    call {:si_unique_call 1683} SLIC_ABORT_17_0(caller_2, I8xInternalDeviceControl_1);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon8_Then:
    assume {:partition} I8xInternalDeviceControl_1 == 259;
    goto L2;

  anon7_Then:
    assume {:partition} s != 2;
    goto L2;
}



procedure {:origName "SLIC_ABORT_25_0"} SLIC_ABORT_25_0(actual_caller_3: int, actual_I8xClose_1: int);
  modifies yogi_error;



implementation {:origName "SLIC_ABORT_25_0"} SLIC_ABORT_25_0(actual_caller_3: int, actual_I8xClose_1: int)
{
  var {:pointer} caller_3: int;
  var {:scalar} I8xClose_1: int;

  anon0:
    caller_3 := actual_caller_3;
    I8xClose_1 := actual_I8xClose_1;
    call {:si_unique_call 1684} SLIC_ERROR_ROUTINE(strConst__li2bpl67);
    return;
}



procedure {:origName "SLIC_I8xCreate_exit"} {:osmodel} SLIC_I8xCreate_exit(actual_caller_4: int, actual_I8xCreate_1: int);
  modifies yogi_error;
  free ensures old(s) == 0 ==> yogi_error == 0;
  free ensures old(s) == 1 ==> yogi_error == 0;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;
  free ensures false || old(s) == 0 || old(s) == 2 || old(s) == 1;
  free ensures false || s == 0 || s == 2 || s == 1;



implementation {:origName "SLIC_I8xCreate_exit"} {:osmodel} SLIC_I8xCreate_exit(actual_caller_4: int, actual_I8xCreate_1: int)
{
  var {:pointer} caller_4: int;
  var {:scalar} I8xCreate_1: int;

  anon0:
    caller_4 := actual_caller_4;
    I8xCreate_1 := actual_I8xCreate_1;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} s == 2;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} I8xCreate_1 != 259;
    call {:si_unique_call 1685} SLIC_ABORT_23_0(caller_4, I8xCreate_1);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon8_Then:
    assume {:partition} I8xCreate_1 == 259;
    goto L2;

  anon7_Then:
    assume {:partition} s != 2;
    goto L2;
}



procedure {:origName "SLIC_sdv_IoSetCompletionRoutine_exit"} {:osmodel} SLIC_sdv_IoSetCompletionRoutine_exit(actual_caller_6: int);
  modifies forward_state;
  free ensures old(forward_state) == 1 ==> forward_state != 0;
  free ensures old(forward_state) == 0 ==> forward_state != 0;
  free ensures forward_state == 1;
  free ensures false || old(forward_state) == 1 || old(forward_state) == 0;
  free ensures false || forward_state == 1 || forward_state == 0;



implementation {:origName "SLIC_sdv_IoSetCompletionRoutine_exit"} {:osmodel} SLIC_sdv_IoSetCompletionRoutine_exit(actual_caller_6: int)
{

  anon0:
    forward_state := 1;
    return;
}



procedure {:origName "SLIC_I8xFlush_exit"} {:osmodel} SLIC_I8xFlush_exit(actual_caller_7: int, actual_I8xFlush_1: int);
  modifies yogi_error;
  free ensures old(s) == 0 ==> yogi_error == 0;
  free ensures old(s) == 1 ==> yogi_error == 0;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;
  free ensures false || old(s) == 0 || old(s) == 2 || old(s) == 1;
  free ensures false || s == 0 || s == 2 || s == 1;



implementation {:origName "SLIC_I8xFlush_exit"} {:osmodel} SLIC_I8xFlush_exit(actual_caller_7: int, actual_I8xFlush_1: int)
{
  var {:pointer} caller_7: int;
  var {:scalar} I8xFlush_1: int;

  anon0:
    caller_7 := actual_caller_7;
    I8xFlush_1 := actual_I8xFlush_1;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} s == 2;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} I8xFlush_1 != 259;
    call {:si_unique_call 1686} SLIC_ABORT_19_0(caller_7, I8xFlush_1);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon8_Then:
    assume {:partition} I8xFlush_1 == 259;
    goto L2;

  anon7_Then:
    assume {:partition} s != 2;
    goto L2;
}



procedure {:origName "_sdv_init16"} {:osmodel} _sdv_init16();
  modifies SLAM_guard_S_0, forward_state, s, yogi_error;
  free ensures old(forward_state) == 1 ==> forward_state != 1;
  free ensures old(forward_state) == 0 ==> forward_state != 1;
  free ensures old(s) == 0 ==> s != 2;
  free ensures old(s) == 0 ==> s != 1;
  free ensures old(s) == 2 ==> s != 2;
  free ensures old(s) == 2 ==> s != 1;
  free ensures old(s) == 1 ==> s != 2;
  free ensures old(s) == 1 ==> s != 1;
  free ensures old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures yogi_error == 0;
  free ensures s == 0;
  free ensures yogi_error == 0;
  free ensures forward_state == 0;
  free ensures old(yogi_error) == 0;
  free ensures false || old(forward_state) == 1 || old(forward_state) == 0;
  free ensures false || old(s) == 0 || old(s) == 2 || old(s) == 1;
  free ensures false || forward_state == 1 || forward_state == 0;
  free ensures false || s == 0 || s == 2 || s == 1;



implementation {:origName "_sdv_init16"} {:osmodel} _sdv_init16()
{

  anon0:
    SLAM_guard_S_0 := SLAM_guard_S_0_init;
    forward_state := 0;
    s := 0;
    yogi_error := 0;
    assume sdv_cancelFptr == 0;
    return;
}



procedure {:origName "SLIC_ABORT_19_0"} SLIC_ABORT_19_0(actual_caller_10: int, actual_I8xFlush_2: int);
  modifies yogi_error;



implementation {:origName "SLIC_ABORT_19_0"} SLIC_ABORT_19_0(actual_caller_10: int, actual_I8xFlush_2: int)
{
  var {:pointer} caller_10: int;
  var {:scalar} I8xFlush_2: int;

  anon0:
    caller_10 := actual_caller_10;
    I8xFlush_2 := actual_I8xFlush_2;
    call {:si_unique_call 1687} SLIC_ERROR_ROUTINE(strConst__li2bpl67);
    return;
}



procedure {:origName "SLIC_sdv_IoCompleteRequest_entry"} {:osmodel} SLIC_sdv_IoCompleteRequest_entry(actual_caller_11: int);
  modifies yogi_error;
  free ensures old(s) == 0 ==> yogi_error == 0;
  free ensures old(s) == 0 ==> yogi_error == 1;
  free ensures old(s) == 2 ==> yogi_error == 0;
  free ensures old(s) == 2 ==> yogi_error == 1;
  free ensures old(s) == 1 ==> yogi_error == 1;
  free ensures yogi_error == 1;
  free ensures old(yogi_error) == 0;
  free ensures false || old(s) == 0 || old(s) == 2 || old(s) == 1;
  free ensures false || s == 0 || s == 2 || s == 1;



implementation {:origName "SLIC_sdv_IoCompleteRequest_entry"} {:osmodel} SLIC_sdv_IoCompleteRequest_entry(actual_caller_11: int)
{
  var {:pointer} caller_11: int;

  anon0:
    caller_11 := actual_caller_11;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} s != 1;
    call {:si_unique_call 1688} SLIC_EXIT_ROUTINE(strConst__li2bpl68);
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon5_Then:
    assume {:partition} s == 1;
    call {:si_unique_call 1689} SLIC_ABORT_6_0(caller_11);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "SLIC_I8xClose_exit"} {:osmodel} SLIC_I8xClose_exit(actual_caller_12: int, actual_I8xClose_2: int);
  modifies yogi_error;
  free ensures old(s) == 0 ==> yogi_error == 0;
  free ensures old(s) == 1 ==> yogi_error == 0;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;
  free ensures false || old(s) == 0 || old(s) == 2 || old(s) == 1;
  free ensures false || s == 0 || s == 2 || s == 1;



implementation {:origName "SLIC_I8xClose_exit"} {:osmodel} SLIC_I8xClose_exit(actual_caller_12: int, actual_I8xClose_2: int)
{
  var {:pointer} caller_12: int;
  var {:scalar} I8xClose_2: int;

  anon0:
    caller_12 := actual_caller_12;
    I8xClose_2 := actual_I8xClose_2;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} s == 2;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} I8xClose_2 != 259;
    call {:si_unique_call 1690} SLIC_ABORT_25_0(caller_12, I8xClose_2);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon8_Then:
    assume {:partition} I8xClose_2 == 259;
    goto L2;

  anon7_Then:
    assume {:partition} s != 2;
    goto L2;
}



procedure {:origName "SLIC_I8xSystemControl_exit"} {:osmodel} SLIC_I8xSystemControl_exit(actual_caller_13: int, actual_I8xSystemControl_1: int);
  modifies yogi_error;
  free ensures old(s) == 0 ==> yogi_error == 0;
  free ensures old(s) == 1 ==> yogi_error == 0;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;
  free ensures false || old(s) == 0 || old(s) == 2 || old(s) == 1;
  free ensures false || s == 0 || s == 2 || s == 1;



implementation {:origName "SLIC_I8xSystemControl_exit"} {:osmodel} SLIC_I8xSystemControl_exit(actual_caller_13: int, actual_I8xSystemControl_1: int)
{
  var {:pointer} caller_13: int;
  var {:scalar} I8xSystemControl_1: int;

  anon0:
    caller_13 := actual_caller_13;
    I8xSystemControl_1 := actual_I8xSystemControl_1;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} s == 2;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} I8xSystemControl_1 != 259;
    call {:si_unique_call 1691} SLIC_ABORT_15_0(caller_13, I8xSystemControl_1);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon8_Then:
    assume {:partition} I8xSystemControl_1 == 259;
    goto L2;

  anon7_Then:
    assume {:partition} s != 2;
    goto L2;
}



procedure {:origName "SLIC_I8xDeviceControl_exit"} {:osmodel} SLIC_I8xDeviceControl_exit(actual_caller_14: int, actual_I8xDeviceControl_1: int);
  modifies yogi_error;
  free ensures old(s) == 0 ==> yogi_error == 0;
  free ensures old(s) == 1 ==> yogi_error == 0;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;
  free ensures false || old(s) == 0 || old(s) == 2 || old(s) == 1;
  free ensures false || s == 0 || s == 2 || s == 1;



implementation {:origName "SLIC_I8xDeviceControl_exit"} {:osmodel} SLIC_I8xDeviceControl_exit(actual_caller_14: int, actual_I8xDeviceControl_1: int)
{
  var {:pointer} caller_14: int;
  var {:scalar} I8xDeviceControl_1: int;

  anon0:
    caller_14 := actual_caller_14;
    I8xDeviceControl_1 := actual_I8xDeviceControl_1;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} s == 2;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} I8xDeviceControl_1 != 259;
    call {:si_unique_call 1692} SLIC_ABORT_21_0(caller_14, I8xDeviceControl_1);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon8_Then:
    assume {:partition} I8xDeviceControl_1 == 259;
    goto L2;

  anon7_Then:
    assume {:partition} s != 2;
    goto L2;
}



procedure {:origName "SLIC_ABORT_15_0"} SLIC_ABORT_15_0(actual_caller_15: int, actual_I8xSystemControl_2: int);
  modifies yogi_error;



implementation {:origName "SLIC_ABORT_15_0"} SLIC_ABORT_15_0(actual_caller_15: int, actual_I8xSystemControl_2: int)
{
  var {:pointer} caller_15: int;
  var {:scalar} I8xSystemControl_2: int;

  anon0:
    caller_15 := actual_caller_15;
    I8xSystemControl_2 := actual_I8xSystemControl_2;
    call {:si_unique_call 1693} SLIC_ERROR_ROUTINE(strConst__li2bpl67);
    return;
}



procedure {:origName "SLIC_sdv_RunIoCompletionRoutines_exit"} {:osmodel} SLIC_sdv_RunIoCompletionRoutines_exit(actual_caller_16: int, actual_sdv_404: int, actual_sdv_405: int);
  modifies s;
  free ensures old(s) == 0 ==> s != 0;
  free ensures old(s) == 2 ==> s != 0;
  free ensures old(s) == 1 ==> s != 0;
  free ensures s == 1 || s == 2;
  free ensures false || old(forward_state) == 1 || old(forward_state) == 0;
  free ensures false || old(s) == 0 || old(s) == 2 || old(s) == 1;
  free ensures false || forward_state == 1 || forward_state == 0;
  free ensures false || s == 0 || s == 2 || s == 1;



implementation {:origName "SLIC_sdv_RunIoCompletionRoutines_exit"} {:osmodel} SLIC_sdv_RunIoCompletionRoutines_exit(actual_caller_16: int, actual_sdv_404: int, actual_sdv_405: int)
{
  var {:pointer} sdv_404: int;
  var {:scalar} sdv_405: int;

  anon0:
    sdv_404 := actual_sdv_404;
    sdv_405 := actual_sdv_405;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} forward_state == 1;
    assume {:nonnull} sdv_404 != 0;
    assume sdv_404 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    goto L8;

  L8:
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} sdv_405 != -1073741802;
    s := 1;
    goto L2;

  L2:
    return;

  anon7_Then:
    assume {:partition} sdv_405 == -1073741802;
    s := 2;
    goto L2;

  anon9_Then:
    call {:si_unique_call 1694} SLIC_EXIT_ROUTINE(strConst__li2bpl68);
    goto L2;

  anon8_Then:
    assume {:partition} forward_state != 1;
    goto L8;
}



procedure {:origName "SLIC_ABORT_11_0"} SLIC_ABORT_11_0(actual_caller_17: int, actual_I8xPower_1: int);
  modifies yogi_error;



implementation {:origName "SLIC_ABORT_11_0"} SLIC_ABORT_11_0(actual_caller_17: int, actual_I8xPower_1: int)
{
  var {:pointer} caller_17: int;
  var {:scalar} I8xPower_1: int;

  anon0:
    caller_17 := actual_caller_17;
    I8xPower_1 := actual_I8xPower_1;
    call {:si_unique_call 1695} SLIC_ERROR_ROUTINE(strConst__li2bpl67);
    return;
}



procedure {:origName "SLIC_ABORT_17_0"} SLIC_ABORT_17_0(actual_caller_19: int, actual_I8xInternalDeviceControl_2: int);
  modifies yogi_error;



implementation {:origName "SLIC_ABORT_17_0"} SLIC_ABORT_17_0(actual_caller_19: int, actual_I8xInternalDeviceControl_2: int)
{
  var {:pointer} caller_19: int;
  var {:scalar} I8xInternalDeviceControl_2: int;

  anon0:
    caller_19 := actual_caller_19;
    I8xInternalDeviceControl_2 := actual_I8xInternalDeviceControl_2;
    call {:si_unique_call 1696} SLIC_ERROR_ROUTINE(strConst__li2bpl67);
    return;
}



procedure {:origName "SLIC_I8xPnP_exit"} {:osmodel} SLIC_I8xPnP_exit(actual_caller_20: int, actual_I8xPnP_1: int);
  modifies yogi_error;
  free ensures old(s) == 0 ==> yogi_error == 0;
  free ensures old(s) == 1 ==> yogi_error == 0;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;
  free ensures false || old(s) == 0 || old(s) == 2 || old(s) == 1;
  free ensures false || s == 0 || s == 2 || s == 1;



implementation {:origName "SLIC_I8xPnP_exit"} {:osmodel} SLIC_I8xPnP_exit(actual_caller_20: int, actual_I8xPnP_1: int)
{
  var {:pointer} caller_20: int;
  var {:scalar} I8xPnP_1: int;

  anon0:
    caller_20 := actual_caller_20;
    I8xPnP_1 := actual_I8xPnP_1;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} s == 2;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} I8xPnP_1 != 259;
    call {:si_unique_call 1697} SLIC_ABORT_13_0(caller_20, I8xPnP_1);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon8_Then:
    assume {:partition} I8xPnP_1 == 259;
    goto L2;

  anon7_Then:
    assume {:partition} s != 2;
    goto L2;
}



procedure {:origName "SLIC_ABORT_6_0"} SLIC_ABORT_6_0(actual_caller_23: int);
  modifies yogi_error;



implementation {:origName "SLIC_ABORT_6_0"} SLIC_ABORT_6_0(actual_caller_23: int)
{
  var {:pointer} caller_23: int;

  anon0:
    caller_23 := actual_caller_23;
    call {:si_unique_call 1698} SLIC_ERROR_ROUTINE(strConst__li2bpl69);
    return;
}



procedure {:origName "SLIC_ERROR_ROUTINE"} SLIC_ERROR_ROUTINE(actual_msg: int);
  modifies yogi_error;
  free ensures yogi_error == 1;
  free ensures old(yogi_error) == 0;



implementation {:origName "SLIC_ERROR_ROUTINE"} SLIC_ERROR_ROUTINE(actual_msg: int)
{

  anon0:
    yogi_error := 1;
    return;
}



procedure {:origName "SLIC_ABORT_23_0"} SLIC_ABORT_23_0(actual_caller_26: int, actual_I8xCreate_2: int);
  modifies yogi_error;



implementation {:origName "SLIC_ABORT_23_0"} SLIC_ABORT_23_0(actual_caller_26: int, actual_I8xCreate_2: int)
{
  var {:pointer} caller_26: int;
  var {:scalar} I8xCreate_2: int;

  anon0:
    caller_26 := actual_caller_26;
    I8xCreate_2 := actual_I8xCreate_2;
    call {:si_unique_call 1699} SLIC_ERROR_ROUTINE(strConst__li2bpl67);
    return;
}



procedure {:origName "SLIC_EXIT_ROUTINE"} SLIC_EXIT_ROUTINE(actual_msg_1: int);
  free ensures false;



implementation {:origName "SLIC_EXIT_ROUTINE"} SLIC_EXIT_ROUTINE(actual_msg_1: int)
{

  anon0:
    assume false;
    return;
}



procedure {:origName "SLIC_ABORT_21_0"} SLIC_ABORT_21_0(actual_caller_28: int, actual_I8xDeviceControl_2: int);
  modifies yogi_error;



implementation {:origName "SLIC_ABORT_21_0"} SLIC_ABORT_21_0(actual_caller_28: int, actual_I8xDeviceControl_2: int)
{
  var {:pointer} caller_28: int;
  var {:scalar} I8xDeviceControl_2: int;

  anon0:
    caller_28 := actual_caller_28;
    I8xDeviceControl_2 := actual_I8xDeviceControl_2;
    call {:si_unique_call 1700} SLIC_ERROR_ROUTINE(strConst__li2bpl67);
    return;
}



procedure {:origName "SLIC_I8xPower_exit"} {:osmodel} SLIC_I8xPower_exit(actual_caller_29: int, actual_I8xPower_2: int);
  modifies yogi_error;
  free ensures old(s) == 0 ==> yogi_error == 0;
  free ensures old(s) == 1 ==> yogi_error == 0;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;
  free ensures false || old(s) == 0 || old(s) == 2 || old(s) == 1;
  free ensures false || s == 0 || s == 2 || s == 1;



implementation {:origName "SLIC_I8xPower_exit"} {:osmodel} SLIC_I8xPower_exit(actual_caller_29: int, actual_I8xPower_2: int)
{
  var {:pointer} caller_29: int;
  var {:scalar} I8xPower_2: int;

  anon0:
    caller_29 := actual_caller_29;
    I8xPower_2 := actual_I8xPower_2;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} s == 2;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} I8xPower_2 != 259;
    call {:si_unique_call 1701} SLIC_ABORT_11_0(caller_29, I8xPower_2);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto L2;

  L2:
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon8_Then:
    assume {:partition} I8xPower_2 == 259;
    goto L2;

  anon7_Then:
    assume {:partition} s != 2;
    goto L2;
}



procedure {:origName "SLIC_ABORT_13_0"} SLIC_ABORT_13_0(actual_caller_30: int, actual_I8xPnP_2: int);
  modifies yogi_error;



implementation {:origName "SLIC_ABORT_13_0"} SLIC_ABORT_13_0(actual_caller_30: int, actual_I8xPnP_2: int)
{
  var {:pointer} caller_30: int;
  var {:scalar} I8xPnP_2: int;

  anon0:
    caller_30 := actual_caller_30;
    I8xPnP_2 := actual_I8xPnP_2;
    call {:si_unique_call 1702} SLIC_ERROR_ROUTINE(strConst__li2bpl67);
    return;
}



procedure {:origName "I8xKeyboardGetSysButtonEvent"} I8xKeyboardGetSysButtonEvent(actual_KeyboardExtension_9: int, actual_Irp_17: int) returns (Tmp_834: int);
  modifies alloc, yogi_error, Mem_T.CompletionRoutine__IO_STACK_LOCATION;
  free ensures old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "I8xKeyboardGetSysButtonEvent"} I8xKeyboardGetSysButtonEvent(actual_KeyboardExtension_9: int, actual_Irp_17: int) returns (Tmp_834: int)
{
  var {:pointer} item_3: int;
  var {:pointer} Tmp_835: int;
  var {:pointer} sdv_408: int;
  var {:scalar} status_35: int;
  var {:scalar} irql_4: int;
  var {:scalar} event_1: int;
  var {:pointer} stack_4: int;
  var {:pointer} KeyboardExtension_9: int;
  var {:pointer} Irp_17: int;
  var boogieTmp: int;
  var vslice_dummy_var_199: int;
  var vslice_dummy_var_248: int;

  anon0:
    KeyboardExtension_9 := actual_KeyboardExtension_9;
    Irp_17 := actual_Irp_17;
    event_1 := 0;
    call {:si_unique_call 1703} stack_4 := sdv_IoGetCurrentIrpStackLocation(Irp_17);
    assume {:nonnull} stack_4 != 0;
    assume stack_4 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    status_35 := -1073741306;
    assume {:nonnull} Irp_17 != 0;
    assume Irp_17 > 0;
    assume {:nonnull} Irp_17 != 0;
    assume Irp_17 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume Irp_17 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1704} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl13);
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} yogi_error != 1;
    goto L74;

  L74:
    call {:si_unique_call 1705} sdv_IoCompleteRequest(0, 0);
    Tmp_834 := status_35;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon27_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon26_Then:
    assume !(Irp_17 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L74;

  anon21_Then:
    assume {:nonnull} KeyboardExtension_9 != 0;
    assume KeyboardExtension_9 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    status_35 := -1073741670;
    call {:si_unique_call 1706} sdv_408 := ExAllocatePoolWithTag(512, 12, 842281016);
    item_3 := sdv_408;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} item_3 != 0;
    assume {:nonnull} item_3 != 0;
    assume item_3 > 0;
    call {:si_unique_call 1707} boogieTmp := IoAllocateWorkItem(0);
    assume {:nonnull} item_3 != 0;
    assume item_3 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:nonnull} KeyboardExtension_9 != 0;
    assume KeyboardExtension_9 > 0;
    assume {:nonnull} item_3 != 0;
    assume item_3 > 0;
    assume {:nonnull} item_3 != 0;
    assume item_3 > 0;
    call {:si_unique_call 1708} sdv_IoMarkIrpPending(0);
    assume {:nonnull} item_3 != 0;
    assume item_3 > 0;
    havoc vslice_dummy_var_248;
    call {:si_unique_call 1709} IoQueueWorkItem#1(vslice_dummy_var_248, li2bplFunctionConstant271, 1, item_3);
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} yogi_error != 1;
    status_35 := 259;
    goto L33;

  L33:
    assume {:nonnull} KeyboardExtension_9 != 0;
    assume KeyboardExtension_9 > 0;
    goto L51;

  L51:
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} status_35 != 259;
    call {:si_unique_call 1710} I8xCompleteSysButtonIrp(Irp_17, event_1, status_35);
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} yogi_error != 1;
    goto L52;

  L52:
    Tmp_834 := status_35;
    goto L1;

  anon30_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon24_Then:
    assume {:partition} status_35 == 259;
    goto L52;

  anon29_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon23_Then:
    call {:si_unique_call 1711} sdv_ExFreePool(0);
    goto L33;

  anon28_Then:
    assume {:partition} item_3 == 0;
    goto L33;

  anon22_Then:
    call {:si_unique_call 1712} Tmp_835 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_835 != 0;
    assume Tmp_835 > 0;
    call {:si_unique_call 1713} sdv_KeAcquireSpinLock(0, Tmp_835);
    assume {:nonnull} Tmp_835 != 0;
    assume Tmp_835 > 0;
    havoc irql_4;
    assume {:nonnull} KeyboardExtension_9 != 0;
    assume KeyboardExtension_9 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    status_35 := -1073741823;
    goto L59;

  L59:
    call {:si_unique_call 1714} sdv_KeReleaseSpinLock(0, irql_4);
    goto L51;

  anon25_Then:
    assume {:nonnull} KeyboardExtension_9 != 0;
    assume KeyboardExtension_9 > 0;
    call {:si_unique_call 1715} sdv_IoMarkIrpPending(0);
    call {:si_unique_call 1716} vslice_dummy_var_199 := sdv_IoSetCancelRoutine(Irp_17, li2bplFunctionConstant273);
    status_35 := 259;
    goto L59;
}



procedure {:origName "I8xKeyboardGetSysButtonCaps"} I8xKeyboardGetSysButtonCaps(actual_KeyboardExtension_10: int, actual_Irp_18: int) returns (Tmp_838: int);
  modifies alloc, yogi_error;
  free ensures old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "I8xKeyboardGetSysButtonCaps"} I8xKeyboardGetSysButtonCaps(actual_KeyboardExtension_10: int, actual_Irp_18: int) returns (Tmp_838: int)
{
  var {:scalar} size_1: int;
  var {:pointer} Tmp_839: int;
  var {:scalar} caps: int;
  var {:scalar} status_36: int;
  var {:pointer} stack_5: int;
  var {:pointer} KeyboardExtension_10: int;
  var {:pointer} Irp_18: int;

  anon0:
    KeyboardExtension_10 := actual_KeyboardExtension_10;
    Irp_18 := actual_Irp_18;
    call {:si_unique_call 1717} sdv_do_paged_code_check();
    call {:si_unique_call 1718} stack_5 := sdv_IoGetCurrentIrpStackLocation(Irp_18);
    size_1 := 0;
    assume {:nonnull} stack_5 != 0;
    assume stack_5 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    status_36 := -1073741306;
    goto L18;

  L18:
    assume {:nonnull} Irp_18 != 0;
    assume Irp_18 > 0;
    assume {:nonnull} Irp_18 != 0;
    assume Irp_18 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume Irp_18 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1719} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl13);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} yogi_error != 1;
    goto L37;

  L37:
    call {:si_unique_call 1720} sdv_IoCompleteRequest(0, 0);
    Tmp_838 := status_36;
    goto LM2;

  LM2:
    return;

  anon17_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon16_Then:
    assume !(Irp_18 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L37;

  anon15_Then:
    caps := 0;
    size_1 := 4;
    assume {:nonnull} KeyboardExtension_10 != 0;
    assume KeyboardExtension_10 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    caps := BOR(caps, 1);
    goto L26;

  L26:
    assume {:nonnull} KeyboardExtension_10 != 0;
    assume KeyboardExtension_10 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    caps := BOR(caps, 2);
    goto L28;

  L28:
    assume {:nonnull} KeyboardExtension_10 != 0;
    assume KeyboardExtension_10 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    caps := BOR(caps, 0);
    goto L30;

  L30:
    assume {:nonnull} Irp_18 != 0;
    assume Irp_18 > 0;
    havoc Tmp_839;
    assume {:nonnull} Tmp_839 != 0;
    assume Tmp_839 > 0;
    status_36 := 0;
    goto L18;

  anon14_Then:
    goto L30;

  anon13_Then:
    goto L28;

  anon18_Then:
    goto L26;
}



procedure {:origName "I8xCompleteSysButtonIrp"} I8xCompleteSysButtonIrp(actual_Irp_19: int, actual_Event_4: int, actual_Status_2: int);
  modifies alloc, yogi_error;
  free ensures old(SLAM_guard_S_0) == old(SLAM_guard_S_0_init) ==> yogi_error == old(yogi_error);
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "I8xCompleteSysButtonIrp"} I8xCompleteSysButtonIrp(actual_Irp_19: int, actual_Event_4: int, actual_Status_2: int)
{
  var {:pointer} Tmp_842: int;
  var {:pointer} Irp_19: int;
  var {:scalar} Event_4: int;
  var {:scalar} Status_2: int;
  var vslice_dummy_var_200: int;

  anon0:
    call {:si_unique_call 1721} vslice_dummy_var_200 := __HAVOC_malloc(4);
    Irp_19 := actual_Irp_19;
    Event_4 := actual_Event_4;
    Status_2 := actual_Status_2;
    assume {:nonnull} Irp_19 != 0;
    assume Irp_19 > 0;
    havoc Tmp_842;
    assume {:nonnull} Tmp_842 != 0;
    assume Tmp_842 > 0;
    assume {:nonnull} Irp_19 != 0;
    assume Irp_19 > 0;
    assume {:nonnull} Irp_19 != 0;
    assume Irp_19 > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume Irp_19 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1722} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl13);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    goto L10;

  L10:
    call {:si_unique_call 1723} sdv_IoCompleteRequest(0, 0);
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    assume !(Irp_19 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L10;
}



procedure {:origName "_sdv_init3"} _sdv_init3();
  modifies alloc;



implementation {:origName "_sdv_init3"} _sdv_init3()
{
  var vslice_dummy_var_201: int;

  anon0:
    call {:si_unique_call 1724} vslice_dummy_var_201 := __HAVOC_malloc(4);
    assume ScanCodeToUCharCount_9 == 54;
    return;
}



procedure {:origName "I8xUpdateSysButtonCaps"} I8xUpdateSysButtonCaps(actual_DeviceObject_33: int, actual_Item_2: int);
  modifies alloc, yogi_error;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "I8xUpdateSysButtonCaps"} I8xUpdateSysButtonCaps(actual_DeviceObject_33: int, actual_Item_2: int)
{
  var {:pointer} kbExtension_1: int;
  var {:scalar} sdv_415: int;
  var {:pointer} irp_3: int;
  var {:scalar} strPowerCaps: int;
  var {:pointer} DeviceObject_33: int;
  var {:pointer} Item_2: int;
  var vslice_dummy_var_202: int;
  var vslice_dummy_var_203: int;
  var vslice_dummy_var_204: int;
  var vslice_dummy_var_205: int;
  var vslice_dummy_var_206: int;
  var vslice_dummy_var_207: int;
  var vslice_dummy_var_249: int;

  anon0:
    call {:si_unique_call 1725} strPowerCaps := __HAVOC_malloc(12);
    call {:si_unique_call 1726} vslice_dummy_var_202 := __HAVOC_malloc(4);
    DeviceObject_33 := actual_DeviceObject_33;
    Item_2 := actual_Item_2;
    call {:si_unique_call 1727} sdv_do_paged_code_check();
    assume {:nonnull} DeviceObject_33 != 0;
    assume DeviceObject_33 > 0;
    havoc kbExtension_1;
    assume {:nonnull} Item_2 != 0;
    assume Item_2 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    call {:si_unique_call 1728} sdv_415 := IoOpenDeviceRegistryKey(0, 1, 2031616, 0);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} sdv_415 >= 0;
    assume {:nonnull} Item_2 != 0;
    assume Item_2 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:nonnull} Item_2 != 0;
    assume Item_2 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:nonnull} Item_2 != 0;
    assume Item_2 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} kbExtension_1 != 0;
    assume kbExtension_1 > 0;
    goto L23;

  L23:
    call {:si_unique_call 1729} RtlInitUnicodeString(strPowerCaps, pwPowerCaps);
    assume {:nonnull} kbExtension_1 != 0;
    assume kbExtension_1 > 0;
    call {:si_unique_call 1730} vslice_dummy_var_207 := ZwSetValueKey(0, 0, 0, 4, 0, 4);
    call {:si_unique_call 1731} vslice_dummy_var_203 := ZwClose(0);
    assume {:nonnull} kbExtension_1 != 0;
    assume kbExtension_1 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    call {:si_unique_call 1732} irp_3 := I8xUpdateSysButtonCapsGetPendedIrp(kbExtension_1);
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} irp_3 != 0;
    call {:si_unique_call 1733} I8xCompleteSysButtonIrp(irp_3, 0, -1073741667);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} yogi_error != 1;
    goto L48;

  L48:
    call {:si_unique_call 1734} vslice_dummy_var_205 := IoSetDeviceInterfaceState(0, 0);
    call {:si_unique_call 1735} vslice_dummy_var_206 := IoSetDeviceInterfaceState(0, 1);
    goto L15;

  L15:
    call {:si_unique_call 1736} IoFreeWorkItem(0);
    call {:si_unique_call 1737} sdv_ExFreePool(0);
    goto LM2;

  LM2:
    return;

  anon24_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon20_Then:
    assume {:partition} irp_3 == 0;
    goto L48;

  anon19_Then:
    assume {:nonnull} kbExtension_1 != 0;
    assume kbExtension_1 > 0;
    havoc vslice_dummy_var_249;
    call {:si_unique_call 1738} vslice_dummy_var_204 := I8xRegisterDeviceInterface(vslice_dummy_var_249, GUID_DEVICE_SYS_BUTTON, SysButtonInterfaceName__PORT_KEYBOARD_EXTENSION(kbExtension_1));
    goto L15;

  anon21_Then:
    goto L23;

  anon22_Then:
    assume {:nonnull} kbExtension_1 != 0;
    assume kbExtension_1 > 0;
    goto L23;

  anon18_Then:
    assume {:nonnull} kbExtension_1 != 0;
    assume kbExtension_1 > 0;
    goto L23;

  anon17_Then:
    assume {:partition} 0 > sdv_415;
    goto L15;

  anon23_Then:
    goto L15;
}



procedure {:origName "I8xUpdateSysButtonCapsGetPendedIrp"} I8xUpdateSysButtonCapsGetPendedIrp(actual_KeyboardExtension_11: int) returns (Tmp_848: int);
  modifies alloc;



implementation {:origName "I8xUpdateSysButtonCapsGetPendedIrp"} I8xUpdateSysButtonCapsGetPendedIrp(actual_KeyboardExtension_11: int) returns (Tmp_848: int)
{
  var {:scalar} sdv_422: int;
  var {:pointer} irp_4: int;
  var {:pointer} Tmp_849: int;
  var {:scalar} irql_6: int;
  var {:pointer} KeyboardExtension_11: int;

  anon0:
    KeyboardExtension_11 := actual_KeyboardExtension_11;
    call {:si_unique_call 1739} Tmp_849 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_849 != 0;
    assume Tmp_849 > 0;
    call {:si_unique_call 1740} sdv_KeAcquireSpinLock(0, Tmp_849);
    assume {:nonnull} Tmp_849 != 0;
    assume Tmp_849 > 0;
    havoc irql_6;
    assume {:nonnull} KeyboardExtension_11 != 0;
    assume KeyboardExtension_11 > 0;
    havoc irp_4;
    assume {:nonnull} KeyboardExtension_11 != 0;
    assume KeyboardExtension_11 > 0;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} irp_4 != 0;
    call {:si_unique_call 1741} sdv_422 := sdv_IoSetCancelRoutine(irp_4, 0);
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} sdv_422 == 0;
    irp_4 := 0;
    goto L11;

  L11:
    call {:si_unique_call 1742} sdv_KeReleaseSpinLock(0, irql_6);
    Tmp_848 := irp_4;
    return;

  anon5_Then:
    assume {:partition} sdv_422 != 0;
    goto L11;

  anon6_Then:
    assume {:partition} irp_4 == 0;
    goto L11;
}



procedure {:origName "_sdv_init5"} _sdv_init5();
  modifies alloc;



implementation {:origName "_sdv_init5"} _sdv_init5()
{
  var vslice_dummy_var_208: int;

  anon0:
    call {:si_unique_call 1743} vslice_dummy_var_208 := __HAVOC_malloc(4);
    assume ScanCodeToUCharCount_10 == 54;
    return;
}



procedure {:origName "I8xInitWmi"} I8xInitWmi(actual_CommonData_1: int) returns (Tmp_852: int);
  modifies alloc;
  free ensures Tmp_852 == -1073741823 || Tmp_852 == -1073741811 || Tmp_852 == 0;



implementation {:origName "I8xInitWmi"} I8xInitWmi(actual_CommonData_1: int) returns (Tmp_852: int)
{
  var {:pointer} CommonData_1: int;

  anon0:
    CommonData_1 := actual_CommonData_1;
    call {:si_unique_call 1744} sdv_do_paged_code_check();
    assume {:nonnull} CommonData_1 != 0;
    assume CommonData_1 > 0;
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:nonnull} CommonData_1 != 0;
    assume CommonData_1 > 0;
    assume {:nonnull} CommonData_1 != 0;
    assume CommonData_1 > 0;
    assume {:nonnull} CommonData_1 != 0;
    assume CommonData_1 > 0;
    goto L11;

  L11:
    assume {:nonnull} CommonData_1 != 0;
    assume CommonData_1 > 0;
    assume {:nonnull} CommonData_1 != 0;
    assume CommonData_1 > 0;
    assume {:nonnull} CommonData_1 != 0;
    assume CommonData_1 > 0;
    assume {:nonnull} CommonData_1 != 0;
    assume CommonData_1 > 0;
    assume {:nonnull} CommonData_1 != 0;
    assume CommonData_1 > 0;
    call {:si_unique_call 1745} Tmp_852 := IoWMIRegistrationControl(0, 1);
    return;

  anon3_Then:
    assume {:nonnull} CommonData_1 != 0;
    assume CommonData_1 > 0;
    assume {:nonnull} CommonData_1 != 0;
    assume CommonData_1 > 0;
    assume {:nonnull} CommonData_1 != 0;
    assume CommonData_1 > 0;
    goto L11;
}



procedure {:origName "I8xSystemControl"} I8xSystemControl(actual_DeviceObject_34: int, actual_Irp_20: int) returns (Tmp_854: int);
  modifies alloc, s, yogi_error;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "I8xSystemControl"} I8xSystemControl(actual_DeviceObject_34: int, actual_Irp_20: int) returns (Tmp_854: int)
{
  var {:dopa} {:scalar} disposition: int;
  var {:pointer} commonData_3: int;
  var {:scalar} status_38: int;
  var {:pointer} DeviceObject_34: int;
  var {:pointer} Irp_20: int;
  var vslice_dummy_var_250: int;
  var vslice_dummy_var_251: int;

  anon0:
    call {:si_unique_call 1746} disposition := __HAVOC_malloc(4);
    DeviceObject_34 := actual_DeviceObject_34;
    Irp_20 := actual_Irp_20;
    call {:si_unique_call 1747} sdv_do_paged_code_check();
    assume {:nonnull} DeviceObject_34 != 0;
    assume DeviceObject_34 > 0;
    havoc commonData_3;
    call {:si_unique_call 1748} status_38 := WmiSystemControl(0, 0, Irp_20, disposition);
    assume {:nonnull} disposition != 0;
    assume disposition > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:nonnull} disposition != 0;
    assume disposition > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:nonnull} disposition != 0;
    assume disposition > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:nonnull} disposition != 0;
    assume disposition > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    goto L22;

  L22:
    call {:si_unique_call 1749} sdv_IoSkipCurrentIrpStackLocation(Irp_20);
    assume {:nonnull} commonData_3 != 0;
    assume commonData_3 > 0;
    havoc vslice_dummy_var_250;
    call {:si_unique_call 1750} status_38 := sdv_IoCallDriver(vslice_dummy_var_250, Irp_20);
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} yogi_error != 1;
    goto L30;

  L30:
    Tmp_854 := status_38;
    call {:si_unique_call 1751} SLIC_I8xSystemControl_exit(strConst__li2bpl12, Tmp_854);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon24_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon26_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon21_Then:
    call {:si_unique_call 1752} sdv_IoSkipCurrentIrpStackLocation(Irp_20);
    assume {:nonnull} commonData_3 != 0;
    assume commonData_3 > 0;
    havoc vslice_dummy_var_251;
    call {:si_unique_call 1753} status_38 := sdv_IoCallDriver(vslice_dummy_var_251, Irp_20);
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} yogi_error != 1;
    goto L30;

  anon27_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon22_Then:
    goto L22;

  anon23_Then:
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume Irp_20 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1754} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl13);
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} yogi_error != 1;
    goto L46;

  L46:
    call {:si_unique_call 1755} sdv_IoCompleteRequest(0, 0);
    goto L30;

  anon25_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon20_Then:
    assume !(Irp_20 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L46;

  anon19_Then:
    goto L30;
}



procedure {:origName "_sdv_init4"} _sdv_init4();
  modifies alloc;



implementation {:origName "_sdv_init4"} _sdv_init4()
{
  var vslice_dummy_var_209: int;

  anon0:
    call {:si_unique_call 1756} vslice_dummy_var_209 := __HAVOC_malloc(4);
    assume ScanCodeToUCharCount_11 == 54;
    return;
}



procedure {:origName "I8042CompletionDpc"} I8042CompletionDpc(actual_Dpc_12: int, actual_DeviceObject_35: int, actual_Irp_21: int, actual_IsrDpcCause: int);
  modifies alloc, yogi_error, Mem_T.CompletionRoutine__IO_STACK_LOCATION;
  free ensures yogi_error == 0;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "I8042CompletionDpc"} I8042CompletionDpc(actual_Dpc_12: int, actual_DeviceObject_35: int, actual_Irp_21: int, actual_IsrDpcCause: int)
{
  var {:pointer} kbExtension_2: int;
  var {:pointer} commonData_4: int;
  var {:pointer} irpSp_2: int;
  var {:pointer} Tmp_859: int;
  var {:pointer} mouseExtension_3: int;
  var {:pointer} Tmp_862: int;
  var {:pointer} DeviceObject_35: int;
  var {:pointer} Irp_21: int;
  var vslice_dummy_var_210: int;
  var vslice_dummy_var_211: int;
  var vslice_dummy_var_212: int;

  anon0:
    call {:si_unique_call 1757} vslice_dummy_var_210 := __HAVOC_malloc(4);
    DeviceObject_35 := actual_DeviceObject_35;
    Irp_21 := actual_Irp_21;
    assume {:nonnull} DeviceObject_35 != 0;
    assume DeviceObject_35 > 0;
    havoc kbExtension_2;
    assume {:nonnull} DeviceObject_35 != 0;
    assume DeviceObject_35 > 0;
    havoc mouseExtension_3;
    assume {:nonnull} DeviceObject_35 != 0;
    assume DeviceObject_35 > 0;
    havoc commonData_4;
    call {:si_unique_call 1758} vslice_dummy_var_212 := KeCancelTimer(0);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} Irp_21 == 0;
    goto L44;

  L44:
    call {:si_unique_call 1759} IoFreeController(0);
    call {:si_unique_call 1760} IoStartNextPacket(0, 0);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} Irp_21 != 0;
    assume {:nonnull} commonData_4 != 0;
    assume commonData_4 > 0;
    call {:si_unique_call 1761} vslice_dummy_var_211 := sdv_IoReleaseRemoveLock(RemoveLock_COMMON_DATA(commonData_4), Irp_21);
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon21_Then:
    assume {:partition} Irp_21 == 0;
    goto L1;

  anon17_Then:
    assume {:partition} Irp_21 != 0;
    call {:si_unique_call 1762} irpSp_2 := sdv_IoGetCurrentIrpStackLocation(Irp_21);
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:nonnull} irpSp_2 != 0;
    assume irpSp_2 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    goto L28;

  L28:
    assume {:nonnull} Irp_21 != 0;
    assume Irp_21 > 0;
    call {:si_unique_call 1763} sdv_IoCompleteRequest(0, 6);
    call {:si_unique_call 1764} sdv_KeAcquireSpinLockAtDpcLevel(0);
    assume {:nonnull} commonData_4 != 0;
    assume commonData_4 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:nonnull} commonData_4 != 0;
    assume commonData_4 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} commonData_4 != 0;
    assume commonData_4 > 0;
    call {:si_unique_call 1765} sdv_ExFreePool(0);
    goto L36;

  L36:
    assume {:nonnull} commonData_4 != 0;
    assume commonData_4 > 0;
    call {:si_unique_call 1766} sdv_KeReleaseSpinLockFromDpcLevel(0);
    goto L44;

  anon20_Then:
    goto L36;

  anon19_Then:
    goto L36;

  anon22_Then:
    call {:si_unique_call 1767} I8xFinishResetRequest#1(mouseExtension_3, 0, 0, 1);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon24_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon23_Then:
    assume {:nonnull} Irp_21 != 0;
    assume Irp_21 > 0;
    havoc Tmp_859;
    assume {:nonnull} Tmp_859 != 0;
    assume Tmp_859 > 0;
    assume {:nonnull} kbExtension_2 != 0;
    assume kbExtension_2 > 0;
    assume {:nonnull} Tmp_859 != 0;
    assume Tmp_859 > 0;
    assume {:nonnull} kbExtension_2 != 0;
    assume kbExtension_2 > 0;
    goto L28;

  anon18_Then:
    assume {:nonnull} Irp_21 != 0;
    assume Irp_21 > 0;
    havoc Tmp_862;
    assume {:nonnull} Tmp_862 != 0;
    assume Tmp_862 > 0;
    assume {:nonnull} kbExtension_2 != 0;
    assume kbExtension_2 > 0;
    assume {:nonnull} Tmp_862 != 0;
    assume Tmp_862 > 0;
    assume {:nonnull} kbExtension_2 != 0;
    assume kbExtension_2 > 0;
    assume {:nonnull} Tmp_862 != 0;
    assume Tmp_862 > 0;
    assume {:nonnull} kbExtension_2 != 0;
    assume kbExtension_2 > 0;
    goto L28;
}



procedure {:origName "I8xSanityCheckResources"} I8xSanityCheckResources() returns (Tmp_863: int);
  modifies alloc;
  free ensures Tmp_863 == 1 || Tmp_863 == 0;



implementation {:origName "I8xSanityCheckResources"} I8xSanityCheckResources() returns (Tmp_863: int)
{
  var {:scalar} i_18: int;
  var {:pointer} Tmp_864: int;
  var {:pointer} Tmp_865: int;
  var {:pointer} Tmp_866: int;
  var {:pointer} Tmp_867: int;
  var {:scalar} Tmp_868: int;
  var {:scalar} Tmp_869: int;
  var {:scalar} tmpResourceDescriptor: int;
  var {:pointer} sdv_429: int;
  var {:scalar} Tmp_870: int;
  var {:pointer} Tmp_871: int;
  var {:pointer} Tmp_872: int;
  var {:pointer} Tmp_874: int;
  var {:scalar} Tmp_875: int;
  var {:scalar} Tmp_876: int;
  var {:pointer} Tmp_877: int;
  var {:pointer} Tmp_878: int;
  var {:pointer} configuration_5: int;
  var {:scalar} Tmp_879: int;
  var {:pointer} Tmp_880: int;
  var {:pointer} Tmp_881: int;
  var {:pointer} Tmp_882: int;
  var {:scalar} Tmp_883: int;
  var {:pointer} Tmp_884: int;
  var {:pointer} Tmp_885: int;
  var {:pointer} Tmp_886: int;
  var {:pointer} Tmp_887: int;
  var {:pointer} Tmp_888: int;

  anon0:
    call {:si_unique_call 1768} tmpResourceDescriptor := __HAVOC_malloc(284);
    call {:si_unique_call 1769} Tmp_883 := __HAVOC_malloc(20);
    call {:si_unique_call 1770} Tmp_864 := __HAVOC_malloc(584);
    call {:si_unique_call 1771} Tmp_865 := __HAVOC_malloc(584);
    call {:si_unique_call 1772} Tmp_866 := __HAVOC_malloc(584);
    call {:si_unique_call 1773} Tmp_867 := __HAVOC_malloc(584);
    call {:si_unique_call 1774} Tmp_871 := __HAVOC_malloc(584);
    call {:si_unique_call 1775} Tmp_872 := __HAVOC_malloc(584);
    call {:si_unique_call 1776} Tmp_874 := __HAVOC_malloc(8);
    call {:si_unique_call 1777} Tmp_877 := __HAVOC_malloc(8);
    call {:si_unique_call 1778} Tmp_878 := __HAVOC_malloc(584);
    call {:si_unique_call 1779} Tmp_880 := __HAVOC_malloc(584);
    call {:si_unique_call 1780} Tmp_881 := __HAVOC_malloc(584);
    call {:si_unique_call 1781} Tmp_882 := __HAVOC_malloc(584);
    call {:si_unique_call 1782} Tmp_884 := __HAVOC_malloc(584);
    call {:si_unique_call 1783} Tmp_885 := __HAVOC_malloc(8);
    call {:si_unique_call 1784} Tmp_886 := __HAVOC_malloc(584);
    call {:si_unique_call 1785} Tmp_887 := __HAVOC_malloc(584);
    call {:si_unique_call 1786} Tmp_888 := __HAVOC_malloc(584);
    call {:si_unique_call 1787} sdv_do_paged_code_check();
    havoc configuration_5;
    assume {:nonnull} configuration_5 != 0;
    assume configuration_5 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:nonnull} configuration_5 != 0;
    assume configuration_5 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:nonnull} configuration_5 != 0;
    assume configuration_5 > 0;
    havoc Tmp_881;
    assume {:nonnull} Tmp_881 != 0;
    assume Tmp_881 > 0;
    assume {:nonnull} configuration_5 != 0;
    assume configuration_5 > 0;
    havoc Tmp_864;
    assume {:nonnull} configuration_5 != 0;
    assume configuration_5 > 0;
    havoc Tmp_888;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} Tmp_864 != 0;
    assume Tmp_864 > 0;
    assume {:nonnull} Tmp_888 != 0;
    assume Tmp_888 > 0;
    assume {:nonnull} configuration_5 != 0;
    assume configuration_5 > 0;
    havoc Tmp_887;
    assume {:nonnull} configuration_5 != 0;
    assume configuration_5 > 0;
    havoc Tmp_886;
    assume {:nonnull} Tmp_886 != 0;
    assume Tmp_886 > 0;
    assume {:nonnull} Tmp_887 != 0;
    assume Tmp_887 > 0;
    assume {:nonnull} configuration_5 != 0;
    assume configuration_5 > 0;
    goto L26;

  L26:
    assume {:nonnull} configuration_5 != 0;
    assume configuration_5 > 0;
    havoc Tmp_880;
    assume {:nonnull} configuration_5 != 0;
    assume configuration_5 > 0;
    havoc Tmp_866;
    assume {:nonnull} Tmp_866 != 0;
    assume Tmp_866 > 0;
    assume {:nonnull} Tmp_880 != 0;
    assume Tmp_880 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:nonnull} configuration_5 != 0;
    assume configuration_5 > 0;
    havoc Tmp_878;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_878 != 0;
    assume Tmp_878 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} configuration_5 != 0;
    assume configuration_5 > 0;
    havoc Tmp_871;
    assume {:nonnull} configuration_5 != 0;
    assume configuration_5 > 0;
    havoc Tmp_884;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} Tmp_871 != 0;
    assume Tmp_871 > 0;
    assume {:nonnull} Tmp_884 != 0;
    assume Tmp_884 > 0;
    assume {:nonnull} configuration_5 != 0;
    assume configuration_5 > 0;
    havoc Tmp_865;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    assume {:nonnull} Tmp_865 != 0;
    assume Tmp_865 > 0;
    assume {:nonnull} tmpResourceDescriptor != 0;
    assume tmpResourceDescriptor > 0;
    goto L31;

  L31:
    havoc Tmp_874;
    assume {:nonnull} Tmp_874 != 0;
    assume Tmp_874 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    goto L36;

  L36:
    i_18 := 0;
    goto L37;

  L37:
    call {:si_unique_call 1788} i_18 := I8xSanityCheckResources_loop_L37(i_18, configuration_5);
    goto L37_last;

  L37_last:
    assume {:nonnull} configuration_5 != 0;
    assume configuration_5 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    i_18 := i_18 + 1;
    goto anon19_Else_dummy;

  anon19_Else_dummy:
    assume false;
    return;

  anon19_Then:
    Tmp_863 := 1;
    goto L1;

  L1:
    return;

  anon24_Then:
    goto anon18_Then, anon18_Else;

  anon18_Else:
    i_18 := 0;
    goto L42;

  L42:
    call {:si_unique_call 1789} i_18, Tmp_867, Tmp_868, sdv_429, Tmp_870, Tmp_876, Tmp_877, Tmp_879, Tmp_882 := I8xSanityCheckResources_loop_L42(i_18, Tmp_867, Tmp_868, sdv_429, Tmp_870, Tmp_876, Tmp_877, Tmp_879, Tmp_882, Tmp_883);
    goto L42_last;

  L42_last:
    goto anon20_Then, anon20_Else;

  anon20_Else:
    Tmp_876 := i_18;
    havoc Tmp_882;
    assume {:nonnull} Tmp_882 != 0;
    assume Tmp_882 > 0;
    havoc Tmp_870;
    Tmp_879 := i_18;
    havoc Tmp_867;
    assume {:nonnull} Tmp_867 != 0;
    assume Tmp_867 > 0;
    assume {:nonnull} Tmp_883 != 0;
    assume Tmp_883 > 0;
    assume {:nonnull} Tmp_867 != 0;
    assume Tmp_867 > 0;
    assume {:nonnull} Tmp_883 != 0;
    assume Tmp_883 > 0;
    assume {:nonnull} Tmp_867 != 0;
    assume Tmp_867 > 0;
    assume {:nonnull} Tmp_883 != 0;
    assume Tmp_883 > 0;
    assume {:nonnull} Tmp_867 != 0;
    assume Tmp_867 > 0;
    assume {:nonnull} Tmp_883 != 0;
    assume Tmp_883 > 0;
    assume {:nonnull} Tmp_867 != 0;
    assume Tmp_867 > 0;
    assume {:nonnull} Tmp_883 != 0;
    assume Tmp_883 > 0;
    call {:si_unique_call 1790} sdv_429 := MmMapIoSpace(Tmp_883, Tmp_870, 0);
    Tmp_868 := i_18;
    havoc Tmp_877;
    assume {:nonnull} Tmp_877 != 0;
    assume Tmp_877 > 0;
    i_18 := i_18 + 1;
    goto anon20_Else_dummy;

  anon20_Else_dummy:
    assume false;
    return;

  anon20_Then:
    goto L36;

  anon18_Then:
    i_18 := 0;
    goto L52;

  L52:
    call {:si_unique_call 1791} i_18, Tmp_869, Tmp_872, Tmp_875, Tmp_885 := I8xSanityCheckResources_loop_L52(i_18, Tmp_869, Tmp_872, Tmp_875, Tmp_885);
    goto L52_last;

  L52_last:
    goto anon21_Then, anon21_Else;

  anon21_Else:
    Tmp_869 := i_18;
    havoc Tmp_885;
    Tmp_875 := i_18;
    havoc Tmp_872;
    assume {:nonnull} Tmp_872 != 0;
    assume Tmp_872 > 0;
    assume {:nonnull} Tmp_885 != 0;
    assume Tmp_885 > 0;
    i_18 := i_18 + 1;
    goto anon21_Else_dummy;

  anon21_Else_dummy:
    assume false;
    return;

  anon21_Then:
    goto L36;

  anon23_Then:
    goto L31;

  anon17_Then:
    goto L26;

  anon22_Then:
    Tmp_863 := 0;
    goto L1;
}



procedure {:origName "I8042RetriesExceededDpc"} I8042RetriesExceededDpc(actual_Dpc_13: int, actual_DeviceObjectIn_5: int, actual_IrpIn_2: int, actual_Context_13: int);
  modifies alloc;



implementation {:origName "I8042RetriesExceededDpc"} I8042RetriesExceededDpc(actual_Dpc_13: int, actual_DeviceObjectIn_5: int, actual_IrpIn_2: int, actual_Context_13: int)
{
  var {:scalar} i_19: int;
  var {:pointer} Tmp_889: int;
  var {:pointer} Irp_22: int;
  var {:scalar} Tmp_891: int;
  var {:pointer} commonData_5: int;
  var {:pointer} irpSp_3: int;
  var {:pointer} sdv_430: int;
  var {:scalar} Tmp_892: int;
  var {:pointer} errorLogEntry_3: int;
  var {:scalar} Tmp_894: int;
  var {:pointer} DeviceObject_36: int;
  var {:pointer} Tmp_896: int;
  var {:scalar} Tmp_897: int;
  var {:pointer} DeviceObjectIn_5: int;
  var {:pointer} IrpIn_2: int;
  var vslice_dummy_var_213: int;

  anon0:
    call {:si_unique_call 1792} vslice_dummy_var_213 := __HAVOC_malloc(4);
    DeviceObjectIn_5 := actual_DeviceObjectIn_5;
    IrpIn_2 := actual_IrpIn_2;
    call {:si_unique_call 1793} Tmp_896 := __HAVOC_malloc(4);
    DeviceObject_36 := DeviceObjectIn_5;
    Irp_22 := IrpIn_2;
    assume {:nonnull} DeviceObject_36 != 0;
    assume DeviceObject_36 > 0;
    havoc commonData_5;
    assume {:nonnull} Irp_22 != 0;
    assume Irp_22 > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} commonData_5 != 0;
    assume commonData_5 > 0;
    havoc Tmp_897;
    call {:si_unique_call 1794} sdv_430 := IoAllocateErrorLogEntry(0, Tmp_897);
    errorLogEntry_3 := sdv_430;
    call {:si_unique_call 1795} sdv_KeAcquireSpinLockAtDpcLevel(0);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} errorLogEntry_3 != 0;
    assume {:nonnull} commonData_5 != 0;
    assume commonData_5 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    Tmp_892 := -1073414118;
    goto L30;

  L30:
    assume {:nonnull} errorLogEntry_3 != 0;
    assume errorLogEntry_3 > 0;
    assume {:nonnull} commonData_5 != 0;
    assume commonData_5 > 0;
    assume {:nonnull} errorLogEntry_3 != 0;
    assume errorLogEntry_3 > 0;
    assume {:nonnull} commonData_5 != 0;
    assume commonData_5 > 0;
    assume {:nonnull} errorLogEntry_3 != 0;
    assume errorLogEntry_3 > 0;
    call {:si_unique_call 1796} irpSp_3 := sdv_IoGetCurrentIrpStackLocation(Irp_22);
    assume {:nonnull} errorLogEntry_3 != 0;
    assume errorLogEntry_3 > 0;
    assume {:nonnull} irpSp_3 != 0;
    assume irpSp_3 > 0;
    assume {:nonnull} errorLogEntry_3 != 0;
    assume errorLogEntry_3 > 0;
    assume {:nonnull} irpSp_3 != 0;
    assume irpSp_3 > 0;
    assume {:nonnull} commonData_5 != 0;
    assume commonData_5 > 0;
    assume {:nonnull} errorLogEntry_3 != 0;
    assume errorLogEntry_3 > 0;
    assume {:nonnull} errorLogEntry_3 != 0;
    assume errorLogEntry_3 > 0;
    assume {:nonnull} Irp_22 != 0;
    assume Irp_22 > 0;
    assume {:nonnull} errorLogEntry_3 != 0;
    assume errorLogEntry_3 > 0;
    assume {:nonnull} commonData_5 != 0;
    assume commonData_5 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    i_19 := 0;
    goto L47;

  L47:
    call {:si_unique_call 1797} i_19, Tmp_889, Tmp_891, Tmp_894, Tmp_896 := I8042RetriesExceededDpc_loop_L47(i_19, Tmp_889, Tmp_891, commonData_5, errorLogEntry_3, Tmp_894, Tmp_896);
    goto L47_last;

  L47_last:
    assume {:nonnull} commonData_5 != 0;
    assume commonData_5 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    Tmp_894 := i_19;
    assume {:nonnull} errorLogEntry_3 != 0;
    assume errorLogEntry_3 > 0;
    havoc Tmp_896;
    Tmp_891 := i_19;
    assume {:nonnull} commonData_5 != 0;
    assume commonData_5 > 0;
    havoc Tmp_889;
    assume {:nonnull} Tmp_889 != 0;
    assume Tmp_889 > 0;
    assume {:nonnull} Tmp_896 != 0;
    assume Tmp_896 > 0;
    i_19 := i_19 + 1;
    goto anon18_Else_dummy;

  anon18_Else_dummy:
    assume false;
    return;

  anon18_Then:
    goto L43;

  L43:
    call {:si_unique_call 1798} IoWriteErrorLogEntry(0);
    goto L26;

  L26:
    assume {:nonnull} commonData_5 != 0;
    assume commonData_5 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:nonnull} commonData_5 != 0;
    assume commonData_5 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:nonnull} commonData_5 != 0;
    assume commonData_5 > 0;
    call {:si_unique_call 1799} sdv_ExFreePool(0);
    goto L50;

  L50:
    assume {:nonnull} commonData_5 != 0;
    assume commonData_5 > 0;
    call {:si_unique_call 1800} sdv_KeReleaseSpinLockFromDpcLevel(0);
    call {:si_unique_call 1801} I8xCompletePendedRequest(DeviceObject_36, Irp_22, 0, -1073741643);
    return;

  anon19_Then:
    goto L50;

  anon16_Then:
    goto L50;

  anon21_Then:
    goto L43;

  anon17_Then:
    Tmp_892 := -1073414091;
    goto L30;

  anon15_Then:
    assume {:partition} errorLogEntry_3 == 0;
    goto L26;

  anon20_Then:
    call {:si_unique_call 1802} sdv_KeAcquireSpinLockAtDpcLevel(0);
    goto L26;
}



procedure {:origName "_InlineInterlockedExchangePointer"} _InlineInterlockedExchangePointer(actual_Destination_4: int, actual_Value: int) returns (Tmp_898: int);



implementation {:origName "_InlineInterlockedExchangePointer"} _InlineInterlockedExchangePointer(actual_Destination_4: int, actual_Value: int) returns (Tmp_898: int)
{
  var {:scalar} sdv_432: int;

  anon0:
    Tmp_898 := sdv_432;
    return;
}



procedure {:origName "I8xSendIoctl"} I8xSendIoctl(actual_Target: int, actual_Ioctl: int, actual_InputBuffer_1: int, actual_InputBufferLength_1: int) returns (Tmp_900: int);
  modifies alloc, s, yogi_error;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "I8xSendIoctl"} I8xSendIoctl(actual_Target: int, actual_Ioctl: int, actual_InputBuffer_1: int, actual_InputBufferLength_1: int) returns (Tmp_900: int)
{
  var {:pointer} irp_5: int;
  var {:scalar} iosb: int;
  var {:scalar} status_39: int;
  var {:scalar} event_3: int;
  var {:pointer} Target: int;
  var {:scalar} Ioctl: int;
  var {:scalar} InputBufferLength_1: int;

  anon0:
    call {:si_unique_call 1803} iosb := __HAVOC_malloc(12);
    call {:si_unique_call 1804} event_3 := __HAVOC_malloc(156);
    Target := actual_Target;
    Ioctl := actual_Ioctl;
    InputBufferLength_1 := actual_InputBufferLength_1;
    status_39 := 0;
    call {:si_unique_call 1805} KeInitializeEvent(event_3, 0, 0);
    call {:si_unique_call 1806} irp_5 := IoBuildDeviceIoControlRequest(Ioctl, 0, 0, InputBufferLength_1, 0, 0, 1, 0, iosb);
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} irp_5 != 0;
    call {:si_unique_call 1807} status_39 := sdv_IoCallDriver(Target, irp_5);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} 259 == status_39;
    call {:si_unique_call 1808} status_39 := KeWaitForSingleObject(0, 0, 0, 0, 0);
    assume {:nonnull} iosb != 0;
    assume iosb > 0;
    havoc status_39;
    goto L22;

  L22:
    Tmp_900 := status_39;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon8_Then:
    assume {:partition} 259 != status_39;
    goto L22;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume {:partition} irp_5 == 0;
    Tmp_900 := -1073741670;
    goto L1;
}



procedure {:origName "_sdv_init1"} _sdv_init1();
  modifies alloc;



implementation {:origName "_sdv_init1"} _sdv_init1()
{
  var vslice_dummy_var_214: int;

  anon0:
    call {:si_unique_call 1809} vslice_dummy_var_214 := __HAVOC_malloc(4);
    assume ScanCodeToUCharCount_12 == 54;
    return;
}



procedure {:origName "I8xInitiateIo"} I8xInitiateIo(actual_DeviceObject_37: int);
  modifies alloc, yogi_error, Mem_T.CompletionRoutine__IO_STACK_LOCATION;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "I8xInitiateIo"} I8xInitiateIo(actual_DeviceObject_37: int)
{
  var {:pointer} commonData_6: int;
  var {:scalar} Tmp_905: int;
  var {:pointer} bytes: int;
  var {:scalar} Tmp_907: int;
  var {:scalar} Tmp_908: int;
  var {:pointer} DeviceObject_37: int;
  var vslice_dummy_var_215: int;
  var vslice_dummy_var_216: int;

  anon0:
    call {:si_unique_call 1810} vslice_dummy_var_215 := __HAVOC_malloc(4);
    DeviceObject_37 := actual_DeviceObject_37;
    assume {:nonnull} DeviceObject_37 != 0;
    assume DeviceObject_37 > 0;
    havoc commonData_6;
    assume {:nonnull} commonData_6 != 0;
    assume commonData_6 > 0;
    havoc bytes;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} bytes != 0;
    assume {:nonnull} commonData_6 != 0;
    assume commonData_6 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:nonnull} commonData_6 != 0;
    assume commonData_6 > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:nonnull} commonData_6 != 0;
    assume commonData_6 > 0;
    goto anon16_Then, anon16_Else;

  anon16_Else:
    goto L17;

  L17:
    assume {:nonnull} commonData_6 != 0;
    assume commonData_6 > 0;
    assume {:nonnull} commonData_6 != 0;
    assume commonData_6 > 0;
    havoc Tmp_908;
    assume {:nonnull} bytes != 0;
    assume bytes > 0;
    havoc Tmp_907;
    call {:si_unique_call 1811} I8xPutByteAsynchronous(0, Tmp_907);
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon16_Then:
    call {:si_unique_call 1812} I8xPutByteAsynchronous(1, 212);
    goto L17;

  anon14_Then:
    assume {:nonnull} commonData_6 != 0;
    assume commonData_6 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    Tmp_905 := -1073414130;
    goto L24;

  L24:
    assume {:nonnull} commonData_6 != 0;
    assume commonData_6 > 0;
    call {:si_unique_call 1813} vslice_dummy_var_216 := KeInsertQueueDpc#1(ErrorLogDpc_COMMON_DATA(commonData_6), 0, Tmp_905);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon18_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon15_Then:
    Tmp_905 := -1073414092;
    goto L24;

  anon13_Then:
    goto L1;

  anon17_Then:
    assume {:partition} bytes == 0;
    goto L1;
}



procedure {:origName "I8xInternalDeviceControl"} I8xInternalDeviceControl(actual_DeviceObject_38: int, actual_Irp_23: int) returns (Tmp_909: int);
  modifies alloc, s, yogi_error;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "I8xInternalDeviceControl"} I8xInternalDeviceControl(actual_DeviceObject_38: int, actual_Irp_23: int) returns (Tmp_909: int)
{
  var {:pointer} kbExtension_3: int;
  var {:pointer} Tmp_910: int;
  var {:pointer} Tmp_911: int;
  var {:scalar} sizeOfTranslation: int;
  var {:pointer} Tmp_912: int;
  var {:pointer} irpSp_4: int;
  var {:scalar} keyboardId_1: int;
  var {:pointer} Tmp_913: int;
  var {:pointer} topOfStack_2: int;
  var {:pointer} Tmp_914: int;
  var {:pointer} keyboardAttributes: int;
  var {:pointer} translation: int;
  var {:pointer} Tmp_916: int;
  var {:scalar} Tmp_917: int;
  var {:pointer} hookKeyboard: int;
  var {:pointer} Tmp_918: int;
  var {:pointer} Tmp_919: int;
  var {:scalar} Tmp_920: int;
  var {:scalar} InternalMode_1: int;
  var {:pointer} Tmp_921: int;
  var {:pointer} mouseExtension_4: int;
  var {:pointer} Tmp_922: int;
  var {:pointer} Tmp_923: int;
  var {:pointer} sdv_446: int;
  var {:pointer} Tmp_924: int;
  var {:pointer} parameters_4: int;
  var {:scalar} status_40: int;
  var {:scalar} Tmp_925: int;
  var {:pointer} hookMouse: int;
  var {:pointer} sdv_449: int;
  var {:pointer} Tmp_926: int;
  var {:pointer} DeviceObject_38: int;
  var {:pointer} Irp_23: int;
  var vslice_dummy_var_217: int;
  var vslice_dummy_var_218: int;
  var vslice_dummy_var_219: int;
  var vslice_dummy_var_220: int;
  var vslice_dummy_var_221: int;
  var vslice_dummy_var_222: int;
  var vslice_dummy_var_252: int;
  var vslice_dummy_var_253: int;

  anon0:
    call {:si_unique_call 1814} keyboardId_1 := __HAVOC_malloc(8);
    DeviceObject_38 := actual_DeviceObject_38;
    Irp_23 := actual_Irp_23;
    assume {:nonnull} DeviceObject_38 != 0;
    assume DeviceObject_38 > 0;
    havoc mouseExtension_4;
    assume {:nonnull} DeviceObject_38 != 0;
    assume DeviceObject_38 > 0;
    havoc kbExtension_3;
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    call {:si_unique_call 1815} irpSp_4 := sdv_IoGetCurrentIrpStackLocation(Irp_23);
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon139_Then, anon139_Else;

  anon139_Else:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon184_Then, anon184_Else;

  anon184_Else:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon183_Then, anon183_Else;

  anon183_Else:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon182_Then, anon182_Else;

  anon182_Else:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon181_Then, anon181_Else;

  anon181_Else:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon180_Then, anon180_Else;

  anon180_Else:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon179_Then, anon179_Else;

  anon179_Else:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon178_Then, anon178_Else;

  anon178_Else:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon177_Then, anon177_Else;

  anon177_Else:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon176_Then, anon176_Else;

  anon176_Else:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon175_Then, anon175_Else;

  anon175_Else:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon174_Then, anon174_Else;

  anon174_Else:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon173_Then, anon173_Else;

  anon173_Else:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon172_Then, anon172_Else;

  anon172_Else:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon171_Then, anon171_Else;

  anon171_Else:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon170_Then, anon170_Else;

  anon170_Else:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon169_Then, anon169_Else;

  anon169_Else:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon168_Then, anon168_Else;

  anon168_Else:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon167_Then, anon167_Else;

  anon167_Else:
    goto L35;

  L35:
    status_40 := 0;
    goto L43;

  L43:
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    goto anon185_Then, anon185_Else;

  anon185_Else:
    assume {:partition} status_40 == 259;
    assume {:nonnull} DeviceObject_38 != 0;
    assume DeviceObject_38 > 0;
    havoc Tmp_921;
    assume {:nonnull} Tmp_921 != 0;
    assume Tmp_921 > 0;
    call {:si_unique_call 1816} status_40 := sdv_IoAcquireRemoveLock(0, 0);
    goto anon152_Then, anon152_Else;

  anon152_Else:
    assume {:partition} status_40 >= 0;
    status_40 := 259;
    call {:si_unique_call 1817} sdv_IoMarkIrpPending(0);
    call {:si_unique_call 1818} IoStartPacket(0, 0, 0, 0);
    goto L62;

  L62:
    Tmp_909 := status_40;
    call {:si_unique_call 1819} SLIC_I8xInternalDeviceControl_exit(strConst__li2bpl12, Tmp_909);
    goto anon186_Then, anon186_Else;

  anon186_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon186_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon152_Then:
    assume {:partition} 0 > status_40;
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    goto anon187_Then, anon187_Else;

  anon187_Else:
    assume Irp_23 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1820} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl13);
    goto anon188_Then, anon188_Else;

  anon188_Else:
    assume {:partition} yogi_error != 1;
    goto L304;

  L304:
    call {:si_unique_call 1821} sdv_IoCompleteRequest(0, 0);
    goto L62;

  anon188_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon187_Then:
    assume !(Irp_23 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L304;

  anon185_Then:
    assume {:partition} status_40 != 259;
    goto anon151_Then, anon151_Else;

  anon151_Else:
    assume Irp_23 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1822} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl13);
    goto anon189_Then, anon189_Else;

  anon189_Else:
    assume {:partition} yogi_error != 1;
    goto L307;

  L307:
    call {:si_unique_call 1823} sdv_IoCompleteRequest(0, 0);
    goto L62;

  anon189_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon151_Then:
    assume !(Irp_23 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L307;

  anon167_Then:
    status_40 := -1073741808;
    goto L43;

  anon168_Then:
    goto L33;

  L33:
    assume {:nonnull} mouseExtension_4 != 0;
    assume mouseExtension_4 > 0;
    goto anon147_Then, anon147_Else;

  anon147_Else:
    assume {:nonnull} mouseExtension_4 != 0;
    assume mouseExtension_4 > 0;
    goto anon154_Then, anon154_Else;

  anon154_Else:
    status_40 := -1073741101;
    goto L43;

  anon154_Then:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon155_Then, anon155_Else;

  anon155_Else:
    goto L126;

  L126:
    status_40 := -1073741811;
    goto L43;

  anon155_Then:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon156_Then, anon156_Else;

  anon156_Else:
    status_40 := 259;
    goto L43;

  anon156_Then:
    goto L126;

  anon147_Then:
    status_40 := -1073741661;
    goto L43;

  anon169_Then:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon150_Then, anon150_Else;

  anon150_Else:
    status_40 := -1073741811;
    goto L43;

  anon150_Then:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    havoc hookMouse;
    assume {:nonnull} hookMouse != 0;
    assume hookMouse > 0;
    assume {:nonnull} mouseExtension_4 != 0;
    assume mouseExtension_4 > 0;
    assume {:nonnull} hookMouse != 0;
    assume hookMouse > 0;
    goto anon207_Then, anon207_Else;

  anon207_Else:
    assume {:nonnull} hookMouse != 0;
    assume hookMouse > 0;
    assume {:nonnull} mouseExtension_4 != 0;
    assume mouseExtension_4 > 0;
    goto L68;

  L68:
    status_40 := 0;
    goto L43;

  anon207_Then:
    goto L68;

  anon170_Then:
    status_40 := -1073741822;
    goto L43;

  anon171_Then:
    havoc Tmp_925;
    goto anon203_Then, anon203_Else;

  anon203_Else:
    assume {:partition} Tmp_925 == 2;
    goto L72;

  L72:
    call {:si_unique_call 1824} Tmp_924 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_924 != 0;
    assume Tmp_924 > 0;
    call {:si_unique_call 1825} vslice_dummy_var_221 := sdv_InterlockedIncrement(Tmp_924);
    assume {:nonnull} Tmp_924 != 0;
    assume Tmp_924 > 0;
    assume {:nonnull} mouseExtension_4 != 0;
    assume mouseExtension_4 > 0;
    assume {:nonnull} mouseExtension_4 != 0;
    assume mouseExtension_4 > 0;
    goto anon204_Then, anon204_Else;

  anon204_Else:
    status_40 := -1073741757;
    goto L43;

  anon204_Then:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon153_Then, anon153_Else;

  anon153_Else:
    status_40 := -1073741811;
    goto L43;

  anon153_Then:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    havoc Tmp_914;
    assume {:nonnull} Tmp_914 != 0;
    assume Tmp_914 > 0;
    assume {:nonnull} mouseExtension_4 != 0;
    assume mouseExtension_4 > 0;
    assume {:nonnull} Tmp_914 != 0;
    assume Tmp_914 > 0;
    assume {:nonnull} mouseExtension_4 != 0;
    assume mouseExtension_4 > 0;
    call {:si_unique_call 1826} sdv_446 := ExAllocatePoolWithTag(1, 20, 842281016);
    hookMouse := sdv_446;
    goto anon205_Then, anon205_Else;

  anon205_Else:
    assume {:partition} hookMouse != 0;
    assume {:nonnull} mouseExtension_4 != 0;
    assume mouseExtension_4 > 0;
    havoc vslice_dummy_var_252;
    call {:si_unique_call 1827} topOfStack_2 := IoGetAttachedDeviceReference(vslice_dummy_var_252);
    call {:si_unique_call 1828} sdv_RtlZeroMemory(0, 20);
    assume {:nonnull} hookMouse != 0;
    assume hookMouse > 0;
    assume {:nonnull} hookMouse != 0;
    assume hookMouse > 0;
    assume {:nonnull} hookMouse != 0;
    assume hookMouse > 0;
    call {:si_unique_call 1829} vslice_dummy_var_222 := I8xSendIoctl(topOfStack_2, 999363, hookMouse, 20);
    goto anon206_Then, anon206_Else;

  anon206_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 1830} vslice_dummy_var_217 := sdv_ObDereferenceObject(0);
    call {:si_unique_call 1831} sdv_ExFreePool(0);
    goto L90;

  L90:
    status_40 := 0;
    goto L43;

  anon206_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon205_Then:
    assume {:partition} hookMouse == 0;
    goto L90;

  anon203_Then:
    assume {:partition} Tmp_925 != 2;
    goto L72;

  anon172_Then:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon149_Then, anon149_Else;

  anon149_Else:
    status_40 := -1073741789;
    goto L43;

  anon149_Then:
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    havoc Tmp_912;
    assume {:nonnull} Tmp_912 != 0;
    assume Tmp_912 > 0;
    assume {:nonnull} mouseExtension_4 != 0;
    assume mouseExtension_4 > 0;
    assume {:nonnull} Tmp_912 != 0;
    assume Tmp_912 > 0;
    assume {:nonnull} mouseExtension_4 != 0;
    assume mouseExtension_4 > 0;
    assume {:nonnull} Tmp_912 != 0;
    assume Tmp_912 > 0;
    assume {:nonnull} mouseExtension_4 != 0;
    assume mouseExtension_4 > 0;
    assume {:nonnull} Tmp_912 != 0;
    assume Tmp_912 > 0;
    assume {:nonnull} mouseExtension_4 != 0;
    assume mouseExtension_4 > 0;
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    status_40 := 0;
    goto L43;

  anon173_Then:
    goto L35;

  anon174_Then:
    assume {:nonnull} kbExtension_3 != 0;
    assume kbExtension_3 > 0;
    goto anon148_Then, anon148_Else;

  anon148_Else:
    status_40 := -1073741637;
    goto L43;

  anon148_Then:
    status_40 := -1073741808;
    goto L43;

  anon175_Then:
    goto L33;

  anon176_Then:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon146_Then, anon146_Else;

  anon146_Else:
    status_40 := -1073741811;
    goto L43;

  anon146_Then:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    havoc hookKeyboard;
    assume {:nonnull} hookKeyboard != 0;
    assume hookKeyboard > 0;
    assume {:nonnull} kbExtension_3 != 0;
    assume kbExtension_3 > 0;
    assume {:nonnull} hookKeyboard != 0;
    assume hookKeyboard > 0;
    goto anon202_Then, anon202_Else;

  anon202_Else:
    assume {:nonnull} hookKeyboard != 0;
    assume hookKeyboard > 0;
    assume {:nonnull} kbExtension_3 != 0;
    assume kbExtension_3 > 0;
    goto L135;

  L135:
    assume {:nonnull} hookKeyboard != 0;
    assume hookKeyboard > 0;
    goto anon157_Then, anon157_Else;

  anon157_Else:
    assume {:nonnull} hookKeyboard != 0;
    assume hookKeyboard > 0;
    assume {:nonnull} kbExtension_3 != 0;
    assume kbExtension_3 > 0;
    goto L137;

  L137:
    status_40 := 0;
    goto L43;

  anon157_Then:
    goto L137;

  anon202_Then:
    goto L135;

  anon177_Then:
    assume {:nonnull} kbExtension_3 != 0;
    assume kbExtension_3 > 0;
    goto anon145_Then, anon145_Else;

  anon145_Else:
    assume {:nonnull} kbExtension_3 != 0;
    assume kbExtension_3 > 0;
    goto anon158_Then, anon158_Else;

  anon158_Else:
    status_40 := -1073741101;
    goto L43;

  anon158_Then:
    assume {:nonnull} kbExtension_3 != 0;
    assume kbExtension_3 > 0;
    assume {:nonnull} keyboardId_1 != 0;
    assume keyboardId_1 > 0;
    assume {:nonnull} kbExtension_3 != 0;
    assume kbExtension_3 > 0;
    assume {:nonnull} keyboardId_1 != 0;
    assume keyboardId_1 > 0;
    assume {:nonnull} keyboardId_1 != 0;
    assume keyboardId_1 > 0;
    goto anon201_Then, anon201_Else;

  anon201_Else:
    assume {:nonnull} keyboardId_1 != 0;
    assume keyboardId_1 > 0;
    goto anon159_Then, anon159_Else;

  anon159_Else:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon160_Then, anon160_Else;

  anon160_Else:
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    havoc parameters_4;
    call {:si_unique_call 1832} InternalMode_1 := I8042QueryIMEStatusForOasys(parameters_4);
    goto anon161_Then, anon161_Else;

  anon161_Else:
    assume {:partition} 0 >= InternalMode_1;
    goto L158;

  L158:
    status_40 := -1073741811;
    goto L43;

  anon161_Then:
    assume {:partition} InternalMode_1 > 0;
    goto anon162_Then, anon162_Else;

  anon162_Else:
    assume {:partition} InternalMode_1 <= 8;
    status_40 := 259;
    goto L43;

  anon162_Then:
    assume {:partition} 8 < InternalMode_1;
    goto L158;

  anon160_Then:
    status_40 := -1073741811;
    goto L43;

  anon159_Then:
    goto L145;

  L145:
    status_40 := -1073741808;
    goto L43;

  anon201_Then:
    goto L145;

  anon145_Then:
    status_40 := -1073741661;
    goto L43;

  anon178_Then:
    status_40 := -1073741822;
    goto L43;

  anon179_Then:
    havoc Tmp_920;
    goto anon197_Then, anon197_Else;

  anon197_Else:
    assume {:partition} Tmp_920 == 1;
    goto L163;

  L163:
    call {:si_unique_call 1833} Tmp_924 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_924 != 0;
    assume Tmp_924 > 0;
    call {:si_unique_call 1834} vslice_dummy_var_219 := sdv_InterlockedIncrement(Tmp_924);
    assume {:nonnull} Tmp_924 != 0;
    assume Tmp_924 > 0;
    assume {:nonnull} kbExtension_3 != 0;
    assume kbExtension_3 > 0;
    assume {:nonnull} kbExtension_3 != 0;
    assume kbExtension_3 > 0;
    goto anon198_Then, anon198_Else;

  anon198_Else:
    status_40 := -1073741757;
    goto L43;

  anon198_Then:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon163_Then, anon163_Else;

  anon163_Else:
    status_40 := -1073741811;
    goto L43;

  anon163_Then:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    havoc Tmp_919;
    assume {:nonnull} Tmp_919 != 0;
    assume Tmp_919 > 0;
    assume {:nonnull} kbExtension_3 != 0;
    assume kbExtension_3 > 0;
    assume {:nonnull} Tmp_919 != 0;
    assume Tmp_919 > 0;
    assume {:nonnull} kbExtension_3 != 0;
    assume kbExtension_3 > 0;
    call {:si_unique_call 1835} sdv_449 := ExAllocatePoolWithTag(1, 24, 842281016);
    hookKeyboard := sdv_449;
    goto anon199_Then, anon199_Else;

  anon199_Else:
    assume {:partition} hookKeyboard != 0;
    assume {:nonnull} kbExtension_3 != 0;
    assume kbExtension_3 > 0;
    havoc vslice_dummy_var_253;
    call {:si_unique_call 1836} topOfStack_2 := IoGetAttachedDeviceReference(vslice_dummy_var_253);
    call {:si_unique_call 1837} sdv_RtlZeroMemory(0, 24);
    assume {:nonnull} hookKeyboard != 0;
    assume hookKeyboard > 0;
    assume {:nonnull} hookKeyboard != 0;
    assume hookKeyboard > 0;
    assume {:nonnull} hookKeyboard != 0;
    assume hookKeyboard > 0;
    call {:si_unique_call 1838} vslice_dummy_var_220 := I8xSendIoctl(topOfStack_2, 737219, hookKeyboard, 24);
    goto anon200_Then, anon200_Else;

  anon200_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 1839} vslice_dummy_var_218 := sdv_ObDereferenceObject(0);
    call {:si_unique_call 1840} sdv_ExFreePool(0);
    goto L181;

  L181:
    status_40 := 0;
    goto L43;

  anon200_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon199_Then:
    assume {:partition} hookKeyboard == 0;
    goto L181;

  anon197_Then:
    assume {:partition} Tmp_920 != 1;
    goto L163;

  anon180_Then:
    assume {:nonnull} kbExtension_3 != 0;
    assume kbExtension_3 > 0;
    havoc sizeOfTranslation;
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon196_Then, anon196_Else;

  anon196_Else:
    status_40 := -1073741789;
    goto L43;

  anon196_Then:
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    havoc translation;
    assume {:nonnull} kbExtension_3 != 0;
    assume kbExtension_3 > 0;
    assume {:nonnull} translation != 0;
    assume translation > 0;
    assume {:nonnull} translation != 0;
    assume translation > 0;
    havoc Tmp_917;
    call {:si_unique_call 1841} sdv_RtlMoveMemory(0, 0, Tmp_917);
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    status_40 := 0;
    goto L43;

  anon181_Then:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon144_Then, anon144_Else;

  anon144_Else:
    status_40 := -1073741789;
    goto L43;

  anon144_Then:
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    havoc Tmp_926;
    assume {:nonnull} Tmp_926 != 0;
    assume Tmp_926 > 0;
    assume {:nonnull} kbExtension_3 != 0;
    assume kbExtension_3 > 0;
    assume {:nonnull} Tmp_926 != 0;
    assume Tmp_926 > 0;
    assume {:nonnull} kbExtension_3 != 0;
    assume kbExtension_3 > 0;
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    status_40 := 0;
    goto L43;

  anon182_Then:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon143_Then, anon143_Else;

  anon143_Else:
    status_40 := -1073741789;
    goto L43;

  anon143_Then:
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    havoc Tmp_923;
    assume {:nonnull} Tmp_923 != 0;
    assume Tmp_923 > 0;
    assume {:nonnull} kbExtension_3 != 0;
    assume kbExtension_3 > 0;
    assume {:nonnull} Tmp_923 != 0;
    assume Tmp_923 > 0;
    assume {:nonnull} kbExtension_3 != 0;
    assume kbExtension_3 > 0;
    assume {:nonnull} Tmp_923 != 0;
    assume Tmp_923 > 0;
    assume {:nonnull} kbExtension_3 != 0;
    assume kbExtension_3 > 0;
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    status_40 := 0;
    goto L43;

  anon183_Then:
    assume {:nonnull} kbExtension_3 != 0;
    assume kbExtension_3 > 0;
    goto anon142_Then, anon142_Else;

  anon142_Else:
    assume {:nonnull} kbExtension_3 != 0;
    assume kbExtension_3 > 0;
    goto anon164_Then, anon164_Else;

  anon164_Else:
    status_40 := -1073741101;
    goto L43;

  anon164_Then:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon165_Then, anon165_Else;

  anon165_Else:
    goto L230;

  L230:
    status_40 := -1073741811;
    goto L43;

  anon165_Then:
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    havoc Tmp_916;
    assume {:nonnull} Tmp_916 != 0;
    assume Tmp_916 > 0;
    goto anon195_Then, anon195_Else;

  anon195_Else:
    status_40 := 259;
    goto L43;

  anon195_Then:
    goto L230;

  anon142_Then:
    status_40 := -1073741661;
    goto L43;

  anon184_Then:
    assume {:nonnull} kbExtension_3 != 0;
    assume kbExtension_3 > 0;
    goto anon141_Then, anon141_Else;

  anon141_Else:
    assume {:nonnull} kbExtension_3 != 0;
    assume kbExtension_3 > 0;
    goto anon166_Then, anon166_Else;

  anon166_Else:
    status_40 := -1073741101;
    goto L43;

  anon166_Then:
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    havoc parameters_4;
    assume {:nonnull} kbExtension_3 != 0;
    assume kbExtension_3 > 0;
    keyboardAttributes := KeyboardAttributes__PORT_KEYBOARD_EXTENSION(kbExtension_3);
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon190_Then, anon190_Else;

  anon190_Else:
    goto L242;

  L242:
    status_40 := -1073741811;
    goto L43;

  anon190_Then:
    Tmp_922 := parameters_4;
    assume {:nonnull} Tmp_922 != 0;
    assume Tmp_922 > 0;
    assume {:nonnull} keyboardAttributes != 0;
    assume keyboardAttributes > 0;
    goto anon191_Then, anon191_Else;

  anon191_Else:
    Tmp_918 := parameters_4;
    assume {:nonnull} Tmp_918 != 0;
    assume Tmp_918 > 0;
    assume {:nonnull} keyboardAttributes != 0;
    assume keyboardAttributes > 0;
    goto anon192_Then, anon192_Else;

  anon192_Else:
    Tmp_910 := parameters_4;
    assume {:nonnull} Tmp_910 != 0;
    assume Tmp_910 > 0;
    assume {:nonnull} keyboardAttributes != 0;
    assume keyboardAttributes > 0;
    goto anon193_Then, anon193_Else;

  anon193_Else:
    Tmp_913 := parameters_4;
    assume {:nonnull} Tmp_913 != 0;
    assume Tmp_913 > 0;
    assume {:nonnull} keyboardAttributes != 0;
    assume keyboardAttributes > 0;
    goto anon194_Then, anon194_Else;

  anon194_Else:
    status_40 := 259;
    goto L43;

  anon194_Then:
    goto L242;

  anon193_Then:
    goto L242;

  anon192_Then:
    goto L242;

  anon191_Then:
    goto L242;

  anon141_Then:
    status_40 := -1073741661;
    goto L43;

  anon139_Then:
    assume {:nonnull} irpSp_4 != 0;
    assume irpSp_4 > 0;
    goto anon140_Then, anon140_Else;

  anon140_Else:
    status_40 := -1073741789;
    goto L43;

  anon140_Then:
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    havoc Tmp_911;
    assume {:nonnull} Tmp_911 != 0;
    assume Tmp_911 > 0;
    assume {:nonnull} kbExtension_3 != 0;
    assume kbExtension_3 > 0;
    assume {:nonnull} Tmp_911 != 0;
    assume Tmp_911 > 0;
    assume {:nonnull} kbExtension_3 != 0;
    assume kbExtension_3 > 0;
    assume {:nonnull} Tmp_911 != 0;
    assume Tmp_911 > 0;
    assume {:nonnull} kbExtension_3 != 0;
    assume kbExtension_3 > 0;
    assume {:nonnull} Tmp_911 != 0;
    assume Tmp_911 > 0;
    assume {:nonnull} kbExtension_3 != 0;
    assume kbExtension_3 > 0;
    assume {:nonnull} Tmp_911 != 0;
    assume Tmp_911 > 0;
    assume {:nonnull} kbExtension_3 != 0;
    assume kbExtension_3 > 0;
    assume {:nonnull} Tmp_911 != 0;
    assume Tmp_911 > 0;
    assume {:nonnull} kbExtension_3 != 0;
    assume kbExtension_3 > 0;
    assume {:nonnull} Tmp_911 != 0;
    assume Tmp_911 > 0;
    assume {:nonnull} kbExtension_3 != 0;
    assume kbExtension_3 > 0;
    assume {:nonnull} Tmp_911 != 0;
    assume Tmp_911 > 0;
    assume {:nonnull} kbExtension_3 != 0;
    assume kbExtension_3 > 0;
    assume {:nonnull} Tmp_911 != 0;
    assume Tmp_911 > 0;
    assume {:nonnull} kbExtension_3 != 0;
    assume kbExtension_3 > 0;
    assume {:nonnull} Tmp_911 != 0;
    assume Tmp_911 > 0;
    assume {:nonnull} kbExtension_3 != 0;
    assume kbExtension_3 > 0;
    assume {:nonnull} Tmp_911 != 0;
    assume Tmp_911 > 0;
    assume {:nonnull} kbExtension_3 != 0;
    assume kbExtension_3 > 0;
    assume {:nonnull} Tmp_911 != 0;
    assume Tmp_911 > 0;
    assume {:nonnull} kbExtension_3 != 0;
    assume kbExtension_3 > 0;
    assume {:nonnull} Tmp_911 != 0;
    assume Tmp_911 > 0;
    assume {:nonnull} kbExtension_3 != 0;
    assume kbExtension_3 > 0;
    assume {:nonnull} Irp_23 != 0;
    assume Irp_23 > 0;
    status_40 := 0;
    goto L43;
}



procedure {:origName "I8xFlush"} I8xFlush(actual_DeviceObject_39: int, actual_Irp_24: int) returns (Tmp_927: int);
  modifies yogi_error;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures Tmp_927 == -1073741822;
  free ensures old(yogi_error) == 0;



implementation {:origName "I8xFlush"} I8xFlush(actual_DeviceObject_39: int, actual_Irp_24: int) returns (Tmp_927: int)
{

  anon0:
    Tmp_927 := -1073741822;
    call {:si_unique_call 1842} SLIC_I8xFlush_exit(strConst__li2bpl12, Tmp_927);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "ExInitializeWorkItem"} ExInitializeWorkItem(actual_Item_3: int, actual_Routine: int, actual_Context_14: int);
  modifies alloc;



implementation {:origName "ExInitializeWorkItem"} ExInitializeWorkItem(actual_Item_3: int, actual_Routine: int, actual_Context_14: int)
{
  var {:pointer} Item_3: int;
  var {:scalar} Routine: int;
  var {:pointer} Context_14: int;
  var vslice_dummy_var_223: int;

  anon0:
    call {:si_unique_call 1843} vslice_dummy_var_223 := __HAVOC_malloc(4);
    Item_3 := actual_Item_3;
    Routine := actual_Routine;
    Context_14 := actual_Context_14;
    assume {:nonnull} Item_3 != 0;
    assume Item_3 > 0;
    assume {:nonnull} Item_3 != 0;
    assume Item_3 > 0;
    assume {:nonnull} Item_3 != 0;
    assume Item_3 > 0;
    return;
}



procedure {:origName "I8xClose"} I8xClose(actual_DeviceObject_40: int, actual_Irp_25: int) returns (Tmp_931: int);
  modifies alloc, yogi_error;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "I8xClose"} I8xClose(actual_DeviceObject_40: int, actual_Irp_25: int) returns (Tmp_931: int)
{
  var {:pointer} commonData_7: int;
  var {:scalar} sdv_450: int;
  var {:pointer} Tmp_932: int;
  var {:pointer} DeviceObject_40: int;
  var {:pointer} Irp_25: int;

  anon0:
    DeviceObject_40 := actual_DeviceObject_40;
    Irp_25 := actual_Irp_25;
    call {:si_unique_call 1844} sdv_do_paged_code_check();
    assume {:nonnull} DeviceObject_40 != 0;
    assume DeviceObject_40 > 0;
    havoc commonData_7;
    call {:si_unique_call 1845} Tmp_932 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_932 != 0;
    assume Tmp_932 > 0;
    assume {:nonnull} commonData_7 != 0;
    assume commonData_7 > 0;
    call {:si_unique_call 1846} sdv_450 := sdv_InterlockedDecrement(Tmp_932);
    assume {:nonnull} Tmp_932 != 0;
    assume Tmp_932 > 0;
    assume {:nonnull} commonData_7 != 0;
    assume commonData_7 > 0;
    assume {:nonnull} Irp_25 != 0;
    assume Irp_25 > 0;
    assume {:nonnull} Irp_25 != 0;
    assume Irp_25 > 0;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume Irp_25 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1847} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl13);
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} yogi_error != 1;
    goto L24;

  L24:
    call {:si_unique_call 1848} sdv_IoCompleteRequest(0, 0);
    Tmp_931 := 0;
    call {:si_unique_call 1849} SLIC_I8xClose_exit(strConst__li2bpl12, Tmp_931);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon9_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon8_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon7_Then:
    assume !(Irp_25 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L24;
}



procedure {:origName "I8xInitializeDataQueue"} I8xInitializeDataQueue(actual_InitializeDataContext: int);
  modifies alloc;



implementation {:origName "I8xInitializeDataQueue"} I8xInitializeDataQueue(actual_InitializeDataContext: int)
{
  var {:pointer} kbExtension_4: int;
  var {:scalar} deviceType: int;
  var {:pointer} mouseExtension_5: int;
  var {:pointer} InitializeDataContext: int;
  var vslice_dummy_var_224: int;

  anon0:
    call {:si_unique_call 1850} vslice_dummy_var_224 := __HAVOC_malloc(4);
    InitializeDataContext := actual_InitializeDataContext;
    assume {:nonnull} InitializeDataContext != 0;
    assume InitializeDataContext > 0;
    havoc deviceType;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} deviceType == 1;
    assume {:nonnull} InitializeDataContext != 0;
    assume InitializeDataContext > 0;
    havoc kbExtension_4;
    assume {:nonnull} kbExtension_4 != 0;
    assume kbExtension_4 > 0;
    assume {:nonnull} kbExtension_4 != 0;
    assume kbExtension_4 > 0;
    assume {:nonnull} kbExtension_4 != 0;
    assume kbExtension_4 > 0;
    assume {:nonnull} kbExtension_4 != 0;
    assume kbExtension_4 > 0;
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} deviceType != 1;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} deviceType == 2;
    assume {:nonnull} InitializeDataContext != 0;
    assume InitializeDataContext > 0;
    havoc mouseExtension_5;
    assume {:nonnull} mouseExtension_5 != 0;
    assume mouseExtension_5 > 0;
    assume {:nonnull} mouseExtension_5 != 0;
    assume mouseExtension_5 > 0;
    assume {:nonnull} mouseExtension_5 != 0;
    assume mouseExtension_5 > 0;
    assume {:nonnull} mouseExtension_5 != 0;
    assume mouseExtension_5 > 0;
    goto L1;

  anon5_Then:
    assume {:partition} deviceType != 2;
    goto L1;
}



procedure {:origName "I8xCreate"} I8xCreate(actual_DeviceObject_41: int, actual_Irp_26: int) returns (Tmp_935: int);
  modifies alloc, yogi_error;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "I8xCreate"} I8xCreate(actual_DeviceObject_41: int, actual_Irp_26: int) returns (Tmp_935: int)
{
  var {:pointer} commonData_8: int;
  var {:pointer} Tmp_936: int;
  var {:scalar} status_41: int;
  var {:pointer} DeviceObject_41: int;
  var {:pointer} Irp_26: int;
  var vslice_dummy_var_225: int;

  anon0:
    DeviceObject_41 := actual_DeviceObject_41;
    Irp_26 := actual_Irp_26;
    status_41 := 0;
    commonData_8 := 0;
    call {:si_unique_call 1851} sdv_do_paged_code_check();
    assume {:nonnull} DeviceObject_41 != 0;
    assume DeviceObject_41 > 0;
    havoc commonData_8;
    assume {:nonnull} commonData_8 != 0;
    assume commonData_8 > 0;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:nonnull} commonData_8 != 0;
    assume commonData_8 > 0;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    status_41 := -1073741810;
    goto L18;

  L18:
    assume {:nonnull} Irp_26 != 0;
    assume Irp_26 > 0;
    assume {:nonnull} Irp_26 != 0;
    assume Irp_26 > 0;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume Irp_26 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1852} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl13);
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} yogi_error != 1;
    goto L29;

  L29:
    call {:si_unique_call 1853} sdv_IoCompleteRequest(0, 0);
    Tmp_935 := status_41;
    call {:si_unique_call 1854} SLIC_I8xCreate_exit(strConst__li2bpl12, Tmp_935);
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon15_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon14_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon13_Then:
    assume !(Irp_26 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L29;

  anon11_Then:
    call {:si_unique_call 1855} Tmp_936 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_936 != 0;
    assume Tmp_936 > 0;
    assume {:nonnull} commonData_8 != 0;
    assume commonData_8 > 0;
    call {:si_unique_call 1856} vslice_dummy_var_225 := sdv_InterlockedIncrement(Tmp_936);
    assume {:nonnull} Tmp_936 != 0;
    assume Tmp_936 > 0;
    assume {:nonnull} commonData_8 != 0;
    assume commonData_8 > 0;
    goto L18;

  anon12_Then:
    status_41 := -1073741436;
    goto L18;
}



procedure {:origName "I8xDeviceControl"} I8xDeviceControl(actual_DeviceObject_42: int, actual_Irp_27: int) returns (Tmp_937: int);
  modifies alloc, yogi_error, Mem_T.CompletionRoutine__IO_STACK_LOCATION;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "I8xDeviceControl"} I8xDeviceControl(actual_DeviceObject_42: int, actual_Irp_27: int) returns (Tmp_937: int)
{
  var {:pointer} kbExtension_5: int;
  var {:scalar} status_42: int;
  var {:pointer} stack_6: int;
  var {:pointer} DeviceObject_42: int;
  var {:pointer} Irp_27: int;

  anon0:
    DeviceObject_42 := actual_DeviceObject_42;
    Irp_27 := actual_Irp_27;
    status_42 := -1073741808;
    call {:si_unique_call 1857} sdv_do_paged_code_check();
    assume {:nonnull} DeviceObject_42 != 0;
    assume DeviceObject_42 > 0;
    havoc kbExtension_5;
    assume {:nonnull} kbExtension_5 != 0;
    assume kbExtension_5 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:nonnull} kbExtension_5 != 0;
    assume kbExtension_5 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} kbExtension_5 != 0;
    assume kbExtension_5 > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    call {:si_unique_call 1858} stack_6 := sdv_IoGetCurrentIrpStackLocation(Irp_27);
    assume {:nonnull} stack_6 != 0;
    assume stack_6 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:nonnull} stack_6 != 0;
    assume stack_6 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    call {:si_unique_call 1859} Tmp_937 := I8xKeyboardGetSysButtonEvent(kbExtension_5, Irp_27);
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    call {:si_unique_call 1860} SLIC_I8xDeviceControl_exit(strConst__li2bpl12, Tmp_937);
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon28_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon30_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon24_Then:
    status_42 := -1073741808;
    goto L30;

  L30:
    assume {:nonnull} Irp_27 != 0;
    assume Irp_27 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume Irp_27 == SLAM_guard_S_0;
    assume SLAM_guard_S_0 != SLAM_guard_S_0_init;
    call {:si_unique_call 1861} SLIC_sdv_IoCompleteRequest_entry(strConst__li2bpl13);
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} yogi_error != 1;
    goto L42;

  L42:
    call {:si_unique_call 1862} sdv_IoCompleteRequest(0, 0);
    Tmp_937 := status_42;
    goto L1;

  anon27_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon26_Then:
    assume !(Irp_27 == SLAM_guard_S_0 && SLAM_guard_S_0 != SLAM_guard_S_0_init);
    goto L42;

  anon23_Then:
    call {:si_unique_call 1863} Tmp_937 := I8xKeyboardGetSysButtonCaps(kbExtension_5, Irp_27);
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon29_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon22_Then:
    goto L12;

  L12:
    status_42 := -1073741808;
    goto L30;

  anon21_Then:
    goto L12;

  anon25_Then:
    goto L12;
}



procedure {:origName "I8xCompletePendedRequest"} I8xCompletePendedRequest(actual_DeviceObject_43: int, actual_Irp_28: int, actual_Information: int, actual_Status_3: int);
  modifies alloc;



implementation {:origName "I8xCompletePendedRequest"} I8xCompletePendedRequest(actual_DeviceObject_43: int, actual_Irp_28: int, actual_Information: int, actual_Status_3: int)
{
  var {:pointer} common: int;
  var {:pointer} DeviceObject_43: int;
  var {:pointer} Irp_28: int;
  var {:scalar} Information: int;
  var {:scalar} Status_3: int;
  var vslice_dummy_var_226: int;
  var vslice_dummy_var_227: int;
  var vslice_dummy_var_228: int;

  anon0:
    call {:si_unique_call 1864} vslice_dummy_var_226 := __HAVOC_malloc(4);
    DeviceObject_43 := actual_DeviceObject_43;
    Irp_28 := actual_Irp_28;
    Information := actual_Information;
    Status_3 := actual_Status_3;
    call {:si_unique_call 1865} vslice_dummy_var_227 := sdv_IoGetCurrentIrpStackLocation(Irp_28);
    assume {:nonnull} DeviceObject_43 != 0;
    assume DeviceObject_43 > 0;
    havoc common;
    assume {:nonnull} Irp_28 != 0;
    assume Irp_28 > 0;
    assume {:nonnull} Irp_28 != 0;
    assume Irp_28 > 0;
    call {:si_unique_call 1866} sdv_IoCompleteRequest(0, 6);
    call {:si_unique_call 1867} IoFreeController(0);
    call {:si_unique_call 1868} IoStartNextPacket(0, 0);
    assume {:nonnull} common != 0;
    assume common > 0;
    call {:si_unique_call 1869} vslice_dummy_var_228 := sdv_IoReleaseRemoveLock(RemoveLock_COMMON_DATA(common), Irp_28);
    return;
}



procedure {:origName "I8xLogError"} I8xLogError(actual_DeviceObject_44: int, actual_ErrorCode_1: int, actual_UniqueErrorValue_1: int, actual_FinalStatus: int, actual_DumpData_1: int, actual_DumpCount_1: int);
  modifies alloc;



implementation {:origName "I8xLogError"} I8xLogError(actual_DeviceObject_44: int, actual_ErrorCode_1: int, actual_UniqueErrorValue_1: int, actual_FinalStatus: int, actual_DumpData_1: int, actual_DumpCount_1: int)
{
  var {:scalar} i_20: int;
  var {:pointer} Tmp_942: int;
  var {:pointer} sdv_456: int;
  var {:pointer} errorLogEntry_4: int;
  var {:scalar} Tmp_944: int;
  var {:scalar} Tmp_945: int;
  var {:scalar} Tmp_946: int;
  var {:scalar} ErrorCode_1: int;
  var {:scalar} UniqueErrorValue_1: int;
  var {:scalar} FinalStatus: int;
  var {:pointer} DumpData_1: int;
  var {:scalar} DumpCount_1: int;
  var vslice_dummy_var_229: int;

  anon0:
    call {:si_unique_call 1870} vslice_dummy_var_229 := __HAVOC_malloc(4);
    ErrorCode_1 := actual_ErrorCode_1;
    UniqueErrorValue_1 := actual_UniqueErrorValue_1;
    FinalStatus := actual_FinalStatus;
    DumpData_1 := actual_DumpData_1;
    DumpCount_1 := actual_DumpCount_1;
    call {:si_unique_call 1871} Tmp_942 := __HAVOC_malloc(4);
    Tmp_944 := 48 + DumpCount_1 * 4;
    call {:si_unique_call 1872} sdv_456 := IoAllocateErrorLogEntry(0, Tmp_944);
    errorLogEntry_4 := sdv_456;
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} errorLogEntry_4 != 0;
    assume {:nonnull} errorLogEntry_4 != 0;
    assume errorLogEntry_4 > 0;
    assume {:nonnull} errorLogEntry_4 != 0;
    assume errorLogEntry_4 > 0;
    assume {:nonnull} errorLogEntry_4 != 0;
    assume errorLogEntry_4 > 0;
    assume {:nonnull} errorLogEntry_4 != 0;
    assume errorLogEntry_4 > 0;
    assume {:nonnull} errorLogEntry_4 != 0;
    assume errorLogEntry_4 > 0;
    assume {:nonnull} errorLogEntry_4 != 0;
    assume errorLogEntry_4 > 0;
    assume {:nonnull} errorLogEntry_4 != 0;
    assume errorLogEntry_4 > 0;
    assume {:nonnull} errorLogEntry_4 != 0;
    assume errorLogEntry_4 > 0;
    i_20 := 0;
    goto L20;

  L20:
    call {:si_unique_call 1873} i_20, Tmp_942, Tmp_945, Tmp_946 := I8xLogError_loop_L20(i_20, Tmp_942, errorLogEntry_4, Tmp_945, Tmp_946, DumpData_1, DumpCount_1);
    goto L20_last;

  L20_last:
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:partition} DumpCount_1 > i_20;
    Tmp_945 := i_20;
    assume {:nonnull} errorLogEntry_4 != 0;
    assume errorLogEntry_4 > 0;
    havoc Tmp_942;
    Tmp_946 := i_20;
    assume {:nonnull} DumpData_1 != 0;
    assume DumpData_1 > 0;
    assume {:nonnull} Tmp_942 != 0;
    assume Tmp_942 > 0;
    i_20 := i_20 + 1;
    goto anon5_Else_dummy;

  anon5_Else_dummy:
    assume false;
    return;

  anon5_Then:
    assume {:partition} i_20 >= DumpCount_1;
    call {:si_unique_call 1874} IoWriteErrorLogEntry(0);
    goto L1;

  L1:
    return;

  anon6_Then:
    assume {:partition} errorLogEntry_4 == 0;
    goto L1;
}



procedure {:origName "I8042ErrorLogDpc"} I8042ErrorLogDpc(actual_Dpc_14: int, actual_DeviceObjectIn_6: int, actual_IrpIn_3: int, actual_Context_15: int);
  modifies alloc;



implementation {:origName "I8042ErrorLogDpc"} I8042ErrorLogDpc(actual_Dpc_14: int, actual_DeviceObjectIn_6: int, actual_IrpIn_3: int, actual_Context_15: int)
{
  var {:pointer} Tmp_947: int;
  var {:pointer} Tmp_948: int;
  var {:pointer} Tmp_949: int;
  var {:pointer} Tmp_951: int;
  var {:pointer} sdv_457: int;
  var {:pointer} errorLogEntry_5: int;
  var {:pointer} Tmp_952: int;
  var {:pointer} Tmp_953: int;
  var {:pointer} DeviceObject_45: int;
  var {:pointer} Tmp_955: int;
  var {:pointer} Tmp_956: int;
  var {:pointer} DeviceObjectIn_6: int;
  var {:pointer} IrpIn_3: int;
  var {:pointer} Context_15: int;
  var vslice_dummy_var_230: int;

  anon0:
    call {:si_unique_call 1875} vslice_dummy_var_230 := __HAVOC_malloc(4);
    DeviceObjectIn_6 := actual_DeviceObjectIn_6;
    IrpIn_3 := actual_IrpIn_3;
    Context_15 := actual_Context_15;
    call {:si_unique_call 1876} Tmp_948 := __HAVOC_malloc(4);
    call {:si_unique_call 1877} Tmp_949 := __HAVOC_malloc(4);
    call {:si_unique_call 1878} Tmp_952 := __HAVOC_malloc(4);
    call {:si_unique_call 1879} Tmp_953 := __HAVOC_malloc(4);
    call {:si_unique_call 1880} Tmp_955 := __HAVOC_malloc(4);
    call {:si_unique_call 1881} Tmp_956 := __HAVOC_malloc(4);
    DeviceObject_45 := DeviceObjectIn_6;
    call {:si_unique_call 1882} sdv_457 := IoAllocateErrorLogEntry(0, 56);
    errorLogEntry_5 := sdv_457;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} errorLogEntry_5 != 0;
    assume {:nonnull} errorLogEntry_5 != 0;
    assume errorLogEntry_5 > 0;
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} Context_15 == -1073414133;
    assume {:nonnull} errorLogEntry_5 != 0;
    assume errorLogEntry_5 > 0;
    assume {:nonnull} errorLogEntry_5 != 0;
    assume errorLogEntry_5 > 0;
    havoc Tmp_955;
    assume {:nonnull} Tmp_955 != 0;
    assume Tmp_955 > 0;
    assume {:nonnull} errorLogEntry_5 != 0;
    assume errorLogEntry_5 > 0;
    havoc Tmp_952;
    assume {:nonnull} DeviceObject_45 != 0;
    assume DeviceObject_45 > 0;
    havoc Tmp_951;
    assume {:nonnull} Tmp_951 != 0;
    assume Tmp_951 > 0;
    assume {:nonnull} Tmp_952 != 0;
    assume Tmp_952 > 0;
    goto L19;

  L19:
    assume {:nonnull} errorLogEntry_5 != 0;
    assume errorLogEntry_5 > 0;
    assume {:nonnull} errorLogEntry_5 != 0;
    assume errorLogEntry_5 > 0;
    assume {:nonnull} errorLogEntry_5 != 0;
    assume errorLogEntry_5 > 0;
    assume {:nonnull} errorLogEntry_5 != 0;
    assume errorLogEntry_5 > 0;
    assume {:nonnull} errorLogEntry_5 != 0;
    assume errorLogEntry_5 > 0;
    assume {:nonnull} errorLogEntry_5 != 0;
    assume errorLogEntry_5 > 0;
    call {:si_unique_call 1883} IoWriteErrorLogEntry(0);
    goto L1;

  L1:
    return;

  anon9_Then:
    assume {:partition} Context_15 != -1073414133;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} Context_15 == -1073414132;
    assume {:nonnull} errorLogEntry_5 != 0;
    assume errorLogEntry_5 > 0;
    assume {:nonnull} errorLogEntry_5 != 0;
    assume errorLogEntry_5 > 0;
    havoc Tmp_949;
    assume {:nonnull} Tmp_949 != 0;
    assume Tmp_949 > 0;
    assume {:nonnull} errorLogEntry_5 != 0;
    assume errorLogEntry_5 > 0;
    havoc Tmp_948;
    assume {:nonnull} DeviceObject_45 != 0;
    assume DeviceObject_45 > 0;
    havoc Tmp_947;
    assume {:nonnull} Tmp_947 != 0;
    assume Tmp_947 > 0;
    assume {:nonnull} Tmp_948 != 0;
    assume Tmp_948 > 0;
    goto L19;

  anon7_Then:
    assume {:partition} Context_15 != -1073414132;
    assume {:nonnull} errorLogEntry_5 != 0;
    assume errorLogEntry_5 > 0;
    assume {:nonnull} errorLogEntry_5 != 0;
    assume errorLogEntry_5 > 0;
    havoc Tmp_956;
    assume {:nonnull} Tmp_956 != 0;
    assume Tmp_956 > 0;
    assume {:nonnull} errorLogEntry_5 != 0;
    assume errorLogEntry_5 > 0;
    havoc Tmp_953;
    assume {:nonnull} Tmp_953 != 0;
    assume Tmp_953 > 0;
    goto L19;

  anon8_Then:
    assume {:partition} errorLogEntry_5 == 0;
    goto L1;
}



procedure {:origName "RtlConvertLongToLargeInteger"} RtlConvertLongToLargeInteger(actual_SignedInteger: int) returns (structPtr888Tmp: int);
  modifies alloc;



implementation {:origName "RtlConvertLongToLargeInteger"} RtlConvertLongToLargeInteger(actual_SignedInteger: int) returns (structPtr888Tmp: int)
{
  var {:scalar} Tmp: int;
  var {:scalar} Result: int;
  var {:scalar} SignedInteger: int;

  anon0:
    call {:si_unique_call 1884} Tmp := __HAVOC_malloc(20);
    call {:si_unique_call 1885} Result := __HAVOC_malloc(20);
    SignedInteger := actual_SignedInteger;
    assume {:nonnull} Result != 0;
    assume Result > 0;
    assume {:nonnull} Result != 0;
    assume Result > 0;
    assume {:nonnull} Tmp != 0;
    assume Tmp > 0;
    assume {:nonnull} Result != 0;
    assume Result > 0;
    assume {:nonnull} Tmp != 0;
    assume Tmp > 0;
    assume {:nonnull} Result != 0;
    assume Result > 0;
    assume {:nonnull} Tmp != 0;
    assume Tmp > 0;
    assume {:nonnull} Result != 0;
    assume Result > 0;
    assume {:nonnull} Tmp != 0;
    assume Tmp > 0;
    assume {:nonnull} Result != 0;
    assume Result > 0;
    assume {:nonnull} Tmp != 0;
    assume Tmp > 0;
    structPtr888Tmp := Tmp;
    return;
}



procedure {:origName "_InlineInterlockedCompareExchangePointer"} _InlineInterlockedCompareExchangePointer(actual_Destination_5: int, actual_ExChange: int, actual_Comperand: int) returns (Tmp_958: int);



implementation {:origName "_InlineInterlockedCompareExchangePointer"} _InlineInterlockedCompareExchangePointer(actual_Destination_5: int, actual_ExChange: int, actual_Comperand: int) returns (Tmp_958: int)
{
  var {:scalar} sdv_458: int;

  anon0:
    Tmp_958 := sdv_458;
    return;
}



procedure {:dopa "Mem_T.INT4"} dummy_for_pa();



procedure corralExplainErrorInit();



procedure corralExtraInit();
  free ensures alloc >= old(alloc);



implementation corralExtraInit()
{

  anon0:
    assume 0 < alloc_init;
    assume alloc_init < alloc;
    assume (forall x: int :: { Mem_T.CompletionRoutine__IO_STACK_LOCATION[x] } Mem_T.CompletionRoutine__IO_STACK_LOCATION[x] <= 0 || Mem_T.CompletionRoutine__IO_STACK_LOCATION[x] > 1137);
    return;
}



function {:inline true} {:fieldmap "Mem_T.AddedKeyboards__GLOBALS"} {:fieldname "AddedKeyboards"} AddedKeyboards__GLOBALS(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.AddedMice__GLOBALS"} {:fieldname "AddedMice"} AddedMice__GLOBALS(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.AffinityPolicy_unnamed_tag_60"} {:fieldname "AffinityPolicy"} AffinityPolicy_unnamed_tag_60(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Affinity_unnamed_tag_5"} {:fieldname "Affinity"} Affinity_unnamed_tag_5(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Affinity_unnamed_tag_7"} {:fieldname "Affinity"} Affinity_unnamed_tag_7(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Alignment40_unnamed_tag_65"} {:fieldname "Alignment40"} Alignment40_unnamed_tag_65(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Alignment48_unnamed_tag_66"} {:fieldname "Alignment48"} Alignment48_unnamed_tag_66(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Alignment64_unnamed_tag_67"} {:fieldname "Alignment64"} Alignment64_unnamed_tag_67(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Alignment_unnamed_tag_59"} {:fieldname "Alignment"} Alignment_unnamed_tag_59(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.AllocatedResourcesTranslated_unnamed_tag_55"} {:fieldname "AllocatedResourcesTranslated"} AllocatedResourcesTranslated_unnamed_tag_55(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.AlternativeLists__IO_RESOURCE_REQUIREMENTS_LIST"} {:fieldname "AlternativeLists"} AlternativeLists__IO_RESOURCE_REQUIREMENTS_LIST(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.AndOperation__I8042_TRANSMIT_CCB_CONTEXT"} {:fieldname "AndOperation"} AndOperation__I8042_TRANSMIT_CCB_CONTEXT(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.AssociatedIrp__IRP"} {:fieldname "AssociatedIrp"} AssociatedIrp__IRP(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.BreakOnSysRq__GLOBALS"} {:fieldname "BreakOnSysRq"} BreakOnSysRq__GLOBALS(x: int) : int
{
  x + 224
}

function {:inline true} {:fieldmap "Mem_T.Buffer__UNICODE_STRING"} {:fieldname "Buffer"} Buffer__UNICODE_STRING(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.BusNumber__CM_FULL_RESOURCE_DESCRIPTOR"} {:fieldname "BusNumber"} BusNumber__CM_FULL_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.BusNumber__I8042_CONFIGURATION_INFORMATION"} {:fieldname "BusNumber"} BusNumber__I8042_CONFIGURATION_INFORMATION(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.BusNumber_unnamed_tag_2"} {:fieldname "BusNumber"} BusNumber_unnamed_tag_2(x: int) : int
{
  x + 160
}

function {:inline true} {:fieldmap "Mem_T.BusNumber_unnamed_tag_58"} {:fieldname "BusNumber"} BusNumber_unnamed_tag_58(x: int) : int
{
  x + 200
}

function {:inline true} {:fieldmap "Mem_T.ButtonData__MOUSE_INPUT_DATA"} {:fieldname "ButtonData"} ButtonData__MOUSE_INPUT_DATA(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.ButtonFlags__MOUSE_INPUT_DATA"} {:fieldname "ButtonFlags"} ButtonFlags__MOUSE_INPUT_DATA(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Buttons__MOUSE_INPUT_DATA"} {:fieldname "Buttons"} Buttons__MOUSE_INPUT_DATA(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.ByteCount__OUTPUT_PACKET"} {:fieldname "ByteCount"} ByteCount__OUTPUT_PACKET(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.ByteMask__I8042_TRANSMIT_CCB_CONTEXT"} {:fieldname "ByteMask"} ByteMask__I8042_TRANSMIT_CCB_CONTEXT(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Bytes__OUTPUT_PACKET"} {:fieldname "Bytes"} Bytes__OUTPUT_PACKET(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.CallContext__INTERNAL_I8042_HOOK_KEYBOARD"} {:fieldname "CallContext"} CallContext__INTERNAL_I8042_HOOK_KEYBOARD(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.CallContext__INTERNAL_I8042_HOOK_MOUSE"} {:fieldname "CallContext"} CallContext__INTERNAL_I8042_HOOK_MOUSE(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.CancelRoutine__IRP"} {:fieldname "CancelRoutine"} CancelRoutine__IRP(x: int) : int
{
  x + 120
}

function {:inline true} {:fieldmap "Mem_T.Cancel__IRP"} {:fieldname "Cancel"} Cancel__IRP(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.Capabilities_unnamed_tag_45"} {:fieldname "Capabilities"} Capabilities_unnamed_tag_45(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Channel_unnamed_tag_62"} {:fieldname "Channel"} Channel_unnamed_tag_62(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Channel_unnamed_tag_8"} {:fieldname "Channel"} Channel_unnamed_tag_8(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Channel_unnamed_tag_9"} {:fieldname "Channel"} Channel_unnamed_tag_9(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.ClassDeviceObject__CONNECT_DATA"} {:fieldname "ClassDeviceObject"} ClassDeviceObject__CONNECT_DATA(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.ClassService__CONNECT_DATA"} {:fieldname "ClassService"} ClassService__CONNECT_DATA(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Class_unnamed_tag_16"} {:fieldname "Class"} Class_unnamed_tag_16(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.CompletionRoutine__IO_STACK_LOCATION"} {:fieldname "CompletionRoutine"} CompletionRoutine__IO_STACK_LOCATION(x: int) : int
{
  x + 536
}

function {:inline true} {:fieldmap "Mem_T.ConfigData_unnamed_tag_58"} {:fieldname "ConfigData"} ConfigData_unnamed_tag_58(x: int) : int
{
  x + 216
}

function {:inline true} {:fieldmap "Mem_T._I8042_CONFIGURATION_INFORMATION"} {:fieldname "Configuration"} Configuration__CONTROLLER_DATA(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.ConnectData_COMMON_DATA"} {:fieldname "ConnectData"} ConnectData_COMMON_DATA(x: int) : int
{
  x + 592
}

function {:inline true} {:fieldmap "Mem_T.Connection_unnamed_tag_2"} {:fieldname "Connection"} Connection_unnamed_tag_2(x: int) : int
{
  x + 256
}

function {:inline true} {:fieldmap "Mem_T.Connection_unnamed_tag_58"} {:fieldname "Connection"} Connection_unnamed_tag_58(x: int) : int
{
  x + 372
}

function {:inline true} {:fieldmap "Mem_T.Context__INTERNAL_I8042_HOOK_KEYBOARD"} {:fieldname "Context"} Context__INTERNAL_I8042_HOOK_KEYBOARD(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Context__INTERNAL_I8042_HOOK_MOUSE"} {:fieldname "Context"} Context__INTERNAL_I8042_HOOK_MOUSE(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.ControllerData__GLOBALS"} {:fieldname "ControllerData"} ControllerData__GLOBALS(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Count__CM_PARTIAL_RESOURCE_LIST"} {:fieldname "Count"} Count__CM_PARTIAL_RESOURCE_LIST(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Count__ENABLE_MOUSE"} {:fieldname "Count"} Count__ENABLE_MOUSE(x: int) : int
{
  x + 236
}

function {:inline true} {:fieldmap "Mem_T.Count__IO_RESOURCE_LIST"} {:fieldname "Count"} Count__IO_RESOURCE_LIST(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.CrashFlags__PORT_KEYBOARD_EXTENSION"} {:fieldname "CrashFlags"} CrashFlags__PORT_KEYBOARD_EXTENSION(x: int) : int
{
  x + 1272
}

function {:inline true} {:fieldmap "Mem_T.CrashScanCode2__PORT_KEYBOARD_EXTENSION"} {:fieldname "CrashScanCode2"} CrashScanCode2__PORT_KEYBOARD_EXTENSION(x: int) : int
{
  x + 1284
}

function {:inline true} {:fieldmap "Mem_T.CrashScanCode__PORT_KEYBOARD_EXTENSION"} {:fieldname "CrashScanCode"} CrashScanCode__PORT_KEYBOARD_EXTENSION(x: int) : int
{
  x + 1280
}

function {:inline true} {:fieldmap "Mem_T.CurrentByte__OUTPUT_PACKET"} {:fieldname "CurrentByte"} CurrentByte__OUTPUT_PACKET(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.CurrentCrashFlags__PORT_KEYBOARD_EXTENSION"} {:fieldname "CurrentCrashFlags"} CurrentCrashFlags__PORT_KEYBOARD_EXTENSION(x: int) : int
{
  x + 1276
}

function {:inline true} {:fieldmap "Mem_T._KEYBOARD_INPUT_DATA"} {:fieldname "CurrentInput"} CurrentInput__PORT_KEYBOARD_EXTENSION(x: int) : int
{
  x + 1236
}

function {:inline true} {:fieldmap "Mem_T._MOUSE_INPUT_DATA"} {:fieldname "CurrentInput"} CurrentInput__PORT_MOUSE_EXTENSION(x: int) : int
{
  x + 1628
}

function {:inline true} {:fieldmap "Mem_T.CurrentIrp__DEVICE_OBJECT"} {:fieldname "CurrentIrp"} CurrentIrp__DEVICE_OBJECT(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T._OUTPUT_PACKET"} {:fieldname "CurrentOutput"} CurrentOutput_COMMON_DATA(x: int) : int
{
  x + 632
}

function {:inline true} {:fieldmap "Mem_T.CurrentScanCode__PORT_KEYBOARD_EXTENSION"} {:fieldname "CurrentScanCode"} CurrentScanCode__PORT_KEYBOARD_EXTENSION(x: int) : int
{
  x + 976
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "CurrentScanState"} CurrentScanState__PORT_KEYBOARD_EXTENSION(x: int) : int
{
  x + 1256
}

function {:inline true} {:fieldmap "Mem_T.CurrentSignAndOverflow__PORT_MOUSE_EXTENSION"} {:fieldname "CurrentSignAndOverflow"} CurrentSignAndOverflow__PORT_MOUSE_EXTENSION(x: int) : int
{
  x + 1684
}

function {:inline true} {:fieldmap "Mem_T.CurrentStackLocation_unnamed_tag_21"} {:fieldname "CurrentStackLocation"} CurrentStackLocation_unnamed_tag_21(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.Data1__GUID"} {:fieldname "Data1"} Data1__GUID(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Data2__GUID"} {:fieldname "Data2"} Data2__GUID(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Data3__GUID"} {:fieldname "Data3"} Data3__GUID(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Data4__GUID"} {:fieldname "Data4"} Data4__GUID(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.DataEnd__PORT_KEYBOARD_EXTENSION"} {:fieldname "DataEnd"} DataEnd__PORT_KEYBOARD_EXTENSION(x: int) : int
{
  x + 1232
}

function {:inline true} {:fieldmap "Mem_T.DataEnd__PORT_MOUSE_EXTENSION"} {:fieldname "DataEnd"} DataEnd__PORT_MOUSE_EXTENSION(x: int) : int
{
  x + 1624
}

function {:inline true} {:fieldmap "Mem_T.DataIn__GET_DATA_POINTER_CONTEXT"} {:fieldname "DataIn"} DataIn__GET_DATA_POINTER_CONTEXT(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.DataIn__PORT_KEYBOARD_EXTENSION"} {:fieldname "DataIn"} DataIn__PORT_KEYBOARD_EXTENSION(x: int) : int
{
  x + 1224
}

function {:inline true} {:fieldmap "Mem_T.DataIn__PORT_MOUSE_EXTENSION"} {:fieldname "DataIn"} DataIn__PORT_MOUSE_EXTENSION(x: int) : int
{
  x + 1616
}

function {:inline true} {:fieldmap "Mem_T.DataOut__GET_DATA_POINTER_CONTEXT"} {:fieldname "DataOut"} DataOut__GET_DATA_POINTER_CONTEXT(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.DataOut__PORT_KEYBOARD_EXTENSION"} {:fieldname "DataOut"} DataOut__PORT_KEYBOARD_EXTENSION(x: int) : int
{
  x + 1228
}

function {:inline true} {:fieldmap "Mem_T.DataOut__PORT_MOUSE_EXTENSION"} {:fieldname "DataOut"} DataOut__PORT_MOUSE_EXTENSION(x: int) : int
{
  x + 1620
}

function {:inline true} {:fieldmap "Mem_T.DataOut__SET_DATA_POINTER_CONTEXT"} {:fieldname "DataOut"} DataOut__SET_DATA_POINTER_CONTEXT(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.DataSize_unnamed_tag_12"} {:fieldname "DataSize"} DataSize_unnamed_tag_12(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Data_unnamed_tag_10"} {:fieldname "Data"} Data_unnamed_tag_10(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.DebugEnableFlags__PORT_KEYBOARD_EXTENSION"} {:fieldname "DebugEnableFlags"} DebugEnableFlags__PORT_KEYBOARD_EXTENSION(x: int) : int
{
  x + 1292
}

function {:inline true} {:fieldmap "Mem_T.DebugEnableScanCode2__PORT_KEYBOARD_EXTENSION"} {:fieldname "DebugEnableScanCode2"} DebugEnableScanCode2__PORT_KEYBOARD_EXTENSION(x: int) : int
{
  x + 1300
}

function {:inline true} {:fieldmap "Mem_T.DebugEnableScanCode__PORT_KEYBOARD_EXTENSION"} {:fieldname "DebugEnableScanCode"} DebugEnableScanCode__PORT_KEYBOARD_EXTENSION(x: int) : int
{
  x + 1296
}

function {:inline true} {:fieldmap "Mem_T.DefaultBuffer__CONTROLLER_DATA"} {:fieldname "DefaultBuffer"} DefaultBuffer__CONTROLLER_DATA(x: int) : int
{
  x + 836
}

function {:inline true} {:fieldmap "Mem_T.DefaultData__RTL_QUERY_REGISTRY_TABLE"} {:fieldname "DefaultData"} DefaultData__RTL_QUERY_REGISTRY_TABLE(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.DefaultLength__RTL_QUERY_REGISTRY_TABLE"} {:fieldname "DefaultLength"} DefaultLength__RTL_QUERY_REGISTRY_TABLE(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.DefaultType__RTL_QUERY_REGISTRY_TABLE"} {:fieldname "DefaultType"} DefaultType__RTL_QUERY_REGISTRY_TABLE(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.DeferredRoutine__KDPC"} {:fieldname "DeferredRoutine"} DeferredRoutine__KDPC(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.Delay__KEYBOARD_TYPEMATIC_PARAMETERS"} {:fieldname "Delay"} Delay__KEYBOARD_TYPEMATIC_PARAMETERS(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Descriptors__IO_RESOURCE_LIST"} {:fieldname "Descriptors"} Descriptors__IO_RESOURCE_LIST(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.DeviceCapabilities_unnamed_tag_23"} {:fieldname "DeviceCapabilities"} DeviceCapabilities_unnamed_tag_23(x: int) : int
{
  x + 352
}

function {:inline true} {:fieldmap "Mem_T.DeviceExtension__DEVICE_OBJECT"} {:fieldname "DeviceExtension"} DeviceExtension__DEVICE_OBJECT(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.DeviceExtension__I8042_INITIALIZE_DATA_CONTEXT"} {:fieldname "DeviceExtension"} DeviceExtension__I8042_INITIALIZE_DATA_CONTEXT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.DeviceIoControl_unnamed_tag_23"} {:fieldname "DeviceIoControl"} DeviceIoControl_unnamed_tag_23(x: int) : int
{
  x + 256
}

function {:inline true} {:fieldmap "Mem_T.DevicePrivate_unnamed_tag_2"} {:fieldname "DevicePrivate"} DevicePrivate_unnamed_tag_2(x: int) : int
{
  x + 148
}

function {:inline true} {:fieldmap "Mem_T.DevicePrivate_unnamed_tag_58"} {:fieldname "DevicePrivate"} DevicePrivate_unnamed_tag_58(x: int) : int
{
  x + 188
}

function {:inline true} {:fieldmap "Mem_T.DeviceRegisters__CONTROLLER_DATA"} {:fieldname "DeviceRegisters"} DeviceRegisters__CONTROLLER_DATA(x: int) : int
{
  x + 856
}

function {:inline true} {:fieldmap "Mem_T.DeviceSpecificData_unnamed_tag_2"} {:fieldname "DeviceSpecificData"} DeviceSpecificData_unnamed_tag_2(x: int) : int
{
  x + 172
}

function {:inline true} {:fieldmap "Mem_T.DeviceState__POWER_STATE"} {:fieldname "DeviceState"} DeviceState__POWER_STATE(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.DeviceType__I8042_INITIALIZE_DATA_CONTEXT"} {:fieldname "DeviceType"} DeviceType__I8042_INITIALIZE_DATA_CONTEXT(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.DeviceWake__DEVICE_CAPABILITIES"} {:fieldname "DeviceWake"} DeviceWake__DEVICE_CAPABILITIES(x: int) : int
{
  x + 132
}

function {:inline true} {:fieldmap "Mem_T.DmaV3_unnamed_tag_2"} {:fieldname "DmaV3"} DmaV3_unnamed_tag_2(x: int) : int
{
  x + 124
}

function {:inline true} {:fieldmap "Mem_T.DmaV3_unnamed_tag_58"} {:fieldname "DmaV3"} DmaV3_unnamed_tag_58(x: int) : int
{
  x + 124
}

function {:inline true} {:fieldmap "Mem_T.Dma_unnamed_tag_2"} {:fieldname "Dma"} Dma_unnamed_tag_2(x: int) : int
{
  x + 112
}

function {:inline true} {:fieldmap "Mem_T.Dma_unnamed_tag_58"} {:fieldname "Dma"} Dma_unnamed_tag_58(x: int) : int
{
  x + 116
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "DpcInterlockKeyboard"} DpcInterlockKeyboard__PORT_KEYBOARD_EXTENSION(x: int) : int
{
  x + 1216
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "DpcInterlockMouse"} DpcInterlockMouse__PORT_MOUSE_EXTENSION(x: int) : int
{
  x + 1608
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "Dpc"} Dpc__ENABLE_MOUSE(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "Dpc"} Dpc__RESET_MOUSE(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.DumpDataSize__IO_ERROR_LOG_PACKET"} {:fieldname "DumpDataSize"} DumpDataSize__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.DumpData__IO_ERROR_LOG_PACKET"} {:fieldname "DumpData"} DumpData__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 64
}

function {:inline true} {:fieldmap "Mem_T.EnableCount_COMMON_DATA"} {:fieldname "EnableCount"} EnableCount_COMMON_DATA(x: int) : int
{
  x + 216
}

function {:inline true} {:fieldmap "Mem_T.EnableMouse__PORT_MOUSE_EXTENSION"} {:fieldname "EnableMouse"} EnableMouse__PORT_MOUSE_EXTENSION(x: int) : int
{
  x + 1360
}

function {:inline true} {:fieldmap "Mem_T.EnableWheelDetection__PORT_MOUSE_EXTENSION"} {:fieldname "EnableWheelDetection"} EnableWheelDetection__PORT_MOUSE_EXTENSION(x: int) : int
{
  x + 1804
}

function {:inline true} {:fieldmap "Mem_T.Enabled__ENABLE_MOUSE"} {:fieldname "Enabled"} Enabled__ENABLE_MOUSE(x: int) : int
{
  x + 244
}

function {:inline true} {:fieldmap "Mem_T.EntryContext__RTL_QUERY_REGISTRY_TABLE"} {:fieldname "EntryContext"} EntryContext__RTL_QUERY_REGISTRY_TABLE(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.ErrorCode__IO_ERROR_LOG_PACKET"} {:fieldname "ErrorCode"} ErrorCode__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "ErrorLogDpc"} ErrorLogDpc_COMMON_DATA(x: int) : int
{
  x + 456
}

function {:inline true} {:fieldmap "Mem_T.ExecuteWmiMethod__WMILIB_CONTEXT"} {:fieldname "ExecuteWmiMethod"} ExecuteWmiMethod__WMILIB_CONTEXT(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.ExtraInformation__KEYBOARD_INPUT_DATA"} {:fieldname "ExtraInformation"} ExtraInformation__KEYBOARD_INPUT_DATA(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.ExtraInformation__MOUSE_INPUT_DATA"} {:fieldname "ExtraInformation"} ExtraInformation__MOUSE_INPUT_DATA(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.FailedCompleteResetCount__PORT_MOUSE_EXTENSION"} {:fieldname "FailedCompleteResetCount"} FailedCompleteResetCount__PORT_MOUSE_EXTENSION(x: int) : int
{
  x + 1680
}

function {:inline true} {:fieldmap "Mem_T.FailedReset__PORT_KEYBOARD_EXTENSION"} {:fieldname "FailedReset"} FailedReset__PORT_KEYBOARD_EXTENSION(x: int) : int
{
  x + 1288
}

function {:inline true} {:fieldmap "Mem_T.FilterResourceRequirements_unnamed_tag_23"} {:fieldname "FilterResourceRequirements"} FilterResourceRequirements_unnamed_tag_23(x: int) : int
{
  x + 356
}

function {:inline true} {:fieldmap "Mem_T.FinalStatus__IO_ERROR_LOG_PACKET"} {:fieldname "FinalStatus"} FinalStatus__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.FirstTime__ENABLE_MOUSE"} {:fieldname "FirstTime"} FirstTime__ENABLE_MOUSE(x: int) : int
{
  x + 240
}

function {:inline true} {:fieldmap "Mem_T.Flags__CM_PARTIAL_RESOURCE_DESCRIPTOR"} {:fieldname "Flags"} Flags__CM_PARTIAL_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Flags__IO_RESOURCE_DESCRIPTOR"} {:fieldname "Flags"} Flags__IO_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.Flags__KEYBOARD_INPUT_DATA"} {:fieldname "Flags"} Flags__KEYBOARD_INPUT_DATA(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Flags__MOUSE_INPUT_DATA"} {:fieldname "Flags"} Flags__MOUSE_INPUT_DATA(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Flags__RTL_QUERY_REGISTRY_TABLE"} {:fieldname "Flags"} Flags__RTL_QUERY_REGISTRY_TABLE(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Flink__LIST_ENTRY"} {:fieldname "Flink"} Flink__LIST_ENTRY(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.FloatingSave__I8042_CONFIGURATION_INFORMATION"} {:fieldname "FloatingSave"} FloatingSave__I8042_CONFIGURATION_INFORMATION(x: int) : int
{
  x + 620
}

function {:inline true} {:fieldmap "Mem_T.Generic_unnamed_tag_2"} {:fieldname "Generic"} Generic_unnamed_tag_2(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Generic_unnamed_tag_58"} {:fieldname "Generic"} Generic_unnamed_tag_58(x: int) : int
{
  x + 140
}

function {:inline true} {:fieldmap "Mem_T.GuidCount__WMILIB_CONTEXT"} {:fieldname "GuidCount"} GuidCount__WMILIB_CONTEXT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.GuidList__WMILIB_CONTEXT"} {:fieldname "GuidList"} GuidList__WMILIB_CONTEXT(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.HardwareDisableEnableMask__I8042_TRANSMIT_CCB_CONTEXT"} {:fieldname "HardwareDisableEnableMask"} HardwareDisableEnableMask__I8042_TRANSMIT_CCB_CONTEXT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.HardwarePresent__CONTROLLER_DATA"} {:fieldname "HardwarePresent"} HardwarePresent__CONTROLLER_DATA(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Header__KEVENT"} {:fieldname "Header"} Header__KEVENT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Headless__GLOBALS"} {:fieldname "Headless"} Headless__GLOBALS(x: int) : int
{
  x + 228
}

function {:inline true} {:fieldmap "Mem_T.High1Time__KSYSTEM_TIME"} {:fieldname "High1Time"} High1Time__KSYSTEM_TIME(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.High2Time__KSYSTEM_TIME"} {:fieldname "High2Time"} High2Time__KSYSTEM_TIME(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.HighPart__LUID"} {:fieldname "HighPart"} HighPart__LUID(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.HookContext__PORT_KEYBOARD_EXTENSION"} {:fieldname "HookContext"} HookContext__PORT_KEYBOARD_EXTENSION(x: int) : int
{
  x + 1268
}

function {:inline true} {:fieldmap "Mem_T.HookContext__PORT_MOUSE_EXTENSION"} {:fieldname "HookContext"} HookContext__PORT_MOUSE_EXTENSION(x: int) : int
{
  x + 1768
}

function {:inline true} {:fieldmap "Mem_T.I8xReadXxxUchar__GLOBALS"} {:fieldname "I8xReadXxxUchar"} I8xReadXxxUchar__GLOBALS(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.I8xWriteXxxUchar__GLOBALS"} {:fieldname "I8xWriteXxxUchar"} I8xWriteXxxUchar__GLOBALS(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.IdHighPart_unnamed_tag_16"} {:fieldname "IdHighPart"} IdHighPart_unnamed_tag_16(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.IdLowPart_unnamed_tag_16"} {:fieldname "IdLowPart"} IdLowPart_unnamed_tag_16(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.ImeConvMode__KEYBOARD_IME_STATUS"} {:fieldname "ImeConvMode"} ImeConvMode__KEYBOARD_IME_STATUS(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.ImeOpen__KEYBOARD_IME_STATUS"} {:fieldname "ImeOpen"} ImeOpen__KEYBOARD_IME_STATUS(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Information__IO_STATUS_BLOCK"} {:fieldname "Information"} Information__IO_STATUS_BLOCK(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.InitializationHookCallback__PORT_KEYBOARD_EXTENSION"} {:fieldname "InitializationHookCallback"} InitializationHookCallback__PORT_KEYBOARD_EXTENSION(x: int) : int
{
  x + 1260
}

function {:inline true} {:fieldmap "Mem_T.InitializationRoutine__INTERNAL_I8042_HOOK_KEYBOARD"} {:fieldname "InitializationRoutine"} InitializationRoutine__INTERNAL_I8042_HOOK_KEYBOARD(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.InitializePolled__PORT_MOUSE_EXTENSION"} {:fieldname "InitializePolled"} InitializePolled__PORT_MOUSE_EXTENSION(x: int) : int
{
  x + 1812
}

function {:inline true} {:fieldmap "Mem_T.Initialized_COMMON_DATA"} {:fieldname "Initialized"} Initialized_COMMON_DATA(x: int) : int
{
  x + 952
}

function {:inline true} {:fieldmap "Mem_T.InputBufferLength_unnamed_tag_37"} {:fieldname "InputBufferLength"} InputBufferLength_unnamed_tag_37(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.InputCount_COMMON_DATA"} {:fieldname "InputCount"} InputCount_COMMON_DATA(x: int) : int
{
  x + 212
}

function {:inline true} {:fieldmap "Mem_T.InputCount__GET_DATA_POINTER_CONTEXT"} {:fieldname "InputCount"} InputCount__GET_DATA_POINTER_CONTEXT(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.InputCount__SET_DATA_POINTER_CONTEXT"} {:fieldname "InputCount"} InputCount__SET_DATA_POINTER_CONTEXT(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "InputDataQueueLength"} InputDataQueueLength__KEYBOARD_ATTRIBUTES(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "InputDataQueueLength"} InputDataQueueLength__MOUSE_ATTRIBUTES(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.InputData__PORT_KEYBOARD_EXTENSION"} {:fieldname "InputData"} InputData__PORT_KEYBOARD_EXTENSION(x: int) : int
{
  x + 1220
}

function {:inline true} {:fieldmap "Mem_T.InputData__PORT_MOUSE_EXTENSION"} {:fieldname "InputData"} InputData__PORT_MOUSE_EXTENSION(x: int) : int
{
  x + 1612
}

function {:inline true} {:fieldmap "Mem_T.InputResetSubState__PORT_MOUSE_EXTENSION"} {:fieldname "InputResetSubState"} InputResetSubState__PORT_MOUSE_EXTENSION(x: int) : int
{
  x + 1668
}

function {:inline true} {:fieldmap "Mem_T.InputState__PORT_MOUSE_EXTENSION"} {:fieldname "InputState"} InputState__PORT_MOUSE_EXTENSION(x: int) : int
{
  x + 1664
}

function {:inline true} {:fieldmap "Mem_T.InterfaceType__CM_FULL_RESOURCE_DESCRIPTOR"} {:fieldname "InterfaceType"} InterfaceType__CM_FULL_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.InterfaceType__I8042_CONFIGURATION_INFORMATION"} {:fieldname "InterfaceType"} InterfaceType__I8042_CONFIGURATION_INFORMATION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.InternalResetState__I8X_MOUSE_RESET_INFO"} {:fieldname "InternalResetState"} InternalResetState__I8X_MOUSE_RESET_INFO(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.InterruptDescriptor_COMMON_DATA"} {:fieldname "InterruptDescriptor"} InterruptDescriptor_COMMON_DATA(x: int) : int
{
  x + 648
}

function {:inline true} {:fieldmap "Mem_T.P_KINTERRUPT"} {:fieldname "InterruptObject"} InterruptObject_COMMON_DATA(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.InterruptObject__INTERNAL_I8042_START_INFORMATION"} {:fieldname "InterruptObject"} InterruptObject__INTERNAL_I8042_START_INFORMATION(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.InterruptSynchIrql__I8042_CONFIGURATION_INFORMATION"} {:fieldname "InterruptSynchIrql"} InterruptSynchIrql__I8042_CONFIGURATION_INFORMATION(x: int) : int
{
  x + 596
}

function {:inline true} {:fieldmap "Mem_T.Interrupt_unnamed_tag_2"} {:fieldname "Interrupt"} Interrupt_unnamed_tag_2(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.Interrupt_unnamed_tag_58"} {:fieldname "Interrupt"} Interrupt_unnamed_tag_58(x: int) : int
{
  x + 96
}

function {:inline true} {:fieldmap "Mem_T.IoControlCode__IO_ERROR_LOG_PACKET"} {:fieldname "IoControlCode"} IoControlCode__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.IoControlCode_unnamed_tag_37"} {:fieldname "IoControlCode"} IoControlCode_unnamed_tag_37(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.IoResourceRequirementList_unnamed_tag_46"} {:fieldname "IoResourceRequirementList"} IoResourceRequirementList_unnamed_tag_46(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.IoStatus__IRP"} {:fieldname "IoStatus"} IoStatus__IRP(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.Irp__I8X_KEYBOARD_WORK_ITEM"} {:fieldname "Irp"} Irp__I8X_KEYBOARD_WORK_ITEM(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.IsIsrActivated_COMMON_DATA"} {:fieldname "IsIsrActivated"} IsIsrActivated_COMMON_DATA(x: int) : int
{
  x + 956
}

function {:inline true} {:fieldmap "Mem_T.IsKeyboard_COMMON_DATA"} {:fieldname "IsKeyboard"} IsKeyboard_COMMON_DATA(x: int) : int
{
  x + 960
}

function {:inline true} {:fieldmap "Mem_T.IsrHookCallback__PORT_KEYBOARD_EXTENSION"} {:fieldname "IsrHookCallback"} IsrHookCallback__PORT_KEYBOARD_EXTENSION(x: int) : int
{
  x + 1264
}

function {:inline true} {:fieldmap "Mem_T.IsrHookCallback__PORT_MOUSE_EXTENSION"} {:fieldname "IsrHookCallback"} IsrHookCallback__PORT_MOUSE_EXTENSION(x: int) : int
{
  x + 1764
}

function {:inline true} {:fieldmap "Mem_T.IsrResetState__RESET_MOUSE"} {:fieldname "IsrResetState"} IsrResetState__RESET_MOUSE(x: int) : int
{
  x + 236
}

function {:inline true} {:fieldmap "Mem_T.IsrRoutine__INTERNAL_I8042_HOOK_KEYBOARD"} {:fieldname "IsrRoutine"} IsrRoutine__INTERNAL_I8042_HOOK_KEYBOARD(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.IsrRoutine__INTERNAL_I8042_HOOK_MOUSE"} {:fieldname "IsrRoutine"} IsrRoutine__INTERNAL_I8042_HOOK_MOUSE(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.IsrWritePort__INTERNAL_I8042_HOOK_KEYBOARD"} {:fieldname "IsrWritePort"} IsrWritePort__INTERNAL_I8042_HOOK_KEYBOARD(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.IsrWritePort__INTERNAL_I8042_HOOK_MOUSE"} {:fieldname "IsrWritePort"} IsrWritePort__INTERNAL_I8042_HOOK_MOUSE(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Item__I8X_KEYBOARD_WORK_ITEM"} {:fieldname "Item"} Item__I8X_KEYBOARD_WORK_ITEM(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T._WORK_QUEUE_ITEM"} {:fieldname "Item"} Item__POWER_UP_WORK_ITEM(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.KeyRepeatCurrent__PORT_KEYBOARD_EXTENSION"} {:fieldname "KeyRepeatCurrent"} KeyRepeatCurrent__PORT_KEYBOARD_EXTENSION(x: int) : int
{
  x + 1108
}

function {:inline true} {:fieldmap "Mem_T.KeyRepeatMaximum__KEYBOARD_ATTRIBUTES"} {:fieldname "KeyRepeatMaximum"} KeyRepeatMaximum__KEYBOARD_ATTRIBUTES(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.KeyRepeatMinimum__KEYBOARD_ATTRIBUTES"} {:fieldname "KeyRepeatMinimum"} KeyRepeatMinimum__KEYBOARD_ATTRIBUTES(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T._KEYBOARD_ATTRIBUTES"} {:fieldname "KeyboardAttributes"} KeyboardAttributes__PORT_KEYBOARD_EXTENSION(x: int) : int
{
  x + 1048
}

function {:inline true} {:fieldmap "Mem_T.KeyboardExtension__GLOBALS"} {:fieldname "KeyboardExtension"} KeyboardExtension__GLOBALS(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.KeyboardId__KEYBOARD_OEM_INFORMATION"} {:fieldname "KeyboardId"} KeyboardId__KEYBOARD_OEM_INFORMATION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.KeyboardIdentifierEx__PORT_KEYBOARD_EXTENSION"} {:fieldname "KeyboardIdentifierEx"} KeyboardIdentifierEx__PORT_KEYBOARD_EXTENSION(x: int) : int
{
  x + 1100
}

function {:inline true} {:fieldmap "Mem_T._KEYBOARD_ID"} {:fieldname "KeyboardIdentifier"} KeyboardIdentifier__KEYBOARD_ATTRIBUTES(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.KeyboardIndicators__PORT_KEYBOARD_EXTENSION"} {:fieldname "KeyboardIndicators"} KeyboardIndicators__PORT_KEYBOARD_EXTENSION(x: int) : int
{
  x + 1120
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "KeyboardIsrDpcRetry"} KeyboardIsrDpcRetry__PORT_KEYBOARD_EXTENSION(x: int) : int
{
  x + 1172
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "KeyboardIsrDpc"} KeyboardIsrDpc__PORT_KEYBOARD_EXTENSION(x: int) : int
{
  x + 1128
}

function {:inline true} {:fieldmap "Mem_T.KeyboardMode__KEYBOARD_ATTRIBUTES"} {:fieldname "KeyboardMode"} KeyboardMode__KEYBOARD_ATTRIBUTES(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.KeyboardPowerIrp__POWER_UP_WORK_ITEM"} {:fieldname "KeyboardPowerIrp"} KeyboardPowerIrp__POWER_UP_WORK_ITEM(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T._KEYBOARD_TYPE_INFORMATION"} {:fieldname "KeyboardTypeInformation"} KeyboardTypeInformation__KEYBOARD_OEM_INFORMATION(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.KnownPortsCount__CONTROLLER_DATA"} {:fieldname "KnownPortsCount"} KnownPortsCount__CONTROLLER_DATA(x: int) : int
{
  x + 904
}

function {:inline true} {:fieldmap "Mem_T.KnownPorts__CONTROLLER_DATA"} {:fieldname "KnownPorts"} KnownPorts__CONTROLLER_DATA(x: int) : int
{
  x + 864
}

function {:inline true} {:fieldmap "Mem_T.LastByteReceived__PORT_MOUSE_EXTENSION"} {:fieldname "LastByteReceived"} LastByteReceived__PORT_MOUSE_EXTENSION(x: int) : int
{
  x + 1796
}

function {:inline true} {:fieldmap "Mem_T.LastScanCode__PORT_KEYBOARD_EXTENSION"} {:fieldname "LastScanCode"} LastScanCode__PORT_KEYBOARD_EXTENSION(x: int) : int
{
  x + 980
}

function {:inline true} {:fieldmap "Mem_T.LastX__MOUSE_INPUT_DATA"} {:fieldname "LastX"} LastX__MOUSE_INPUT_DATA(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.LastY__MOUSE_INPUT_DATA"} {:fieldname "LastY"} LastY__MOUSE_INPUT_DATA(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.LedFlags__KEYBOARD_INDICATOR_PARAMETERS"} {:fieldname "LedFlags"} LedFlags__KEYBOARD_INDICATOR_PARAMETERS(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Length40_unnamed_tag_13"} {:fieldname "Length40"} Length40_unnamed_tag_13(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.Length40_unnamed_tag_65"} {:fieldname "Length40"} Length40_unnamed_tag_65(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Length48_unnamed_tag_14"} {:fieldname "Length48"} Length48_unnamed_tag_14(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.Length48_unnamed_tag_66"} {:fieldname "Length48"} Length48_unnamed_tag_66(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Length64_unnamed_tag_15"} {:fieldname "Length64"} Length64_unnamed_tag_15(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.Length64_unnamed_tag_67"} {:fieldname "Length64"} Length64_unnamed_tag_67(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Length_unnamed_tag_11"} {:fieldname "Length"} Length_unnamed_tag_11(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Length_unnamed_tag_3"} {:fieldname "Length"} Length_unnamed_tag_3(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.Length_unnamed_tag_33"} {:fieldname "Length"} Length_unnamed_tag_33(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Level_unnamed_tag_5"} {:fieldname "Level"} Level_unnamed_tag_5(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.ListSize__IO_RESOURCE_REQUIREMENTS_LIST"} {:fieldname "ListSize"} ListSize__IO_RESOURCE_REQUIREMENTS_LIST(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.List__CM_RESOURCE_LIST"} {:fieldname "List"} List__CM_RESOURCE_LIST(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.List__IO_RESOURCE_REQUIREMENTS_LIST"} {:fieldname "List"} List__IO_RESOURCE_REQUIREMENTS_LIST(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.List__WORK_QUEUE_ITEM"} {:fieldname "List"} List__WORK_QUEUE_ITEM(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.LowPart__KSYSTEM_TIME"} {:fieldname "LowPart"} LowPart__KSYSTEM_TIME(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.LowPart__LUID"} {:fieldname "LowPart"} LowPart__LUID(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.MajorFunctionCode__IO_ERROR_LOG_PACKET"} {:fieldname "MajorFunctionCode"} MajorFunctionCode__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.MajorFunction__IO_STACK_LOCATION"} {:fieldname "MajorFunction"} MajorFunction__IO_STACK_LOCATION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.MakeCode__I8X_KEYBOARD_WORK_ITEM"} {:fieldname "MakeCode"} MakeCode__I8X_KEYBOARD_WORK_ITEM(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.MakeCode__KEYBOARD_INPUT_DATA"} {:fieldname "MakeCode"} MakeCode__KEYBOARD_INPUT_DATA(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.MaxBusNumber_unnamed_tag_63"} {:fieldname "MaxBusNumber"} MaxBusNumber_unnamed_tag_63(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.MaximumAddress_unnamed_tag_59"} {:fieldname "MaximumAddress"} MaximumAddress_unnamed_tag_59(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.MaximumAddress_unnamed_tag_65"} {:fieldname "MaximumAddress"} MaximumAddress_unnamed_tag_65(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.MaximumAddress_unnamed_tag_66"} {:fieldname "MaximumAddress"} MaximumAddress_unnamed_tag_66(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.MaximumAddress_unnamed_tag_67"} {:fieldname "MaximumAddress"} MaximumAddress_unnamed_tag_67(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.MaximumChannel_unnamed_tag_61"} {:fieldname "MaximumChannel"} MaximumChannel_unnamed_tag_61(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.MaximumLength__UNICODE_STRING"} {:fieldname "MaximumLength"} MaximumLength__UNICODE_STRING(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.MaximumVector_unnamed_tag_60"} {:fieldname "MaximumVector"} MaximumVector_unnamed_tag_60(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Memory40_unnamed_tag_2"} {:fieldname "Memory40"} Memory40_unnamed_tag_2(x: int) : int
{
  x + 184
}

function {:inline true} {:fieldmap "Mem_T.Memory40_unnamed_tag_58"} {:fieldname "Memory40"} Memory40_unnamed_tag_58(x: int) : int
{
  x + 228
}

function {:inline true} {:fieldmap "Mem_T.Memory48_unnamed_tag_2"} {:fieldname "Memory48"} Memory48_unnamed_tag_2(x: int) : int
{
  x + 208
}

function {:inline true} {:fieldmap "Mem_T.Memory48_unnamed_tag_58"} {:fieldname "Memory48"} Memory48_unnamed_tag_58(x: int) : int
{
  x + 276
}

function {:inline true} {:fieldmap "Mem_T.Memory64_unnamed_tag_2"} {:fieldname "Memory64"} Memory64_unnamed_tag_2(x: int) : int
{
  x + 232
}

function {:inline true} {:fieldmap "Mem_T.Memory64_unnamed_tag_58"} {:fieldname "Memory64"} Memory64_unnamed_tag_58(x: int) : int
{
  x + 324
}

function {:inline true} {:fieldmap "Mem_T.Memory_unnamed_tag_2"} {:fieldname "Memory"} Memory_unnamed_tag_2(x: int) : int
{
  x + 88
}

function {:inline true} {:fieldmap "Mem_T.Memory_unnamed_tag_58"} {:fieldname "Memory"} Memory_unnamed_tag_58(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.MessageCount_unnamed_tag_7"} {:fieldname "MessageCount"} MessageCount_unnamed_tag_7(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.MessageInterrupt_unnamed_tag_2"} {:fieldname "MessageInterrupt"} MessageInterrupt_unnamed_tag_2(x: int) : int
{
  x + 60
}

function {:inline true} {:fieldmap "Mem_T.MinBusNumber_unnamed_tag_63"} {:fieldname "MinBusNumber"} MinBusNumber_unnamed_tag_63(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.MinimumAddress_unnamed_tag_59"} {:fieldname "MinimumAddress"} MinimumAddress_unnamed_tag_59(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.MinimumAddress_unnamed_tag_65"} {:fieldname "MinimumAddress"} MinimumAddress_unnamed_tag_65(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.MinimumAddress_unnamed_tag_66"} {:fieldname "MinimumAddress"} MinimumAddress_unnamed_tag_66(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.MinimumAddress_unnamed_tag_67"} {:fieldname "MinimumAddress"} MinimumAddress_unnamed_tag_67(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.MinimumChannel_unnamed_tag_61"} {:fieldname "MinimumChannel"} MinimumChannel_unnamed_tag_61(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.MinimumVector_unnamed_tag_60"} {:fieldname "MinimumVector"} MinimumVector_unnamed_tag_60(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.MinorFunction__IO_STACK_LOCATION"} {:fieldname "MinorFunction"} MinorFunction__IO_STACK_LOCATION(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.MouseAttributes__PORT_MOUSE_EXTENSION"} {:fieldname "MouseAttributes"} MouseAttributes__PORT_MOUSE_EXTENSION(x: int) : int
{
  x + 968
}

function {:inline true} {:fieldmap "Mem_T.MouseExtension__GLOBALS"} {:fieldname "MouseExtension"} MouseExtension__GLOBALS(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.MouseExtension__I8X_MOUSE_RESET_INFO"} {:fieldname "MouseExtension"} MouseExtension__I8X_MOUSE_RESET_INFO(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.MouseIdentifier__MOUSE_ATTRIBUTES"} {:fieldname "MouseIdentifier"} MouseIdentifier__MOUSE_ATTRIBUTES(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "MouseIsrDpcRetry"} MouseIsrDpcRetry__PORT_MOUSE_EXTENSION(x: int) : int
{
  x + 1032
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "MouseIsrDpc"} MouseIsrDpc__PORT_MOUSE_EXTENSION(x: int) : int
{
  x + 988
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "MouseIsrResetDpc"} MouseIsrResetDpc__PORT_MOUSE_EXTENSION(x: int) : int
{
  x + 1076
}

function {:inline true} {:fieldmap "Mem_T.MousePowerIrp__POWER_UP_WORK_ITEM"} {:fieldname "MousePowerIrp"} MousePowerIrp__POWER_UP_WORK_ITEM(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "MouseResetStallTime"} MouseResetStallTime__PORT_MOUSE_EXTENSION(x: int) : int
{
  x + 1780
}

function {:inline true} {:fieldmap "Mem_T.Name__RTL_QUERY_REGISTRY_TABLE"} {:fieldname "Name"} Name__RTL_QUERY_REGISTRY_TABLE(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.NewValue__VARIABLE_OPERATION_CONTEXT"} {:fieldname "NewValue"} NewValue__VARIABLE_OPERATION_CONTEXT(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.NotificationEntry__PORT_MOUSE_EXTENSION"} {:fieldname "NotificationEntry"} NotificationEntry__PORT_MOUSE_EXTENSION(x: int) : int
{
  x + 1772
}

function {:inline true} {:fieldmap "Mem_T.NumberOfButtonsOverride__PORT_MOUSE_EXTENSION"} {:fieldname "NumberOfButtonsOverride"} NumberOfButtonsOverride__PORT_MOUSE_EXTENSION(x: int) : int
{
  x + 1808
}

function {:inline true} {:fieldmap "Mem_T.NumberOfButtons__MOUSE_ATTRIBUTES"} {:fieldname "NumberOfButtons"} NumberOfButtons__MOUSE_ATTRIBUTES(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.NumberOfFunctionKeys__KEYBOARD_ATTRIBUTES"} {:fieldname "NumberOfFunctionKeys"} NumberOfFunctionKeys__KEYBOARD_ATTRIBUTES(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.NumberOfFunctionKeys__KEYBOARD_TYPE_INFORMATION"} {:fieldname "NumberOfFunctionKeys"} NumberOfFunctionKeys__KEYBOARD_TYPE_INFORMATION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.NumberOfIndicatorKeys__KEYBOARD_INDICATOR_TRANSLATION"} {:fieldname "NumberOfIndicatorKeys"} NumberOfIndicatorKeys__KEYBOARD_INDICATOR_TRANSLATION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.NumberOfIndicators__KEYBOARD_ATTRIBUTES"} {:fieldname "NumberOfIndicators"} NumberOfIndicators__KEYBOARD_ATTRIBUTES(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.NumberOfIndicators__KEYBOARD_TYPE_INFORMATION"} {:fieldname "NumberOfIndicators"} NumberOfIndicators__KEYBOARD_TYPE_INFORMATION(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.NumberOfKeysTotal__KEYBOARD_ATTRIBUTES"} {:fieldname "NumberOfKeysTotal"} NumberOfKeysTotal__KEYBOARD_ATTRIBUTES(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.NumberOfKeysTotal__KEYBOARD_TYPE_INFORMATION"} {:fieldname "NumberOfKeysTotal"} NumberOfKeysTotal__KEYBOARD_TYPE_INFORMATION(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.OkayToLogOverflow_COMMON_DATA"} {:fieldname "OkayToLogOverflow"} OkayToLogOverflow_COMMON_DATA(x: int) : int
{
  x + 948
}

function {:inline true} {:fieldmap "Mem_T.Operation__VARIABLE_OPERATION_CONTEXT"} {:fieldname "Operation"} Operation__VARIABLE_OPERATION_CONTEXT(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Option__IO_RESOURCE_DESCRIPTOR"} {:fieldname "Option"} Option__IO_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.OutputBufferLength_unnamed_tag_37"} {:fieldname "OutputBufferLength"} OutputBufferLength_unnamed_tag_37(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.OutstandingPowerIrp_COMMON_DATA"} {:fieldname "OutstandingPowerIrp"} OutstandingPowerIrp_COMMON_DATA(x: int) : int
{
  x + 196
}

function {:inline true} {:fieldmap "Mem_T.Overlay_unnamed_tag_20"} {:fieldname "Overlay"} Overlay_unnamed_tag_20(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.PDO_COMMON_DATA"} {:fieldname "PDO"} PDO_COMMON_DATA(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.Parameter__WORK_QUEUE_ITEM"} {:fieldname "Parameter"} Parameter__WORK_QUEUE_ITEM(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Parameters__IO_STACK_LOCATION"} {:fieldname "Parameters"} Parameters__IO_STACK_LOCATION(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.PartialDescriptors__CM_PARTIAL_RESOURCE_LIST"} {:fieldname "PartialDescriptors"} PartialDescriptors__CM_PARTIAL_RESOURCE_LIST(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T._CM_PARTIAL_RESOURCE_LIST"} {:fieldname "PartialResourceList"} PartialResourceList__CM_FULL_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.PendingReturned__IRP"} {:fieldname "PendingReturned"} PendingReturned__IRP(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.PnPID__PORT_MOUSE_EXTENSION"} {:fieldname "PnPID"} PnPID__PORT_MOUSE_EXTENSION(x: int) : int
{
  x + 1732
}

function {:inline true} {:fieldmap "Mem_T.PnpDeviceState_COMMON_DATA"} {:fieldname "PnpDeviceState"} PnpDeviceState_COMMON_DATA(x: int) : int
{
  x + 940
}

function {:inline true} {:fieldmap "Mem_T.PollStatusIterations__I8042_CONFIGURATION_INFORMATION"} {:fieldname "PollStatusIterations"} PollStatusIterations__I8042_CONFIGURATION_INFORMATION(x: int) : int
{
  x + 612
}

function {:inline true} {:fieldmap "Mem_T.PollingIterationsMaximum__I8042_CONFIGURATION_INFORMATION"} {:fieldname "PollingIterationsMaximum"} PollingIterationsMaximum__I8042_CONFIGURATION_INFORMATION(x: int) : int
{
  x + 608
}

function {:inline true} {:fieldmap "Mem_T.PollingIterations__I8042_CONFIGURATION_INFORMATION"} {:fieldname "PollingIterations"} PollingIterations__I8042_CONFIGURATION_INFORMATION(x: int) : int
{
  x + 604
}

function {:inline true} {:fieldmap "Mem_T.PortListCount__I8042_CONFIGURATION_INFORMATION"} {:fieldname "PortListCount"} PortListCount__I8042_CONFIGURATION_INFORMATION(x: int) : int
{
  x + 592
}

function {:inline true} {:fieldmap "Mem_T.PortList__I8042_CONFIGURATION_INFORMATION"} {:fieldname "PortList"} PortList__I8042_CONFIGURATION_INFORMATION(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Port_unnamed_tag_2"} {:fieldname "Port"} Port_unnamed_tag_2(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.Port_unnamed_tag_58"} {:fieldname "Port"} Port_unnamed_tag_58(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Port_unnamed_tag_8"} {:fieldname "Port"} Port_unnamed_tag_8(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.PostSamplesState__PORT_MOUSE_EXTENSION"} {:fieldname "PostSamplesState"} PostSamplesState__PORT_MOUSE_EXTENSION(x: int) : int
{
  x + 1792
}

function {:inline true} {:fieldmap "Mem_T.PowerCaps__PORT_KEYBOARD_EXTENSION"} {:fieldname "PowerCaps"} PowerCaps__PORT_KEYBOARD_EXTENSION(x: int) : int
{
  x + 968
}

function {:inline true} {:fieldmap "Mem_T.PowerEvent__PORT_KEYBOARD_EXTENSION"} {:fieldname "PowerEvent"} PowerEvent__PORT_KEYBOARD_EXTENSION(x: int) : int
{
  x + 972
}

function {:inline true} {:fieldmap "Mem_T.PowerFlags__GLOBALS"} {:fieldname "PowerFlags"} PowerFlags__GLOBALS(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.PowerState_COMMON_DATA"} {:fieldname "PowerState"} PowerState_COMMON_DATA(x: int) : int
{
  x + 200
}

function {:inline true} {:fieldmap "Mem_T.Power_unnamed_tag_23"} {:fieldname "Power"} Power_unnamed_tag_23(x: int) : int
{
  x + 420
}

function {:inline true} {:fieldmap "Mem_T.PreviousButtons__PORT_MOUSE_EXTENSION"} {:fieldname "PreviousButtons"} PreviousButtons__PORT_MOUSE_EXTENSION(x: int) : int
{
  x + 1788
}

function {:inline true} {:fieldmap "Mem_T.PreviousSignAndOverflow__PORT_MOUSE_EXTENSION"} {:fieldname "PreviousSignAndOverflow"} PreviousSignAndOverflow__PORT_MOUSE_EXTENSION(x: int) : int
{
  x + 1688
}

function {:inline true} {:fieldmap "Mem_T._LARGE_INTEGER"} {:fieldname "PreviousTick"} PreviousTick__PORT_MOUSE_EXTENSION(x: int) : int
{
  x + 1692
}

function {:inline true} {:fieldmap "Mem_T.PriorityPolicy_unnamed_tag_60"} {:fieldname "PriorityPolicy"} PriorityPolicy_unnamed_tag_60(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Priority_unnamed_tag_64"} {:fieldname "Priority"} Priority_unnamed_tag_64(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.QuadPart__LARGE_INTEGER"} {:fieldname "QuadPart"} QuadPart__LARGE_INTEGER(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.QueryWmiDataBlock__WMILIB_CONTEXT"} {:fieldname "QueryWmiDataBlock"} QueryWmiDataBlock__WMILIB_CONTEXT(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.QueryWmiRegInfo__WMILIB_CONTEXT"} {:fieldname "QueryWmiRegInfo"} QueryWmiRegInfo__WMILIB_CONTEXT(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.QueueKeyboardPacket__INTERNAL_I8042_HOOK_KEYBOARD"} {:fieldname "QueueKeyboardPacket"} QueueKeyboardPacket__INTERNAL_I8042_HOOK_KEYBOARD(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.QueueMousePacket__INTERNAL_I8042_HOOK_MOUSE"} {:fieldname "QueueMousePacket"} QueueMousePacket__INTERNAL_I8042_HOOK_MOUSE(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Rate__KEYBOARD_TYPEMATIC_PARAMETERS"} {:fieldname "Rate"} Rate__KEYBOARD_TYPEMATIC_PARAMETERS(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.RawButtons__MOUSE_INPUT_DATA"} {:fieldname "RawButtons"} RawButtons__MOUSE_INPUT_DATA(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.Raw_unnamed_tag_6"} {:fieldname "Raw"} Raw_unnamed_tag_6(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.RegistersMapped__GLOBALS"} {:fieldname "RegistersMapped"} RegistersMapped__GLOBALS(x: int) : int
{
  x + 220
}

function {:inline true} {:fieldmap "Mem_T._UNICODE_STRING"} {:fieldname "RegistryPath"} RegistryPath__GLOBALS(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T._IO_REMOVE_LOCK"} {:fieldname "RemoveLock"} RemoveLock_COMMON_DATA(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.ReportResetErrors__GLOBALS"} {:fieldname "ReportResetErrors"} ReportResetErrors__GLOBALS(x: int) : int
{
  x + 232
}

function {:inline true} {:fieldmap "Mem_T.RequestLine_unnamed_tag_62"} {:fieldname "RequestLine"} RequestLine_unnamed_tag_62(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.RequestLine_unnamed_tag_9"} {:fieldname "RequestLine"} RequestLine_unnamed_tag_9(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.ResendCount_COMMON_DATA"} {:fieldname "ResendCount"} ResendCount_COMMON_DATA(x: int) : int
{
  x + 944
}

function {:inline true} {:fieldmap "Mem_T.ResendIterations__I8042_CONFIGURATION_INFORMATION"} {:fieldname "ResendIterations"} ResendIterations__I8042_CONFIGURATION_INFORMATION(x: int) : int
{
  x + 600
}

function {:inline true} {:fieldmap "Mem_T.Reserved1_unnamed_tag_12"} {:fieldname "Reserved1"} Reserved1_unnamed_tag_12(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Reserved1_unnamed_tag_16"} {:fieldname "Reserved1"} Reserved1_unnamed_tag_16(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Reserved1_unnamed_tag_64"} {:fieldname "Reserved1"} Reserved1_unnamed_tag_64(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Reserved1_unnamed_tag_8"} {:fieldname "Reserved1"} Reserved1_unnamed_tag_8(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Reserved1_unnamed_tag_9"} {:fieldname "Reserved1"} Reserved1_unnamed_tag_9(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Reserved2_unnamed_tag_12"} {:fieldname "Reserved2"} Reserved2_unnamed_tag_12(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Reserved2_unnamed_tag_16"} {:fieldname "Reserved2"} Reserved2_unnamed_tag_16(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Reserved2_unnamed_tag_64"} {:fieldname "Reserved2"} Reserved2_unnamed_tag_64(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Reserved2_unnamed_tag_9"} {:fieldname "Reserved2"} Reserved2_unnamed_tag_9(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.Reserved3_unnamed_tag_9"} {:fieldname "Reserved3"} Reserved3_unnamed_tag_9(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.Reserved__KEYBOARD_INPUT_DATA"} {:fieldname "Reserved"} Reserved__KEYBOARD_INPUT_DATA(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Reserved_unnamed_tag_11"} {:fieldname "Reserved"} Reserved_unnamed_tag_11(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Reserved_unnamed_tag_62"} {:fieldname "Reserved"} Reserved_unnamed_tag_62(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Reserved_unnamed_tag_63"} {:fieldname "Reserved"} Reserved_unnamed_tag_63(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Reserved_unnamed_tag_7"} {:fieldname "Reserved"} Reserved_unnamed_tag_7(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.ResetCount__PORT_MOUSE_EXTENSION"} {:fieldname "ResetCount"} ResetCount__PORT_MOUSE_EXTENSION(x: int) : int
{
  x + 1676
}

function {:inline true} {:fieldmap "Mem_T.P_IRP"} {:fieldname "ResetIrp"} ResetIrp__PORT_MOUSE_EXTENSION(x: int) : int
{
  x + 984
}

function {:inline true} {:fieldmap "Mem_T.ResetMouse__PORT_MOUSE_EXTENSION"} {:fieldname "ResetMouse"} ResetMouse__PORT_MOUSE_EXTENSION(x: int) : int
{
  x + 1120
}

function {:inline true} {:fieldmap "Mem_T.Resolution__PORT_MOUSE_EXTENSION"} {:fieldname "Resolution"} Resolution__PORT_MOUSE_EXTENSION(x: int) : int
{
  x + 1800
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "RetriesExceededDpc"} RetriesExceededDpc_COMMON_DATA(x: int) : int
{
  x + 412
}

function {:inline true} {:fieldmap "Mem_T.RetryCount__IO_ERROR_LOG_PACKET"} {:fieldname "RetryCount"} RetryCount__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.SampleRate__MOUSE_ATTRIBUTES"} {:fieldname "SampleRate"} SampleRate__MOUSE_ATTRIBUTES(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.SampleRatesIndex__PORT_MOUSE_EXTENSION"} {:fieldname "SampleRatesIndex"} SampleRatesIndex__PORT_MOUSE_EXTENSION(x: int) : int
{
  x + 1784
}

function {:inline true} {:fieldmap "Mem_T.SampleRates__PORT_MOUSE_EXTENSION"} {:fieldname "SampleRates"} SampleRates__PORT_MOUSE_EXTENSION(x: int) : int
{
  x + 1776
}

function {:inline true} {:fieldmap "Mem_T.Self_COMMON_DATA"} {:fieldname "Self"} Self_COMMON_DATA(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.SequenceNumber_COMMON_DATA"} {:fieldname "SequenceNumber"} SequenceNumber_COMMON_DATA(x: int) : int
{
  x + 588
}

function {:inline true} {:fieldmap "Mem_T.SequenceNumber__IO_ERROR_LOG_PACKET"} {:fieldname "SequenceNumber"} SequenceNumber__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.SetWmiDataBlock__WMILIB_CONTEXT"} {:fieldname "SetWmiDataBlock"} SetWmiDataBlock__WMILIB_CONTEXT(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.SetWmiDataItem__WMILIB_CONTEXT"} {:fieldname "SetWmiDataItem"} SetWmiDataItem__WMILIB_CONTEXT(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.ShareDisposition__CM_PARTIAL_RESOURCE_DESCRIPTOR"} {:fieldname "ShareDisposition"} ShareDisposition__CM_PARTIAL_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.ShareDisposition__IO_RESOURCE_DESCRIPTOR"} {:fieldname "ShareDisposition"} ShareDisposition__IO_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.SharedInterrupts__I8042_CONFIGURATION_INFORMATION"} {:fieldname "SharedInterrupts"} SharedInterrupts__I8042_CONFIGURATION_INFORMATION(x: int) : int
{
  x + 624
}

function {:inline true} {:fieldmap "Mem_T.ShutdownType_COMMON_DATA"} {:fieldname "ShutdownType"} ShutdownType_COMMON_DATA(x: int) : int
{
  x + 208
}

function {:inline true} {:fieldmap "Mem_T.ShutdownType_unnamed_tag_54"} {:fieldname "ShutdownType"} ShutdownType_unnamed_tag_54(x: int) : int
{
  x + 48
}

function {:inline true} {:fieldmap "Mem_T.SignalState__DISPATCHER_HEADER"} {:fieldname "SignalState"} SignalState__DISPATCHER_HEADER(x: int) : int
{
  x + 144
}

function {:inline true} {:fieldmap "Mem_T.Signalling__DISPATCHER_HEADER"} {:fieldname "Signalling"} Signalling__DISPATCHER_HEADER(x: int) : int
{
  x + 32
}

function {:inline true} {:fieldmap "Mem_T.Size__DISPATCHER_HEADER"} {:fieldname "Size"} Size__DISPATCHER_HEADER(x: int) : int
{
  x + 100
}

function {:inline true} {:fieldmap "Mem_T.Size__INTERNAL_I8042_START_INFORMATION"} {:fieldname "Size"} Size__INTERNAL_I8042_START_INFORMATION(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Spare1__IO_RESOURCE_DESCRIPTOR"} {:fieldname "Spare1"} Spare1__IO_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Spare2__IO_RESOURCE_DESCRIPTOR"} {:fieldname "Spare2"} Spare2__IO_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 20
}

function {:inline true} {:fieldmap "Mem_T.StackSize__DEVICE_OBJECT"} {:fieldname "StackSize"} StackSize__DEVICE_OBJECT(x: int) : int
{
  x + 52
}

function {:inline true} {:fieldmap "Mem_T.StartDevice_unnamed_tag_23"} {:fieldname "StartDevice"} StartDevice_unnamed_tag_23(x: int) : int
{
  x + 472
}

function {:inline true} {:fieldmap "Mem_T.Start_unnamed_tag_11"} {:fieldname "Start"} Start_unnamed_tag_11(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Start_unnamed_tag_13"} {:fieldname "Start"} Start_unnamed_tag_13(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Start_unnamed_tag_14"} {:fieldname "Start"} Start_unnamed_tag_14(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Start_unnamed_tag_15"} {:fieldname "Start"} Start_unnamed_tag_15(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Start_unnamed_tag_3"} {:fieldname "Start"} Start_unnamed_tag_3(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.StartedDevices__GLOBALS"} {:fieldname "StartedDevices"} StartedDevices__GLOBALS(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.Started_COMMON_DATA"} {:fieldname "Started"} Started_COMMON_DATA(x: int) : int
{
  x + 964
}

function {:inline true} {:fieldmap "Mem_T.State__OUTPUT_PACKET"} {:fieldname "State"} State__OUTPUT_PACKET(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.State_unnamed_tag_54"} {:fieldname "State"} State_unnamed_tag_54(x: int) : int
{
  x + 40
}

function {:inline true} {:fieldmap "Mem_T.Status__I8042_TRANSMIT_CCB_CONTEXT"} {:fieldname "Status"} Status__I8042_TRANSMIT_CCB_CONTEXT(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Status__IO_STATUS_BLOCK"} {:fieldname "Status"} Status__IO_STATUS_BLOCK(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Subtype__KEYBOARD_ID"} {:fieldname "Subtype"} Subtype__KEYBOARD_ID(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "SynchTickCount"} SynchTickCount__PORT_MOUSE_EXTENSION(x: int) : int
{
  x + 1712
}

function {:inline true} {:fieldmap "Mem_T._KDPC"} {:fieldname "SysButtonEventDpc"} SysButtonEventDpc__PORT_KEYBOARD_EXTENSION(x: int) : int
{
  x + 988
}

function {:inline true} {:fieldmap "Mem_T.SysButtonEventIrp__PORT_KEYBOARD_EXTENSION"} {:fieldname "SysButtonEventIrp"} SysButtonEventIrp__PORT_KEYBOARD_EXTENSION(x: int) : int
{
  x + 984
}

function {:inline true} {:fieldmap "Mem_T._UNICODE_STRING"} {:fieldname "SysButtonInterfaceName"} SysButtonInterfaceName__PORT_KEYBOARD_EXTENSION(x: int) : int
{
  x + 1036
}

function {:inline true} {:fieldmap "Mem_T.SysButtonSpinLock__PORT_KEYBOARD_EXTENSION"} {:fieldname "SysButtonSpinLock"} SysButtonSpinLock__PORT_KEYBOARD_EXTENSION(x: int) : int
{
  x + 1032
}

function {:inline true} {:fieldmap "Mem_T.SystemBuffer_unnamed_tag_17"} {:fieldname "SystemBuffer"} SystemBuffer_unnamed_tag_17(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.SystemState_COMMON_DATA"} {:fieldname "SystemState"} SystemState_COMMON_DATA(x: int) : int
{
  x + 204
}

function {:inline true} {:fieldmap "Mem_T.SystemState__POWER_STATE"} {:fieldname "SystemState"} SystemState__POWER_STATE(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.SystemWake__DEVICE_CAPABILITIES"} {:fieldname "SystemWake"} SystemWake__DEVICE_CAPABILITIES(x: int) : int
{
  x + 128
}

function {:inline true} {:fieldmap "Mem_T.Tail__IRP"} {:fieldname "Tail"} Tail__IRP(x: int) : int
{
  x + 128
}

function {:inline true} {:fieldmap "Mem_T.TargetedProcessors_unnamed_tag_60"} {:fieldname "TargetedProcessors"} TargetedProcessors_unnamed_tag_60(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.TimerCount__CONTROLLER_DATA"} {:fieldname "TimerCount"} TimerCount__CONTROLLER_DATA(x: int) : int
{
  x + 852
}

function {:inline true} {:fieldmap "Mem_T.TopOfStack_COMMON_DATA"} {:fieldname "TopOfStack"} TopOfStack_COMMON_DATA(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.TransferWidth_unnamed_tag_62"} {:fieldname "TransferWidth"} TransferWidth_unnamed_tag_62(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.TransferWidth_unnamed_tag_9"} {:fieldname "TransferWidth"} TransferWidth_unnamed_tag_9(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.Translated_unnamed_tag_6"} {:fieldname "Translated"} Translated_unnamed_tag_6(x: int) : int
{
  x + 16
}

function {:inline true} {:fieldmap "Mem_T.Type3InputBuffer_unnamed_tag_37"} {:fieldname "Type3InputBuffer"} Type3InputBuffer_unnamed_tag_37(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.Type__IO_RESOURCE_DESCRIPTOR"} {:fieldname "Type"} Type__IO_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Type_unnamed_tag_16"} {:fieldname "Type"} Type_unnamed_tag_16(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Type_unnamed_tag_43"} {:fieldname "Type"} Type_unnamed_tag_43(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Type_unnamed_tag_54"} {:fieldname "Type"} Type_unnamed_tag_54(x: int) : int
{
  x + 36
}

function {:inline true} {:fieldmap "Mem_T.UniqueErrorValue__IO_ERROR_LOG_PACKET"} {:fieldname "UniqueErrorValue"} UniqueErrorValue__IO_ERROR_LOG_PACKET(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.UnitId__KEYBOARD_INDICATOR_PARAMETERS"} {:fieldname "UnitId"} UnitId__KEYBOARD_INDICATOR_PARAMETERS(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.UnitId__KEYBOARD_INPUT_DATA"} {:fieldname "UnitId"} UnitId__KEYBOARD_INPUT_DATA(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.UnitId__KEYBOARD_TYPEMATIC_PARAMETERS"} {:fieldname "UnitId"} UnitId__KEYBOARD_TYPEMATIC_PARAMETERS(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.UnitId__MOUSE_INPUT_DATA"} {:fieldname "UnitId"} UnitId__MOUSE_INPUT_DATA(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.VariableAddress__VARIABLE_OPERATION_CONTEXT"} {:fieldname "VariableAddress"} VariableAddress__VARIABLE_OPERATION_CONTEXT(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.Vector_unnamed_tag_5"} {:fieldname "Vector"} Vector_unnamed_tag_5(x: int) : int
{
  x + 4
}

function {:inline true} {:fieldmap "Mem_T.Vector_unnamed_tag_7"} {:fieldname "Vector"} Vector_unnamed_tag_7(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T._UNICODE_STRING"} {:fieldname "WheelDetectionIDs"} WheelDetectionIDs__PORT_MOUSE_EXTENSION(x: int) : int
{
  x + 1720
}

function {:inline true} {:fieldmap "Mem_T.INT4"} {:fieldname "WheelDetectionTimeout"} WheelDetectionTimeout__PORT_MOUSE_EXTENSION(x: int) : int
{
  x + 1716
}

function {:inline true} {:fieldmap "Mem_T.WmiFunctionControl__WMILIB_CONTEXT"} {:fieldname "WmiFunctionControl"} WmiFunctionControl__WMILIB_CONTEXT(x: int) : int
{
  x + 28
}

function {:inline true} {:fieldmap "Mem_T.WmiLibInfo_COMMON_DATA"} {:fieldname "WmiLibInfo"} WmiLibInfo_COMMON_DATA(x: int) : int
{
  x + 600
}

function {:inline true} {:fieldmap "Mem_T.WorkItem__IO_WORKITEM"} {:fieldname "WorkItem"} WorkItem__IO_WORKITEM(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.WorkerResetSubState__PORT_MOUSE_EXTENSION"} {:fieldname "WorkerResetSubState"} WorkerResetSubState__PORT_MOUSE_EXTENSION(x: int) : int
{
  x + 1672
}

function {:inline true} {:fieldmap "Mem_T.WorkerRoutine__WORK_QUEUE_ITEM"} {:fieldname "WorkerRoutine"} WorkerRoutine__WORK_QUEUE_ITEM(x: int) : int
{
  x + 8
}

function {:inline true} {:fieldmap "Mem_T.fmtid__DEVPROPKEY"} {:fieldname "fmtid"} fmtid__DEVPROPKEY(x: int) : int
{
  x + 0
}

function {:inline true} {:fieldmap "Mem_T.pid__DEVPROPKEY"} {:fieldname "pid"} pid__DEVPROPKEY(x: int) : int
{
  x + 44
}

function {:inline true} {:fieldmap "Mem_T.u__CM_PARTIAL_RESOURCE_DESCRIPTOR"} {:fieldname "u"} u__CM_PARTIAL_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 12
}

function {:inline true} {:fieldmap "Mem_T.u__IO_RESOURCE_DESCRIPTOR"} {:fieldname "u"} u__IO_RESOURCE_DESCRIPTOR(x: int) : int
{
  x + 24
}

function {:inline true} {:fieldmap "Mem_T.u__LARGE_INTEGER"} {:fieldname "u"} u__LARGE_INTEGER(x: int) : int
{
  x + 8
}

const {:string ""} unique strConst__li2bpl15: int;

const {:string "\t%ws = %d\n"} unique strConst__li2bpl32: int;

const {:string "\t%ws = 0x%x\n"} unique strConst__li2bpl31: int;

const {:string " expecting (0x%x), got 0x%x\n"} unique strConst__li2bpl34: int;

const {:string " expecting ACK (0x%x), got 0x%x\n"} unique strConst__li2bpl35: int;

const {:string "%s-%s: %ws = %ws\n"} unique strConst__li2bpl33: int;

const {:string "/"} unique strConst__li2bpl48: int;

const {:string "8042 controller"} unique strConst__li2bpl1: int;

const {:string "8042: "} unique strConst__li2bpl22: int;

const {:string "Bus"} unique strConst__li2bpl20: int;

const {:string "Controller"} unique strConst__li2bpl21: int;

const {:string "CrashOnCtrlScroll"} unique strConst__li2bpl6: int;

const {:string "Debug1Keys"} unique strConst__li2bpl4: int;

const {:string "Debug2Key"} unique strConst__li2bpl5: int;

const {:string "DebugFlags"} unique strConst__li2bpl45: int;

const {:string "DriverEntry"} unique strConst__li2bpl37: int;

const {:string "Dump1Keys"} unique strConst__li2bpl10: int;

const {:string "Dump2Key"} unique strConst__li2bpl11: int;

const {:string "EnableWheelDetection"} unique strConst__li2bpl64: int;

const {:string "I8042MouseInterruptService"} unique strConst__li2bpl42: int;

const {:string "I8xFindWheelMouse"} unique strConst__li2bpl38: int;

const {:string "I8xInitializeMouse"} unique strConst__li2bpl39: int;

const {:string "I8xKeyboardConfiguration"} unique strConst__li2bpl40: int;

const {:string "I8xMouseEnableTransmission"} unique strConst__li2bpl41: int;

const {:string "I8xMousePeripheralCallout"} unique strConst__li2bpl43: int;

const {:string "I8xServiceParameters"} unique strConst__li2bpl44: int;

const {:string "Info"} unique strConst__li2bpl27: int;

const {:string "IsrDebugFlags"} unique strConst__li2bpl46: int;

const {:string "KdEnableOnCtrlSysRq"} unique strConst__li2bpl66: int;

const {:string "KeyboardDataQueueSize"} unique strConst__li2bpl53: int;

const {:string "KeyboardDeviceBaseName"} unique strConst__li2bpl60: int;

const {:string "KeyboardFailedReset"} unique strConst__li2bpl7: int;

const {:string "MSH0002"} unique strConst__li2bpl14: int;

const {:string "MouseDataQueueSize"} unique strConst__li2bpl54: int;

const {:string "MouseInitializePolled"} unique strConst__li2bpl16: int;

const {:string "MouseResendStallTime"} unique strConst__li2bpl17: int;

const {:string "MouseResolution"} unique strConst__li2bpl57: int;

const {:string "MouseSynchIn100ns"} unique strConst__li2bpl62: int;

const {:string "Number"} unique strConst__li2bpl28: int;

const {:string "NumberOfButtons"} unique strConst__li2bpl55: int;

const {:string "OverrideKeyboardSubType"} unique strConst__li2bpl59: int;

const {:string "OverrideKeyboardType"} unique strConst__li2bpl58: int;

const {:string "Parameters"} unique strConst__li2bpl8: int;

const {:string "Peripheral"} unique strConst__li2bpl29: int;

const {:string "PointerDeviceBaseName"} unique strConst__li2bpl61: int;

const {:string "PollStatusIterations"} unique strConst__li2bpl63: int;

const {:string "PollingIterations"} unique strConst__li2bpl51: int;

const {:string "PollingTerationsMaximum"} unique strConst__li2bpl52: int;

const {:string "PowerCapabilities"} unique strConst__li2bpl65: int;

const {:string "ResendIterations"} unique strConst__li2bpl50: int;

const {:string "SampleRate"} unique strConst__li2bpl56: int;

const {:string "The driver is calling IoCompleteRequest when it does not own the request."} unique strConst__li2bpl69: int;

const {:string "The driver needs to call IoCompleteRequest in this case."} unique strConst__li2bpl67: int;

const {:string "Type"} unique strConst__li2bpl30: int;

const {:string "WheelDetectIDs"} unique strConst__li2bpl18: int;

const {:string "WheelDetectionTimeout"} unique strConst__li2bpl19: int;

const {:string "\\Crashdump"} unique strConst__li2bpl9: int;

const {:string "\\DebugEnable"} unique strConst__li2bpl3: int;

const {:string "\\Device\\"} unique strConst__li2bpl47: int;

const {:string "\\Parameters"} unique strConst__li2bpl49: int;

const {:string "callee"} unique strConst__li2bpl12: int;

const {:string "caller"} unique strConst__li2bpl13: int;

const {:string "enter"} unique strConst__li2bpl25: int;

const {:string "exit"} unique strConst__li2bpl26: int;

const {:string "expecting ID ACK (0x%x), got 0x%x\n"} unique strConst__li2bpl36: int;

const {:string "halt"} unique strConst__li2bpl68: int;

const {:string "i8042 isr (kb): "} unique strConst__li2bpl23: int;

const {:string "i8042 isr (mou): "} unique strConst__li2bpl24: int;

const {:string "keyboard"} unique strConst__li2bpl0: int;

const {:string "mouse"} unique strConst__li2bpl2: int;

const {:allocated} li2bplFunctionConstant1053: int;

axiom li2bplFunctionConstant1053 == 1053;

const {:allocated} li2bplFunctionConstant1054: int;

axiom li2bplFunctionConstant1054 == 1054;

const {:allocated} li2bplFunctionConstant1055: int;

axiom li2bplFunctionConstant1055 == 1055;

const {:allocated} li2bplFunctionConstant1056: int;

axiom li2bplFunctionConstant1056 == 1056;

const {:allocated} li2bplFunctionConstant1058: int;

axiom li2bplFunctionConstant1058 == 1058;

const {:allocated} li2bplFunctionConstant1060: int;

axiom li2bplFunctionConstant1060 == 1060;

const {:allocated} li2bplFunctionConstant1061: int;

axiom li2bplFunctionConstant1061 == 1061;

const {:allocated} li2bplFunctionConstant1062: int;

axiom li2bplFunctionConstant1062 == 1062;

const {:allocated} li2bplFunctionConstant1075: int;

axiom li2bplFunctionConstant1075 == 1075;

const {:allocated} li2bplFunctionConstant1078: int;

axiom li2bplFunctionConstant1078 == 1078;

const {:allocated} li2bplFunctionConstant1083: int;

axiom li2bplFunctionConstant1083 == 1083;

const {:allocated} li2bplFunctionConstant1132: int;

axiom li2bplFunctionConstant1132 == 1132;

const {:allocated} li2bplFunctionConstant1134: int;

axiom li2bplFunctionConstant1134 == 1134;

const {:allocated} li2bplFunctionConstant1137: int;

axiom li2bplFunctionConstant1137 == 1137;

const {:allocated} li2bplFunctionConstant189: int;

axiom li2bplFunctionConstant189 == 189;

const {:allocated} li2bplFunctionConstant190: int;

axiom li2bplFunctionConstant190 == 190;

const {:allocated} li2bplFunctionConstant195: int;

axiom li2bplFunctionConstant195 == 195;

const {:allocated} li2bplFunctionConstant196: int;

axiom li2bplFunctionConstant196 == 196;

const {:allocated} li2bplFunctionConstant197: int;

axiom li2bplFunctionConstant197 == 197;

const {:allocated} li2bplFunctionConstant198: int;

axiom li2bplFunctionConstant198 == 198;

const {:allocated} li2bplFunctionConstant199: int;

axiom li2bplFunctionConstant199 == 199;

const {:allocated} li2bplFunctionConstant206: int;

axiom li2bplFunctionConstant206 == 206;

const {:allocated} li2bplFunctionConstant207: int;

axiom li2bplFunctionConstant207 == 207;

const {:allocated} li2bplFunctionConstant210: int;

axiom li2bplFunctionConstant210 == 210;

const {:allocated} li2bplFunctionConstant212: int;

axiom li2bplFunctionConstant212 == 212;

const {:allocated} li2bplFunctionConstant213: int;

axiom li2bplFunctionConstant213 == 213;

const {:allocated} li2bplFunctionConstant214: int;

axiom li2bplFunctionConstant214 == 214;

const {:allocated} li2bplFunctionConstant215: int;

axiom li2bplFunctionConstant215 == 215;

const {:allocated} li2bplFunctionConstant239: int;

axiom li2bplFunctionConstant239 == 239;

const {:allocated} li2bplFunctionConstant271: int;

axiom li2bplFunctionConstant271 == 271;

const {:allocated} li2bplFunctionConstant273: int;

axiom li2bplFunctionConstant273 == 273;

const {:allocated} li2bplFunctionConstant274: int;

axiom li2bplFunctionConstant274 == 274;

const {:allocated} li2bplFunctionConstant275: int;

axiom li2bplFunctionConstant275 == 275;

const {:allocated} li2bplFunctionConstant816: int;

axiom li2bplFunctionConstant816 == 816;

const {:allocated} li2bplFunctionConstant817: int;

axiom li2bplFunctionConstant817 == 817;

const {:allocated} li2bplFunctionConstant818: int;

axiom li2bplFunctionConstant818 == 818;

const {:allocated} li2bplFunctionConstant819: int;

axiom li2bplFunctionConstant819 == 819;

const {:allocated} li2bplFunctionConstant820: int;

axiom li2bplFunctionConstant820 == 820;

const {:allocated} li2bplFunctionConstant900: int;

axiom li2bplFunctionConstant900 == 900;

const {:allocated} li2bplFunctionConstant912: int;

axiom li2bplFunctionConstant912 == 912;

const {:allocated} li2bplFunctionConstant948: int;

axiom li2bplFunctionConstant948 == 948;

const {:allocated} li2bplFunctionConstant963: int;

axiom li2bplFunctionConstant963 == 963;

implementation {:origName "SdvExit"} {:osmodel} SdvExit#0()
{
  var vslice_dummy_var_231: int;

  anon0:
    call {:si_unique_call 1886} vslice_dummy_var_231 := __HAVOC_malloc(4);
    assume false;
    assume false;
    return;
}



procedure {:origName "SdvExit"} {:osmodel} SdvExit#0();
  modifies alloc;
  free ensures false;



implementation {:origName "SdvExit"} {:osmodel} SdvExit#1()
{
  var vslice_dummy_var_232: int;

  anon0:
    call {:si_unique_call 1887} vslice_dummy_var_232 := __HAVOC_malloc(4);
    assume false;
    call {:si_unique_call 1888} SdvExit#0();
    return;
}



procedure {:origName "SdvExit"} {:osmodel} SdvExit#1();
  modifies alloc;
  free ensures false;



implementation {:origName "I8xPutBytePolled"} I8xPutBytePolled#0(actual_PortType_1: int, actual_WaitForAcknowledge: int, actual_AckDeviceType: int, actual_Byte_5: int) returns (Tmp_76: int)
{
  var {:scalar} i_4: int;
  var {:scalar} j: int;
  var {:pointer} Tmp_77: int;
  var {:scalar} keepTrying: int;
  var {:scalar} sdv_45: int;
  var {:dopa} {:scalar} response_2: int;
  var {:pointer} commandAddress_1: int;
  var {:pointer} Tmp_78: int;
  var {:scalar} Tmp_79: int;
  var {:pointer} dataAddress_1: int;
  var {:scalar} status_4: int;
  var {:scalar} PortType_1: int;
  var {:scalar} WaitForAcknowledge: int;
  var {:scalar} AckDeviceType: int;

  anon0:
    call {:si_unique_call 1889} response_2 := __HAVOC_malloc(4);
    PortType_1 := actual_PortType_1;
    WaitForAcknowledge := actual_WaitForAcknowledge;
    AckDeviceType := actual_AckDeviceType;
    call {:si_unique_call 1890} Tmp_77 := __HAVOC_malloc(8);
    call {:si_unique_call 1891} Tmp_78 := __HAVOC_malloc(8);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} AckDeviceType == 2;
    assume false;
    return;

  anon33_Then:
    assume {:partition} AckDeviceType != 2;
    goto L11;

  L11:
    havoc Tmp_77;
    assume {:nonnull} Tmp_77 != 0;
    assume Tmp_77 > 0;
    havoc dataAddress_1;
    havoc Tmp_78;
    assume {:nonnull} Tmp_78 != 0;
    assume Tmp_78 > 0;
    havoc commandAddress_1;
    j := 0;
    goto L17;

  L17:
    call {:si_unique_call 1892} i_4, j, keepTrying, sdv_45, Tmp_79, status_4 := I8xPutBytePolled#0_loop_L17(i_4, j, keepTrying, sdv_45, response_2, commandAddress_1, Tmp_79, dataAddress_1, status_4, PortType_1, WaitForAcknowledge, AckDeviceType);
    goto L17_last;

  L17_last:
    goto anon34_Then, anon34_Else;

  anon34_Else:
    i_4 := 0;
    goto L20;

  L20:
    call {:si_unique_call 1893} i_4, sdv_45, Tmp_79 := I8xPutBytePolled#0_loop_L20(i_4, sdv_45, Tmp_79);
    goto L20_last;

  L20_last:
    Tmp_79 := i_4;
    i_4 := i_4 + 1;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:IndirectCall} true;
    call {:si_unique_call 1894} sdv_45 := corral_nondet();
    goto L25;

  L25:
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} BAND(sdv_45, 2) != 0;
    goto anon38_Else_dummy;

  anon38_Else_dummy:
    assume false;
    return;

  anon38_Then:
    assume {:partition} BAND(sdv_45, 2) == 0;
    goto L21;

  L21:
    goto anon36_Then, anon36_Else;

  anon36_Else:
    status_4 := -1073741643;
    goto L18;

  L18:
    goto anon35_Then, anon35_Else;

  anon35_Else:
    status_4 := -1073741643;
    goto L62;

  L62:
    Tmp_76 := status_4;
    return;

  anon35_Then:
    goto L62;

  anon36_Then:
    call {:si_unique_call 1895} I8xDrainOutputBuffer(dataAddress_1, commandAddress_1);
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} PortType_1 == 1;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:IndirectCall} true;
    goto L41;

  L41:
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} WaitForAcknowledge != 0;
    keepTrying := 0;
    goto L44;

  L44:
    call {:si_unique_call 1896} status_4 := I8xPutBytePolled#0_loop_L44(response_2, status_4, AckDeviceType);
    goto L44_last;

  L44_last:
    call {:si_unique_call 1898} status_4 := I8xGetBytePolled(AckDeviceType, response_2);
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} status_4 != 0;
    goto L50;

  L50:
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} keepTrying != 0;
    j := j + 1;
    goto anon45_Else_dummy;

  anon45_Else_dummy:
    assume false;
    return;

  anon45_Then:
    assume {:partition} keepTrying == 0;
    goto L18;

  anon43_Then:
    assume {:partition} status_4 == 0;
    assume {:nonnull} response_2 != 0;
    assume response_2 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:nonnull} response_2 != 0;
    assume response_2 > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} AckDeviceType == 2;
    assume false;
    return;

  anon47_Then:
    assume {:partition} AckDeviceType != 2;
    goto L56;

  L56:
    keepTrying := 1;
    goto L50;

  anon46_Then:
    goto anon46_Then_dummy;

  anon46_Then_dummy:
    assume false;
    return;

  anon44_Then:
    goto L50;

  anon42_Then:
    assume {:partition} WaitForAcknowledge == 0;
    status_4 := 0;
    goto L18;

  anon41_Then:
    assume {:IndirectCall} true;
    goto L41;

  anon39_Then:
    assume {:partition} PortType_1 != 1;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:IndirectCall} true;
    goto L41;

  anon40_Then:
    assume {:IndirectCall} true;
    goto L41;

  anon37_Then:
    assume {:IndirectCall} true;
    call {:si_unique_call 1897} sdv_45 := corral_nondet();
    goto L25;

  anon48_Then:
    goto L21;

  anon34_Then:
    goto L18;
}



procedure {:origName "I8xPutBytePolled"} I8xPutBytePolled#0(actual_PortType_1: int, actual_WaitForAcknowledge: int, actual_AckDeviceType: int, actual_Byte_5: int) returns (Tmp_76: int);
  modifies alloc;



implementation {:origName "I8xPutBytePolled"} I8xPutBytePolled#1(actual_PortType_1: int, actual_WaitForAcknowledge: int, actual_AckDeviceType: int, actual_Byte_5: int) returns (Tmp_76: int)
{
  var {:scalar} i_4: int;
  var {:scalar} j: int;
  var {:pointer} Tmp_77: int;
  var {:scalar} keepTrying: int;
  var {:scalar} sdv_45: int;
  var {:dopa} {:scalar} response_2: int;
  var {:pointer} commandAddress_1: int;
  var {:pointer} Tmp_78: int;
  var {:scalar} Tmp_79: int;
  var {:pointer} dataAddress_1: int;
  var {:scalar} status_4: int;
  var {:scalar} PortType_1: int;
  var {:scalar} WaitForAcknowledge: int;
  var {:scalar} AckDeviceType: int;
  var vslice_dummy_var_233: int;
  var vslice_dummy_var_234: int;

  anon0:
    call {:si_unique_call 1899} response_2 := __HAVOC_malloc(4);
    PortType_1 := actual_PortType_1;
    WaitForAcknowledge := actual_WaitForAcknowledge;
    AckDeviceType := actual_AckDeviceType;
    call {:si_unique_call 1900} Tmp_77 := __HAVOC_malloc(8);
    call {:si_unique_call 1901} Tmp_78 := __HAVOC_malloc(8);
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} AckDeviceType == 2;
    call {:si_unique_call 1902} vslice_dummy_var_233 := I8xPutBytePolled#0(1, 0, 3, 212);
    goto L11;

  L11:
    havoc Tmp_77;
    assume {:nonnull} Tmp_77 != 0;
    assume Tmp_77 > 0;
    havoc dataAddress_1;
    havoc Tmp_78;
    assume {:nonnull} Tmp_78 != 0;
    assume Tmp_78 > 0;
    havoc commandAddress_1;
    j := 0;
    goto L17;

  L17:
    call {:si_unique_call 1903} i_4, j, keepTrying, sdv_45, Tmp_79, status_4, vslice_dummy_var_234 := I8xPutBytePolled#1_loop_L17(i_4, j, keepTrying, sdv_45, response_2, commandAddress_1, Tmp_79, dataAddress_1, status_4, PortType_1, WaitForAcknowledge, AckDeviceType, vslice_dummy_var_234);
    goto L17_last;

  L17_last:
    goto anon34_Then, anon34_Else;

  anon34_Else:
    i_4 := 0;
    goto L20;

  L20:
    call {:si_unique_call 1904} i_4, sdv_45, Tmp_79 := I8xPutBytePolled#1_loop_L20(i_4, sdv_45, Tmp_79);
    goto L20_last;

  L20_last:
    Tmp_79 := i_4;
    i_4 := i_4 + 1;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:IndirectCall} true;
    call {:si_unique_call 1905} sdv_45 := corral_nondet();
    goto L25;

  L25:
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} BAND(sdv_45, 2) != 0;
    goto anon38_Else_dummy;

  anon38_Else_dummy:
    assume false;
    return;

  anon38_Then:
    assume {:partition} BAND(sdv_45, 2) == 0;
    goto L21;

  L21:
    goto anon36_Then, anon36_Else;

  anon36_Else:
    status_4 := -1073741643;
    goto L18;

  L18:
    goto anon35_Then, anon35_Else;

  anon35_Else:
    status_4 := -1073741643;
    goto L62;

  L62:
    Tmp_76 := status_4;
    return;

  anon35_Then:
    goto L62;

  anon36_Then:
    call {:si_unique_call 1906} I8xDrainOutputBuffer(dataAddress_1, commandAddress_1);
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} PortType_1 == 1;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:IndirectCall} true;
    goto L41;

  L41:
    goto anon42_Then, anon42_Else;

  anon42_Else:
    assume {:partition} WaitForAcknowledge != 0;
    keepTrying := 0;
    goto L44;

  L44:
    call {:si_unique_call 1907} status_4 := I8xPutBytePolled#1_loop_L44(response_2, status_4, AckDeviceType);
    goto L44_last;

  L44_last:
    call {:si_unique_call 1910} status_4 := I8xGetBytePolled(AckDeviceType, response_2);
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} status_4 != 0;
    goto L50;

  L50:
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:partition} keepTrying != 0;
    j := j + 1;
    goto anon45_Else_dummy;

  anon45_Else_dummy:
    assume false;
    return;

  anon45_Then:
    assume {:partition} keepTrying == 0;
    goto L18;

  anon43_Then:
    assume {:partition} status_4 == 0;
    assume {:nonnull} response_2 != 0;
    assume response_2 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:nonnull} response_2 != 0;
    assume response_2 > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} AckDeviceType == 2;
    call {:si_unique_call 1908} vslice_dummy_var_234 := I8xPutBytePolled#0(1, 0, 3, 212);
    goto L56;

  L56:
    keepTrying := 1;
    goto L50;

  anon47_Then:
    assume {:partition} AckDeviceType != 2;
    goto L56;

  anon46_Then:
    goto anon46_Then_dummy;

  anon46_Then_dummy:
    assume false;
    return;

  anon44_Then:
    goto L50;

  anon42_Then:
    assume {:partition} WaitForAcknowledge == 0;
    status_4 := 0;
    goto L18;

  anon41_Then:
    assume {:IndirectCall} true;
    goto L41;

  anon39_Then:
    assume {:partition} PortType_1 != 1;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:IndirectCall} true;
    goto L41;

  anon40_Then:
    assume {:IndirectCall} true;
    goto L41;

  anon37_Then:
    assume {:IndirectCall} true;
    call {:si_unique_call 1909} sdv_45 := corral_nondet();
    goto L25;

  anon48_Then:
    goto L21;

  anon34_Then:
    goto L18;

  anon33_Then:
    assume {:partition} AckDeviceType != 2;
    goto L11;
}



procedure {:origName "I8xPutBytePolled"} I8xPutBytePolled#1(actual_PortType_1: int, actual_WaitForAcknowledge: int, actual_AckDeviceType: int, actual_Byte_5: int) returns (Tmp_76: int);
  modifies alloc;



implementation {:origName "I8xMouseInitializePolledWorker"} I8xMouseInitializePolledWorker#0(actual_DeviceObject_11: int, actual_Item_1: int)
{
  var {:scalar} Tmp_337: int;
  var {:pointer} mouseExtension_2: int;
  var {:scalar} Tmp_339: int;
  var {:scalar} Tmp_340: int;
  var {:scalar} status_17: int;
  var {:scalar} keyboardDeviceState: int;
  var {:pointer} DeviceObject_11: int;
  var vslice_dummy_var_235: int;
  var vslice_dummy_var_236: int;
  var vslice_dummy_var_237: int;

  anon0:
    call {:si_unique_call 1911} vslice_dummy_var_235 := __HAVOC_malloc(4);
    DeviceObject_11 := actual_DeviceObject_11;
    havoc Tmp_340;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} Tmp_340 == 1;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    havoc keyboardDeviceState;
    goto L10;

  L10:
    call {:si_unique_call 1912} vslice_dummy_var_236 := I8xToggleInterrupts(0);
    assume {:nonnull} DeviceObject_11 != 0;
    assume DeviceObject_11 > 0;
    havoc mouseExtension_2;
    call {:si_unique_call 1913} status_17 := I8xInitializeMouse(mouseExtension_2);
    call {:si_unique_call 1914} vslice_dummy_var_237 := I8xToggleInterrupts(1);
    havoc Tmp_337;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} Tmp_337 == 1;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    goto L26;

  L26:
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} status_17 >= 0;
    havoc Tmp_339;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} Tmp_339 == 2;
    call {:si_unique_call 1915} status_17 := I8xMouseEnableTransmission(mouseExtension_2);
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} status_17 >= 0;
    assume false;
    return;

  anon22_Then:
    assume {:partition} 0 > status_17;
    goto L29;

  L29:
    call {:si_unique_call 1916} I8xResetMouseFailed#0(mouseExtension_2);
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} yogi_error != 1;
    goto L43;

  L43:
    call {:si_unique_call 1917} IoFreeWorkItem(0);
    goto LM2;

  LM2:
    return;

  anon27_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon25_Then:
    assume {:partition} Tmp_339 != 2;
    goto L29;

  anon20_Then:
    assume {:partition} 0 > status_17;
    goto L29;

  anon21_Then:
    goto L26;

  anon24_Then:
    assume {:partition} Tmp_337 != 1;
    goto L26;

  anon19_Then:
    goto L10;

  anon23_Then:
    assume {:partition} Tmp_340 != 1;
    goto L10;
}



procedure {:origName "I8xMouseInitializePolledWorker"} I8xMouseInitializePolledWorker#0(actual_DeviceObject_11: int, actual_Item_1: int);
  modifies alloc;
  free ensures false;
  free ensures old(yogi_error) == 0;



implementation {:origName "I8xMouseInitializePolledWorker"} I8xMouseInitializePolledWorker#1(actual_DeviceObject_11: int, actual_Item_1: int)
{
  var {:scalar} Tmp_337: int;
  var {:pointer} mouseExtension_2: int;
  var {:scalar} Tmp_339: int;
  var {:scalar} Tmp_340: int;
  var {:scalar} status_17: int;
  var {:scalar} keyboardDeviceState: int;
  var {:pointer} DeviceObject_11: int;
  var vslice_dummy_var_238: int;
  var vslice_dummy_var_239: int;
  var vslice_dummy_var_240: int;

  anon0:
    call {:si_unique_call 1918} vslice_dummy_var_238 := __HAVOC_malloc(4);
    DeviceObject_11 := actual_DeviceObject_11;
    havoc Tmp_340;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} Tmp_340 == 1;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    havoc keyboardDeviceState;
    goto L10;

  L10:
    call {:si_unique_call 1919} vslice_dummy_var_239 := I8xToggleInterrupts(0);
    assume {:nonnull} DeviceObject_11 != 0;
    assume DeviceObject_11 > 0;
    havoc mouseExtension_2;
    call {:si_unique_call 1920} status_17 := I8xInitializeMouse(mouseExtension_2);
    call {:si_unique_call 1921} vslice_dummy_var_240 := I8xToggleInterrupts(1);
    havoc Tmp_337;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} Tmp_337 == 1;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    goto L26;

  L26:
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} status_17 >= 0;
    havoc Tmp_339;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} Tmp_339 == 2;
    call {:si_unique_call 1922} status_17 := I8xMouseEnableTransmission(mouseExtension_2);
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} status_17 >= 0;
    call {:si_unique_call 1923} I8xFinishResetRequest#0(mouseExtension_2, 0, 1, 0);
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} yogi_error != 1;
    goto L43;

  L43:
    call {:si_unique_call 1924} IoFreeWorkItem(0);
    goto LM2;

  LM2:
    return;

  anon26_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon22_Then:
    assume {:partition} 0 > status_17;
    goto L29;

  L29:
    call {:si_unique_call 1925} I8xResetMouseFailed#1(mouseExtension_2);
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} yogi_error != 1;
    goto L43;

  anon27_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon25_Then:
    assume {:partition} Tmp_339 != 2;
    goto L29;

  anon20_Then:
    assume {:partition} 0 > status_17;
    goto L29;

  anon21_Then:
    goto L26;

  anon24_Then:
    assume {:partition} Tmp_337 != 1;
    goto L26;

  anon19_Then:
    goto L10;

  anon23_Then:
    assume {:partition} Tmp_340 != 1;
    goto L10;
}



procedure {:origName "I8xMouseInitializePolledWorker"} I8xMouseInitializePolledWorker#1(actual_DeviceObject_11: int, actual_Item_1: int);
  modifies alloc, yogi_error, Mem_T.CompletionRoutine__IO_STACK_LOCATION;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "I8xResetMouseFailed"} I8xResetMouseFailed#0(actual_MouseExtension_17: int)
{
  var {:pointer} MouseExtension_17: int;
  var vslice_dummy_var_241: int;

  anon0:
    call {:si_unique_call 1926} vslice_dummy_var_241 := __HAVOC_malloc(4);
    MouseExtension_17 := actual_MouseExtension_17;
    assume {:nonnull} MouseExtension_17 != 0;
    assume MouseExtension_17 > 0;
    assume false;
    return;
}



procedure {:origName "I8xResetMouseFailed"} I8xResetMouseFailed#0(actual_MouseExtension_17: int);
  modifies alloc;
  free ensures false;



implementation {:origName "I8xResetMouseFailed"} I8xResetMouseFailed#1(actual_MouseExtension_17: int)
{
  var {:pointer} MouseExtension_17: int;
  var vslice_dummy_var_242: int;

  anon0:
    call {:si_unique_call 1927} vslice_dummy_var_242 := __HAVOC_malloc(4);
    MouseExtension_17 := actual_MouseExtension_17;
    assume {:nonnull} MouseExtension_17 != 0;
    assume MouseExtension_17 > 0;
    call {:si_unique_call 1928} I8xFinishResetRequest#0(MouseExtension_17, 1, 1, 1);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "I8xResetMouseFailed"} I8xResetMouseFailed#1(actual_MouseExtension_17: int);
  modifies alloc, yogi_error, Mem_T.CompletionRoutine__IO_STACK_LOCATION;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "I8xFinishResetRequest"} I8xFinishResetRequest#0(actual_MouseExtension_14: int, actual_Failed: int, actual_RaiseIrql: int, actual_CancelTimer: int)
{
  var {:pointer} sdv_251: int;
  var {:scalar} oldIrql: int;
  var {:pointer} irp_1: int;
  var {:pointer} Tmp_427: int;
  var {:pointer} MouseExtension_14: int;
  var {:scalar} Failed: int;
  var {:scalar} RaiseIrql: int;
  var {:scalar} CancelTimer: int;
  var vslice_dummy_var_243: int;
  var vslice_dummy_var_244: int;
  var vslice_dummy_var_245: int;
  var vslice_dummy_var_246: int;

  anon0:
    call {:si_unique_call 1929} vslice_dummy_var_243 := __HAVOC_malloc(4);
    MouseExtension_14 := actual_MouseExtension_14;
    Failed := actual_Failed;
    RaiseIrql := actual_RaiseIrql;
    CancelTimer := actual_CancelTimer;
    assume {:nonnull} MouseExtension_14 != 0;
    assume MouseExtension_14 > 0;
    call {:si_unique_call 1930} sdv_251 := _InlineInterlockedExchangePointer(ResetIrp__PORT_MOUSE_EXTENSION(MouseExtension_14), 0);
    irp_1 := sdv_251;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} CancelTimer != 0;
    call {:si_unique_call 1931} vslice_dummy_var_244 := KeCancelTimer(0);
    goto L10;

  L10:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} RaiseIrql != 0;
    call {:si_unique_call 1932} Tmp_427 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_427 != 0;
    assume Tmp_427 > 0;
    call {:si_unique_call 1933} sdv_KeRaiseIrql(2, Tmp_427);
    assume {:nonnull} Tmp_427 != 0;
    assume Tmp_427 > 0;
    havoc oldIrql;
    goto L14;

  L14:
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} Failed != 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:nonnull} MouseExtension_14 != 0;
    assume MouseExtension_14 > 0;
    call {:si_unique_call 1934} vslice_dummy_var_245 := KeInsertQueueDpc#0(ErrorLogDpc_COMMON_DATA(MouseExtension_14), 0, 327698);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    goto L18;

  L18:
    assume {:nonnull} MouseExtension_14 != 0;
    assume MouseExtension_14 > 0;
    call {:si_unique_call 1935} IoFreeController(0);
    call {:si_unique_call 1936} IoStartNextPacket(0, 0);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} RaiseIrql != 0;
    call {:si_unique_call 1937} sdv_KeLowerIrql(oldIrql);
    goto L30;

  L30:
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} irp_1 != 0;
    call {:si_unique_call 1938} IoFreeIrp(0);
    assume {:nonnull} MouseExtension_14 != 0;
    assume MouseExtension_14 > 0;
    call {:si_unique_call 1939} vslice_dummy_var_246 := sdv_IoReleaseRemoveLock(RemoveLock_COMMON_DATA(MouseExtension_14), irp_1);
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon19_Then:
    assume {:partition} irp_1 == 0;
    goto L1;

  anon18_Then:
    assume {:partition} RaiseIrql == 0;
    goto L30;

  anon21_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon17_Then:
    goto L18;

  anon16_Then:
    assume {:partition} Failed == 0;
    goto L18;

  anon15_Then:
    assume {:partition} RaiseIrql == 0;
    goto L14;

  anon20_Then:
    assume {:partition} CancelTimer == 0;
    goto L10;
}



procedure {:origName "I8xFinishResetRequest"} I8xFinishResetRequest#0(actual_MouseExtension_14: int, actual_Failed: int, actual_RaiseIrql: int, actual_CancelTimer: int);
  modifies alloc, yogi_error, Mem_T.CompletionRoutine__IO_STACK_LOCATION;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "I8xFinishResetRequest"} I8xFinishResetRequest#1(actual_MouseExtension_14: int, actual_Failed: int, actual_RaiseIrql: int, actual_CancelTimer: int)
{
  var {:pointer} sdv_251: int;
  var {:scalar} oldIrql: int;
  var {:pointer} irp_1: int;
  var {:pointer} Tmp_427: int;
  var {:pointer} MouseExtension_14: int;
  var {:scalar} Failed: int;
  var {:scalar} RaiseIrql: int;
  var {:scalar} CancelTimer: int;
  var vslice_dummy_var_247: int;
  var vslice_dummy_var_248: int;
  var vslice_dummy_var_249: int;
  var vslice_dummy_var_250: int;

  anon0:
    call {:si_unique_call 1940} vslice_dummy_var_247 := __HAVOC_malloc(4);
    MouseExtension_14 := actual_MouseExtension_14;
    Failed := actual_Failed;
    RaiseIrql := actual_RaiseIrql;
    CancelTimer := actual_CancelTimer;
    assume {:nonnull} MouseExtension_14 != 0;
    assume MouseExtension_14 > 0;
    call {:si_unique_call 1941} sdv_251 := _InlineInterlockedExchangePointer(ResetIrp__PORT_MOUSE_EXTENSION(MouseExtension_14), 0);
    irp_1 := sdv_251;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} CancelTimer != 0;
    call {:si_unique_call 1942} vslice_dummy_var_248 := KeCancelTimer(0);
    goto L10;

  L10:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} RaiseIrql != 0;
    call {:si_unique_call 1943} Tmp_427 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_427 != 0;
    assume Tmp_427 > 0;
    call {:si_unique_call 1944} sdv_KeRaiseIrql(2, Tmp_427);
    assume {:nonnull} Tmp_427 != 0;
    assume Tmp_427 > 0;
    havoc oldIrql;
    goto L14;

  L14:
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} Failed != 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:nonnull} MouseExtension_14 != 0;
    assume MouseExtension_14 > 0;
    call {:si_unique_call 1945} vslice_dummy_var_249 := KeInsertQueueDpc#1(ErrorLogDpc_COMMON_DATA(MouseExtension_14), 0, 327698);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    goto L18;

  L18:
    assume {:nonnull} MouseExtension_14 != 0;
    assume MouseExtension_14 > 0;
    call {:si_unique_call 1946} IoFreeController(0);
    call {:si_unique_call 1947} IoStartNextPacket(0, 0);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} RaiseIrql != 0;
    call {:si_unique_call 1948} sdv_KeLowerIrql(oldIrql);
    goto L30;

  L30:
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} irp_1 != 0;
    call {:si_unique_call 1949} IoFreeIrp(0);
    assume {:nonnull} MouseExtension_14 != 0;
    assume MouseExtension_14 > 0;
    call {:si_unique_call 1950} vslice_dummy_var_250 := sdv_IoReleaseRemoveLock(RemoveLock_COMMON_DATA(MouseExtension_14), irp_1);
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon19_Then:
    assume {:partition} irp_1 == 0;
    goto L1;

  anon18_Then:
    assume {:partition} RaiseIrql == 0;
    goto L30;

  anon21_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon17_Then:
    goto L18;

  anon16_Then:
    assume {:partition} Failed == 0;
    goto L18;

  anon15_Then:
    assume {:partition} RaiseIrql == 0;
    goto L14;

  anon20_Then:
    assume {:partition} CancelTimer == 0;
    goto L10;
}



procedure {:origName "I8xFinishResetRequest"} I8xFinishResetRequest#1(actual_MouseExtension_14: int, actual_Failed: int, actual_RaiseIrql: int, actual_CancelTimer: int);
  modifies alloc, yogi_error, Mem_T.CompletionRoutine__IO_STACK_LOCATION;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "KeInsertQueueDpc"} {:osmodel} KeInsertQueueDpc#0(actual_Dpc_10: int, actual_SystemArgument1: int, actual_SystemArgument2: int) returns (Tmp_809: int)
{
  var {:pointer} Dpc_10: int;
  var vslice_dummy_var_254: int;
  var vslice_dummy_var_255: int;

  anon0:
    Dpc_10 := actual_Dpc_10;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    Tmp_809 := 0;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon5_Then:
    havoc vslice_dummy_var_254;
    havoc vslice_dummy_var_255;
    call {:si_unique_call 1951} sdv_RunKeDpcRoutines#0(vslice_dummy_var_254, vslice_dummy_var_255, 0, 0);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    Tmp_809 := 1;
    goto L1;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "KeInsertQueueDpc"} {:osmodel} KeInsertQueueDpc#0(actual_Dpc_10: int, actual_SystemArgument1: int, actual_SystemArgument2: int) returns (Tmp_809: int);
  modifies alloc, yogi_error, Mem_T.CompletionRoutine__IO_STACK_LOCATION;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "KeInsertQueueDpc"} {:osmodel} KeInsertQueueDpc#1(actual_Dpc_10: int, actual_SystemArgument1: int, actual_SystemArgument2: int) returns (Tmp_809: int)
{
  var {:pointer} Dpc_10: int;
  var vslice_dummy_var_256: int;
  var vslice_dummy_var_257: int;

  anon0:
    Dpc_10 := actual_Dpc_10;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    Tmp_809 := 0;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon5_Then:
    havoc vslice_dummy_var_256;
    havoc vslice_dummy_var_257;
    call {:si_unique_call 1952} sdv_RunKeDpcRoutines#1(vslice_dummy_var_256, vslice_dummy_var_257, 0, 0);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    Tmp_809 := 1;
    goto L1;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "KeInsertQueueDpc"} {:osmodel} KeInsertQueueDpc#1(actual_Dpc_10: int, actual_SystemArgument1: int, actual_SystemArgument2: int) returns (Tmp_809: int);
  modifies alloc, yogi_error, Mem_T.CompletionRoutine__IO_STACK_LOCATION;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "sdv_RunKeDpcRoutines"} {:osmodel} sdv_RunKeDpcRoutines#0(actual_kdpc: int, actual_pDpcContext: int, actual_pv2: int, actual_pv3: int)
{
  var {:pointer} kdpc: int;
  var {:pointer} pDpcContext: int;
  var vslice_dummy_var_251: int;

  anon0:
    call {:si_unique_call 1953} vslice_dummy_var_251 := __HAVOC_malloc(4);
    kdpc := actual_kdpc;
    pDpcContext := actual_pDpcContext;
    assume {:nonnull} kdpc != 0;
    assume kdpc > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    goto anon41_Then, anon41_Else;

  anon41_Else:
    call {:si_unique_call 1954} I8042ErrorLogDpc(kdpc, pDpcContext, sdv_pv2, sdv_pv3);
    goto L4;

  L4:
    assume {:nonnull} kdpc != 0;
    assume kdpc > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    goto anon43_Then, anon43_Else;

  anon43_Else:
    call {:si_unique_call 1955} I8042KeyboardIsrDpc(kdpc, pDpcContext, sdv_pv2, sdv_pv3);
    goto L20;

  L20:
    assume {:nonnull} kdpc != 0;
    assume kdpc > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    goto anon45_Then, anon45_Else;

  anon45_Else:
    call {:si_unique_call 1956} I8042MouseIsrDpc(kdpc, pDpcContext, sdv_pv2, sdv_pv3);
    goto L36;

  L36:
    assume {:nonnull} kdpc != 0;
    assume kdpc > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    goto anon47_Then, anon47_Else;

  anon47_Else:
    call {:si_unique_call 1957} I8042RetriesExceededDpc(kdpc, pDpcContext, sdv_pv2, sdv_pv3);
    goto L52;

  L52:
    assume {:nonnull} kdpc != 0;
    assume kdpc > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    goto anon49_Then, anon49_Else;

  anon49_Else:
    call {:si_unique_call 1958} I8xIsrResetDpc#0(kdpc, pDpcContext, sdv_pv2, sdv_pv3);
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} yogi_error != 1;
    goto L68;

  L68:
    assume {:nonnull} kdpc != 0;
    assume kdpc > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    goto anon51_Then, anon51_Else;

  anon51_Else:
    call {:si_unique_call 1959} I8xKeyboardSysButtonEventDpc#0(kdpc, pDpcContext, sdv_pv2, sdv_pv3);
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} yogi_error != 1;
    goto L84;

  L84:
    assume {:nonnull} kdpc != 0;
    assume kdpc > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    goto anon53_Then, anon53_Else;

  anon53_Else:
    call {:si_unique_call 1960} I8xMouseEnableDpc(kdpc, pDpcContext, sdv_pv2, sdv_pv3);
    goto L100;

  L100:
    assume {:nonnull} kdpc != 0;
    assume kdpc > 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    goto anon54_Then, anon54_Else;

  anon54_Else:
    call {:si_unique_call 1961} I8xMouseResetTimeoutProc#0(kdpc, pDpcContext, sdv_pv2, sdv_pv3);
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon57_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon54_Then:
    goto L1;

  anon52_Then:
    goto L1;

  anon53_Then:
    goto L100;

  anon50_Then:
    goto L100;

  anon56_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon51_Then:
    goto L84;

  anon48_Then:
    goto L84;

  anon55_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon49_Then:
    goto L68;

  anon46_Then:
    goto L68;

  anon47_Then:
    goto L52;

  anon44_Then:
    goto L52;

  anon45_Then:
    goto L36;

  anon42_Then:
    goto L36;

  anon43_Then:
    goto L20;

  anon40_Then:
    goto L20;

  anon41_Then:
    goto L4;

  anon39_Then:
    goto L4;
}



procedure {:origName "sdv_RunKeDpcRoutines"} {:osmodel} sdv_RunKeDpcRoutines#0(actual_kdpc: int, actual_pDpcContext: int, actual_pv2: int, actual_pv3: int);
  modifies alloc, yogi_error, Mem_T.CompletionRoutine__IO_STACK_LOCATION;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "sdv_RunKeDpcRoutines"} {:osmodel} sdv_RunKeDpcRoutines#1(actual_kdpc: int, actual_pDpcContext: int, actual_pv2: int, actual_pv3: int)
{
  var {:pointer} kdpc: int;
  var {:pointer} pDpcContext: int;
  var vslice_dummy_var_252: int;

  anon0:
    call {:si_unique_call 1962} vslice_dummy_var_252 := __HAVOC_malloc(4);
    kdpc := actual_kdpc;
    pDpcContext := actual_pDpcContext;
    assume {:nonnull} kdpc != 0;
    assume kdpc > 0;
    goto anon39_Then, anon39_Else;

  anon39_Else:
    goto anon41_Then, anon41_Else;

  anon41_Else:
    call {:si_unique_call 1963} I8042ErrorLogDpc(kdpc, pDpcContext, sdv_pv2, sdv_pv3);
    goto L4;

  L4:
    assume {:nonnull} kdpc != 0;
    assume kdpc > 0;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    goto anon43_Then, anon43_Else;

  anon43_Else:
    call {:si_unique_call 1964} I8042KeyboardIsrDpc(kdpc, pDpcContext, sdv_pv2, sdv_pv3);
    goto L20;

  L20:
    assume {:nonnull} kdpc != 0;
    assume kdpc > 0;
    goto anon42_Then, anon42_Else;

  anon42_Else:
    goto anon45_Then, anon45_Else;

  anon45_Else:
    call {:si_unique_call 1965} I8042MouseIsrDpc(kdpc, pDpcContext, sdv_pv2, sdv_pv3);
    goto L36;

  L36:
    assume {:nonnull} kdpc != 0;
    assume kdpc > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    goto anon47_Then, anon47_Else;

  anon47_Else:
    call {:si_unique_call 1966} I8042RetriesExceededDpc(kdpc, pDpcContext, sdv_pv2, sdv_pv3);
    goto L52;

  L52:
    assume {:nonnull} kdpc != 0;
    assume kdpc > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    goto anon49_Then, anon49_Else;

  anon49_Else:
    call {:si_unique_call 1967} I8xIsrResetDpc#1(kdpc, pDpcContext, sdv_pv2, sdv_pv3);
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:partition} yogi_error != 1;
    goto L68;

  L68:
    assume {:nonnull} kdpc != 0;
    assume kdpc > 0;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    goto anon51_Then, anon51_Else;

  anon51_Else:
    call {:si_unique_call 1968} I8xKeyboardSysButtonEventDpc#1(kdpc, pDpcContext, sdv_pv2, sdv_pv3);
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} yogi_error != 1;
    goto L84;

  L84:
    assume {:nonnull} kdpc != 0;
    assume kdpc > 0;
    goto anon50_Then, anon50_Else;

  anon50_Else:
    goto anon53_Then, anon53_Else;

  anon53_Else:
    call {:si_unique_call 1969} I8xMouseEnableDpc(kdpc, pDpcContext, sdv_pv2, sdv_pv3);
    goto L100;

  L100:
    assume {:nonnull} kdpc != 0;
    assume kdpc > 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    goto anon54_Then, anon54_Else;

  anon54_Else:
    call {:si_unique_call 1970} I8xMouseResetTimeoutProc#1(kdpc, pDpcContext, sdv_pv2, sdv_pv3);
    goto anon57_Then, anon57_Else;

  anon57_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon57_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon54_Then:
    goto L1;

  anon52_Then:
    goto L1;

  anon53_Then:
    goto L100;

  anon50_Then:
    goto L100;

  anon56_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon51_Then:
    goto L84;

  anon48_Then:
    goto L84;

  anon55_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon49_Then:
    goto L68;

  anon46_Then:
    goto L68;

  anon47_Then:
    goto L52;

  anon44_Then:
    goto L52;

  anon45_Then:
    goto L36;

  anon42_Then:
    goto L36;

  anon43_Then:
    goto L20;

  anon40_Then:
    goto L20;

  anon41_Then:
    goto L4;

  anon39_Then:
    goto L4;
}



procedure {:origName "sdv_RunKeDpcRoutines"} {:osmodel} sdv_RunKeDpcRoutines#1(actual_kdpc: int, actual_pDpcContext: int, actual_pv2: int, actual_pv3: int);
  modifies alloc, yogi_error, Mem_T.CompletionRoutine__IO_STACK_LOCATION;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "I8xIsrResetDpc"} I8xIsrResetDpc#0(actual_Dpc_3: int, actual_MouseExtensionIn: int, actual_ResetPolled: int, actual_SystemArg2_2: int)
{
  var {:pointer} item_2: int;
  var {:pointer} MouseExtension_7: int;
  var {:pointer} MouseExtensionIn: int;
  var {:pointer} ResetPolled: int;
  var vslice_dummy_var_253: int;
  var vslice_dummy_var_254: int;

  anon0:
    call {:si_unique_call 1971} vslice_dummy_var_253 := __HAVOC_malloc(4);
    MouseExtensionIn := actual_MouseExtensionIn;
    ResetPolled := actual_ResetPolled;
    MouseExtension_7 := MouseExtensionIn;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} ResetPolled != 0;
    call {:si_unique_call 1972} item_2 := IoAllocateWorkItem(0);
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} item_2 != 0;
    goto L16;

  L16:
    assume {:nonnull} MouseExtension_7 != 0;
    assume MouseExtension_7 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    goto L20;

  L20:
    call {:si_unique_call 1973} IoQueueWorkItem#0(item_2, li2bplFunctionConstant1061, 1, item_2);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon19_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon17_Then:
    assume {:nonnull} MouseExtension_7 != 0;
    assume MouseExtension_7 > 0;
    call {:si_unique_call 1974} KeInitializeDpc(Dpc__ENABLE_MOUSE(EnableMouse__PORT_MOUSE_EXTENSION(MouseExtension_7)), li2bplFunctionConstant1055, 0);
    call {:si_unique_call 1975} KeInitializeTimerEx(0, 1);
    assume {:nonnull} MouseExtension_7 != 0;
    assume MouseExtension_7 > 0;
    goto L20;

  anon16_Then:
    assume {:partition} item_2 == 0;
    call {:si_unique_call 1976} I8xResetMouseFailed#0(MouseExtension_7);
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} yogi_error != 1;
    goto L16;

  anon20_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon18_Then:
    assume {:partition} ResetPolled == 0;
    assume {:nonnull} MouseExtension_7 != 0;
    assume MouseExtension_7 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} MouseExtension_7 != 0;
    assume MouseExtension_7 > 0;
    call {:si_unique_call 1977} KeInitializeDpc(Dpc__RESET_MOUSE(ResetMouse__PORT_MOUSE_EXTENSION(MouseExtension_7)), li2bplFunctionConstant1054, 0);
    call {:si_unique_call 1978} KeInitializeTimer(0);
    assume {:nonnull} MouseExtension_7 != 0;
    assume MouseExtension_7 > 0;
    assume {:nonnull} MouseExtension_7 != 0;
    assume MouseExtension_7 > 0;
    goto L27;

  L27:
    call {:si_unique_call 1979} vslice_dummy_var_254 := I8xResetMouseFromDpc#0(MouseExtension_7, 0);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon21_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon15_Then:
    goto L27;
}



procedure {:origName "I8xIsrResetDpc"} I8xIsrResetDpc#0(actual_Dpc_3: int, actual_MouseExtensionIn: int, actual_ResetPolled: int, actual_SystemArg2_2: int);
  modifies alloc, Mem_T.CompletionRoutine__IO_STACK_LOCATION, yogi_error;
  free ensures yogi_error == 0;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "I8xIsrResetDpc"} I8xIsrResetDpc#1(actual_Dpc_3: int, actual_MouseExtensionIn: int, actual_ResetPolled: int, actual_SystemArg2_2: int)
{
  var {:pointer} item_2: int;
  var {:pointer} MouseExtension_7: int;
  var {:pointer} MouseExtensionIn: int;
  var {:pointer} ResetPolled: int;
  var vslice_dummy_var_255: int;
  var vslice_dummy_var_256: int;

  anon0:
    call {:si_unique_call 1980} vslice_dummy_var_255 := __HAVOC_malloc(4);
    MouseExtensionIn := actual_MouseExtensionIn;
    ResetPolled := actual_ResetPolled;
    MouseExtension_7 := MouseExtensionIn;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} ResetPolled != 0;
    call {:si_unique_call 1981} item_2 := IoAllocateWorkItem(0);
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} item_2 != 0;
    goto L16;

  L16:
    assume {:nonnull} MouseExtension_7 != 0;
    assume MouseExtension_7 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    goto L20;

  L20:
    call {:si_unique_call 1982} IoQueueWorkItem#1(item_2, li2bplFunctionConstant1061, 1, item_2);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon19_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon17_Then:
    assume {:nonnull} MouseExtension_7 != 0;
    assume MouseExtension_7 > 0;
    call {:si_unique_call 1983} KeInitializeDpc(Dpc__ENABLE_MOUSE(EnableMouse__PORT_MOUSE_EXTENSION(MouseExtension_7)), li2bplFunctionConstant1055, 0);
    call {:si_unique_call 1984} KeInitializeTimerEx(0, 1);
    assume {:nonnull} MouseExtension_7 != 0;
    assume MouseExtension_7 > 0;
    goto L20;

  anon16_Then:
    assume {:partition} item_2 == 0;
    call {:si_unique_call 1985} I8xResetMouseFailed#1(MouseExtension_7);
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} yogi_error != 1;
    goto L16;

  anon20_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon18_Then:
    assume {:partition} ResetPolled == 0;
    assume {:nonnull} MouseExtension_7 != 0;
    assume MouseExtension_7 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} MouseExtension_7 != 0;
    assume MouseExtension_7 > 0;
    call {:si_unique_call 1986} KeInitializeDpc(Dpc__RESET_MOUSE(ResetMouse__PORT_MOUSE_EXTENSION(MouseExtension_7)), li2bplFunctionConstant1054, 0);
    call {:si_unique_call 1987} KeInitializeTimer(0);
    assume {:nonnull} MouseExtension_7 != 0;
    assume MouseExtension_7 > 0;
    assume {:nonnull} MouseExtension_7 != 0;
    assume MouseExtension_7 > 0;
    goto L27;

  L27:
    call {:si_unique_call 1988} vslice_dummy_var_256 := I8xResetMouseFromDpc#1(MouseExtension_7, 0);
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon21_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon15_Then:
    goto L27;
}



procedure {:origName "I8xIsrResetDpc"} I8xIsrResetDpc#1(actual_Dpc_3: int, actual_MouseExtensionIn: int, actual_ResetPolled: int, actual_SystemArg2_2: int);
  modifies alloc, Mem_T.CompletionRoutine__IO_STACK_LOCATION, yogi_error;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "IoQueueWorkItem"} {:osmodel} IoQueueWorkItem#0(actual_IoWorkItem_1: int, actual_WorkerRoutine: int, actual_QueueType: int, actual_Context_3: int)
{
  var {:scalar} WorkerRoutine: int;
  var {:scalar} QueueType: int;
  var {:pointer} Context_3: int;
  var vslice_dummy_var_257: int;

  anon0:
    call {:si_unique_call 1989} vslice_dummy_var_257 := __HAVOC_malloc(4);
    WorkerRoutine := actual_WorkerRoutine;
    QueueType := actual_QueueType;
    Context_3 := actual_Context_3;
    call {:si_unique_call 1990} sdv_RunIoQueueWorkItems#0(0, WorkerRoutine, QueueType, Context_3);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "IoQueueWorkItem"} {:osmodel} IoQueueWorkItem#0(actual_IoWorkItem_1: int, actual_WorkerRoutine: int, actual_QueueType: int, actual_Context_3: int);
  modifies alloc, Mem_T.CompletionRoutine__IO_STACK_LOCATION, yogi_error;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "IoQueueWorkItem"} {:osmodel} IoQueueWorkItem#1(actual_IoWorkItem_1: int, actual_WorkerRoutine: int, actual_QueueType: int, actual_Context_3: int)
{
  var {:scalar} WorkerRoutine: int;
  var {:scalar} QueueType: int;
  var {:pointer} Context_3: int;
  var vslice_dummy_var_258: int;

  anon0:
    call {:si_unique_call 1991} vslice_dummy_var_258 := __HAVOC_malloc(4);
    WorkerRoutine := actual_WorkerRoutine;
    QueueType := actual_QueueType;
    Context_3 := actual_Context_3;
    call {:si_unique_call 1992} sdv_RunIoQueueWorkItems#1(0, WorkerRoutine, QueueType, Context_3);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} yogi_error != 1;
    goto LM2;

  LM2:
    return;

  anon3_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "IoQueueWorkItem"} {:osmodel} IoQueueWorkItem#1(actual_IoWorkItem_1: int, actual_WorkerRoutine: int, actual_QueueType: int, actual_Context_3: int);
  modifies alloc, Mem_T.CompletionRoutine__IO_STACK_LOCATION, yogi_error;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "sdv_RunIoQueueWorkItems"} {:osmodel} sdv_RunIoQueueWorkItems#0(actual_IoWorkItem_2: int, actual_WorkerRoutine_1: int, actual_QueueType_1: int, actual_Context_4: int)
{
  var {:scalar} WorkerRoutine_1: int;
  var {:pointer} Context_4: int;
  var vslice_dummy_var_259: int;

  anon0:
    call {:si_unique_call 1993} vslice_dummy_var_259 := __HAVOC_malloc(4);
    WorkerRoutine_1 := actual_WorkerRoutine_1;
    Context_4 := actual_Context_4;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} WorkerRoutine_1 == li2bplFunctionConstant1060;
    call {:si_unique_call 1994} I8xMouseInitializeInterruptWorker#0(sdv_p_devobj_fdo, Context_4);
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} yogi_error != 1;
    goto L4;

  L4:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} WorkerRoutine_1 == li2bplFunctionConstant1061;
    call {:si_unique_call 1995} I8xMouseInitializePolledWorker#0(sdv_p_devobj_fdo, Context_4);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} yogi_error != 1;
    goto L19;

  L19:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} WorkerRoutine_1 == li2bplFunctionConstant275;
    call {:si_unique_call 1996} I8xUpdateSysButtonCaps(sdv_p_devobj_fdo, Context_4);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon18_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon15_Then:
    assume {:partition} WorkerRoutine_1 != li2bplFunctionConstant275;
    goto L1;

  anon17_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon14_Then:
    assume {:partition} WorkerRoutine_1 != li2bplFunctionConstant1061;
    goto L19;

  anon16_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon13_Then:
    assume {:partition} WorkerRoutine_1 != li2bplFunctionConstant1060;
    goto L4;
}



procedure {:origName "sdv_RunIoQueueWorkItems"} {:osmodel} sdv_RunIoQueueWorkItems#0(actual_IoWorkItem_2: int, actual_WorkerRoutine_1: int, actual_QueueType_1: int, actual_Context_4: int);
  modifies alloc, Mem_T.CompletionRoutine__IO_STACK_LOCATION, yogi_error;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "sdv_RunIoQueueWorkItems"} {:osmodel} sdv_RunIoQueueWorkItems#1(actual_IoWorkItem_2: int, actual_WorkerRoutine_1: int, actual_QueueType_1: int, actual_Context_4: int)
{
  var {:scalar} WorkerRoutine_1: int;
  var {:pointer} Context_4: int;
  var vslice_dummy_var_260: int;

  anon0:
    call {:si_unique_call 1997} vslice_dummy_var_260 := __HAVOC_malloc(4);
    WorkerRoutine_1 := actual_WorkerRoutine_1;
    Context_4 := actual_Context_4;
    goto anon13_Then, anon13_Else;

  anon13_Else:
    assume {:partition} WorkerRoutine_1 == li2bplFunctionConstant1060;
    call {:si_unique_call 1998} I8xMouseInitializeInterruptWorker#1(sdv_p_devobj_fdo, Context_4);
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} yogi_error != 1;
    goto L4;

  L4:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:partition} WorkerRoutine_1 == li2bplFunctionConstant1061;
    call {:si_unique_call 1999} I8xMouseInitializePolledWorker#1(sdv_p_devobj_fdo, Context_4);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} yogi_error != 1;
    goto L19;

  L19:
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:partition} WorkerRoutine_1 == li2bplFunctionConstant275;
    call {:si_unique_call 2000} I8xUpdateSysButtonCaps(sdv_p_devobj_fdo, Context_4);
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon18_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon15_Then:
    assume {:partition} WorkerRoutine_1 != li2bplFunctionConstant275;
    goto L1;

  anon17_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon14_Then:
    assume {:partition} WorkerRoutine_1 != li2bplFunctionConstant1061;
    goto L19;

  anon16_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon13_Then:
    assume {:partition} WorkerRoutine_1 != li2bplFunctionConstant1060;
    goto L4;
}



procedure {:origName "sdv_RunIoQueueWorkItems"} {:osmodel} sdv_RunIoQueueWorkItems#1(actual_IoWorkItem_2: int, actual_WorkerRoutine_1: int, actual_QueueType_1: int, actual_Context_4: int);
  modifies alloc, Mem_T.CompletionRoutine__IO_STACK_LOCATION, yogi_error;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "I8xMouseInitializeInterruptWorker"} I8xMouseInitializeInterruptWorker#0(actual_DeviceObject_9: int, actual_Item: int)
{
  var {:pointer} extension: int;
  var {:pointer} DeviceObject_9: int;
  var vslice_dummy_var_261: int;
  var vslice_dummy_var_262: int;

  anon0:
    call {:si_unique_call 2001} vslice_dummy_var_261 := __HAVOC_malloc(4);
    DeviceObject_9 := actual_DeviceObject_9;
    call {:si_unique_call 2002} sdv_do_paged_code_check();
    assume {:nonnull} DeviceObject_9 != 0;
    assume DeviceObject_9 > 0;
    havoc extension;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:nonnull} extension != 0;
    assume extension > 0;
    goto L9;

  L9:
    call {:si_unique_call 2003} vslice_dummy_var_262 := I8xResetMouse#0(extension);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2004} IoFreeWorkItem(0);
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    goto L9;
}



procedure {:origName "I8xMouseInitializeInterruptWorker"} I8xMouseInitializeInterruptWorker#0(actual_DeviceObject_9: int, actual_Item: int);
  modifies alloc, Mem_T.CompletionRoutine__IO_STACK_LOCATION;
  free ensures old(yogi_error) == 0;



implementation {:origName "I8xMouseInitializeInterruptWorker"} I8xMouseInitializeInterruptWorker#1(actual_DeviceObject_9: int, actual_Item: int)
{
  var {:pointer} extension: int;
  var {:pointer} DeviceObject_9: int;
  var vslice_dummy_var_263: int;
  var vslice_dummy_var_264: int;

  anon0:
    call {:si_unique_call 2005} vslice_dummy_var_263 := __HAVOC_malloc(4);
    DeviceObject_9 := actual_DeviceObject_9;
    call {:si_unique_call 2006} sdv_do_paged_code_check();
    assume {:nonnull} DeviceObject_9 != 0;
    assume DeviceObject_9 > 0;
    havoc extension;
    assume {:nonnull} extension != 0;
    assume extension > 0;
    goto anon5_Then, anon5_Else;

  anon5_Else:
    assume {:nonnull} extension != 0;
    assume extension > 0;
    goto L9;

  L9:
    call {:si_unique_call 2007} vslice_dummy_var_264 := I8xResetMouse#1(extension);
    goto anon6_Then, anon6_Else;

  anon6_Else:
    assume {:partition} yogi_error != 1;
    call {:si_unique_call 2008} IoFreeWorkItem(0);
    goto LM2;

  LM2:
    return;

  anon6_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon5_Then:
    goto L9;
}



procedure {:origName "I8xMouseInitializeInterruptWorker"} I8xMouseInitializeInterruptWorker#1(actual_DeviceObject_9: int, actual_Item: int);
  modifies alloc, Mem_T.CompletionRoutine__IO_STACK_LOCATION, yogi_error;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "I8xResetMouse"} I8xResetMouse#0(actual_MouseExtension_12: int) returns (Tmp_407: int)
{
  var {:pointer} self_4: int;
  var {:pointer} pResetIrp: int;
  var {:pointer} sdv_240: int;
  var {:pointer} sdv_243: int;
  var {:pointer} pIrp: int;
  var {:scalar} status_27: int;
  var {:pointer} stack_3: int;
  var {:pointer} MouseExtension_12: int;
  var vslice_dummy_var_258: int;

  anon0:
    MouseExtension_12 := actual_MouseExtension_12;
    assume {:nonnull} MouseExtension_12 != 0;
    assume MouseExtension_12 > 0;
    havoc self_4;
    status_27 := 0;
    assume {:nonnull} MouseExtension_12 != 0;
    assume MouseExtension_12 > 0;
    assume {:nonnull} MouseExtension_12 != 0;
    assume MouseExtension_12 > 0;
    assume {:nonnull} MouseExtension_12 != 0;
    assume MouseExtension_12 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    goto L14;

  L14:
    call {:si_unique_call 2009} I8xResetMouseFailed#0(MouseExtension_12);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} yogi_error != 1;
    Tmp_407 := -1073741667;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon19_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon18_Then:
    assume {:nonnull} MouseExtension_12 != 0;
    assume MouseExtension_12 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} self_4 != 0;
    assume self_4 > 0;
    havoc vslice_dummy_var_258;
    call {:si_unique_call 2010} pResetIrp := IoAllocateIrp(vslice_dummy_var_258, 0);
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} pResetIrp != 0;
    assume {:nonnull} MouseExtension_12 != 0;
    assume MouseExtension_12 > 0;
    call {:si_unique_call 2011} sdv_240 := _InlineInterlockedCompareExchangePointer(ResetIrp__PORT_MOUSE_EXTENSION(MouseExtension_12), pResetIrp, 0);
    pIrp := sdv_240;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} pIrp != 0;
    call {:si_unique_call 2012} IoFreeIrp(0);
    pResetIrp := 0;
    call {:si_unique_call 2013} I8xSendResetCommand(MouseExtension_12);
    goto L39;

  L39:
    Tmp_407 := status_27;
    goto L1;

  anon20_Then:
    assume {:partition} pIrp == 0;
    call {:si_unique_call 2014} stack_3 := sdv_IoGetNextIrpStackLocation(pResetIrp);
    assume {:nonnull} stack_3 != 0;
    assume stack_3 > 0;
    assume {:nonnull} stack_3 != 0;
    assume stack_3 > 0;
    call {:si_unique_call 2015} sdv_IoSetNextIrpStackLocation(0);
    call {:si_unique_call 2016} status_27 := sdv_IoAcquireRemoveLock(0, 0);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} status_27 >= 0;
    call {:si_unique_call 2017} IoStartPacket(0, 0, 0, 0);
    goto L39;

  anon17_Then:
    assume {:partition} 0 > status_27;
    assume {:nonnull} MouseExtension_12 != 0;
    assume MouseExtension_12 > 0;
    call {:si_unique_call 2018} sdv_243 := _InlineInterlockedExchangePointer(ResetIrp__PORT_MOUSE_EXTENSION(MouseExtension_12), 0);
    pIrp := sdv_243;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} pIrp != 0;
    call {:si_unique_call 2019} IoFreeIrp(0);
    pIrp := 0;
    goto L39;

  anon21_Then:
    assume {:partition} pIrp == 0;
    goto L39;

  anon16_Then:
    assume {:partition} pResetIrp == 0;
    Tmp_407 := -1073741670;
    goto L1;

  anon15_Then:
    goto L14;
}



procedure {:origName "I8xResetMouse"} I8xResetMouse#0(actual_MouseExtension_12: int) returns (Tmp_407: int);
  modifies alloc, Mem_T.CompletionRoutine__IO_STACK_LOCATION;
  free ensures Tmp_407 == 0 || Tmp_407 == -1073741823 || Tmp_407 == -1073741738 || Tmp_407 == -1073741670;
  free ensures old(yogi_error) == 0;



implementation {:origName "I8xResetMouse"} I8xResetMouse#1(actual_MouseExtension_12: int) returns (Tmp_407: int)
{
  var {:pointer} self_4: int;
  var {:pointer} pResetIrp: int;
  var {:pointer} sdv_240: int;
  var {:pointer} sdv_243: int;
  var {:pointer} pIrp: int;
  var {:scalar} status_27: int;
  var {:pointer} stack_3: int;
  var {:pointer} MouseExtension_12: int;
  var vslice_dummy_var_259: int;

  anon0:
    MouseExtension_12 := actual_MouseExtension_12;
    assume {:nonnull} MouseExtension_12 != 0;
    assume MouseExtension_12 > 0;
    havoc self_4;
    status_27 := 0;
    assume {:nonnull} MouseExtension_12 != 0;
    assume MouseExtension_12 > 0;
    assume {:nonnull} MouseExtension_12 != 0;
    assume MouseExtension_12 > 0;
    assume {:nonnull} MouseExtension_12 != 0;
    assume MouseExtension_12 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    goto L14;

  L14:
    call {:si_unique_call 2020} I8xResetMouseFailed#1(MouseExtension_12);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} yogi_error != 1;
    Tmp_407 := -1073741667;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon19_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon18_Then:
    assume {:nonnull} MouseExtension_12 != 0;
    assume MouseExtension_12 > 0;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:nonnull} self_4 != 0;
    assume self_4 > 0;
    havoc vslice_dummy_var_259;
    call {:si_unique_call 2021} pResetIrp := IoAllocateIrp(vslice_dummy_var_259, 0);
    goto anon16_Then, anon16_Else;

  anon16_Else:
    assume {:partition} pResetIrp != 0;
    assume {:nonnull} MouseExtension_12 != 0;
    assume MouseExtension_12 > 0;
    call {:si_unique_call 2022} sdv_240 := _InlineInterlockedCompareExchangePointer(ResetIrp__PORT_MOUSE_EXTENSION(MouseExtension_12), pResetIrp, 0);
    pIrp := sdv_240;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:partition} pIrp != 0;
    call {:si_unique_call 2023} IoFreeIrp(0);
    pResetIrp := 0;
    call {:si_unique_call 2024} I8xSendResetCommand(MouseExtension_12);
    goto L39;

  L39:
    Tmp_407 := status_27;
    goto L1;

  anon20_Then:
    assume {:partition} pIrp == 0;
    call {:si_unique_call 2025} stack_3 := sdv_IoGetNextIrpStackLocation(pResetIrp);
    assume {:nonnull} stack_3 != 0;
    assume stack_3 > 0;
    assume {:nonnull} stack_3 != 0;
    assume stack_3 > 0;
    call {:si_unique_call 2026} sdv_IoSetNextIrpStackLocation(0);
    call {:si_unique_call 2027} status_27 := sdv_IoAcquireRemoveLock(0, 0);
    goto anon17_Then, anon17_Else;

  anon17_Else:
    assume {:partition} status_27 >= 0;
    call {:si_unique_call 2028} IoStartPacket(0, 0, 0, 0);
    goto L39;

  anon17_Then:
    assume {:partition} 0 > status_27;
    assume {:nonnull} MouseExtension_12 != 0;
    assume MouseExtension_12 > 0;
    call {:si_unique_call 2029} sdv_243 := _InlineInterlockedExchangePointer(ResetIrp__PORT_MOUSE_EXTENSION(MouseExtension_12), 0);
    pIrp := sdv_243;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:partition} pIrp != 0;
    call {:si_unique_call 2030} IoFreeIrp(0);
    pIrp := 0;
    goto L39;

  anon21_Then:
    assume {:partition} pIrp == 0;
    goto L39;

  anon16_Then:
    assume {:partition} pResetIrp == 0;
    Tmp_407 := -1073741670;
    goto L1;

  anon15_Then:
    goto L14;
}



procedure {:origName "I8xResetMouse"} I8xResetMouse#1(actual_MouseExtension_12: int) returns (Tmp_407: int);
  modifies alloc, Mem_T.CompletionRoutine__IO_STACK_LOCATION, yogi_error;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "I8xResetMouseFromDpc"} I8xResetMouseFromDpc#0(actual_MouseExtension_3: int, actual_NewResetSubState: int) returns (Tmp_328: int)
{
  var {:pointer} item_1: int;
  var {:pointer} MouseExtension_3: int;
  var {:scalar} NewResetSubState: int;

  anon0:
    MouseExtension_3 := actual_MouseExtension_3;
    NewResetSubState := actual_NewResetSubState;
    call {:si_unique_call 2031} item_1 := IoAllocateWorkItem(0);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} item_1 != 0;
    assume {:nonnull} MouseExtension_3 != 0;
    assume MouseExtension_3 > 0;
    call {:si_unique_call 2032} IoQueueWorkItem#0(item_1, li2bplFunctionConstant1060, 1, item_1);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} yogi_error != 1;
    goto L16;

  L16:
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} item_1 == 0;
    Tmp_328 := 0;
    goto L22;

  L22:
    goto LM2;

  LM2:
    return;

  anon10_Then:
    assume {:partition} item_1 != 0;
    Tmp_328 := 1;
    goto L22;

  anon11_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon9_Then:
    assume {:partition} item_1 == 0;
    call {:si_unique_call 2033} I8xResetMouseFailed#0(MouseExtension_3);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    goto L16;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "I8xResetMouseFromDpc"} I8xResetMouseFromDpc#0(actual_MouseExtension_3: int, actual_NewResetSubState: int) returns (Tmp_328: int);
  modifies alloc, Mem_T.CompletionRoutine__IO_STACK_LOCATION, yogi_error;
  free ensures yogi_error == 0;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "I8xResetMouseFromDpc"} I8xResetMouseFromDpc#1(actual_MouseExtension_3: int, actual_NewResetSubState: int) returns (Tmp_328: int)
{
  var {:pointer} item_1: int;
  var {:pointer} MouseExtension_3: int;
  var {:scalar} NewResetSubState: int;

  anon0:
    MouseExtension_3 := actual_MouseExtension_3;
    NewResetSubState := actual_NewResetSubState;
    call {:si_unique_call 2034} item_1 := IoAllocateWorkItem(0);
    goto anon9_Then, anon9_Else;

  anon9_Else:
    assume {:partition} item_1 != 0;
    assume {:nonnull} MouseExtension_3 != 0;
    assume MouseExtension_3 > 0;
    call {:si_unique_call 2035} IoQueueWorkItem#1(item_1, li2bplFunctionConstant1060, 1, item_1);
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} yogi_error != 1;
    goto L16;

  L16:
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} item_1 == 0;
    Tmp_328 := 0;
    goto L22;

  L22:
    goto LM2;

  LM2:
    return;

  anon10_Then:
    assume {:partition} item_1 != 0;
    Tmp_328 := 1;
    goto L22;

  anon11_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon9_Then:
    assume {:partition} item_1 == 0;
    call {:si_unique_call 2036} I8xResetMouseFailed#1(MouseExtension_3);
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} yogi_error != 1;
    goto L16;

  anon12_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;
}



procedure {:origName "I8xResetMouseFromDpc"} I8xResetMouseFromDpc#1(actual_MouseExtension_3: int, actual_NewResetSubState: int) returns (Tmp_328: int);
  modifies alloc, Mem_T.CompletionRoutine__IO_STACK_LOCATION, yogi_error;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "I8xKeyboardSysButtonEventDpc"} I8xKeyboardSysButtonEventDpc#0(actual_Dpc_11: int, actual_DeviceObjectIn_4: int, actual_Action_1: int, actual_MakeCode: int)
{
  var {:pointer} item_4: int;
  var {:pointer} kbExtension: int;
  var {:pointer} sdv_411: int;
  var {:pointer} DeviceObject_32: int;
  var {:scalar} sdv_412: int;
  var {:pointer} Tmp_836: int;
  var {:pointer} irp_2: int;
  var {:scalar} irql_5: int;
  var {:scalar} event_2: int;
  var {:pointer} DeviceObjectIn_4: int;
  var {:pointer} Action_1: int;
  var {:pointer} MakeCode: int;
  var boogieTmp: int;
  var vslice_dummy_var_265: int;
  var vslice_dummy_var_260: int;

  anon0:
    call {:si_unique_call 2037} vslice_dummy_var_265 := __HAVOC_malloc(4);
    DeviceObjectIn_4 := actual_DeviceObjectIn_4;
    Action_1 := actual_Action_1;
    MakeCode := actual_MakeCode;
    DeviceObject_32 := DeviceObjectIn_4;
    assume {:nonnull} DeviceObject_32 != 0;
    assume DeviceObject_32 > 0;
    havoc kbExtension;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} MakeCode != 94;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} MakeCode != 95;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} MakeCode == 99;
    event_2 := 0;
    goto L17;

  L17:
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} Action_1 == 1;
    call {:si_unique_call 2038} Tmp_836 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_836 != 0;
    assume Tmp_836 > 0;
    call {:si_unique_call 2039} sdv_KeAcquireSpinLock(0, Tmp_836);
    assume {:nonnull} Tmp_836 != 0;
    assume Tmp_836 > 0;
    havoc irql_5;
    assume {:nonnull} kbExtension != 0;
    assume kbExtension > 0;
    havoc irp_2;
    assume {:nonnull} kbExtension != 0;
    assume kbExtension > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} irp_2 != 0;
    assume {:nonnull} irp_2 != 0;
    assume irp_2 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    goto L34;

  L34:
    irp_2 := 0;
    goto L27;

  L27:
    call {:si_unique_call 2040} sdv_KeReleaseSpinLock(0, irql_5);
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} irp_2 != 0;
    call {:si_unique_call 2041} I8xCompleteSysButtonIrp(irp_2, event_2, 0);
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon34_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon28_Then:
    assume {:partition} irp_2 == 0;
    goto L1;

  anon26_Then:
    call {:si_unique_call 2042} sdv_412 := sdv_IoSetCancelRoutine(irp_2, 0);
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} sdv_412 == 0;
    goto L34;

  anon27_Then:
    assume {:partition} sdv_412 != 0;
    goto L27;

  anon33_Then:
    assume {:partition} irp_2 == 0;
    goto L27;

  anon25_Then:
    assume {:partition} Action_1 != 1;
    call {:si_unique_call 2043} sdv_411 := ExAllocatePoolWithTag(512, 12, 842281016);
    item_4 := sdv_411;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} item_4 != 0;
    assume {:nonnull} item_4 != 0;
    assume item_4 > 0;
    call {:si_unique_call 2044} boogieTmp := IoAllocateWorkItem(0);
    assume {:nonnull} item_4 != 0;
    assume item_4 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:nonnull} kbExtension != 0;
    assume kbExtension > 0;
    assume {:nonnull} item_4 != 0;
    assume item_4 > 0;
    assume {:nonnull} item_4 != 0;
    assume item_4 > 0;
    havoc vslice_dummy_var_260;
    call {:si_unique_call 2045} IoQueueWorkItem#0(vslice_dummy_var_260, li2bplFunctionConstant275, 1, item_4);
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon36_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon29_Then:
    call {:si_unique_call 2046} sdv_ExFreePool(0);
    goto L1;

  anon35_Then:
    assume {:partition} item_4 == 0;
    goto L1;

  anon30_Then:
    assume {:partition} MakeCode != 99;
    event_2 := 0;
    goto L17;

  anon31_Then:
    assume {:partition} MakeCode == 95;
    event_2 := 2;
    goto L17;

  anon32_Then:
    assume {:partition} MakeCode == 94;
    event_2 := 1;
    goto L17;
}



procedure {:origName "I8xKeyboardSysButtonEventDpc"} I8xKeyboardSysButtonEventDpc#0(actual_Dpc_11: int, actual_DeviceObjectIn_4: int, actual_Action_1: int, actual_MakeCode: int);
  modifies alloc, yogi_error, Mem_T.CompletionRoutine__IO_STACK_LOCATION;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "I8xKeyboardSysButtonEventDpc"} I8xKeyboardSysButtonEventDpc#1(actual_Dpc_11: int, actual_DeviceObjectIn_4: int, actual_Action_1: int, actual_MakeCode: int)
{
  var {:pointer} item_4: int;
  var {:pointer} kbExtension: int;
  var {:pointer} sdv_411: int;
  var {:pointer} DeviceObject_32: int;
  var {:scalar} sdv_412: int;
  var {:pointer} Tmp_836: int;
  var {:pointer} irp_2: int;
  var {:scalar} irql_5: int;
  var {:scalar} event_2: int;
  var {:pointer} DeviceObjectIn_4: int;
  var {:pointer} Action_1: int;
  var {:pointer} MakeCode: int;
  var boogieTmp: int;
  var vslice_dummy_var_266: int;
  var vslice_dummy_var_261: int;

  anon0:
    call {:si_unique_call 2047} vslice_dummy_var_266 := __HAVOC_malloc(4);
    DeviceObjectIn_4 := actual_DeviceObjectIn_4;
    Action_1 := actual_Action_1;
    MakeCode := actual_MakeCode;
    DeviceObject_32 := DeviceObjectIn_4;
    assume {:nonnull} DeviceObject_32 != 0;
    assume DeviceObject_32 > 0;
    havoc kbExtension;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} MakeCode != 94;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} MakeCode != 95;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} MakeCode == 99;
    event_2 := 0;
    goto L17;

  L17:
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} Action_1 == 1;
    call {:si_unique_call 2048} Tmp_836 := __HAVOC_malloc(4);
    assume {:nonnull} Tmp_836 != 0;
    assume Tmp_836 > 0;
    call {:si_unique_call 2049} sdv_KeAcquireSpinLock(0, Tmp_836);
    assume {:nonnull} Tmp_836 != 0;
    assume Tmp_836 > 0;
    havoc irql_5;
    assume {:nonnull} kbExtension != 0;
    assume kbExtension > 0;
    havoc irp_2;
    assume {:nonnull} kbExtension != 0;
    assume kbExtension > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:partition} irp_2 != 0;
    assume {:nonnull} irp_2 != 0;
    assume irp_2 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    goto L34;

  L34:
    irp_2 := 0;
    goto L27;

  L27:
    call {:si_unique_call 2050} sdv_KeReleaseSpinLock(0, irql_5);
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} irp_2 != 0;
    call {:si_unique_call 2051} I8xCompleteSysButtonIrp(irp_2, event_2, 0);
    goto anon34_Then, anon34_Else;

  anon34_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon34_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon28_Then:
    assume {:partition} irp_2 == 0;
    goto L1;

  anon26_Then:
    call {:si_unique_call 2052} sdv_412 := sdv_IoSetCancelRoutine(irp_2, 0);
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} sdv_412 == 0;
    goto L34;

  anon27_Then:
    assume {:partition} sdv_412 != 0;
    goto L27;

  anon33_Then:
    assume {:partition} irp_2 == 0;
    goto L27;

  anon25_Then:
    assume {:partition} Action_1 != 1;
    call {:si_unique_call 2053} sdv_411 := ExAllocatePoolWithTag(512, 12, 842281016);
    item_4 := sdv_411;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:partition} item_4 != 0;
    assume {:nonnull} item_4 != 0;
    assume item_4 > 0;
    call {:si_unique_call 2054} boogieTmp := IoAllocateWorkItem(0);
    assume {:nonnull} item_4 != 0;
    assume item_4 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:nonnull} kbExtension != 0;
    assume kbExtension > 0;
    assume {:nonnull} item_4 != 0;
    assume item_4 > 0;
    assume {:nonnull} item_4 != 0;
    assume item_4 > 0;
    havoc vslice_dummy_var_261;
    call {:si_unique_call 2055} IoQueueWorkItem#1(vslice_dummy_var_261, li2bplFunctionConstant275, 1, item_4);
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon36_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon29_Then:
    call {:si_unique_call 2056} sdv_ExFreePool(0);
    goto L1;

  anon35_Then:
    assume {:partition} item_4 == 0;
    goto L1;

  anon30_Then:
    assume {:partition} MakeCode != 99;
    event_2 := 0;
    goto L17;

  anon31_Then:
    assume {:partition} MakeCode == 95;
    event_2 := 2;
    goto L17;

  anon32_Then:
    assume {:partition} MakeCode == 94;
    event_2 := 1;
    goto L17;
}



procedure {:origName "I8xKeyboardSysButtonEventDpc"} I8xKeyboardSysButtonEventDpc#1(actual_Dpc_11: int, actual_DeviceObjectIn_4: int, actual_Action_1: int, actual_MakeCode: int);
  modifies alloc, yogi_error, Mem_T.CompletionRoutine__IO_STACK_LOCATION;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "I8xMouseResetTimeoutProc"} I8xMouseResetTimeoutProc#0(actual_Dpc_2: int, actual_MouseExtension_2: int, actual_SystemArg1_1: int, actual_SystemArg2_1: int)
{
  var {:pointer} SD1: int;
  var {:scalar} resetInfo: int;
  var {:scalar} li_1: int;
  var {:scalar} sdv_157: int;
  var {:pointer} MouseExtension_2: int;
  var vslice_dummy_var_267: int;
  var vslice_dummy_var_268: int;
  var vslice_dummy_var_269: int;
  var vslice_dummy_var_270: int;
  var vslice_dummy_var_271: int;
  var vslice_dummy_var_272: int;
  var vslice_dummy_var_273: int;

  anon0:
    call {:si_unique_call 2057} resetInfo := __HAVOC_malloc(8);
    call {:si_unique_call 2058} li_1 := __HAVOC_malloc(20);
    call {:si_unique_call 2059} vslice_dummy_var_267 := __HAVOC_malloc(20);
    call {:si_unique_call 2060} vslice_dummy_var_268 := __HAVOC_malloc(20);
    call {:si_unique_call 2061} vslice_dummy_var_269 := __HAVOC_malloc(4);
    MouseExtension_2 := actual_MouseExtension_2;
    assume {:nonnull} MouseExtension_2 != 0;
    assume MouseExtension_2 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    call {:si_unique_call 2062} vslice_dummy_var_270 := I8xResetMouseFromDpc#0(MouseExtension_2, 1400);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon23_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon17_Then:
    assume {:nonnull} MouseExtension_2 != 0;
    assume MouseExtension_2 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:nonnull} resetInfo != 0;
    assume resetInfo > 0;
    assume {:nonnull} resetInfo != 0;
    assume resetInfo > 0;
    call {:si_unique_call 2063} sdv_157 := KeSynchronizeExecution(0, li2bplFunctionConstant1062, 0);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} sdv_157 != 0;
    assume {:nonnull} resetInfo != 0;
    assume resetInfo > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} resetInfo != 0;
    assume resetInfo > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:nonnull} resetInfo != 0;
    assume resetInfo > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    call {:si_unique_call 2064} SD1 := RtlConvertLongToLargeInteger(-10000000);
    assume {:nonnull} SD1 != 0;
    assume SD1 > 0;
    assume {:nonnull} li_1 != 0;
    assume li_1 > 0;
    assume {:nonnull} SD1 != 0;
    assume SD1 > 0;
    assume {:nonnull} li_1 != 0;
    assume li_1 > 0;
    assume {:nonnull} SD1 != 0;
    assume SD1 > 0;
    assume {:nonnull} li_1 != 0;
    assume li_1 > 0;
    assume {:nonnull} SD1 != 0;
    assume SD1 > 0;
    assume {:nonnull} li_1 != 0;
    assume li_1 > 0;
    assume {:nonnull} SD1 != 0;
    assume SD1 > 0;
    assume {:nonnull} li_1 != 0;
    assume li_1 > 0;
    call {:si_unique_call 2065} vslice_dummy_var_272 := KeSetTimer(0, li_1, 0);
    goto L1;

  anon21_Then:
    goto L1;

  anon22_Then:
    call {:si_unique_call 2066} vslice_dummy_var_271 := I8xResetMouseFromDpc#0(MouseExtension_2, 1400);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon24_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon20_Then:
    call {:si_unique_call 2067} SD1 := RtlConvertLongToLargeInteger(-15000000);
    assume {:nonnull} SD1 != 0;
    assume SD1 > 0;
    assume {:nonnull} li_1 != 0;
    assume li_1 > 0;
    assume {:nonnull} SD1 != 0;
    assume SD1 > 0;
    assume {:nonnull} li_1 != 0;
    assume li_1 > 0;
    assume {:nonnull} SD1 != 0;
    assume SD1 > 0;
    assume {:nonnull} li_1 != 0;
    assume li_1 > 0;
    assume {:nonnull} SD1 != 0;
    assume SD1 > 0;
    assume {:nonnull} li_1 != 0;
    assume li_1 > 0;
    assume {:nonnull} SD1 != 0;
    assume SD1 > 0;
    assume {:nonnull} li_1 != 0;
    assume li_1 > 0;
    call {:si_unique_call 2068} vslice_dummy_var_273 := KeSetTimer(0, li_1, 0);
    goto L1;

  anon19_Then:
    assume {:partition} sdv_157 == 0;
    goto L1;

  anon18_Then:
    goto L1;
}



procedure {:origName "I8xMouseResetTimeoutProc"} I8xMouseResetTimeoutProc#0(actual_Dpc_2: int, actual_MouseExtension_2: int, actual_SystemArg1_1: int, actual_SystemArg2_1: int);
  modifies alloc, Mem_T.CompletionRoutine__IO_STACK_LOCATION, yogi_error;
  free ensures yogi_error == 0;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



implementation {:origName "I8xMouseResetTimeoutProc"} I8xMouseResetTimeoutProc#1(actual_Dpc_2: int, actual_MouseExtension_2: int, actual_SystemArg1_1: int, actual_SystemArg2_1: int)
{
  var {:pointer} SD1: int;
  var {:scalar} resetInfo: int;
  var {:scalar} li_1: int;
  var {:scalar} sdv_157: int;
  var {:pointer} MouseExtension_2: int;
  var vslice_dummy_var_274: int;
  var vslice_dummy_var_275: int;
  var vslice_dummy_var_276: int;
  var vslice_dummy_var_277: int;
  var vslice_dummy_var_278: int;
  var vslice_dummy_var_279: int;
  var vslice_dummy_var_280: int;

  anon0:
    call {:si_unique_call 2069} resetInfo := __HAVOC_malloc(8);
    call {:si_unique_call 2070} li_1 := __HAVOC_malloc(20);
    call {:si_unique_call 2071} vslice_dummy_var_274 := __HAVOC_malloc(20);
    call {:si_unique_call 2072} vslice_dummy_var_275 := __HAVOC_malloc(20);
    call {:si_unique_call 2073} vslice_dummy_var_276 := __HAVOC_malloc(4);
    MouseExtension_2 := actual_MouseExtension_2;
    assume {:nonnull} MouseExtension_2 != 0;
    assume MouseExtension_2 > 0;
    goto anon17_Then, anon17_Else;

  anon17_Else:
    call {:si_unique_call 2074} vslice_dummy_var_277 := I8xResetMouseFromDpc#1(MouseExtension_2, 1400);
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  L1:
    goto LM2;

  LM2:
    return;

  anon23_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon17_Then:
    assume {:nonnull} MouseExtension_2 != 0;
    assume MouseExtension_2 > 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:nonnull} resetInfo != 0;
    assume resetInfo > 0;
    assume {:nonnull} resetInfo != 0;
    assume resetInfo > 0;
    call {:si_unique_call 2075} sdv_157 := KeSynchronizeExecution(0, li2bplFunctionConstant1062, 0);
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} sdv_157 != 0;
    assume {:nonnull} resetInfo != 0;
    assume resetInfo > 0;
    goto anon20_Then, anon20_Else;

  anon20_Else:
    assume {:nonnull} resetInfo != 0;
    assume resetInfo > 0;
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:nonnull} resetInfo != 0;
    assume resetInfo > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    call {:si_unique_call 2076} SD1 := RtlConvertLongToLargeInteger(-10000000);
    assume {:nonnull} SD1 != 0;
    assume SD1 > 0;
    assume {:nonnull} li_1 != 0;
    assume li_1 > 0;
    assume {:nonnull} SD1 != 0;
    assume SD1 > 0;
    assume {:nonnull} li_1 != 0;
    assume li_1 > 0;
    assume {:nonnull} SD1 != 0;
    assume SD1 > 0;
    assume {:nonnull} li_1 != 0;
    assume li_1 > 0;
    assume {:nonnull} SD1 != 0;
    assume SD1 > 0;
    assume {:nonnull} li_1 != 0;
    assume li_1 > 0;
    assume {:nonnull} SD1 != 0;
    assume SD1 > 0;
    assume {:nonnull} li_1 != 0;
    assume li_1 > 0;
    call {:si_unique_call 2077} vslice_dummy_var_279 := KeSetTimer(0, li_1, 0);
    goto L1;

  anon21_Then:
    goto L1;

  anon22_Then:
    call {:si_unique_call 2078} vslice_dummy_var_278 := I8xResetMouseFromDpc#1(MouseExtension_2, 1400);
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume {:partition} yogi_error != 1;
    goto L1;

  anon24_Then:
    assume {:partition} yogi_error == 1;
    goto LM2;

  anon20_Then:
    call {:si_unique_call 2079} SD1 := RtlConvertLongToLargeInteger(-15000000);
    assume {:nonnull} SD1 != 0;
    assume SD1 > 0;
    assume {:nonnull} li_1 != 0;
    assume li_1 > 0;
    assume {:nonnull} SD1 != 0;
    assume SD1 > 0;
    assume {:nonnull} li_1 != 0;
    assume li_1 > 0;
    assume {:nonnull} SD1 != 0;
    assume SD1 > 0;
    assume {:nonnull} li_1 != 0;
    assume li_1 > 0;
    assume {:nonnull} SD1 != 0;
    assume SD1 > 0;
    assume {:nonnull} li_1 != 0;
    assume li_1 > 0;
    assume {:nonnull} SD1 != 0;
    assume SD1 > 0;
    assume {:nonnull} li_1 != 0;
    assume li_1 > 0;
    call {:si_unique_call 2080} vslice_dummy_var_280 := KeSetTimer(0, li_1, 0);
    goto L1;

  anon19_Then:
    assume {:partition} sdv_157 == 0;
    goto L1;

  anon18_Then:
    goto L1;
}



procedure {:origName "I8xMouseResetTimeoutProc"} I8xMouseResetTimeoutProc#1(actual_Dpc_2: int, actual_MouseExtension_2: int, actual_SystemArg1_1: int, actual_SystemArg2_1: int);
  modifies alloc, Mem_T.CompletionRoutine__IO_STACK_LOCATION, yogi_error;
  free ensures yogi_error == 1 || yogi_error == old(yogi_error);
  free ensures old(yogi_error) == 0;



function POW2(a: int) : bool;

axiom (forall x: int :: { POW2(x) } x == 0 || x == 1 || x == 2 || x == 4 || x == 8 || x == 16 || x == 32 || x == 64 || x == 128 || x == 256 || x == 512 || x == 1024 || x == 2048 || x == 4096 || x == 8192 || x == 16384 || x == 32768 || x == 65536 || x == 131072 || x == 262144 || x == 524288 || x == 1048576 || x == 2097152 || x == 4194304 || x == 8388608 || x == 16777216 || x == 33554432 || x == 67108864 || x == 134217728 || x == 268435456 || x == 536870912 || x == 1073741824 || x == 2147483648 || x == -2147483648 ==> POW2(x));

axiom (forall f: int :: { BAND(0, f) } BAND(0, f) == 0);

axiom (forall f: int :: { BAND(f, f) } BAND(f, f) == f);

axiom (forall f: int :: { BOR(0, f) } BOR(0, f) == f);

axiom (forall f: int :: { BOR(f, 0) } BOR(f, 0) == f);

axiom (forall x: int, f: int :: { BAND(x, f) } POW2(x) && POW2(f) && x != f ==> BAND(x, f) == 0);

axiom (forall a: int, b: int, c: int :: { BOR(a, BOR(b, c)) } BOR(a, BOR(b, c)) == BOR(BOR(a, b), c));

axiom (forall a: int, b: int, c: int :: { BAND(a, BOR(b, c)) } BAND(a, BOR(b, c)) == BAND(BOR(b, c), a));

axiom (forall x: int, f1: int, f2: int :: { BAND(BOR(x, f1), f2) } (f1 != f2 && POW2(f1) && POW2(f2) ==> BAND(BOR(x, f1), f2) == BAND(x, f2)) && (f1 == f2 ==> BAND(BOR(x, f1), f2) == f1));

axiom (forall x: int, f1: int, f2: int :: { BAND(BAND(x, BNOT(f1)), f2) } (f1 != f2 && POW2(f1) && POW2(f2) ==> BAND(BAND(x, BNOT(f1)), f2) == BAND(x, f2)) && (f1 == f2 && POW2(f1) && POW2(f2) ==> BAND(BAND(x, BNOT(f1)), f2) == 0));

axiom (forall x: int, f1: int, f2: int :: { BAND(BOR(f1, x), f2) } (f1 != f2 && POW2(f1) && POW2(f2) ==> BAND(BOR(f1, x), f2) == BAND(x, f2)) && (f1 == f2 ==> BAND(BOR(f1, x), f2) == f1));

axiom (forall x: int, y: int, f2: int :: { BAND(BAND(x, y), f2) } POW2(f2) ==> BAND(BAND(x, y), f2) == 0 || BAND(BAND(x, y), f2) == BAND(x, f2));

implementation I8xGetBytePolled_loop_L15(in_i: int, in_Tmp_10: int, in_Tmp_11: int, in_response: int, in_desiredMask: int, in_Tmp_15: int, in_Byte: int, in_boogieTmp: int) returns (out_i: int, out_Tmp_10: int, out_Tmp_11: int, out_response: int, out_Tmp_15: int, out_boogieTmp: int)
{

  entry:
    out_i, out_Tmp_10, out_Tmp_11, out_response, out_Tmp_15, out_boogieTmp := in_i, in_Tmp_10, in_Tmp_11, in_response, in_Tmp_15, in_boogieTmp;
    goto L15, exit;

  exit:
    return;

  L15:
    goto anon23_Else;

  anon23_Else:
    havoc out_Tmp_10;
    assume {:nonnull} out_Tmp_10 != 0;
    assume out_Tmp_10 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:IndirectCall} true;
    call {:si_unique_call 2081} out_response := corral_nondet();
    goto L22;

  L22:
    out_Tmp_11 := BAND(out_response, in_desiredMask);
    goto anon28_Else;

  anon28_Else:
    assume {:partition} out_Tmp_11 != in_desiredMask;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:partition} BAND(out_response, 1) == 0;
    out_i := out_i + 1;
    goto anon25_Else_dummy;

  anon25_Else_dummy:
    goto L_BAF_0;

  L_BAF_0:
    call {:si_unique_call 2085} {:si_old_unique_call 1} out_i, out_Tmp_10, out_Tmp_11, out_response, out_Tmp_15, out_boogieTmp := I8xGetBytePolled_loop_L15(out_i, out_Tmp_10, out_Tmp_11, out_response, in_desiredMask, out_Tmp_15, in_Byte, out_boogieTmp);
    return;

  anon25_Then:
    assume {:partition} BAND(out_response, 1) != 0;
    havoc out_Tmp_15;
    assume {:nonnull} out_Tmp_15 != 0;
    assume out_Tmp_15 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:IndirectCall} true;
    assume {:nonnull} in_Byte != 0;
    assume in_Byte > 0;
    call {:si_unique_call 2083} out_boogieTmp := corral_nondet();
    goto anon29_Else_dummy;

  anon29_Else_dummy:
    goto L_BAF_0;

  anon29_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} in_Byte != 0;
    assume in_Byte > 0;
    call {:si_unique_call 2084} out_boogieTmp := corral_nondet();
    goto anon29_Then_dummy;

  anon29_Then_dummy:
    goto L_BAF_0;

  anon27_Then:
    assume {:IndirectCall} true;
    call {:si_unique_call 2082} out_response := corral_nondet();
    goto L22;
}



procedure {:LoopProcedure} I8xGetBytePolled_loop_L15(in_i: int, in_Tmp_10: int, in_Tmp_11: int, in_response: int, in_desiredMask: int, in_Tmp_15: int, in_Byte: int, in_boogieTmp: int) returns (out_i: int, out_Tmp_10: int, out_Tmp_11: int, out_response: int, out_Tmp_15: int, out_boogieTmp: int);



implementation I8xDrainOutputBuffer_loop_L11(in_sdv_7: int, in_vslice_dummy_var_3: int, in_vslice_dummy_var_4: int) returns (out_sdv_7: int, out_vslice_dummy_var_3: int, out_vslice_dummy_var_4: int)
{

  entry:
    out_sdv_7, out_vslice_dummy_var_3, out_vslice_dummy_var_4 := in_sdv_7, in_vslice_dummy_var_3, in_vslice_dummy_var_4;
    goto L11, exit;

  exit:
    return;

  L11:
    goto anon14_Then, anon14_Else;

  anon14_Else:
    assume {:IndirectCall} true;
    call {:si_unique_call 2087} out_sdv_7 := corral_nondet();
    goto L23;

  L23:
    goto anon17_Else;

  anon17_Else:
    assume {:partition} BAND(out_sdv_7, 1) != 0;
    goto anon18_Then, anon18_Else;

  anon18_Else:
    assume {:IndirectCall} true;
    call {:si_unique_call 2086} out_vslice_dummy_var_4 := corral_nondet();
    goto anon18_Else_dummy;

  anon18_Else_dummy:
    goto L_BAF_1;

  L_BAF_1:
    call {:si_unique_call 2090} {:si_old_unique_call 1} out_sdv_7, out_vslice_dummy_var_3, out_vslice_dummy_var_4 := I8xDrainOutputBuffer_loop_L11(out_sdv_7, out_vslice_dummy_var_3, out_vslice_dummy_var_4);
    return;

  anon18_Then:
    assume {:IndirectCall} true;
    call {:si_unique_call 2089} out_vslice_dummy_var_3 := corral_nondet();
    goto anon18_Then_dummy;

  anon18_Then_dummy:
    goto L_BAF_1;

  anon14_Then:
    assume {:IndirectCall} true;
    call {:si_unique_call 2088} out_sdv_7 := corral_nondet();
    goto L23;
}



procedure {:LoopProcedure} I8xDrainOutputBuffer_loop_L11(in_sdv_7: int, in_vslice_dummy_var_3: int, in_vslice_dummy_var_4: int) returns (out_sdv_7: int, out_vslice_dummy_var_3: int, out_vslice_dummy_var_4: int);



implementation I8xDrainOutputBuffer_loop_L10(in_i_1: int, in_sdv_8: int, in_limit: int, in_vslice_dummy_var_2: int) returns (out_i_1: int, out_sdv_8: int, out_vslice_dummy_var_2: int)
{

  entry:
    out_i_1, out_sdv_8, out_vslice_dummy_var_2 := in_i_1, in_sdv_8, in_vslice_dummy_var_2;
    goto L10, exit;

  exit:
    return;

  L10:
    goto anon13_Else;

  anon13_Else:
    assume {:partition} in_limit > out_i_1;
    goto anon15_Then, anon15_Else;

  anon15_Else:
    assume {:IndirectCall} true;
    call {:si_unique_call 2092} out_sdv_8 := corral_nondet();
    goto L17;

  L17:
    goto anon16_Else;

  anon16_Else:
    assume {:partition} BAND(out_sdv_8, 2) != 0;
    call {:si_unique_call 2091} out_vslice_dummy_var_2 := KeDelayExecutionThread(0, 0, 0);
    out_i_1 := out_i_1 + 1;
    goto anon16_Else_dummy;

  anon16_Else_dummy:
    havoc out_i_1;
    return;

  anon15_Then:
    assume {:IndirectCall} true;
    call {:si_unique_call 2093} out_sdv_8 := corral_nondet();
    goto L17;
}



procedure {:LoopProcedure} I8xDrainOutputBuffer_loop_L10(in_i_1: int, in_sdv_8: int, in_limit: int, in_vslice_dummy_var_2: int) returns (out_i_1: int, out_sdv_8: int, out_vslice_dummy_var_2: int);
  free ensures out_vslice_dummy_var_2 == 0 || out_vslice_dummy_var_2 == -1073741823 || out_vslice_dummy_var_2 == in_vslice_dummy_var_2;



implementation I8xTransmitControllerCommand_loop_L47(in_curTime: int, in_s_p_e_c_i_a_l_2: int)
{

  entry:
    goto L47, exit;

  exit:
    return;

  L47:
    assume {:nonnull} in_curTime != 0;
    assume in_curTime > 0;
    assume {:nonnull} in_s_p_e_c_i_a_l_2 != 0;
    assume in_s_p_e_c_i_a_l_2 > 0;
    assume {:nonnull} in_curTime != 0;
    assume in_curTime > 0;
    assume {:nonnull} in_s_p_e_c_i_a_l_2 != 0;
    assume in_s_p_e_c_i_a_l_2 > 0;
    assume {:nonnull} in_curTime != 0;
    assume in_curTime > 0;
    assume {:nonnull} in_s_p_e_c_i_a_l_2 != 0;
    assume in_s_p_e_c_i_a_l_2 > 0;
    goto anon35_Then;

  anon35_Then:
    goto anon35_Then_dummy;

  anon35_Then_dummy:
    call {:si_unique_call 2094} {:si_old_unique_call 1} I8xTransmitControllerCommand_loop_L47(in_curTime, in_s_p_e_c_i_a_l_2);
    return;
}



procedure {:LoopProcedure} I8xTransmitControllerCommand_loop_L47(in_curTime: int, in_s_p_e_c_i_a_l_2: int);



implementation I8xTransmitControllerCommand_loop_L31(in_verifyCommandByte: int, in_curTime: int, in_Tmp_22: int, in_controllerCommandByte: int, in_s_p_e_c_i_a_l_2: int, in_endTime: int, in_TransmitCCBContext: int, in_boogieTmp: int) returns (out_Tmp_22: int, out_s_p_e_c_i_a_l_2: int, out_boogieTmp: int)
{
  var vslice_dummy_var_262: int;
  var vslice_dummy_var_263: int;

  entry:
    out_Tmp_22, out_s_p_e_c_i_a_l_2, out_boogieTmp := in_Tmp_22, in_s_p_e_c_i_a_l_2, in_boogieTmp;
    goto L31, exit;

  exit:
    return;

  L31:
    assume {:nonnull} in_TransmitCCBContext != 0;
    assume in_TransmitCCBContext > 0;
    assume {:nonnull} in_controllerCommandByte != 0;
    assume in_controllerCommandByte > 0;
    havoc vslice_dummy_var_262;
    call {:si_unique_call 2095} out_boogieTmp := I8xPutControllerCommand(vslice_dummy_var_262);
    assume {:nonnull} in_TransmitCCBContext != 0;
    assume in_TransmitCCBContext > 0;
    havoc vslice_dummy_var_263;
    call {:si_unique_call 2096} out_boogieTmp := I8xGetControllerCommand(vslice_dummy_var_263, in_verifyCommandByte);
    assume {:nonnull} in_verifyCommandByte != 0;
    assume in_verifyCommandByte > 0;
    goto anon27_Else;

  anon27_Else:
    out_Tmp_22 := KeTickCount;
    assume {:nonnull} out_Tmp_22 != 0;
    assume out_Tmp_22 > 0;
    havoc out_s_p_e_c_i_a_l_2;
    goto L47;

  L47:
    call {:si_unique_call 2097} I8xTransmitControllerCommand_loop_L47(in_curTime, out_s_p_e_c_i_a_l_2);
    goto L47_last;

  L47_last:
    assume {:nonnull} in_curTime != 0;
    assume in_curTime > 0;
    assume {:nonnull} out_s_p_e_c_i_a_l_2 != 0;
    assume out_s_p_e_c_i_a_l_2 > 0;
    assume {:nonnull} in_curTime != 0;
    assume in_curTime > 0;
    assume {:nonnull} out_s_p_e_c_i_a_l_2 != 0;
    assume out_s_p_e_c_i_a_l_2 > 0;
    assume {:nonnull} in_curTime != 0;
    assume in_curTime > 0;
    assume {:nonnull} out_s_p_e_c_i_a_l_2 != 0;
    assume out_s_p_e_c_i_a_l_2 > 0;
    goto anon35_Then, anon35_Else;

  anon35_Else:
    assume {:nonnull} in_curTime != 0;
    assume in_curTime > 0;
    assume {:nonnull} in_endTime != 0;
    assume in_endTime > 0;
    goto anon28_Then;

  anon28_Then:
    goto anon28_Then_dummy;

  anon28_Then_dummy:
    call {:si_unique_call 2098} {:si_old_unique_call 1} out_Tmp_22, out_s_p_e_c_i_a_l_2, out_boogieTmp := I8xTransmitControllerCommand_loop_L31(in_verifyCommandByte, in_curTime, out_Tmp_22, in_controllerCommandByte, out_s_p_e_c_i_a_l_2, in_endTime, in_TransmitCCBContext, out_boogieTmp);
    return;

  anon35_Then:
    assume false;
    return;
}



procedure {:LoopProcedure} I8xTransmitControllerCommand_loop_L31(in_verifyCommandByte: int, in_curTime: int, in_Tmp_22: int, in_controllerCommandByte: int, in_s_p_e_c_i_a_l_2: int, in_endTime: int, in_TransmitCCBContext: int, in_boogieTmp: int) returns (out_Tmp_22: int, out_s_p_e_c_i_a_l_2: int, out_boogieTmp: int);
  modifies alloc;



implementation I8xTransmitControllerCommand_loop_L20(in_s_p_e_c_i_a_l_1: int, in_curTime: int)
{

  entry:
    goto L20, exit;

  exit:
    return;

  L20:
    assume {:nonnull} in_curTime != 0;
    assume in_curTime > 0;
    assume {:nonnull} in_s_p_e_c_i_a_l_1 != 0;
    assume in_s_p_e_c_i_a_l_1 > 0;
    assume {:nonnull} in_curTime != 0;
    assume in_curTime > 0;
    assume {:nonnull} in_s_p_e_c_i_a_l_1 != 0;
    assume in_s_p_e_c_i_a_l_1 > 0;
    assume {:nonnull} in_curTime != 0;
    assume in_curTime > 0;
    assume {:nonnull} in_s_p_e_c_i_a_l_1 != 0;
    assume in_s_p_e_c_i_a_l_1 > 0;
    goto anon34_Then;

  anon34_Then:
    goto anon34_Then_dummy;

  anon34_Then_dummy:
    call {:si_unique_call 2099} {:si_old_unique_call 1} I8xTransmitControllerCommand_loop_L20(in_s_p_e_c_i_a_l_1, in_curTime);
    return;
}



procedure {:LoopProcedure} I8xTransmitControllerCommand_loop_L20(in_s_p_e_c_i_a_l_1: int, in_curTime: int);



implementation I8xGetControllerCommand_loop_L32(in_status_3: int, in_retryCount: int, in_Byte_2: int) returns (out_status_3: int, out_retryCount: int)
{

  entry:
    out_status_3, out_retryCount := in_status_3, in_retryCount;
    goto L32, exit;

  exit:
    return;

  L32:
    assume {:CounterLoop 5} {:Counter "retryCount"} true;
    goto anon42_Else;

  anon42_Else:
    assume {:partition} 5 > out_retryCount;
    call {:si_unique_call 2100} out_status_3 := I8xGetBytePolled(0, in_Byte_2);
    goto anon43_Else;

  anon43_Else:
    assume {:partition} out_status_3 < 0;
    goto anon44_Else;

  anon44_Else:
    assume {:partition} out_status_3 == -1073741643;
    out_retryCount := out_retryCount + 1;
    goto anon44_Else_dummy;

  anon44_Else_dummy:
    call {:si_unique_call 2101} {:si_old_unique_call 1} out_status_3, out_retryCount := I8xGetControllerCommand_loop_L32(out_status_3, out_retryCount, in_Byte_2);
    return;
}



procedure {:LoopProcedure} I8xGetControllerCommand_loop_L32(in_status_3: int, in_retryCount: int, in_Byte_2: int) returns (out_status_3: int, out_retryCount: int);
  modifies alloc;
  free ensures out_status_3 == -1073741643 || out_status_3 == 0 || out_status_3 == in_status_3;



implementation I8xGetByteAsynchronous_loop_L11(in_i_2: int, in_Tmp_50: int, in_Tmp_51: int, in_Tmp_54: int, in_response_1: int, in_desiredMask_1: int, in_Byte_3: int, in_boogieTmp: int) returns (out_i_2: int, out_Tmp_50: int, out_Tmp_51: int, out_Tmp_54: int, out_response_1: int, out_boogieTmp: int)
{

  entry:
    out_i_2, out_Tmp_50, out_Tmp_51, out_Tmp_54, out_response_1, out_boogieTmp := in_i_2, in_Tmp_50, in_Tmp_51, in_Tmp_54, in_response_1, in_boogieTmp;
    goto L11, exit;

  exit:
    return;

  L11:
    goto anon17_Else;

  anon17_Else:
    havoc out_Tmp_50;
    assume {:nonnull} out_Tmp_50 != 0;
    assume out_Tmp_50 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:IndirectCall} true;
    call {:si_unique_call 2103} out_response_1 := corral_nondet();
    goto L18;

  L18:
    out_Tmp_54 := BAND(out_response_1, in_desiredMask_1);
    goto anon22_Else;

  anon22_Else:
    assume {:partition} out_Tmp_54 != in_desiredMask_1;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:partition} BAND(out_response_1, 1) != 0;
    havoc out_Tmp_51;
    assume {:nonnull} out_Tmp_51 != 0;
    assume out_Tmp_51 > 0;
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:IndirectCall} true;
    assume {:nonnull} in_Byte_3 != 0;
    assume in_Byte_3 > 0;
    call {:si_unique_call 2102} out_boogieTmp := corral_nondet();
    goto anon23_Else_dummy;

  anon23_Else_dummy:
    goto L_BAF_2;

  L_BAF_2:
    call {:si_unique_call 2106} {:si_old_unique_call 1} out_i_2, out_Tmp_50, out_Tmp_51, out_Tmp_54, out_response_1, out_boogieTmp := I8xGetByteAsynchronous_loop_L11(out_i_2, out_Tmp_50, out_Tmp_51, out_Tmp_54, out_response_1, in_desiredMask_1, in_Byte_3, out_boogieTmp);
    return;

  anon23_Then:
    assume {:IndirectCall} true;
    assume {:nonnull} in_Byte_3 != 0;
    assume in_Byte_3 > 0;
    call {:si_unique_call 2105} out_boogieTmp := corral_nondet();
    goto anon23_Then_dummy;

  anon23_Then_dummy:
    goto L_BAF_2;

  anon19_Then:
    assume {:partition} BAND(out_response_1, 1) == 0;
    out_i_2 := out_i_2 + 1;
    goto anon19_Then_dummy;

  anon19_Then_dummy:
    goto L_BAF_2;

  anon21_Then:
    assume {:IndirectCall} true;
    call {:si_unique_call 2104} out_response_1 := corral_nondet();
    goto L18;
}



procedure {:LoopProcedure} I8xGetByteAsynchronous_loop_L11(in_i_2: int, in_Tmp_50: int, in_Tmp_51: int, in_Tmp_54: int, in_response_1: int, in_desiredMask_1: int, in_Byte_3: int, in_boogieTmp: int) returns (out_i_2: int, out_Tmp_50: int, out_Tmp_51: int, out_Tmp_54: int, out_response_1: int, out_boogieTmp: int);



implementation I8xPutByteAsynchronous_loop_L5(in_i_3: int, in_Tmp_60: int, in_sdv_43: int, in_Tmp_67: int) returns (out_i_3: int, out_Tmp_60: int, out_sdv_43: int, out_Tmp_67: int)
{

  entry:
    out_i_3, out_Tmp_60, out_sdv_43, out_Tmp_67 := in_i_3, in_Tmp_60, in_sdv_43, in_Tmp_67;
    goto L5, exit;

  exit:
    return;

  L5:
    out_Tmp_67 := out_i_3;
    out_i_3 := out_i_3 + 1;
    goto anon18_Else;

  anon18_Else:
    havoc out_Tmp_60;
    assume {:nonnull} out_Tmp_60 != 0;
    assume out_Tmp_60 > 0;
    goto anon19_Then, anon19_Else;

  anon19_Else:
    assume {:IndirectCall} true;
    call {:si_unique_call 2107} out_sdv_43 := corral_nondet();
    goto L11;

  L11:
    goto anon16_Then;

  anon16_Then:
    assume {:partition} BAND(out_sdv_43, 2) != 0;
    goto anon16_Then_dummy;

  anon16_Then_dummy:
    havoc out_i_3;
    return;

  anon19_Then:
    assume {:IndirectCall} true;
    call {:si_unique_call 2108} out_sdv_43 := corral_nondet();
    goto L11;
}



procedure {:LoopProcedure} I8xPutByteAsynchronous_loop_L5(in_i_3: int, in_Tmp_60: int, in_sdv_43: int, in_Tmp_67: int) returns (out_i_3: int, out_Tmp_60: int, out_sdv_43: int, out_Tmp_67: int);
  free ensures out_Tmp_67 == in_i_3 || out_Tmp_67 == in_Tmp_67;



implementation I8042KeyboardInterruptService_loop_L25(in_i_6: int, in_Tmp_185: int, in_Tmp_188: int, in_statusByte: int) returns (out_i_6: int, out_Tmp_185: int, out_Tmp_188: int, out_statusByte: int)
{

  entry:
    out_i_6, out_Tmp_185, out_Tmp_188, out_statusByte := in_i_6, in_Tmp_185, in_Tmp_188, in_statusByte;
    goto L25, exit;

  exit:
    return;

  L25:
    goto anon119_Else;

  anon119_Else:
    havoc out_Tmp_185;
    assume {:nonnull} out_Tmp_185 != 0;
    assume out_Tmp_185 > 0;
    goto anon160_Then, anon160_Else;

  anon160_Else:
    assume {:IndirectCall} true;
    call {:si_unique_call 2109} out_statusByte := corral_nondet();
    goto L35;

  L35:
    out_Tmp_188 := BAND(out_statusByte, BOR(1, 32));
    goto anon161_Else;

  anon161_Else:
    assume {:partition} out_Tmp_188 != 1;
    out_i_6 := out_i_6 + 1;
    goto anon161_Else_dummy;

  anon161_Else_dummy:
    havoc out_i_6;
    return;

  anon160_Then:
    assume {:IndirectCall} true;
    call {:si_unique_call 2110} out_statusByte := corral_nondet();
    goto L35;
}



procedure {:LoopProcedure} I8042KeyboardInterruptService_loop_L25(in_i_6: int, in_Tmp_185: int, in_Tmp_188: int, in_statusByte: int) returns (out_i_6: int, out_Tmp_185: int, out_Tmp_188: int, out_statusByte: int);



implementation I8xInitializeKeyboard_loop_L88(in_s_p_e_c_i_a_l_4: int, in_nextQuery: int)
{

  entry:
    goto L88, exit;

  exit:
    return;

  L88:
    assume {:nonnull} in_nextQuery != 0;
    assume in_nextQuery > 0;
    assume {:nonnull} in_s_p_e_c_i_a_l_4 != 0;
    assume in_s_p_e_c_i_a_l_4 > 0;
    assume {:nonnull} in_nextQuery != 0;
    assume in_nextQuery > 0;
    assume {:nonnull} in_s_p_e_c_i_a_l_4 != 0;
    assume in_s_p_e_c_i_a_l_4 > 0;
    assume {:nonnull} in_nextQuery != 0;
    assume in_nextQuery > 0;
    assume {:nonnull} in_s_p_e_c_i_a_l_4 != 0;
    assume in_s_p_e_c_i_a_l_4 > 0;
    goto anon128_Then;

  anon128_Then:
    goto anon128_Then_dummy;

  anon128_Then_dummy:
    call {:si_unique_call 2111} {:si_old_unique_call 1} I8xInitializeKeyboard_loop_L88(in_s_p_e_c_i_a_l_4, in_nextQuery);
    return;
}



procedure {:LoopProcedure} I8xInitializeKeyboard_loop_L88(in_s_p_e_c_i_a_l_4: int, in_nextQuery: int);



implementation I8xInitializeKeyboard_loop_L69(in_resetRespTimeout: int, in_s_p_e_c_i_a_l_4: int, in_sdv_82: int, in_difference: int, in_byte_1: int, in_Tmp_200: int, in_status_7: int, in_startOfSpin: int, in_nextQuery: int, in_vslice_dummy_var_29: int) returns (out_s_p_e_c_i_a_l_4: int, out_sdv_82: int, out_Tmp_200: int, out_status_7: int, out_vslice_dummy_var_29: int)
{

  entry:
    out_s_p_e_c_i_a_l_4, out_sdv_82, out_Tmp_200, out_status_7, out_vslice_dummy_var_29 := in_s_p_e_c_i_a_l_4, in_sdv_82, in_Tmp_200, in_status_7, in_vslice_dummy_var_29;
    goto L69, exit;

  exit:
    return;

  L69:
    call {:si_unique_call 2112} out_status_7 := I8xGetBytePolled(1, in_byte_1);
    goto anon90_Then;

  anon90_Then:
    assume {:partition} 0 > out_status_7;
    goto anon91_Else;

  anon91_Else:
    assume {:partition} out_status_7 == -1073741643;
    call {:si_unique_call 2115} out_vslice_dummy_var_29 := KeDelayExecutionThread(0, 0, 0);
    out_Tmp_200 := KeTickCount;
    assume {:nonnull} out_Tmp_200 != 0;
    assume out_Tmp_200 > 0;
    havoc out_s_p_e_c_i_a_l_4;
    goto L88;

  L88:
    call {:si_unique_call 2114} I8xInitializeKeyboard_loop_L88(out_s_p_e_c_i_a_l_4, in_nextQuery);
    goto L88_last;

  L88_last:
    assume {:nonnull} in_nextQuery != 0;
    assume in_nextQuery > 0;
    assume {:nonnull} out_s_p_e_c_i_a_l_4 != 0;
    assume out_s_p_e_c_i_a_l_4 > 0;
    assume {:nonnull} in_nextQuery != 0;
    assume in_nextQuery > 0;
    assume {:nonnull} out_s_p_e_c_i_a_l_4 != 0;
    assume out_s_p_e_c_i_a_l_4 > 0;
    assume {:nonnull} in_nextQuery != 0;
    assume in_nextQuery > 0;
    assume {:nonnull} out_s_p_e_c_i_a_l_4 != 0;
    assume out_s_p_e_c_i_a_l_4 > 0;
    goto anon128_Then, anon128_Else;

  anon128_Else:
    assume {:nonnull} in_difference != 0;
    assume in_difference > 0;
    assume {:nonnull} in_nextQuery != 0;
    assume in_nextQuery > 0;
    assume {:nonnull} in_startOfSpin != 0;
    assume in_startOfSpin > 0;
    call {:si_unique_call 2113} out_sdv_82 := corral_nondet();
    assume {:nonnull} in_difference != 0;
    assume in_difference > 0;
    assume {:nonnull} in_resetRespTimeout != 0;
    assume in_resetRespTimeout > 0;
    goto anon93_Else;

  anon93_Else:
    goto anon93_Else_dummy;

  anon93_Else_dummy:
    call {:si_unique_call 2116} {:si_old_unique_call 1} out_s_p_e_c_i_a_l_4, out_sdv_82, out_Tmp_200, out_status_7, out_vslice_dummy_var_29 := I8xInitializeKeyboard_loop_L69(in_resetRespTimeout, out_s_p_e_c_i_a_l_4, out_sdv_82, in_difference, in_byte_1, out_Tmp_200, out_status_7, in_startOfSpin, in_nextQuery, out_vslice_dummy_var_29);
    return;

  anon128_Then:
    assume false;
    return;
}



procedure {:LoopProcedure} I8xInitializeKeyboard_loop_L69(in_resetRespTimeout: int, in_s_p_e_c_i_a_l_4: int, in_sdv_82: int, in_difference: int, in_byte_1: int, in_Tmp_200: int, in_status_7: int, in_startOfSpin: int, in_nextQuery: int, in_vslice_dummy_var_29: int) returns (out_s_p_e_c_i_a_l_4: int, out_sdv_82: int, out_Tmp_200: int, out_status_7: int, out_vslice_dummy_var_29: int);
  modifies alloc;
  free ensures out_status_7 == -1073741643 || out_status_7 == 0 || out_status_7 == in_status_7;
  free ensures out_vslice_dummy_var_29 == 0 || out_vslice_dummy_var_29 == -1073741823 || out_vslice_dummy_var_29 == in_vslice_dummy_var_29;



implementation I8xInitializeKeyboard_loop_L60(in_s_p_e_c_i_a_l_3: int, in_startOfSpin: int)
{

  entry:
    goto L60, exit;

  exit:
    return;

  L60:
    assume {:nonnull} in_s_p_e_c_i_a_l_3 != 0;
    assume in_s_p_e_c_i_a_l_3 > 0;
    assume {:nonnull} in_startOfSpin != 0;
    assume in_startOfSpin > 0;
    assume {:nonnull} in_s_p_e_c_i_a_l_3 != 0;
    assume in_s_p_e_c_i_a_l_3 > 0;
    assume {:nonnull} in_startOfSpin != 0;
    assume in_startOfSpin > 0;
    assume {:nonnull} in_s_p_e_c_i_a_l_3 != 0;
    assume in_s_p_e_c_i_a_l_3 > 0;
    assume {:nonnull} in_startOfSpin != 0;
    assume in_startOfSpin > 0;
    goto anon125_Then;

  anon125_Then:
    goto anon125_Then_dummy;

  anon125_Then_dummy:
    call {:si_unique_call 2117} {:si_old_unique_call 1} I8xInitializeKeyboard_loop_L60(in_s_p_e_c_i_a_l_3, in_startOfSpin);
    return;
}



procedure {:LoopProcedure} I8xInitializeKeyboard_loop_L60(in_s_p_e_c_i_a_l_3: int, in_startOfSpin: int);



implementation I8xInitializeKeyboard_loop_L49(in_s_p_e_c_i_a_l_3: int, in_failedResetResponse: int, in_failedResetResponseStatus: int, in_resetRespTimeout: int, in_li_3: int, in_s_p_e_c_i_a_l_4: int, in_failedResetResponseByte: int, in_failedResetStatus: int, in_sdv_82: int, in_difference: int, in_byte_1: int, in_Tmp_199: int, in_Tmp_200: int, in_failedReset_1: int, in_status_7: int, in_startOfSpin: int, in_nextQuery: int, in_waitForAckOnReset: int, in_KeyboardExtension_1: int, in_vslice_dummy_var_29: int) returns (out_s_p_e_c_i_a_l_3: int, out_failedResetResponse: int, out_failedResetResponseStatus: int, out_s_p_e_c_i_a_l_4: int, out_failedResetResponseByte: int, out_failedResetStatus: int, out_sdv_82: int, out_Tmp_199: int, out_Tmp_200: int, out_failedReset_1: int, out_status_7: int, out_waitForAckOnReset: int, out_vslice_dummy_var_29: int)
{

  entry:
    out_s_p_e_c_i_a_l_3, out_failedResetResponse, out_failedResetResponseStatus, out_s_p_e_c_i_a_l_4, out_failedResetResponseByte, out_failedResetStatus, out_sdv_82, out_Tmp_199, out_Tmp_200, out_failedReset_1, out_status_7, out_waitForAckOnReset, out_vslice_dummy_var_29 := in_s_p_e_c_i_a_l_3, in_failedResetResponse, in_failedResetResponseStatus, in_s_p_e_c_i_a_l_4, in_failedResetResponseByte, in_failedResetStatus, in_sdv_82, in_Tmp_199, in_Tmp_200, in_failedReset_1, in_status_7, in_waitForAckOnReset, in_vslice_dummy_var_29;
    goto L49, exit;

  exit:
    return;

  L49:
    call {:si_unique_call 2118} out_status_7 := I8xPutBytePolled#1(0, out_waitForAckOnReset, 1, 255);
    goto anon88_Then, anon88_Else;

  anon88_Else:
    assume {:partition} out_status_7 >= 0;
    goto L55;

  L55:
    assume {:nonnull} in_li_3 != 0;
    assume in_li_3 > 0;
    assume {:nonnull} in_resetRespTimeout != 0;
    assume in_resetRespTimeout > 0;
    out_Tmp_199 := KeTickCount;
    assume {:nonnull} out_Tmp_199 != 0;
    assume out_Tmp_199 > 0;
    havoc out_s_p_e_c_i_a_l_3;
    goto L60;

  L60:
    call {:si_unique_call 2124} I8xInitializeKeyboard_loop_L60(out_s_p_e_c_i_a_l_3, in_startOfSpin);
    goto L60_last;

  L60_last:
    assume {:nonnull} out_s_p_e_c_i_a_l_3 != 0;
    assume out_s_p_e_c_i_a_l_3 > 0;
    assume {:nonnull} in_startOfSpin != 0;
    assume in_startOfSpin > 0;
    assume {:nonnull} out_s_p_e_c_i_a_l_3 != 0;
    assume out_s_p_e_c_i_a_l_3 > 0;
    assume {:nonnull} in_startOfSpin != 0;
    assume in_startOfSpin > 0;
    assume {:nonnull} out_s_p_e_c_i_a_l_3 != 0;
    assume out_s_p_e_c_i_a_l_3 > 0;
    assume {:nonnull} in_startOfSpin != 0;
    assume in_startOfSpin > 0;
    goto anon125_Then, anon125_Else;

  anon125_Else:
    goto L69;

  L69:
    call {:si_unique_call 2119} out_s_p_e_c_i_a_l_4, out_sdv_82, out_Tmp_200, out_status_7, out_vslice_dummy_var_29 := I8xInitializeKeyboard_loop_L69(in_resetRespTimeout, out_s_p_e_c_i_a_l_4, out_sdv_82, in_difference, in_byte_1, out_Tmp_200, out_status_7, in_startOfSpin, in_nextQuery, out_vslice_dummy_var_29);
    goto L69_last;

  L69_last:
    call {:si_unique_call 2120} out_status_7 := I8xGetBytePolled(1, in_byte_1);
    goto anon90_Then, anon90_Else;

  anon90_Else:
    assume {:partition} out_status_7 >= 0;
    assume {:nonnull} in_byte_1 != 0;
    assume in_byte_1 > 0;
    goto anon92_Then, anon92_Else;

  anon92_Else:
    out_failedResetResponse := 1;
    out_failedResetResponseStatus := out_status_7;
    assume {:nonnull} in_byte_1 != 0;
    assume in_byte_1 > 0;
    havoc out_failedResetResponseByte;
    goto L68;

  L68:
    goto anon89_Then;

  anon89_Then:
    assume {:partition} 0 > out_status_7;
    goto anon94_Else;

  anon94_Else:
    assume {:partition} out_waitForAckOnReset == 1;
    out_waitForAckOnReset := 0;
    goto anon94_Else_dummy;

  anon94_Else_dummy:
    call {:si_unique_call 2125} {:si_old_unique_call 1} out_s_p_e_c_i_a_l_3, out_failedResetResponse, out_failedResetResponseStatus, out_s_p_e_c_i_a_l_4, out_failedResetResponseByte, out_failedResetStatus, out_sdv_82, out_Tmp_199, out_Tmp_200, out_failedReset_1, out_status_7, out_waitForAckOnReset, out_vslice_dummy_var_29 := I8xInitializeKeyboard_loop_L49(out_s_p_e_c_i_a_l_3, out_failedResetResponse, out_failedResetResponseStatus, in_resetRespTimeout, in_li_3, out_s_p_e_c_i_a_l_4, out_failedResetResponseByte, out_failedResetStatus, out_sdv_82, in_difference, in_byte_1, out_Tmp_199, out_Tmp_200, out_failedReset_1, out_status_7, in_startOfSpin, in_nextQuery, out_waitForAckOnReset, in_KeyboardExtension_1, out_vslice_dummy_var_29);
    return;

  anon92_Then:
    goto L68;

  anon90_Then:
    assume {:partition} 0 > out_status_7;
    goto anon91_Then, anon91_Else;

  anon91_Else:
    assume {:partition} out_status_7 == -1073741643;
    call {:si_unique_call 2123} out_vslice_dummy_var_29 := KeDelayExecutionThread(0, 0, 0);
    out_Tmp_200 := KeTickCount;
    assume {:nonnull} out_Tmp_200 != 0;
    assume out_Tmp_200 > 0;
    havoc out_s_p_e_c_i_a_l_4;
    goto L88;

  L88:
    call {:si_unique_call 2122} I8xInitializeKeyboard_loop_L88(out_s_p_e_c_i_a_l_4, in_nextQuery);
    goto L88_last;

  L88_last:
    assume {:nonnull} in_nextQuery != 0;
    assume in_nextQuery > 0;
    assume {:nonnull} out_s_p_e_c_i_a_l_4 != 0;
    assume out_s_p_e_c_i_a_l_4 > 0;
    assume {:nonnull} in_nextQuery != 0;
    assume in_nextQuery > 0;
    assume {:nonnull} out_s_p_e_c_i_a_l_4 != 0;
    assume out_s_p_e_c_i_a_l_4 > 0;
    assume {:nonnull} in_nextQuery != 0;
    assume in_nextQuery > 0;
    assume {:nonnull} out_s_p_e_c_i_a_l_4 != 0;
    assume out_s_p_e_c_i_a_l_4 > 0;
    goto anon128_Then, anon128_Else;

  anon128_Else:
    assume {:nonnull} in_difference != 0;
    assume in_difference > 0;
    assume {:nonnull} in_nextQuery != 0;
    assume in_nextQuery > 0;
    assume {:nonnull} in_startOfSpin != 0;
    assume in_startOfSpin > 0;
    call {:si_unique_call 2121} out_sdv_82 := corral_nondet();
    assume {:nonnull} in_difference != 0;
    assume in_difference > 0;
    assume {:nonnull} in_resetRespTimeout != 0;
    assume in_resetRespTimeout > 0;
    goto anon93_Then, anon93_Else;

  anon93_Else:
    assume false;
    return;

  anon93_Then:
    goto L68;

  anon128_Then:
    assume false;
    return;

  anon91_Then:
    assume {:partition} out_status_7 != -1073741643;
    goto L68;

  anon125_Then:
    assume false;
    return;

  anon88_Then:
    assume {:partition} 0 > out_status_7;
    out_failedReset_1 := 1;
    out_failedResetStatus := out_status_7;
    assume {:nonnull} in_KeyboardExtension_1 != 0;
    assume in_KeyboardExtension_1 > 0;
    goto anon129_Then;

  anon129_Then:
    goto L55;
}



procedure {:LoopProcedure} I8xInitializeKeyboard_loop_L49(in_s_p_e_c_i_a_l_3: int, in_failedResetResponse: int, in_failedResetResponseStatus: int, in_resetRespTimeout: int, in_li_3: int, in_s_p_e_c_i_a_l_4: int, in_failedResetResponseByte: int, in_failedResetStatus: int, in_sdv_82: int, in_difference: int, in_byte_1: int, in_Tmp_199: int, in_Tmp_200: int, in_failedReset_1: int, in_status_7: int, in_startOfSpin: int, in_nextQuery: int, in_waitForAckOnReset: int, in_KeyboardExtension_1: int, in_vslice_dummy_var_29: int) returns (out_s_p_e_c_i_a_l_3: int, out_failedResetResponse: int, out_failedResetResponseStatus: int, out_s_p_e_c_i_a_l_4: int, out_failedResetResponseByte: int, out_failedResetStatus: int, out_sdv_82: int, out_Tmp_199: int, out_Tmp_200: int, out_failedReset_1: int, out_status_7: int, out_waitForAckOnReset: int, out_vslice_dummy_var_29: int);
  modifies alloc;
  free ensures out_failedResetResponse == 1 || out_failedResetResponse == in_failedResetResponse;
  free ensures out_failedResetResponseStatus == -1073741643 || out_failedResetResponseStatus == 0 || out_failedResetResponseStatus == in_failedResetResponseStatus;
  free ensures out_failedReset_1 == 1 || out_failedReset_1 == in_failedReset_1;
  free ensures out_status_7 == -1073741643 || out_status_7 == 0 || out_status_7 == in_status_7;
  free ensures out_waitForAckOnReset == 0 || out_waitForAckOnReset == in_waitForAckOnReset;
  free ensures out_vslice_dummy_var_29 == 0 || out_vslice_dummy_var_29 == -1073741823 || out_vslice_dummy_var_29 == in_vslice_dummy_var_29;



implementation {:SIextraRecBound 4} I8xInitializeKeyboard_loop_L44(in_i_7: int, in_dumpData: int, in_Tmp_198: int) returns (out_i_7: int, out_Tmp_198: int)
{

  entry:
    out_i_7, out_Tmp_198 := in_i_7, in_Tmp_198;
    goto L44, exit;

  exit:
    return;

  L44:
    assume {:CounterLoop 4} {:Counter "i_7"} true;
    goto anon87_Else;

  anon87_Else:
    assume {:partition} 4 > out_i_7;
    out_Tmp_198 := out_i_7;
    assume {:nonnull} in_dumpData != 0;
    assume in_dumpData > 0;
    out_i_7 := out_i_7 + 1;
    goto anon87_Else_dummy;

  anon87_Else_dummy:
    call {:si_unique_call 2126} {:si_old_unique_call 1} out_i_7, out_Tmp_198 := I8xInitializeKeyboard_loop_L44(out_i_7, in_dumpData, out_Tmp_198);
    return;
}



procedure {:LoopProcedure} I8xInitializeKeyboard_loop_L44(in_i_7: int, in_dumpData: int, in_Tmp_198: int) returns (out_i_7: int, out_Tmp_198: int);



implementation I8xKeyboardConfiguration_loop_L69(in_Tmp_207: int, in_keyboardId: int, in_iIndex: int, in_Tmp_214: int, in_Tmp_215: int) returns (out_Tmp_207: int, out_iIndex: int, out_Tmp_214: int, out_Tmp_215: int)
{

  entry:
    out_Tmp_207, out_iIndex, out_Tmp_214, out_Tmp_215 := in_Tmp_207, in_iIndex, in_Tmp_214, in_Tmp_215;
    goto L69, exit;

  exit:
    return;

  L69:
    out_Tmp_214 := out_iIndex;
    goto anon58_Else;

  anon58_Else:
    out_Tmp_207 := out_iIndex;
    assume {:nonnull} in_keyboardId != 0;
    assume in_keyboardId > 0;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    out_Tmp_215 := out_iIndex;
    assume {:nonnull} in_keyboardId != 0;
    assume in_keyboardId > 0;
    goto anon60_Then;

  anon60_Then:
    goto L72;

  L72:
    out_iIndex := out_iIndex + 1;
    goto L72_dummy;

  L72_dummy:
    havoc out_iIndex;
    return;

  anon59_Then:
    goto L72;
}



procedure {:LoopProcedure} I8xKeyboardConfiguration_loop_L69(in_Tmp_207: int, in_keyboardId: int, in_iIndex: int, in_Tmp_214: int, in_Tmp_215: int) returns (out_Tmp_207: int, out_iIndex: int, out_Tmp_214: int, out_Tmp_215: int);
  free ensures out_Tmp_207 == in_iIndex || out_Tmp_207 == in_Tmp_207;
  free ensures out_Tmp_214 == in_iIndex || out_Tmp_214 == in_Tmp_214;
  free ensures out_Tmp_215 == in_iIndex || out_Tmp_215 == in_Tmp_215;



implementation I8xKeyboardConfiguration_loop_L40(in_i_8: int, in_Tmp_206: int, in_count: int, in_Tmp_208: int, in_Tmp_209: int, in_Tmp_210: int, in_configuration_1: int, in_currentResDesc: int, in_Tmp_217: int, in_defaultInterruptShare: int, in_KeyboardExtension_2: int) returns (out_i_8: int, out_Tmp_206: int, out_Tmp_208: int, out_Tmp_209: int, out_Tmp_210: int, out_Tmp_217: int)
{

  entry:
    out_i_8, out_Tmp_206, out_Tmp_208, out_Tmp_209, out_Tmp_210, out_Tmp_217 := in_i_8, in_Tmp_206, in_Tmp_208, in_Tmp_209, in_Tmp_210, in_Tmp_217;
    goto L40, exit;

  exit:
    return;

  L40:
    goto anon42_Else;

  anon42_Else:
    assume {:partition} in_count > out_i_8;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    goto anon53_Then, anon53_Else;

  anon53_Else:
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    goto anon52_Then, anon52_Else;

  anon52_Else:
    goto L52;

  L52:
    out_i_8 := out_i_8 + 1;
    goto L52_dummy;

  L52_dummy:
    call {:si_unique_call 2127} {:si_old_unique_call 1} out_i_8, out_Tmp_206, out_Tmp_208, out_Tmp_209, out_Tmp_210, out_Tmp_217 := I8xKeyboardConfiguration_loop_L40(out_i_8, out_Tmp_206, in_count, out_Tmp_208, out_Tmp_209, out_Tmp_210, in_configuration_1, in_currentResDesc, out_Tmp_217, in_defaultInterruptShare, in_KeyboardExtension_2);
    return;

  anon52_Then:
    goto L44;

  L44:
    assume {:nonnull} in_configuration_1 != 0;
    assume in_configuration_1 > 0;
    goto anon45_Then, anon45_Else;

  anon45_Else:
    assume {:nonnull} in_configuration_1 != 0;
    assume in_configuration_1 > 0;
    havoc out_Tmp_210;
    assume {:nonnull} in_configuration_1 != 0;
    assume in_configuration_1 > 0;
    havoc out_Tmp_208;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} out_Tmp_208 != 0;
    assume out_Tmp_208 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_configuration_1 != 0;
    assume in_configuration_1 > 0;
    havoc out_Tmp_209;
    assume {:nonnull} in_configuration_1 != 0;
    assume in_configuration_1 > 0;
    havoc out_Tmp_217;
    assume {:nonnull} out_Tmp_217 != 0;
    assume out_Tmp_217 > 0;
    assume {:nonnull} in_configuration_1 != 0;
    assume in_configuration_1 > 0;
    goto L52;

  anon45_Then:
    goto L52;

  anon53_Then:
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    assume {:nonnull} in_currentResDesc != 0;
    assume in_currentResDesc > 0;
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} in_defaultInterruptShare != 0;
    out_Tmp_206 := 3;
    goto L50;

  L50:
    assume {:nonnull} in_KeyboardExtension_2 != 0;
    assume in_KeyboardExtension_2 > 0;
    goto L52;

  anon56_Then:
    assume {:partition} in_defaultInterruptShare == 0;
    out_Tmp_206 := 1;
    goto L50;

  anon44_Then:
    goto L44;
}



procedure {:LoopProcedure} I8xKeyboardConfiguration_loop_L40(in_i_8: int, in_Tmp_206: int, in_count: int, in_Tmp_208: int, in_Tmp_209: int, in_Tmp_210: int, in_configuration_1: int, in_currentResDesc: int, in_Tmp_217: int, in_defaultInterruptShare: int, in_KeyboardExtension_2: int) returns (out_i_8: int, out_Tmp_206: int, out_Tmp_208: int, out_Tmp_209: int, out_Tmp_210: int, out_Tmp_217: int);
  free ensures out_Tmp_206 == 3 || out_Tmp_206 == 1 || out_Tmp_206 == in_Tmp_206;



implementation I8042KeyboardIsrDpc_loop_L31(in_dataNotConsumed: int, in_moreDpcProcessing: int, in_inputDataConsumed: int, in_classService: int, in_operationContext: int, in_deltaTime: int, in_interlockedResult: int, in_setPointerContext: int, in_getPointerContext: int, in_deviceExtension_3: int, in_vslice_dummy_var_46: int, in_vslice_dummy_var_48: int, in_vslice_dummy_var_49: int, in_vslice_dummy_var_50: int, in_vslice_dummy_var_51: int, in_vslice_dummy_var_52: int) returns (out_dataNotConsumed: int, out_moreDpcProcessing: int, out_inputDataConsumed: int, out_classService: int, out_vslice_dummy_var_46: int, out_vslice_dummy_var_48: int, out_vslice_dummy_var_49: int, out_vslice_dummy_var_50: int, out_vslice_dummy_var_51: int, out_vslice_dummy_var_52: int)
{

  entry:
    out_dataNotConsumed, out_moreDpcProcessing, out_inputDataConsumed, out_classService, out_vslice_dummy_var_46, out_vslice_dummy_var_48, out_vslice_dummy_var_49, out_vslice_dummy_var_50, out_vslice_dummy_var_51, out_vslice_dummy_var_52 := in_dataNotConsumed, in_moreDpcProcessing, in_inputDataConsumed, in_classService, in_vslice_dummy_var_46, in_vslice_dummy_var_48, in_vslice_dummy_var_49, in_vslice_dummy_var_50, in_vslice_dummy_var_51, in_vslice_dummy_var_52;
    goto L31, exit;

  exit:
    return;

  L31:
    goto anon20_Else;

  anon20_Else:
    assume {:partition} out_moreDpcProcessing != 0;
    out_dataNotConsumed := 0;
    out_inputDataConsumed := 0;
    assume {:nonnull} in_getPointerContext != 0;
    assume in_getPointerContext > 0;
    assume {:nonnull} in_setPointerContext != 0;
    assume in_setPointerContext > 0;
    assume {:nonnull} in_getPointerContext != 0;
    assume in_getPointerContext > 0;
    assume {:nonnull} in_setPointerContext != 0;
    assume in_setPointerContext > 0;
    assume {:nonnull} in_setPointerContext != 0;
    assume in_setPointerContext > 0;
    call {:si_unique_call 2131} out_vslice_dummy_var_48 := KeSynchronizeExecution(0, li2bplFunctionConstant207, 0);
    assume {:nonnull} in_getPointerContext != 0;
    assume in_getPointerContext > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} in_deviceExtension_3 != 0;
    assume in_deviceExtension_3 > 0;
    assume {:nonnull} in_deviceExtension_3 != 0;
    assume in_deviceExtension_3 > 0;
    havoc out_classService;
    assume {:nonnull} in_getPointerContext != 0;
    assume in_getPointerContext > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume out_classService == 0;
    assume {:nonnull} in_deviceExtension_3 != 0;
    assume in_deviceExtension_3 > 0;
    havoc out_dataNotConsumed;
    assume {:nonnull} in_setPointerContext != 0;
    assume in_setPointerContext > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} out_dataNotConsumed != 0;
    assume {:nonnull} in_getPointerContext != 0;
    assume in_getPointerContext > 0;
    assume {:nonnull} in_setPointerContext != 0;
    assume in_setPointerContext > 0;
    goto L47;

  L47:
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} out_dataNotConsumed != 0;
    goto L58;

  L58:
    call {:si_unique_call 2130} out_vslice_dummy_var_46 := KeSynchronizeExecution(0, li2bplFunctionConstant210, 0);
    goto L43;

  L43:
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} out_dataNotConsumed != 0;
    assume {:nonnull} in_operationContext != 0;
    assume in_operationContext > 0;
    assume {:nonnull} in_interlockedResult != 0;
    assume in_interlockedResult > 0;
    assume {:nonnull} in_operationContext != 0;
    assume in_operationContext > 0;
    call {:si_unique_call 2128} out_vslice_dummy_var_49 := KeSynchronizeExecution(0, li2bplFunctionConstant206, 0);
    assume {:nonnull} in_deltaTime != 0;
    assume in_deltaTime > 0;
    assume {:nonnull} in_deltaTime != 0;
    assume in_deltaTime > 0;
    call {:si_unique_call 2129} out_vslice_dummy_var_50 := KeSetTimer(0, in_deltaTime, 0);
    out_moreDpcProcessing := 0;
    goto anon22_Else_dummy;

  anon22_Else_dummy:
    goto L_BAF_3;

  L_BAF_3:
    call {:si_unique_call 2134} {:si_old_unique_call 1} out_dataNotConsumed, out_moreDpcProcessing, out_inputDataConsumed, out_classService, out_vslice_dummy_var_46, out_vslice_dummy_var_48, out_vslice_dummy_var_49, out_vslice_dummy_var_50, out_vslice_dummy_var_51, out_vslice_dummy_var_52 := I8042KeyboardIsrDpc_loop_L31(out_dataNotConsumed, out_moreDpcProcessing, out_inputDataConsumed, out_classService, in_operationContext, in_deltaTime, in_interlockedResult, in_setPointerContext, in_getPointerContext, in_deviceExtension_3, out_vslice_dummy_var_46, out_vslice_dummy_var_48, out_vslice_dummy_var_49, out_vslice_dummy_var_50, out_vslice_dummy_var_51, out_vslice_dummy_var_52);
    return;

  anon22_Then:
    assume {:partition} out_dataNotConsumed == 0;
    assume {:nonnull} in_operationContext != 0;
    assume in_operationContext > 0;
    assume {:nonnull} in_operationContext != 0;
    assume in_operationContext > 0;
    call {:si_unique_call 2133} out_vslice_dummy_var_51 := KeSynchronizeExecution(0, li2bplFunctionConstant206, 0);
    assume {:nonnull} in_interlockedResult != 0;
    assume in_interlockedResult > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:nonnull} in_operationContext != 0;
    assume in_operationContext > 0;
    assume {:nonnull} in_interlockedResult != 0;
    assume in_interlockedResult > 0;
    assume {:nonnull} in_operationContext != 0;
    assume in_operationContext > 0;
    call {:si_unique_call 2132} out_vslice_dummy_var_52 := KeSynchronizeExecution(0, li2bplFunctionConstant206, 0);
    goto anon25_Else_dummy;

  anon25_Else_dummy:
    goto L_BAF_3;

  anon25_Then:
    out_moreDpcProcessing := 0;
    goto anon25_Then_dummy;

  anon25_Then_dummy:
    goto L_BAF_3;

  anon23_Then:
    assume {:partition} out_dataNotConsumed == 0;
    assume {:nonnull} in_getPointerContext != 0;
    assume in_getPointerContext > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume out_classService == 0;
    assume {:nonnull} in_getPointerContext != 0;
    assume in_getPointerContext > 0;
    havoc out_dataNotConsumed;
    assume {:nonnull} in_getPointerContext != 0;
    assume in_getPointerContext > 0;
    assume {:nonnull} in_setPointerContext != 0;
    assume in_setPointerContext > 0;
    assume {:nonnull} in_setPointerContext != 0;
    assume in_setPointerContext > 0;
    goto L58;

  anon24_Then:
    goto L58;

  anon27_Then:
    assume {:partition} out_dataNotConsumed == 0;
    assume {:nonnull} in_deviceExtension_3 != 0;
    assume in_deviceExtension_3 > 0;
    assume {:nonnull} in_setPointerContext != 0;
    assume in_setPointerContext > 0;
    assume {:nonnull} in_getPointerContext != 0;
    assume in_getPointerContext > 0;
    assume {:nonnull} in_setPointerContext != 0;
    assume in_setPointerContext > 0;
    goto L47;

  anon26_Then:
    goto L47;

  anon21_Then:
    goto L43;
}



procedure {:LoopProcedure} I8042KeyboardIsrDpc_loop_L31(in_dataNotConsumed: int, in_moreDpcProcessing: int, in_inputDataConsumed: int, in_classService: int, in_operationContext: int, in_deltaTime: int, in_interlockedResult: int, in_setPointerContext: int, in_getPointerContext: int, in_deviceExtension_3: int, in_vslice_dummy_var_46: int, in_vslice_dummy_var_48: int, in_vslice_dummy_var_49: int, in_vslice_dummy_var_50: int, in_vslice_dummy_var_51: int, in_vslice_dummy_var_52: int) returns (out_dataNotConsumed: int, out_moreDpcProcessing: int, out_inputDataConsumed: int, out_classService: int, out_vslice_dummy_var_46: int, out_vslice_dummy_var_48: int, out_vslice_dummy_var_49: int, out_vslice_dummy_var_50: int, out_vslice_dummy_var_51: int, out_vslice_dummy_var_52: int);
  modifies alloc;
  free ensures out_moreDpcProcessing == 0 || out_moreDpcProcessing == in_moreDpcProcessing;
  free ensures out_inputDataConsumed == 0 || out_inputDataConsumed == in_inputDataConsumed;
  free ensures out_vslice_dummy_var_46 == 1 || out_vslice_dummy_var_46 == 0 || out_vslice_dummy_var_46 == in_vslice_dummy_var_46;
  free ensures out_vslice_dummy_var_48 == 1 || out_vslice_dummy_var_48 == 0 || out_vslice_dummy_var_48 == in_vslice_dummy_var_48;
  free ensures out_vslice_dummy_var_49 == 1 || out_vslice_dummy_var_49 == 0 || out_vslice_dummy_var_49 == in_vslice_dummy_var_49;
  free ensures out_vslice_dummy_var_50 == 1 || out_vslice_dummy_var_50 == 0 || out_vslice_dummy_var_50 == in_vslice_dummy_var_50;
  free ensures out_vslice_dummy_var_51 == 1 || out_vslice_dummy_var_51 == 0 || out_vslice_dummy_var_51 == in_vslice_dummy_var_51;
  free ensures out_vslice_dummy_var_52 == 1 || out_vslice_dummy_var_52 == 0 || out_vslice_dummy_var_52 == in_vslice_dummy_var_52;



implementation I8xRemovePort_loop_L12(in_i_9: int, in_Tmp_272: int, in_Tmp_273: int, in_address: int, in_Tmp_276: int, in_Tmp_278: int) returns (out_i_9: int, out_Tmp_272: int, out_Tmp_273: int, out_Tmp_276: int, out_Tmp_278: int)
{

  entry:
    out_i_9, out_Tmp_272, out_Tmp_273, out_Tmp_276, out_Tmp_278 := in_i_9, in_Tmp_272, in_Tmp_273, in_Tmp_276, in_Tmp_278;
    goto L12, exit;

  exit:
    return;

  L12:
    goto anon12_Else;

  anon12_Else:
    out_Tmp_272 := out_i_9;
    havoc out_Tmp_273;
    assume {:nonnull} out_Tmp_273 != 0;
    assume out_Tmp_273 > 0;
    assume {:nonnull} in_address != 0;
    assume in_address > 0;
    goto anon14_Then, anon14_Else;

  anon14_Else:
    out_Tmp_276 := out_i_9;
    havoc out_Tmp_278;
    assume {:nonnull} out_Tmp_278 != 0;
    assume out_Tmp_278 > 0;
    assume {:nonnull} in_address != 0;
    assume in_address > 0;
    goto anon15_Then;

  anon15_Then:
    goto L15;

  L15:
    out_i_9 := out_i_9 + 1;
    goto L15_dummy;

  L15_dummy:
    havoc out_i_9;
    return;

  anon14_Then:
    goto L15;
}



procedure {:LoopProcedure} I8xRemovePort_loop_L12(in_i_9: int, in_Tmp_272: int, in_Tmp_273: int, in_address: int, in_Tmp_276: int, in_Tmp_278: int) returns (out_i_9: int, out_Tmp_272: int, out_Tmp_273: int, out_Tmp_276: int, out_Tmp_278: int);
  free ensures out_Tmp_272 == in_i_9 || out_Tmp_272 == in_Tmp_272;
  free ensures out_Tmp_276 == in_i_9 || out_Tmp_276 == in_Tmp_276;



implementation I8xFilterResourceRequirements_loop_L89(in_pResList: int, in_pNewResDesc: int, in_pNewResList: int, in_removeCount: int, in_j_1: int, in_Tmp_303: int, in_Tmp_306: int, in_pResDesc: int) returns (out_removeCount: int, out_j_1: int, out_Tmp_303: int, out_Tmp_306: int, out_pResDesc: int)
{

  entry:
    out_removeCount, out_j_1, out_Tmp_303, out_Tmp_306, out_pResDesc := in_removeCount, in_j_1, in_Tmp_303, in_Tmp_306, in_pResDesc;
    goto L89, exit;

  exit:
    return;

  L89:
    assume {:nonnull} in_pResList != 0;
    assume in_pResList > 0;
    goto anon57_Else;

  anon57_Else:
    out_Tmp_306 := out_j_1;
    assume {:nonnull} in_pResList != 0;
    assume in_pResList > 0;
    havoc out_Tmp_303;
    out_pResDesc := out_Tmp_303 + out_Tmp_306 * 420;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResDesc != 0;
    assume in_pNewResDesc > 0;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    assume {:nonnull} in_pNewResList != 0;
    assume in_pNewResList > 0;
    goto L99;

  L99:
    out_j_1 := out_j_1 + 1;
    goto L99_dummy;

  L99_dummy:
    call {:si_unique_call 2135} {:si_old_unique_call 1} out_removeCount, out_j_1, out_Tmp_303, out_Tmp_306, out_pResDesc := I8xFilterResourceRequirements_loop_L89(in_pResList, in_pNewResDesc, in_pNewResList, out_removeCount, out_j_1, out_Tmp_303, out_Tmp_306, out_pResDesc);
    return;

  anon72_Then:
    out_removeCount := out_removeCount - 1;
    goto L99;
}



procedure {:LoopProcedure} I8xFilterResourceRequirements_loop_L89(in_pResList: int, in_pNewResDesc: int, in_pNewResList: int, in_removeCount: int, in_j_1: int, in_Tmp_303: int, in_Tmp_306: int, in_pResDesc: int) returns (out_removeCount: int, out_j_1: int, out_Tmp_303: int, out_Tmp_306: int, out_pResDesc: int);



implementation I8xFilterResourceRequirements_loop_L113(in_pResList: int, in_j_1: int, in_Tmp_307: int, in_Tmp_308: int, in_pResDesc: int) returns (out_j_1: int, out_Tmp_307: int, out_Tmp_308: int, out_pResDesc: int)
{

  entry:
    out_j_1, out_Tmp_307, out_Tmp_308, out_pResDesc := in_j_1, in_Tmp_307, in_Tmp_308, in_pResDesc;
    goto L113, exit;

  exit:
    return;

  L113:
    assume {:nonnull} in_pResList != 0;
    assume in_pResList > 0;
    goto anon59_Else;

  anon59_Else:
    out_Tmp_307 := out_j_1;
    assume {:nonnull} in_pResList != 0;
    assume in_pResList > 0;
    havoc out_Tmp_308;
    out_pResDesc := out_Tmp_308 + out_Tmp_307 * 420;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    goto L117;

  L117:
    out_j_1 := out_j_1 + 1;
    goto L117_dummy;

  L117_dummy:
    call {:si_unique_call 2136} {:si_old_unique_call 1} out_j_1, out_Tmp_307, out_Tmp_308, out_pResDesc := I8xFilterResourceRequirements_loop_L113(in_pResList, out_j_1, out_Tmp_307, out_Tmp_308, out_pResDesc);
    return;

  anon73_Then:
    goto L117;
}



procedure {:LoopProcedure} I8xFilterResourceRequirements_loop_L113(in_pResList: int, in_j_1: int, in_Tmp_307: int, in_Tmp_308: int, in_pResDesc: int) returns (out_j_1: int, out_Tmp_307: int, out_Tmp_308: int, out_pResDesc: int);



implementation I8xFilterResourceRequirements_loop_L109(in_i_10: int, in_pReqList: int, in_pResList: int, in_j_1: int, in_Tmp_304: int, in_Tmp_307: int, in_Tmp_308: int, in_Tmp_309: int, in_pResDesc: int, in_reqCount: int) returns (out_i_10: int, out_pResList: int, out_j_1: int, out_Tmp_304: int, out_Tmp_307: int, out_Tmp_308: int, out_Tmp_309: int, out_pResDesc: int)
{

  entry:
    out_i_10, out_pResList, out_j_1, out_Tmp_304, out_Tmp_307, out_Tmp_308, out_Tmp_309, out_pResDesc := in_i_10, in_pResList, in_j_1, in_Tmp_304, in_Tmp_307, in_Tmp_308, in_Tmp_309, in_pResDesc;
    goto L109, exit;

  exit:
    return;

  L109:
    goto anon58_Else;

  anon58_Else:
    assume {:partition} in_reqCount > out_i_10;
    out_Tmp_309 := out_i_10;
    assume {:nonnull} in_pReqList != 0;
    assume in_pReqList > 0;
    havoc out_Tmp_304;
    out_pResList := out_Tmp_304 + out_Tmp_309 * 432;
    out_j_1 := 0;
    goto L113;

  L113:
    call {:si_unique_call 2137} out_j_1, out_Tmp_307, out_Tmp_308, out_pResDesc := I8xFilterResourceRequirements_loop_L113(out_pResList, out_j_1, out_Tmp_307, out_Tmp_308, out_pResDesc);
    goto L113_last;

  L113_last:
    assume {:nonnull} out_pResList != 0;
    assume out_pResList > 0;
    goto anon59_Then, anon59_Else;

  anon59_Else:
    out_Tmp_307 := out_j_1;
    assume {:nonnull} out_pResList != 0;
    assume out_pResList > 0;
    havoc out_Tmp_308;
    out_pResDesc := out_Tmp_308 + out_Tmp_307 * 420;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    goto L117;

  L117:
    out_j_1 := out_j_1 + 1;
    assume false;
    return;

  anon73_Then:
    goto L117;

  anon59_Then:
    out_i_10 := out_i_10 + 1;
    goto anon59_Then_dummy;

  anon59_Then_dummy:
    call {:si_unique_call 2138} {:si_old_unique_call 1} out_i_10, out_pResList, out_j_1, out_Tmp_304, out_Tmp_307, out_Tmp_308, out_Tmp_309, out_pResDesc := I8xFilterResourceRequirements_loop_L109(out_i_10, in_pReqList, out_pResList, out_j_1, out_Tmp_304, out_Tmp_307, out_Tmp_308, out_Tmp_309, out_pResDesc, in_reqCount);
    return;
}



procedure {:LoopProcedure} I8xFilterResourceRequirements_loop_L109(in_i_10: int, in_pReqList: int, in_pResList: int, in_j_1: int, in_Tmp_304: int, in_Tmp_307: int, in_Tmp_308: int, in_Tmp_309: int, in_pResDesc: int, in_reqCount: int) returns (out_i_10: int, out_pResList: int, out_j_1: int, out_Tmp_304: int, out_Tmp_307: int, out_Tmp_308: int, out_Tmp_309: int, out_pResDesc: int);



implementation I8xFilterResourceRequirements_loop_L146(in_i_10: int, in_pNewResList: int, in_prevCount: int, in_status_14: int) returns (out_i_10: int, out_status_14: int)
{

  entry:
    out_i_10, out_status_14 := in_i_10, in_status_14;
    goto L146, exit;

  exit:
    return;

  L146:
    assume {:CounterLoop 18} {:Counter "i_10"} true;
    goto anon62_Else;

  anon62_Else:
    assume {:partition} 18 > out_i_10;
    call {:si_unique_call 2139} out_status_14 := IoQueryDeviceDescription(0, 0, 0, 0, 0, 0, li2bplFunctionConstant1078, 0);
    goto anon64_Else;

  anon64_Else:
    assume {:partition} out_status_14 < 0;
    assume {:nonnull} in_pNewResList != 0;
    assume in_pNewResList > 0;
    goto anon65_Else;

  anon65_Else:
    out_i_10 := out_i_10 + 1;
    goto anon65_Else_dummy;

  anon65_Else_dummy:
    havoc out_i_10;
    return;
}



procedure {:LoopProcedure} I8xFilterResourceRequirements_loop_L146(in_i_10: int, in_pNewResList: int, in_prevCount: int, in_status_14: int) returns (out_i_10: int, out_status_14: int);
  free ensures out_status_14 == 0 || out_status_14 == -1073741823 || out_status_14 == in_status_14;



implementation I8xFilterResourceRequirements_loop_L45(in_pResList: int, in_foundPorts: int, in_Tmp_302: int, in_removeCount: int, in_j_1: int, in_sdv_122: int, in_Tmp_311: int, in_pResDesc: int, in_foundInt: int) returns (out_foundPorts: int, out_Tmp_302: int, out_removeCount: int, out_j_1: int, out_sdv_122: int, out_Tmp_311: int, out_pResDesc: int, out_foundInt: int)
{

  entry:
    out_foundPorts, out_Tmp_302, out_removeCount, out_j_1, out_sdv_122, out_Tmp_311, out_pResDesc, out_foundInt := in_foundPorts, in_Tmp_302, in_removeCount, in_j_1, in_sdv_122, in_Tmp_311, in_pResDesc, in_foundInt;
    goto L45, exit;

  exit:
    return;

  L45:
    assume {:nonnull} in_pResList != 0;
    assume in_pResList > 0;
    goto anon53_Else;

  anon53_Else:
    out_Tmp_311 := out_j_1;
    assume {:nonnull} in_pResList != 0;
    assume in_pResList > 0;
    havoc out_Tmp_302;
    out_pResDesc := out_Tmp_302 + out_Tmp_311 * 420;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    goto L58;

  L58:
    out_j_1 := out_j_1 + 1;
    goto L58_dummy;

  L58_dummy:
    call {:si_unique_call 2141} {:si_old_unique_call 1} out_foundPorts, out_Tmp_302, out_removeCount, out_j_1, out_sdv_122, out_Tmp_311, out_pResDesc, out_foundInt := I8xFilterResourceRequirements_loop_L45(in_pResList, out_foundPorts, out_Tmp_302, out_removeCount, out_j_1, out_sdv_122, out_Tmp_311, out_pResDesc, out_foundInt);
    return;

  anon67_Then:
    goto anon55_Then, anon55_Else;

  anon55_Else:
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    goto L54;

  L54:
    out_foundInt := 1;
    goto L58;

  anon55_Then:
    goto L54;

  anon69_Then:
    call {:si_unique_call 2140} out_sdv_122 := I8xRemovePort(out_pResDesc);
    goto anon56_Then, anon56_Else;

  anon56_Else:
    assume {:partition} out_sdv_122 != 0;
    out_removeCount := out_removeCount + 1;
    assume {:nonnull} out_pResDesc != 0;
    assume out_pResDesc > 0;
    goto L60;

  L60:
    out_foundPorts := 1;
    goto L58;

  anon56_Then:
    assume {:partition} out_sdv_122 == 0;
    goto L60;
}



procedure {:LoopProcedure} I8xFilterResourceRequirements_loop_L45(in_pResList: int, in_foundPorts: int, in_Tmp_302: int, in_removeCount: int, in_j_1: int, in_sdv_122: int, in_Tmp_311: int, in_pResDesc: int, in_foundInt: int) returns (out_foundPorts: int, out_Tmp_302: int, out_removeCount: int, out_j_1: int, out_sdv_122: int, out_Tmp_311: int, out_pResDesc: int, out_foundInt: int);
  modifies alloc;
  free ensures out_foundPorts == 1 || out_foundPorts == in_foundPorts;
  free ensures out_sdv_122 == 0 || out_sdv_122 == 1 || out_sdv_122 == in_sdv_122;
  free ensures out_foundInt == 1 || out_foundInt == in_foundInt;



implementation I8xVerifyMousePnPID_loop_L11(in_sdv_164: int, in_currentString: int)
{

  entry:
    goto L11, exit;

  exit:
    return;

  L11:
    assume {:nonnull} in_currentString != 0;
    assume in_currentString > 0;
    goto anon13_Else;

  anon13_Else:
    goto anon14_Else;

  anon14_Else:
    assume {:partition} in_sdv_164 != 0;
    goto anon14_Else_dummy;

  anon14_Else_dummy:
    call {:si_unique_call 2142} {:si_old_unique_call 1} I8xVerifyMousePnPID_loop_L11(in_sdv_164, in_currentString);
    return;
}



procedure {:LoopProcedure} I8xVerifyMousePnPID_loop_L11(in_sdv_164: int, in_currentString: int);



implementation I8xVerifyMousePnPID_loop_L23(in_currentString: int, in_sdv_166: int)
{

  entry:
    goto L23, exit;

  exit:
    return;

  L23:
    assume {:nonnull} in_currentString != 0;
    assume in_currentString > 0;
    goto anon15_Else;

  anon15_Else:
    goto anon16_Else;

  anon16_Else:
    assume {:partition} in_sdv_166 != 0;
    goto anon16_Else_dummy;

  anon16_Else_dummy:
    call {:si_unique_call 2143} {:si_old_unique_call 1} I8xVerifyMousePnPID_loop_L23(in_currentString, in_sdv_166);
    return;
}



procedure {:LoopProcedure} I8xVerifyMousePnPID_loop_L23(in_currentString: int, in_sdv_166: int);



implementation I8xSendResetCommand_loop_L19(in_s_p_e_c_i_a_l_5: int, in_Tmp_381: int, in_MouseExtension_9: int) returns (out_Tmp_381: int)
{

  entry:
    out_Tmp_381 := in_Tmp_381;
    goto L19, exit;

  exit:
    return;

  L19:
    assume {:nonnull} in_MouseExtension_9 != 0;
    assume in_MouseExtension_9 > 0;
    assume {:nonnull} in_s_p_e_c_i_a_l_5 != 0;
    assume in_s_p_e_c_i_a_l_5 > 0;
    assume {:nonnull} in_MouseExtension_9 != 0;
    assume in_MouseExtension_9 > 0;
    assume {:nonnull} in_s_p_e_c_i_a_l_5 != 0;
    assume in_s_p_e_c_i_a_l_5 > 0;
    assume {:nonnull} in_MouseExtension_9 != 0;
    assume in_MouseExtension_9 > 0;
    out_Tmp_381 := PreviousTick__PORT_MOUSE_EXTENSION(in_MouseExtension_9);
    assume {:nonnull} out_Tmp_381 != 0;
    assume out_Tmp_381 > 0;
    assume {:nonnull} in_s_p_e_c_i_a_l_5 != 0;
    assume in_s_p_e_c_i_a_l_5 > 0;
    goto anon3_Then;

  anon3_Then:
    goto anon3_Then_dummy;

  anon3_Then_dummy:
    call {:si_unique_call 2144} {:si_old_unique_call 1} out_Tmp_381 := I8xSendResetCommand_loop_L19(in_s_p_e_c_i_a_l_5, out_Tmp_381, in_MouseExtension_9);
    return;
}



procedure {:LoopProcedure} I8xSendResetCommand_loop_L19(in_s_p_e_c_i_a_l_5: int, in_Tmp_381: int, in_MouseExtension_9: int) returns (out_Tmp_381: int);
  free ensures out_Tmp_381 == in_Tmp_381 || out_Tmp_381 == PreviousTick__PORT_MOUSE_EXTENSION(in_MouseExtension_9);



implementation I8xGetBytePolledIterated_loop_L10(in_i_11: int, in_status_23: int, in_Byte_6: int, in_Attempts: int) returns (out_i_11: int, out_status_23: int)
{

  entry:
    out_i_11, out_status_23 := in_i_11, in_status_23;
    goto L10, exit;

  exit:
    return;

  L10:
    goto anon7_Else;

  anon7_Else:
    assume {:partition} in_Attempts > out_i_11;
    call {:si_unique_call 2145} out_status_23 := I8xGetBytePolled(0, in_Byte_6);
    goto anon8_Else;

  anon8_Else:
    assume {:partition} out_status_23 < 0;
    goto anon9_Else;

  anon9_Else:
    assume {:partition} out_status_23 == -1073741643;
    out_i_11 := out_i_11 + 1;
    goto anon9_Else_dummy;

  anon9_Else_dummy:
    call {:si_unique_call 2146} {:si_old_unique_call 1} out_i_11, out_status_23 := I8xGetBytePolledIterated_loop_L10(out_i_11, out_status_23, in_Byte_6, in_Attempts);
    return;
}



procedure {:LoopProcedure} I8xGetBytePolledIterated_loop_L10(in_i_11: int, in_status_23: int, in_Byte_6: int, in_Attempts: int) returns (out_i_11: int, out_status_23: int);
  modifies alloc;
  free ensures out_status_23 == -1073741643 || out_status_23 == 0 || out_status_23 == in_status_23;



implementation I8xFindWheelMouse_loop_L161(in_byte_2: int, in_status_24: int) returns (out_status_24: int)
{

  entry:
    out_status_24 := in_status_24;
    goto L161, exit;

  exit:
    return;

  L161:
    call {:si_unique_call 2147} out_status_24 := I8xGetBytePolled(0, in_byte_2);
    goto anon71_Else;

  anon71_Else:
    assume {:partition} out_status_24 != -1073741643;
    goto anon71_Else_dummy;

  anon71_Else_dummy:
    call {:si_unique_call 2148} {:si_old_unique_call 1} out_status_24 := I8xFindWheelMouse_loop_L161(in_byte_2, out_status_24);
    return;
}



procedure {:LoopProcedure} I8xFindWheelMouse_loop_L161(in_byte_2: int, in_status_24: int) returns (out_status_24: int);
  modifies alloc;
  free ensures out_status_24 == -1073741643 || out_status_24 == 0 || out_status_24 == in_status_24;



implementation I8xFindWheelMouse_loop_L114(in_Tmp_387: int, in_idCount: int, in_currentChar: int, in_byte_2: int, in_status_24: int) returns (out_Tmp_387: int, out_idCount: int, out_status_24: int)
{

  entry:
    out_Tmp_387, out_idCount, out_status_24 := in_Tmp_387, in_idCount, in_status_24;
    goto L114, exit;

  exit:
    return;

  L114:
    assume {:CounterLoop 7} {:Counter "idCount"} true;
    goto anon68_Else;

  anon68_Else:
    assume {:partition} 7 > out_idCount;
    call {:si_unique_call 2149} out_status_24 := I8xGetBytePolledIterated(0, in_byte_2, 5);
    assume {:nonnull} in_byte_2 != 0;
    assume in_byte_2 > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:nonnull} in_byte_2 != 0;
    assume in_byte_2 > 0;
    havoc out_Tmp_387;
    assume {:nonnull} in_currentChar != 0;
    assume in_currentChar > 0;
    assume {:nonnull} in_currentChar != 0;
    assume in_currentChar > 0;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    goto L123;

  L123:
    goto anon70_Then;

  anon70_Then:
    assume {:partition} 0 <= out_status_24;
    out_idCount := out_idCount + 1;
    goto anon70_Then_dummy;

  anon70_Then_dummy:
    call {:si_unique_call 2150} {:si_old_unique_call 1} out_Tmp_387, out_idCount, out_status_24 := I8xFindWheelMouse_loop_L114(out_Tmp_387, out_idCount, in_currentChar, in_byte_2, out_status_24);
    return;

  anon75_Then:
    goto L123;

  anon69_Then:
    goto L123;
}



procedure {:LoopProcedure} I8xFindWheelMouse_loop_L114(in_Tmp_387: int, in_idCount: int, in_currentChar: int, in_byte_2: int, in_status_24: int) returns (out_Tmp_387: int, out_idCount: int, out_status_24: int);
  modifies alloc;
  free ensures out_status_24 == -1073741643 || out_status_24 == 0 || out_status_24 == -1073741823 || out_status_24 == in_status_24;



implementation I8xFindWheelMouse_loop_L89(in_i_12: int, in_Tmp_385: int, in_Tmp_386: int, in_errorLogEntry_1: int, in_dumpData_5: int, in_Tmp_390: int, in_dumpCount: int) returns (out_i_12: int, out_Tmp_385: int, out_Tmp_386: int, out_Tmp_390: int)
{

  entry:
    out_i_12, out_Tmp_385, out_Tmp_386, out_Tmp_390 := in_i_12, in_Tmp_385, in_Tmp_386, in_Tmp_390;
    goto L89, exit;

  exit:
    return;

  L89:
    assume {:nonnull} in_dumpCount != 0;
    assume in_dumpCount > 0;
    goto anon64_Else;

  anon64_Else:
    out_Tmp_390 := out_i_12;
    assume {:nonnull} in_errorLogEntry_1 != 0;
    assume in_errorLogEntry_1 > 0;
    havoc out_Tmp_386;
    out_Tmp_385 := out_i_12;
    assume {:nonnull} out_Tmp_386 != 0;
    assume out_Tmp_386 > 0;
    assume {:nonnull} in_dumpData_5 != 0;
    assume in_dumpData_5 > 0;
    out_i_12 := out_i_12 + 1;
    goto anon64_Else_dummy;

  anon64_Else_dummy:
    call {:si_unique_call 2151} {:si_old_unique_call 1} out_i_12, out_Tmp_385, out_Tmp_386, out_Tmp_390 := I8xFindWheelMouse_loop_L89(out_i_12, out_Tmp_385, out_Tmp_386, in_errorLogEntry_1, in_dumpData_5, out_Tmp_390, in_dumpCount);
    return;
}



procedure {:LoopProcedure} I8xFindWheelMouse_loop_L89(in_i_12: int, in_Tmp_385: int, in_Tmp_386: int, in_errorLogEntry_1: int, in_dumpData_5: int, in_Tmp_390: int, in_dumpCount: int) returns (out_i_12: int, out_Tmp_385: int, out_Tmp_386: int, out_Tmp_390: int);



implementation {:SIextraRecBound 4} I8xFindWheelMouse_loop_L29(in_i_12: int, in_dumpData_5: int, in_Tmp_389: int) returns (out_i_12: int, out_Tmp_389: int)
{

  entry:
    out_i_12, out_Tmp_389 := in_i_12, in_Tmp_389;
    goto L29, exit;

  exit:
    return;

  L29:
    assume {:CounterLoop 4} {:Counter "i_12"} true;
    goto anon52_Else;

  anon52_Else:
    assume {:partition} 4 > out_i_12;
    out_Tmp_389 := out_i_12;
    assume {:nonnull} in_dumpData_5 != 0;
    assume in_dumpData_5 > 0;
    out_i_12 := out_i_12 + 1;
    goto anon52_Else_dummy;

  anon52_Else_dummy:
    call {:si_unique_call 2152} {:si_old_unique_call 1} out_i_12, out_Tmp_389 := I8xFindWheelMouse_loop_L29(out_i_12, in_dumpData_5, out_Tmp_389);
    return;
}



procedure {:LoopProcedure} I8xFindWheelMouse_loop_L29(in_i_12: int, in_dumpData_5: int, in_Tmp_389: int) returns (out_i_12: int, out_Tmp_389: int);



implementation I8xInitializeMouse_loop_L71(in_s_p_e_c_i_a_l_7: int, in_nextQuery_1: int)
{

  entry:
    goto L71, exit;

  exit:
    return;

  L71:
    assume {:nonnull} in_nextQuery_1 != 0;
    assume in_nextQuery_1 > 0;
    assume {:nonnull} in_s_p_e_c_i_a_l_7 != 0;
    assume in_s_p_e_c_i_a_l_7 > 0;
    assume {:nonnull} in_nextQuery_1 != 0;
    assume in_nextQuery_1 > 0;
    assume {:nonnull} in_s_p_e_c_i_a_l_7 != 0;
    assume in_s_p_e_c_i_a_l_7 > 0;
    assume {:nonnull} in_nextQuery_1 != 0;
    assume in_nextQuery_1 > 0;
    assume {:nonnull} in_s_p_e_c_i_a_l_7 != 0;
    assume in_s_p_e_c_i_a_l_7 > 0;
    goto anon69_Then;

  anon69_Then:
    goto anon69_Then_dummy;

  anon69_Then_dummy:
    call {:si_unique_call 2153} {:si_old_unique_call 1} I8xInitializeMouse_loop_L71(in_s_p_e_c_i_a_l_7, in_nextQuery_1);
    return;
}



procedure {:LoopProcedure} I8xInitializeMouse_loop_L71(in_s_p_e_c_i_a_l_7: int, in_nextQuery_1: int);



implementation I8xInitializeMouse_loop_L56(in_tenSeconds: int, in_Tmp_395: int, in_s_p_e_c_i_a_l_7: int, in_sdv_226: int, in_difference_1: int, in_byte_3: int, in_status_25: int, in_startOfSpin_1: int, in_nextQuery_1: int, in_vslice_dummy_var_97: int) returns (out_Tmp_395: int, out_s_p_e_c_i_a_l_7: int, out_sdv_226: int, out_status_25: int, out_vslice_dummy_var_97: int)
{

  entry:
    out_Tmp_395, out_s_p_e_c_i_a_l_7, out_sdv_226, out_status_25, out_vslice_dummy_var_97 := in_Tmp_395, in_s_p_e_c_i_a_l_7, in_sdv_226, in_status_25, in_vslice_dummy_var_97;
    goto L56, exit;

  exit:
    return;

  L56:
    call {:si_unique_call 2154} out_status_25 := I8xGetBytePolled(0, in_byte_3);
    goto anon50_Then, anon50_Else;

  anon50_Else:
    assume {:partition} out_status_25 >= 0;
    assume {:nonnull} in_byte_3 != 0;
    assume in_byte_3 > 0;
    goto anon52_Else;

  anon52_Else:
    goto L61;

  L61:
    goto anon51_Else;

  anon51_Else:
    assume {:partition} out_status_25 == -1073741643;
    call {:si_unique_call 2157} out_vslice_dummy_var_97 := KeDelayExecutionThread(0, 0, 0);
    out_Tmp_395 := KeTickCount;
    assume {:nonnull} out_Tmp_395 != 0;
    assume out_Tmp_395 > 0;
    havoc out_s_p_e_c_i_a_l_7;
    goto L71;

  L71:
    call {:si_unique_call 2156} I8xInitializeMouse_loop_L71(out_s_p_e_c_i_a_l_7, in_nextQuery_1);
    goto L71_last;

  L71_last:
    assume {:nonnull} in_nextQuery_1 != 0;
    assume in_nextQuery_1 > 0;
    assume {:nonnull} out_s_p_e_c_i_a_l_7 != 0;
    assume out_s_p_e_c_i_a_l_7 > 0;
    assume {:nonnull} in_nextQuery_1 != 0;
    assume in_nextQuery_1 > 0;
    assume {:nonnull} out_s_p_e_c_i_a_l_7 != 0;
    assume out_s_p_e_c_i_a_l_7 > 0;
    assume {:nonnull} in_nextQuery_1 != 0;
    assume in_nextQuery_1 > 0;
    assume {:nonnull} out_s_p_e_c_i_a_l_7 != 0;
    assume out_s_p_e_c_i_a_l_7 > 0;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:nonnull} in_difference_1 != 0;
    assume in_difference_1 > 0;
    assume {:nonnull} in_nextQuery_1 != 0;
    assume in_nextQuery_1 > 0;
    assume {:nonnull} in_startOfSpin_1 != 0;
    assume in_startOfSpin_1 > 0;
    call {:si_unique_call 2155} out_sdv_226 := corral_nondet();
    assume {:nonnull} in_difference_1 != 0;
    assume in_difference_1 > 0;
    assume {:nonnull} in_tenSeconds != 0;
    assume in_tenSeconds > 0;
    goto anon53_Else;

  anon53_Else:
    goto anon53_Else_dummy;

  anon53_Else_dummy:
    call {:si_unique_call 2158} {:si_old_unique_call 1} out_Tmp_395, out_s_p_e_c_i_a_l_7, out_sdv_226, out_status_25, out_vslice_dummy_var_97 := I8xInitializeMouse_loop_L56(in_tenSeconds, out_Tmp_395, out_s_p_e_c_i_a_l_7, out_sdv_226, in_difference_1, in_byte_3, out_status_25, in_startOfSpin_1, in_nextQuery_1, out_vslice_dummy_var_97);
    return;

  anon69_Then:
    assume false;
    return;

  anon50_Then:
    assume {:partition} 0 > out_status_25;
    goto L61;
}



procedure {:LoopProcedure} I8xInitializeMouse_loop_L56(in_tenSeconds: int, in_Tmp_395: int, in_s_p_e_c_i_a_l_7: int, in_sdv_226: int, in_difference_1: int, in_byte_3: int, in_status_25: int, in_startOfSpin_1: int, in_nextQuery_1: int, in_vslice_dummy_var_97: int) returns (out_Tmp_395: int, out_s_p_e_c_i_a_l_7: int, out_sdv_226: int, out_status_25: int, out_vslice_dummy_var_97: int);
  modifies alloc;
  free ensures out_status_25 == -1073741643 || out_status_25 == 0 || out_status_25 == in_status_25;
  free ensures out_vslice_dummy_var_97 == 0 || out_vslice_dummy_var_97 == -1073741823 || out_vslice_dummy_var_97 == in_vslice_dummy_var_97;



implementation I8xInitializeMouse_loop_L47(in_s_p_e_c_i_a_l_6: int, in_startOfSpin_1: int)
{

  entry:
    goto L47, exit;

  exit:
    return;

  L47:
    assume {:nonnull} in_s_p_e_c_i_a_l_6 != 0;
    assume in_s_p_e_c_i_a_l_6 > 0;
    assume {:nonnull} in_startOfSpin_1 != 0;
    assume in_startOfSpin_1 > 0;
    assume {:nonnull} in_s_p_e_c_i_a_l_6 != 0;
    assume in_s_p_e_c_i_a_l_6 > 0;
    assume {:nonnull} in_startOfSpin_1 != 0;
    assume in_startOfSpin_1 > 0;
    assume {:nonnull} in_s_p_e_c_i_a_l_6 != 0;
    assume in_s_p_e_c_i_a_l_6 > 0;
    assume {:nonnull} in_startOfSpin_1 != 0;
    assume in_startOfSpin_1 > 0;
    goto anon66_Then;

  anon66_Then:
    goto anon66_Then_dummy;

  anon66_Then_dummy:
    call {:si_unique_call 2159} {:si_old_unique_call 1} I8xInitializeMouse_loop_L47(in_s_p_e_c_i_a_l_6, in_startOfSpin_1);
    return;
}



procedure {:LoopProcedure} I8xInitializeMouse_loop_L47(in_s_p_e_c_i_a_l_6: int, in_startOfSpin_1: int);



implementation {:SIextraRecBound 4} I8xInitializeMouse_loop_L26(in_i_13: int, in_Tmp_394: int, in_dumpData_6: int) returns (out_i_13: int, out_Tmp_394: int)
{

  entry:
    out_i_13, out_Tmp_394 := in_i_13, in_Tmp_394;
    goto L26, exit;

  exit:
    return;

  L26:
    assume {:CounterLoop 4} {:Counter "i_13"} true;
    goto anon47_Else;

  anon47_Else:
    assume {:partition} 4 > out_i_13;
    out_Tmp_394 := out_i_13;
    assume {:nonnull} in_dumpData_6 != 0;
    assume in_dumpData_6 > 0;
    out_i_13 := out_i_13 + 1;
    goto anon47_Else_dummy;

  anon47_Else_dummy:
    call {:si_unique_call 2160} {:si_old_unique_call 1} out_i_13, out_Tmp_394 := I8xInitializeMouse_loop_L26(out_i_13, out_Tmp_394, in_dumpData_6);
    return;
}



procedure {:LoopProcedure} I8xInitializeMouse_loop_L26(in_i_13: int, in_Tmp_394: int, in_dumpData_6: int) returns (out_i_13: int, out_Tmp_394: int);



implementation I8xQueryNumberOfMouseButtons_loop_L23(in_i_14: int, in_status_26: int) returns (out_i_14: int, out_status_26: int)
{

  entry:
    out_i_14, out_status_26 := in_i_14, in_status_26;
    goto L23, exit;

  exit:
    return;

  L23:
    assume {:CounterLoop 3} {:Counter "i_14"} true;
    goto anon23_Else;

  anon23_Else:
    assume {:partition} 3 > out_i_14;
    call {:si_unique_call 2161} out_status_26 := I8xPutBytePolled#1(0, 1, 2, 230);
    goto anon24_Else;

  anon24_Else:
    assume {:partition} out_status_26 >= 0;
    out_i_14 := out_i_14 + 1;
    goto anon24_Else_dummy;

  anon24_Else_dummy:
    call {:si_unique_call 2162} {:si_old_unique_call 1} out_i_14, out_status_26 := I8xQueryNumberOfMouseButtons_loop_L23(out_i_14, out_status_26);
    return;
}



procedure {:LoopProcedure} I8xQueryNumberOfMouseButtons_loop_L23(in_i_14: int, in_status_26: int) returns (out_i_14: int, out_status_26: int);
  modifies alloc;



implementation I8xTransmitByteSequence_loop_L10(in_byteCount: int, in_Tmp_410: int, in_Tmp_412: int, in_status_28: int, in_Tmp_414: int, in_Bytes: int, in_UniqueErrorValue: int) returns (out_byteCount: int, out_Tmp_410: int, out_Tmp_412: int, out_status_28: int, out_Tmp_414: int)
{

  entry:
    out_byteCount, out_Tmp_410, out_Tmp_412, out_status_28, out_Tmp_414 := in_byteCount, in_Tmp_410, in_Tmp_412, in_status_28, in_Tmp_414;
    goto L10, exit;

  exit:
    return;

  L10:
    out_Tmp_414 := out_byteCount;
    assume {:nonnull} in_Bytes != 0;
    assume in_Bytes > 0;
    goto anon6_Else;

  anon6_Else:
    out_Tmp_412 := out_byteCount;
    assume {:nonnull} in_Bytes != 0;
    assume in_Bytes > 0;
    havoc out_Tmp_410;
    call {:si_unique_call 2163} out_status_28 := I8xPutBytePolled#1(0, 1, 2, out_Tmp_410);
    goto anon5_Else;

  anon5_Else:
    assume {:partition} out_status_28 >= 0;
    out_byteCount := out_byteCount + 1;
    assume {:nonnull} in_UniqueErrorValue != 0;
    assume in_UniqueErrorValue > 0;
    goto anon5_Else_dummy;

  anon5_Else_dummy:
    call {:si_unique_call 2164} {:si_old_unique_call 1} out_byteCount, out_Tmp_410, out_Tmp_412, out_status_28, out_Tmp_414 := I8xTransmitByteSequence_loop_L10(out_byteCount, out_Tmp_410, out_Tmp_412, out_status_28, out_Tmp_414, in_Bytes, in_UniqueErrorValue);
    return;
}



procedure {:LoopProcedure} I8xTransmitByteSequence_loop_L10(in_byteCount: int, in_Tmp_410: int, in_Tmp_412: int, in_status_28: int, in_Tmp_414: int, in_Bytes: int, in_UniqueErrorValue: int) returns (out_byteCount: int, out_Tmp_410: int, out_Tmp_412: int, out_status_28: int, out_Tmp_414: int);
  modifies alloc;



implementation {:SIextraRecBound 5} I8xMouseEnableTransmission_loop_L50(in_i_15: int, in_Tmp_418: int, in_errorLogEntry_2: int, in_dumpData_7: int, in_dumpCount_2: int, in_Tmp_419: int, in_Tmp_421: int) returns (out_i_15: int, out_Tmp_418: int, out_Tmp_419: int, out_Tmp_421: int)
{

  entry:
    out_i_15, out_Tmp_418, out_Tmp_419, out_Tmp_421 := in_i_15, in_Tmp_418, in_Tmp_419, in_Tmp_421;
    goto L50, exit;

  exit:
    return;

  L50:
    goto anon20_Else;

  anon20_Else:
    assume {:partition} in_dumpCount_2 > out_i_15;
    out_Tmp_418 := out_i_15;
    assume {:nonnull} in_errorLogEntry_2 != 0;
    assume in_errorLogEntry_2 > 0;
    havoc out_Tmp_421;
    out_Tmp_419 := out_i_15;
    assume {:nonnull} out_Tmp_421 != 0;
    assume out_Tmp_421 > 0;
    assume {:nonnull} in_dumpData_7 != 0;
    assume in_dumpData_7 > 0;
    out_i_15 := out_i_15 + 1;
    goto anon20_Else_dummy;

  anon20_Else_dummy:
    call {:si_unique_call 2165} {:si_old_unique_call 1} out_i_15, out_Tmp_418, out_Tmp_419, out_Tmp_421 := I8xMouseEnableTransmission_loop_L50(out_i_15, out_Tmp_418, in_errorLogEntry_2, in_dumpData_7, in_dumpCount_2, out_Tmp_419, out_Tmp_421);
    return;
}



procedure {:LoopProcedure} I8xMouseEnableTransmission_loop_L50(in_i_15: int, in_Tmp_418: int, in_errorLogEntry_2: int, in_dumpData_7: int, in_dumpCount_2: int, in_Tmp_419: int, in_Tmp_421: int) returns (out_i_15: int, out_Tmp_418: int, out_Tmp_419: int, out_Tmp_421: int);



implementation {:SIextraRecBound 4} I8xMouseEnableTransmission_loop_L15(in_i_15: int, in_Tmp_417: int, in_dumpData_7: int) returns (out_i_15: int, out_Tmp_417: int)
{

  entry:
    out_i_15, out_Tmp_417 := in_i_15, in_Tmp_417;
    goto L15, exit;

  exit:
    return;

  L15:
    assume {:CounterLoop 4} {:Counter "i_15"} true;
    goto anon15_Else;

  anon15_Else:
    assume {:partition} 4 > out_i_15;
    out_Tmp_417 := out_i_15;
    assume {:nonnull} in_dumpData_7 != 0;
    assume in_dumpData_7 > 0;
    out_i_15 := out_i_15 + 1;
    goto anon15_Else_dummy;

  anon15_Else_dummy:
    call {:si_unique_call 2166} {:si_old_unique_call 1} out_i_15, out_Tmp_417 := I8xMouseEnableTransmission_loop_L15(out_i_15, out_Tmp_417, in_dumpData_7);
    return;
}



procedure {:LoopProcedure} I8xMouseEnableTransmission_loop_L15(in_i_15: int, in_Tmp_417: int, in_dumpData_7: int) returns (out_i_15: int, out_Tmp_417: int);



implementation MouseCopyWheelIDs_loop_L26(in_str: int, in_vslice_dummy_var_105: int) returns (out_vslice_dummy_var_105: int)
{

  entry:
    out_vslice_dummy_var_105 := in_vslice_dummy_var_105;
    goto L26, exit;

  exit:
    return;

  L26:
    assume {:nonnull} in_str != 0;
    assume in_str > 0;
    goto anon10_Else;

  anon10_Else:
    goto anon11_Then, anon11_Else;

  anon11_Else:
    goto L33;

  L33:
    goto L33_dummy;

  L33_dummy:
    call {:si_unique_call 2168} {:si_old_unique_call 1} out_vslice_dummy_var_105 := MouseCopyWheelIDs_loop_L26(in_str, out_vslice_dummy_var_105);
    return;

  anon11_Then:
    call {:si_unique_call 2167} out_vslice_dummy_var_105 := __HAVOC_malloc(1);
    goto L33;
}



procedure {:LoopProcedure} MouseCopyWheelIDs_loop_L26(in_str: int, in_vslice_dummy_var_105: int) returns (out_vslice_dummy_var_105: int);
  modifies alloc;



implementation I8xMouseConfiguration_loop_L40(in_i_16: int, in_Tmp_429: int, in_count_1: int, in_Tmp_432: int, in_Tmp_433: int, in_Tmp_434: int, in_configuration_4: int, in_currentResDesc_1: int, in_defaultInterruptShare_1: int, in_Tmp_436: int, in_MouseExtension_15: int) returns (out_i_16: int, out_Tmp_429: int, out_Tmp_432: int, out_Tmp_433: int, out_Tmp_434: int, out_Tmp_436: int)
{

  entry:
    out_i_16, out_Tmp_429, out_Tmp_432, out_Tmp_433, out_Tmp_434, out_Tmp_436 := in_i_16, in_Tmp_429, in_Tmp_432, in_Tmp_433, in_Tmp_434, in_Tmp_436;
    goto L40, exit;

  exit:
    return;

  L40:
    goto anon28_Else;

  anon28_Else:
    assume {:partition} in_count_1 > out_i_16;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    goto anon33_Then, anon33_Else;

  anon33_Else:
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    goto L52;

  L52:
    out_i_16 := out_i_16 + 1;
    goto L52_dummy;

  L52_dummy:
    call {:si_unique_call 2169} {:si_old_unique_call 1} out_i_16, out_Tmp_429, out_Tmp_432, out_Tmp_433, out_Tmp_434, out_Tmp_436 := I8xMouseConfiguration_loop_L40(out_i_16, out_Tmp_429, in_count_1, out_Tmp_432, out_Tmp_433, out_Tmp_434, in_configuration_4, in_currentResDesc_1, in_defaultInterruptShare_1, out_Tmp_436, in_MouseExtension_15);
    return;

  anon32_Then:
    goto L44;

  L44:
    assume {:nonnull} in_configuration_4 != 0;
    assume in_configuration_4 > 0;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:nonnull} in_configuration_4 != 0;
    assume in_configuration_4 > 0;
    havoc out_Tmp_434;
    assume {:nonnull} in_configuration_4 != 0;
    assume in_configuration_4 > 0;
    havoc out_Tmp_432;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} out_Tmp_432 != 0;
    assume out_Tmp_432 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_configuration_4 != 0;
    assume in_configuration_4 > 0;
    havoc out_Tmp_429;
    assume {:nonnull} in_configuration_4 != 0;
    assume in_configuration_4 > 0;
    havoc out_Tmp_436;
    assume {:nonnull} out_Tmp_436 != 0;
    assume out_Tmp_436 > 0;
    assume {:nonnull} in_configuration_4 != 0;
    assume in_configuration_4 > 0;
    goto L52;

  anon30_Then:
    goto L52;

  anon33_Then:
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    assume {:nonnull} in_currentResDesc_1 != 0;
    assume in_currentResDesc_1 > 0;
    goto anon36_Then, anon36_Else;

  anon36_Else:
    assume {:partition} in_defaultInterruptShare_1 != 0;
    out_Tmp_433 := 3;
    goto L50;

  L50:
    assume {:nonnull} in_MouseExtension_15 != 0;
    assume in_MouseExtension_15 > 0;
    goto L52;

  anon36_Then:
    assume {:partition} in_defaultInterruptShare_1 == 0;
    out_Tmp_433 := 1;
    goto L50;

  anon29_Then:
    goto L44;
}



procedure {:LoopProcedure} I8xMouseConfiguration_loop_L40(in_i_16: int, in_Tmp_429: int, in_count_1: int, in_Tmp_432: int, in_Tmp_433: int, in_Tmp_434: int, in_configuration_4: int, in_currentResDesc_1: int, in_defaultInterruptShare_1: int, in_Tmp_436: int, in_MouseExtension_15: int) returns (out_i_16: int, out_Tmp_429: int, out_Tmp_432: int, out_Tmp_433: int, out_Tmp_434: int, out_Tmp_436: int);
  free ensures out_Tmp_433 == 3 || out_Tmp_433 == 1 || out_Tmp_433 == in_Tmp_433;



implementation I8042MouseInterruptService_loop_L118(in_Tmp_550: int, in_bSendCommand: int, in_Tmp_561: int, in_byte_5: int, in_Tmp_569: int, in_sdv_287: int, in_altCommand: int, in_Tmp_575: int, in_deviceExtension_6: int) returns (out_Tmp_550: int, out_bSendCommand: int, out_Tmp_561: int, out_Tmp_569: int, out_sdv_287: int, out_altCommand: int, out_Tmp_575: int)
{
  var vslice_dummy_var_264: int;

  entry:
    out_Tmp_550, out_bSendCommand, out_Tmp_561, out_Tmp_569, out_sdv_287, out_altCommand, out_Tmp_575 := in_Tmp_550, in_bSendCommand, in_Tmp_561, in_Tmp_569, in_sdv_287, in_altCommand, in_Tmp_575;
    goto L118, exit;

  exit:
    return;

  L118:
    out_bSendCommand := 1;
    out_altCommand := 0;
    assume {:nonnull} in_deviceExtension_6 != 0;
    assume in_deviceExtension_6 > 0;
    goto anon613_Else;

  anon613_Else:
    assume {:nonnull} in_deviceExtension_6 != 0;
    assume in_deviceExtension_6 > 0;
    goto anon586_Else;

  anon586_Else:
    assume {:nonnull} in_deviceExtension_6 != 0;
    assume in_deviceExtension_6 > 0;
    goto anon585_Else;

  anon585_Else:
    assume {:nonnull} in_deviceExtension_6 != 0;
    assume in_deviceExtension_6 > 0;
    goto anon584_Else;

  anon584_Else:
    assume {:nonnull} in_deviceExtension_6 != 0;
    assume in_deviceExtension_6 > 0;
    goto anon583_Else;

  anon583_Else:
    assume {:nonnull} in_deviceExtension_6 != 0;
    assume in_deviceExtension_6 > 0;
    goto anon582_Then, anon582_Else;

  anon582_Else:
    assume {:nonnull} in_deviceExtension_6 != 0;
    assume in_deviceExtension_6 > 0;
    goto anon581_Else;

  anon581_Else:
    assume {:nonnull} in_deviceExtension_6 != 0;
    assume in_deviceExtension_6 > 0;
    goto anon580_Else;

  anon580_Else:
    assume {:nonnull} in_deviceExtension_6 != 0;
    assume in_deviceExtension_6 > 0;
    goto anon579_Else;

  anon579_Else:
    assume {:nonnull} in_deviceExtension_6 != 0;
    assume in_deviceExtension_6 > 0;
    goto anon578_Else;

  anon578_Else:
    assume {:nonnull} in_deviceExtension_6 != 0;
    assume in_deviceExtension_6 > 0;
    goto anon577_Else;

  anon577_Else:
    assume {:nonnull} in_deviceExtension_6 != 0;
    assume in_deviceExtension_6 > 0;
    goto anon576_Else;

  anon576_Else:
    assume {:nonnull} in_deviceExtension_6 != 0;
    assume in_deviceExtension_6 > 0;
    goto anon575_Else;

  anon575_Else:
    assume {:nonnull} in_deviceExtension_6 != 0;
    assume in_deviceExtension_6 > 0;
    goto anon574_Else;

  anon574_Else:
    assume {:nonnull} in_deviceExtension_6 != 0;
    assume in_deviceExtension_6 > 0;
    goto anon573_Else;

  anon573_Else:
    assume {:nonnull} in_deviceExtension_6 != 0;
    assume in_deviceExtension_6 > 0;
    goto anon572_Else;

  anon572_Else:
    assume {:nonnull} in_deviceExtension_6 != 0;
    assume in_deviceExtension_6 > 0;
    goto anon571_Else;

  anon571_Else:
    assume {:nonnull} in_deviceExtension_6 != 0;
    assume in_deviceExtension_6 > 0;
    goto anon570_Then, anon570_Else;

  anon570_Else:
    assume {:nonnull} in_deviceExtension_6 != 0;
    assume in_deviceExtension_6 > 0;
    goto anon569_Then, anon569_Else;

  anon569_Else:
    assume {:nonnull} in_deviceExtension_6 != 0;
    assume in_deviceExtension_6 > 0;
    goto anon568_Then, anon568_Else;

  anon568_Else:
    assume {:nonnull} in_deviceExtension_6 != 0;
    assume in_deviceExtension_6 > 0;
    goto anon567_Then, anon567_Else;

  anon567_Else:
    assume {:nonnull} in_deviceExtension_6 != 0;
    assume in_deviceExtension_6 > 0;
    goto anon566_Then, anon566_Else;

  anon566_Else:
    assume {:nonnull} in_deviceExtension_6 != 0;
    assume in_deviceExtension_6 > 0;
    goto anon565_Then, anon565_Else;

  anon565_Else:
    assume {:nonnull} in_deviceExtension_6 != 0;
    assume in_deviceExtension_6 > 0;
    goto anon564_Then, anon564_Else;

  anon564_Else:
    assume {:nonnull} in_deviceExtension_6 != 0;
    assume in_deviceExtension_6 > 0;
    goto anon563_Then, anon563_Else;

  anon563_Else:
    assume {:nonnull} in_deviceExtension_6 != 0;
    assume in_deviceExtension_6 > 0;
    goto anon562_Else;

  anon562_Else:
    assume {:nonnull} in_deviceExtension_6 != 0;
    assume in_deviceExtension_6 > 0;
    goto anon561_Else;

  anon561_Else:
    assume {:nonnull} in_deviceExtension_6 != 0;
    assume in_deviceExtension_6 > 0;
    goto anon560_Else;

  anon560_Else:
    assume {:nonnull} in_deviceExtension_6 != 0;
    assume in_deviceExtension_6 > 0;
    goto anon559_Else;

  anon559_Else:
    assume {:nonnull} in_deviceExtension_6 != 0;
    assume in_deviceExtension_6 > 0;
    goto anon558_Else;

  anon558_Else:
    assume {:nonnull} in_deviceExtension_6 != 0;
    assume in_deviceExtension_6 > 0;
    goto anon557_Else;

  anon557_Else:
    assume {:nonnull} in_deviceExtension_6 != 0;
    assume in_deviceExtension_6 > 0;
    goto anon556_Else;

  anon556_Else:
    assume {:nonnull} in_deviceExtension_6 != 0;
    assume in_deviceExtension_6 > 0;
    goto anon555_Else;

  anon555_Else:
    assume {:nonnull} in_deviceExtension_6 != 0;
    assume in_deviceExtension_6 > 0;
    goto anon554_Else;

  anon554_Else:
    assume {:nonnull} in_deviceExtension_6 != 0;
    assume in_deviceExtension_6 > 0;
    goto anon553_Else;

  anon553_Else:
    assume {:nonnull} in_deviceExtension_6 != 0;
    assume in_deviceExtension_6 > 0;
    goto anon552_Then;

  anon552_Then:
    assume {:nonnull} in_deviceExtension_6 != 0;
    assume in_deviceExtension_6 > 0;
    goto anon552_Then_dummy;

  anon552_Then_dummy:
    goto L_BAF_4;

  L_BAF_4:
    call {:si_unique_call 2171} {:si_old_unique_call 1} out_Tmp_550, out_bSendCommand, out_Tmp_561, out_Tmp_569, out_sdv_287, out_altCommand, out_Tmp_575 := I8042MouseInterruptService_loop_L118(out_Tmp_550, out_bSendCommand, out_Tmp_561, in_byte_5, out_Tmp_569, out_sdv_287, out_altCommand, out_Tmp_575, in_deviceExtension_6);
    return;

  anon563_Then:
    goto L140;

  L140:
    assume {:nonnull} in_byte_5 != 0;
    assume in_byte_5 > 0;
    goto anon462_Then, anon462_Else;

  anon462_Else:
    assume {:nonnull} in_byte_5 != 0;
    assume in_byte_5 > 0;
    havoc out_Tmp_569;
    goto L324;

  L324:
    out_bSendCommand := 0;
    assume {:nonnull} in_deviceExtension_6 != 0;
    assume in_deviceExtension_6 > 0;
    goto anon627_Else;

  anon627_Else:
    assume {:nonnull} in_deviceExtension_6 != 0;
    assume in_deviceExtension_6 > 0;
    havoc vslice_dummy_var_264;
    call {:si_unique_call 2170} out_sdv_287 := I8xVerifyMousePnPID(in_deviceExtension_6, vslice_dummy_var_264);
    goto anon484_Else;

  anon484_Else:
    assume {:partition} out_sdv_287 != 0;
    assume {:nonnull} in_deviceExtension_6 != 0;
    assume in_deviceExtension_6 > 0;
    goto anon484_Else_dummy;

  anon484_Else_dummy:
    goto L_BAF_4;

  anon462_Then:
    goto L324;

  anon564_Then:
    goto L140;

  anon565_Then:
    goto L140;

  anon566_Then:
    goto L140;

  anon567_Then:
    goto L140;

  anon568_Then:
    assume {:nonnull} in_deviceExtension_6 != 0;
    assume in_deviceExtension_6 > 0;
    havoc out_Tmp_561;
    assume {:nonnull} out_Tmp_561 != 0;
    assume out_Tmp_561 > 0;
    goto anon628_Then, anon628_Else;

  anon628_Else:
    assume {:nonnull} in_byte_5 != 0;
    assume in_byte_5 > 0;
    goto anon483_Then;

  anon483_Then:
    goto L140;

  anon628_Then:
    goto L140;

  anon569_Then:
    goto L140;

  anon570_Then:
    assume {:nonnull} in_byte_5 != 0;
    assume in_byte_5 > 0;
    goto anon461_Else;

  anon461_Else:
    assume {:nonnull} in_deviceExtension_6 != 0;
    assume in_deviceExtension_6 > 0;
    assume {:nonnull} in_deviceExtension_6 != 0;
    assume in_deviceExtension_6 > 0;
    havoc out_Tmp_575;
    assume {:nonnull} in_deviceExtension_6 != 0;
    assume in_deviceExtension_6 > 0;
    havoc out_Tmp_550;
    assume {:nonnull} out_Tmp_550 != 0;
    assume out_Tmp_550 > 0;
    goto anon625_Then;

  anon625_Then:
    assume {:nonnull} in_deviceExtension_6 != 0;
    assume in_deviceExtension_6 > 0;
    goto anon625_Then_dummy;

  anon625_Then_dummy:
    goto L_BAF_4;

  anon582_Then:
    assume {:nonnull} in_byte_5 != 0;
    assume in_byte_5 > 0;
    goto anon455_Else;

  anon455_Else:
    assume {:nonnull} in_deviceExtension_6 != 0;
    assume in_deviceExtension_6 > 0;
    goto anon494_Then, anon494_Else;

  anon494_Else:
    assume {:nonnull} in_deviceExtension_6 != 0;
    assume in_deviceExtension_6 > 0;
    goto anon494_Else_dummy;

  anon494_Else_dummy:
    goto L_BAF_4;

  anon494_Then:
    assume {:nonnull} in_deviceExtension_6 != 0;
    assume in_deviceExtension_6 > 0;
    goto anon495_Else;

  anon495_Else:
    assume {:nonnull} in_deviceExtension_6 != 0;
    assume in_deviceExtension_6 > 0;
    goto anon495_Else_dummy;

  anon495_Else_dummy:
    goto L_BAF_4;
}



procedure {:LoopProcedure} I8042MouseInterruptService_loop_L118(in_Tmp_550: int, in_bSendCommand: int, in_Tmp_561: int, in_byte_5: int, in_Tmp_569: int, in_sdv_287: int, in_altCommand: int, in_Tmp_575: int, in_deviceExtension_6: int) returns (out_Tmp_550: int, out_bSendCommand: int, out_Tmp_561: int, out_Tmp_569: int, out_sdv_287: int, out_altCommand: int, out_Tmp_575: int);
  modifies alloc;
  free ensures out_bSendCommand == 1 || out_bSendCommand == 0 || out_bSendCommand == in_bSendCommand;
  free ensures out_sdv_287 == 1 || out_sdv_287 == 0 || out_sdv_287 == in_sdv_287;
  free ensures out_altCommand == 0 || out_altCommand == in_altCommand;



implementation I8042MouseInterruptService_loop_L48(in_s_p_e_c_i_a_l_8: int, in_newTick: int)
{

  entry:
    goto L48, exit;

  exit:
    return;

  L48:
    assume {:nonnull} in_newTick != 0;
    assume in_newTick > 0;
    assume {:nonnull} in_s_p_e_c_i_a_l_8 != 0;
    assume in_s_p_e_c_i_a_l_8 > 0;
    assume {:nonnull} in_newTick != 0;
    assume in_newTick > 0;
    assume {:nonnull} in_s_p_e_c_i_a_l_8 != 0;
    assume in_s_p_e_c_i_a_l_8 > 0;
    assume {:nonnull} in_newTick != 0;
    assume in_newTick > 0;
    assume {:nonnull} in_s_p_e_c_i_a_l_8 != 0;
    assume in_s_p_e_c_i_a_l_8 > 0;
    goto anon594_Then;

  anon594_Then:
    goto anon594_Then_dummy;

  anon594_Then_dummy:
    call {:si_unique_call 2172} {:si_old_unique_call 1} I8042MouseInterruptService_loop_L48(in_s_p_e_c_i_a_l_8, in_newTick);
    return;
}



procedure {:LoopProcedure} I8042MouseInterruptService_loop_L48(in_s_p_e_c_i_a_l_8: int, in_newTick: int);



implementation I8042MouseIsrDpc_loop_L31(in_dataNotConsumed_1: int, in_moreDpcProcessing_1: int, in_inputDataConsumed_1: int, in_operationContext_1: int, in_classService_1: int, in_interlockedResult_1: int, in_setPointerContext_1: int, in_deltaTime_1: int, in_getPointerContext_1: int, in_deviceExtension_7: int, in_vslice_dummy_var_132: int, in_vslice_dummy_var_134: int, in_vslice_dummy_var_135: int, in_vslice_dummy_var_136: int, in_vslice_dummy_var_137: int, in_vslice_dummy_var_138: int) returns (out_dataNotConsumed_1: int, out_moreDpcProcessing_1: int, out_inputDataConsumed_1: int, out_classService_1: int, out_vslice_dummy_var_132: int, out_vslice_dummy_var_134: int, out_vslice_dummy_var_135: int, out_vslice_dummy_var_136: int, out_vslice_dummy_var_137: int, out_vslice_dummy_var_138: int)
{

  entry:
    out_dataNotConsumed_1, out_moreDpcProcessing_1, out_inputDataConsumed_1, out_classService_1, out_vslice_dummy_var_132, out_vslice_dummy_var_134, out_vslice_dummy_var_135, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138 := in_dataNotConsumed_1, in_moreDpcProcessing_1, in_inputDataConsumed_1, in_classService_1, in_vslice_dummy_var_132, in_vslice_dummy_var_134, in_vslice_dummy_var_135, in_vslice_dummy_var_136, in_vslice_dummy_var_137, in_vslice_dummy_var_138;
    goto L31, exit;

  exit:
    return;

  L31:
    goto anon20_Else;

  anon20_Else:
    assume {:partition} out_moreDpcProcessing_1 != 0;
    out_dataNotConsumed_1 := 0;
    out_inputDataConsumed_1 := 0;
    assume {:nonnull} in_getPointerContext_1 != 0;
    assume in_getPointerContext_1 > 0;
    assume {:nonnull} in_setPointerContext_1 != 0;
    assume in_setPointerContext_1 > 0;
    assume {:nonnull} in_getPointerContext_1 != 0;
    assume in_getPointerContext_1 > 0;
    assume {:nonnull} in_setPointerContext_1 != 0;
    assume in_setPointerContext_1 > 0;
    assume {:nonnull} in_setPointerContext_1 != 0;
    assume in_setPointerContext_1 > 0;
    call {:si_unique_call 2176} out_vslice_dummy_var_134 := KeSynchronizeExecution(0, li2bplFunctionConstant207, 0);
    assume {:nonnull} in_getPointerContext_1 != 0;
    assume in_getPointerContext_1 > 0;
    goto anon21_Then, anon21_Else;

  anon21_Else:
    assume {:nonnull} in_deviceExtension_7 != 0;
    assume in_deviceExtension_7 > 0;
    assume {:nonnull} in_deviceExtension_7 != 0;
    assume in_deviceExtension_7 > 0;
    havoc out_classService_1;
    assume {:nonnull} in_getPointerContext_1 != 0;
    assume in_getPointerContext_1 > 0;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume out_classService_1 == 0;
    assume {:nonnull} in_deviceExtension_7 != 0;
    assume in_deviceExtension_7 > 0;
    havoc out_dataNotConsumed_1;
    assume {:nonnull} in_setPointerContext_1 != 0;
    assume in_setPointerContext_1 > 0;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} out_dataNotConsumed_1 != 0;
    assume {:nonnull} in_getPointerContext_1 != 0;
    assume in_getPointerContext_1 > 0;
    assume {:nonnull} in_setPointerContext_1 != 0;
    assume in_setPointerContext_1 > 0;
    goto L47;

  L47:
    goto anon23_Then, anon23_Else;

  anon23_Else:
    assume {:partition} out_dataNotConsumed_1 != 0;
    goto L58;

  L58:
    call {:si_unique_call 2175} out_vslice_dummy_var_132 := KeSynchronizeExecution(0, li2bplFunctionConstant210, 0);
    goto L43;

  L43:
    goto anon22_Then, anon22_Else;

  anon22_Else:
    assume {:partition} out_dataNotConsumed_1 != 0;
    assume {:nonnull} in_operationContext_1 != 0;
    assume in_operationContext_1 > 0;
    assume {:nonnull} in_interlockedResult_1 != 0;
    assume in_interlockedResult_1 > 0;
    assume {:nonnull} in_operationContext_1 != 0;
    assume in_operationContext_1 > 0;
    call {:si_unique_call 2173} out_vslice_dummy_var_135 := KeSynchronizeExecution(0, li2bplFunctionConstant206, 0);
    assume {:nonnull} in_deltaTime_1 != 0;
    assume in_deltaTime_1 > 0;
    assume {:nonnull} in_deltaTime_1 != 0;
    assume in_deltaTime_1 > 0;
    call {:si_unique_call 2174} out_vslice_dummy_var_136 := KeSetTimer(0, in_deltaTime_1, 0);
    out_moreDpcProcessing_1 := 0;
    goto anon22_Else_dummy;

  anon22_Else_dummy:
    goto L_BAF_5;

  L_BAF_5:
    call {:si_unique_call 2179} {:si_old_unique_call 1} out_dataNotConsumed_1, out_moreDpcProcessing_1, out_inputDataConsumed_1, out_classService_1, out_vslice_dummy_var_132, out_vslice_dummy_var_134, out_vslice_dummy_var_135, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138 := I8042MouseIsrDpc_loop_L31(out_dataNotConsumed_1, out_moreDpcProcessing_1, out_inputDataConsumed_1, in_operationContext_1, out_classService_1, in_interlockedResult_1, in_setPointerContext_1, in_deltaTime_1, in_getPointerContext_1, in_deviceExtension_7, out_vslice_dummy_var_132, out_vslice_dummy_var_134, out_vslice_dummy_var_135, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138);
    return;

  anon22_Then:
    assume {:partition} out_dataNotConsumed_1 == 0;
    assume {:nonnull} in_operationContext_1 != 0;
    assume in_operationContext_1 > 0;
    assume {:nonnull} in_operationContext_1 != 0;
    assume in_operationContext_1 > 0;
    call {:si_unique_call 2178} out_vslice_dummy_var_137 := KeSynchronizeExecution(0, li2bplFunctionConstant206, 0);
    assume {:nonnull} in_interlockedResult_1 != 0;
    assume in_interlockedResult_1 > 0;
    goto anon25_Then, anon25_Else;

  anon25_Else:
    assume {:nonnull} in_operationContext_1 != 0;
    assume in_operationContext_1 > 0;
    assume {:nonnull} in_interlockedResult_1 != 0;
    assume in_interlockedResult_1 > 0;
    assume {:nonnull} in_operationContext_1 != 0;
    assume in_operationContext_1 > 0;
    call {:si_unique_call 2177} out_vslice_dummy_var_138 := KeSynchronizeExecution(0, li2bplFunctionConstant206, 0);
    goto anon25_Else_dummy;

  anon25_Else_dummy:
    goto L_BAF_5;

  anon25_Then:
    out_moreDpcProcessing_1 := 0;
    goto anon25_Then_dummy;

  anon25_Then_dummy:
    goto L_BAF_5;

  anon23_Then:
    assume {:partition} out_dataNotConsumed_1 == 0;
    assume {:nonnull} in_getPointerContext_1 != 0;
    assume in_getPointerContext_1 > 0;
    goto anon24_Then, anon24_Else;

  anon24_Else:
    assume out_classService_1 == 0;
    assume {:nonnull} in_getPointerContext_1 != 0;
    assume in_getPointerContext_1 > 0;
    havoc out_dataNotConsumed_1;
    assume {:nonnull} in_getPointerContext_1 != 0;
    assume in_getPointerContext_1 > 0;
    assume {:nonnull} in_setPointerContext_1 != 0;
    assume in_setPointerContext_1 > 0;
    assume {:nonnull} in_setPointerContext_1 != 0;
    assume in_setPointerContext_1 > 0;
    goto L58;

  anon24_Then:
    goto L58;

  anon27_Then:
    assume {:partition} out_dataNotConsumed_1 == 0;
    assume {:nonnull} in_deviceExtension_7 != 0;
    assume in_deviceExtension_7 > 0;
    assume {:nonnull} in_setPointerContext_1 != 0;
    assume in_setPointerContext_1 > 0;
    assume {:nonnull} in_getPointerContext_1 != 0;
    assume in_getPointerContext_1 > 0;
    assume {:nonnull} in_setPointerContext_1 != 0;
    assume in_setPointerContext_1 > 0;
    goto L47;

  anon26_Then:
    goto L47;

  anon21_Then:
    goto L43;
}



procedure {:LoopProcedure} I8042MouseIsrDpc_loop_L31(in_dataNotConsumed_1: int, in_moreDpcProcessing_1: int, in_inputDataConsumed_1: int, in_operationContext_1: int, in_classService_1: int, in_interlockedResult_1: int, in_setPointerContext_1: int, in_deltaTime_1: int, in_getPointerContext_1: int, in_deviceExtension_7: int, in_vslice_dummy_var_132: int, in_vslice_dummy_var_134: int, in_vslice_dummy_var_135: int, in_vslice_dummy_var_136: int, in_vslice_dummy_var_137: int, in_vslice_dummy_var_138: int) returns (out_dataNotConsumed_1: int, out_moreDpcProcessing_1: int, out_inputDataConsumed_1: int, out_classService_1: int, out_vslice_dummy_var_132: int, out_vslice_dummy_var_134: int, out_vslice_dummy_var_135: int, out_vslice_dummy_var_136: int, out_vslice_dummy_var_137: int, out_vslice_dummy_var_138: int);
  modifies alloc;
  free ensures out_moreDpcProcessing_1 == 0 || out_moreDpcProcessing_1 == in_moreDpcProcessing_1;
  free ensures out_inputDataConsumed_1 == 0 || out_inputDataConsumed_1 == in_inputDataConsumed_1;
  free ensures out_vslice_dummy_var_132 == 1 || out_vslice_dummy_var_132 == 0 || out_vslice_dummy_var_132 == in_vslice_dummy_var_132;
  free ensures out_vslice_dummy_var_134 == 1 || out_vslice_dummy_var_134 == 0 || out_vslice_dummy_var_134 == in_vslice_dummy_var_134;
  free ensures out_vslice_dummy_var_135 == 1 || out_vslice_dummy_var_135 == 0 || out_vslice_dummy_var_135 == in_vslice_dummy_var_135;
  free ensures out_vslice_dummy_var_136 == 1 || out_vslice_dummy_var_136 == 0 || out_vslice_dummy_var_136 == in_vslice_dummy_var_136;
  free ensures out_vslice_dummy_var_137 == 1 || out_vslice_dummy_var_137 == 0 || out_vslice_dummy_var_137 == in_vslice_dummy_var_137;
  free ensures out_vslice_dummy_var_138 == 1 || out_vslice_dummy_var_138 == 0 || out_vslice_dummy_var_138 == in_vslice_dummy_var_138;



implementation I8xSanityCheckResources_loop_L37(in_i_18: int, in_configuration_5: int) returns (out_i_18: int)
{

  entry:
    out_i_18 := in_i_18;
    goto L37, exit;

  exit:
    return;

  L37:
    assume {:nonnull} in_configuration_5 != 0;
    assume in_configuration_5 > 0;
    goto anon19_Else;

  anon19_Else:
    out_i_18 := out_i_18 + 1;
    goto anon19_Else_dummy;

  anon19_Else_dummy:
    havoc out_i_18;
    return;
}



procedure {:LoopProcedure} I8xSanityCheckResources_loop_L37(in_i_18: int, in_configuration_5: int) returns (out_i_18: int);



implementation I8xSanityCheckResources_loop_L42(in_i_18: int, in_Tmp_867: int, in_Tmp_868: int, in_sdv_429: int, in_Tmp_870: int, in_Tmp_876: int, in_Tmp_877: int, in_Tmp_879: int, in_Tmp_882: int, in_Tmp_883: int) returns (out_i_18: int, out_Tmp_867: int, out_Tmp_868: int, out_sdv_429: int, out_Tmp_870: int, out_Tmp_876: int, out_Tmp_877: int, out_Tmp_879: int, out_Tmp_882: int)
{

  entry:
    out_i_18, out_Tmp_867, out_Tmp_868, out_sdv_429, out_Tmp_870, out_Tmp_876, out_Tmp_877, out_Tmp_879, out_Tmp_882 := in_i_18, in_Tmp_867, in_Tmp_868, in_sdv_429, in_Tmp_870, in_Tmp_876, in_Tmp_877, in_Tmp_879, in_Tmp_882;
    goto L42, exit;

  exit:
    return;

  L42:
    goto anon20_Else;

  anon20_Else:
    out_Tmp_876 := out_i_18;
    havoc out_Tmp_882;
    assume {:nonnull} out_Tmp_882 != 0;
    assume out_Tmp_882 > 0;
    havoc out_Tmp_870;
    out_Tmp_879 := out_i_18;
    havoc out_Tmp_867;
    assume {:nonnull} out_Tmp_867 != 0;
    assume out_Tmp_867 > 0;
    assume {:nonnull} in_Tmp_883 != 0;
    assume in_Tmp_883 > 0;
    assume {:nonnull} out_Tmp_867 != 0;
    assume out_Tmp_867 > 0;
    assume {:nonnull} in_Tmp_883 != 0;
    assume in_Tmp_883 > 0;
    assume {:nonnull} out_Tmp_867 != 0;
    assume out_Tmp_867 > 0;
    assume {:nonnull} in_Tmp_883 != 0;
    assume in_Tmp_883 > 0;
    assume {:nonnull} out_Tmp_867 != 0;
    assume out_Tmp_867 > 0;
    assume {:nonnull} in_Tmp_883 != 0;
    assume in_Tmp_883 > 0;
    assume {:nonnull} out_Tmp_867 != 0;
    assume out_Tmp_867 > 0;
    assume {:nonnull} in_Tmp_883 != 0;
    assume in_Tmp_883 > 0;
    call {:si_unique_call 2180} out_sdv_429 := MmMapIoSpace(in_Tmp_883, out_Tmp_870, 0);
    out_Tmp_868 := out_i_18;
    havoc out_Tmp_877;
    assume {:nonnull} out_Tmp_877 != 0;
    assume out_Tmp_877 > 0;
    out_i_18 := out_i_18 + 1;
    goto anon20_Else_dummy;

  anon20_Else_dummy:
    call {:si_unique_call 2181} {:si_old_unique_call 1} out_i_18, out_Tmp_867, out_Tmp_868, out_sdv_429, out_Tmp_870, out_Tmp_876, out_Tmp_877, out_Tmp_879, out_Tmp_882 := I8xSanityCheckResources_loop_L42(out_i_18, out_Tmp_867, out_Tmp_868, out_sdv_429, out_Tmp_870, out_Tmp_876, out_Tmp_877, out_Tmp_879, out_Tmp_882, in_Tmp_883);
    return;
}



procedure {:LoopProcedure} I8xSanityCheckResources_loop_L42(in_i_18: int, in_Tmp_867: int, in_Tmp_868: int, in_sdv_429: int, in_Tmp_870: int, in_Tmp_876: int, in_Tmp_877: int, in_Tmp_879: int, in_Tmp_882: int, in_Tmp_883: int) returns (out_i_18: int, out_Tmp_867: int, out_Tmp_868: int, out_sdv_429: int, out_Tmp_870: int, out_Tmp_876: int, out_Tmp_877: int, out_Tmp_879: int, out_Tmp_882: int);
  modifies alloc;



implementation I8xSanityCheckResources_loop_L52(in_i_18: int, in_Tmp_869: int, in_Tmp_872: int, in_Tmp_875: int, in_Tmp_885: int) returns (out_i_18: int, out_Tmp_869: int, out_Tmp_872: int, out_Tmp_875: int, out_Tmp_885: int)
{

  entry:
    out_i_18, out_Tmp_869, out_Tmp_872, out_Tmp_875, out_Tmp_885 := in_i_18, in_Tmp_869, in_Tmp_872, in_Tmp_875, in_Tmp_885;
    goto L52, exit;

  exit:
    return;

  L52:
    goto anon21_Else;

  anon21_Else:
    out_Tmp_869 := out_i_18;
    havoc out_Tmp_885;
    out_Tmp_875 := out_i_18;
    havoc out_Tmp_872;
    assume {:nonnull} out_Tmp_872 != 0;
    assume out_Tmp_872 > 0;
    assume {:nonnull} out_Tmp_885 != 0;
    assume out_Tmp_885 > 0;
    out_i_18 := out_i_18 + 1;
    goto anon21_Else_dummy;

  anon21_Else_dummy:
    call {:si_unique_call 2182} {:si_old_unique_call 1} out_i_18, out_Tmp_869, out_Tmp_872, out_Tmp_875, out_Tmp_885 := I8xSanityCheckResources_loop_L52(out_i_18, out_Tmp_869, out_Tmp_872, out_Tmp_875, out_Tmp_885);
    return;
}



procedure {:LoopProcedure} I8xSanityCheckResources_loop_L52(in_i_18: int, in_Tmp_869: int, in_Tmp_872: int, in_Tmp_875: int, in_Tmp_885: int) returns (out_i_18: int, out_Tmp_869: int, out_Tmp_872: int, out_Tmp_875: int, out_Tmp_885: int);



implementation I8042RetriesExceededDpc_loop_L47(in_i_19: int, in_Tmp_889: int, in_Tmp_891: int, in_commonData_5: int, in_errorLogEntry_3: int, in_Tmp_894: int, in_Tmp_896: int) returns (out_i_19: int, out_Tmp_889: int, out_Tmp_891: int, out_Tmp_894: int, out_Tmp_896: int)
{

  entry:
    out_i_19, out_Tmp_889, out_Tmp_891, out_Tmp_894, out_Tmp_896 := in_i_19, in_Tmp_889, in_Tmp_891, in_Tmp_894, in_Tmp_896;
    goto L47, exit;

  exit:
    return;

  L47:
    assume {:nonnull} in_commonData_5 != 0;
    assume in_commonData_5 > 0;
    goto anon18_Else;

  anon18_Else:
    out_Tmp_894 := out_i_19;
    assume {:nonnull} in_errorLogEntry_3 != 0;
    assume in_errorLogEntry_3 > 0;
    havoc out_Tmp_896;
    out_Tmp_891 := out_i_19;
    assume {:nonnull} in_commonData_5 != 0;
    assume in_commonData_5 > 0;
    havoc out_Tmp_889;
    assume {:nonnull} out_Tmp_889 != 0;
    assume out_Tmp_889 > 0;
    assume {:nonnull} out_Tmp_896 != 0;
    assume out_Tmp_896 > 0;
    out_i_19 := out_i_19 + 1;
    goto anon18_Else_dummy;

  anon18_Else_dummy:
    call {:si_unique_call 2183} {:si_old_unique_call 1} out_i_19, out_Tmp_889, out_Tmp_891, out_Tmp_894, out_Tmp_896 := I8042RetriesExceededDpc_loop_L47(out_i_19, out_Tmp_889, out_Tmp_891, in_commonData_5, in_errorLogEntry_3, out_Tmp_894, out_Tmp_896);
    return;
}



procedure {:LoopProcedure} I8042RetriesExceededDpc_loop_L47(in_i_19: int, in_Tmp_889: int, in_Tmp_891: int, in_commonData_5: int, in_errorLogEntry_3: int, in_Tmp_894: int, in_Tmp_896: int) returns (out_i_19: int, out_Tmp_889: int, out_Tmp_891: int, out_Tmp_894: int, out_Tmp_896: int);



implementation I8xLogError_loop_L20(in_i_20: int, in_Tmp_942: int, in_errorLogEntry_4: int, in_Tmp_945: int, in_Tmp_946: int, in_DumpData_1: int, in_DumpCount_1: int) returns (out_i_20: int, out_Tmp_942: int, out_Tmp_945: int, out_Tmp_946: int)
{

  entry:
    out_i_20, out_Tmp_942, out_Tmp_945, out_Tmp_946 := in_i_20, in_Tmp_942, in_Tmp_945, in_Tmp_946;
    goto L20, exit;

  exit:
    return;

  L20:
    goto anon5_Else;

  anon5_Else:
    assume {:partition} in_DumpCount_1 > out_i_20;
    out_Tmp_945 := out_i_20;
    assume {:nonnull} in_errorLogEntry_4 != 0;
    assume in_errorLogEntry_4 > 0;
    havoc out_Tmp_942;
    out_Tmp_946 := out_i_20;
    assume {:nonnull} in_DumpData_1 != 0;
    assume in_DumpData_1 > 0;
    assume {:nonnull} out_Tmp_942 != 0;
    assume out_Tmp_942 > 0;
    out_i_20 := out_i_20 + 1;
    goto anon5_Else_dummy;

  anon5_Else_dummy:
    call {:si_unique_call 2184} {:si_old_unique_call 1} out_i_20, out_Tmp_942, out_Tmp_945, out_Tmp_946 := I8xLogError_loop_L20(out_i_20, out_Tmp_942, in_errorLogEntry_4, out_Tmp_945, out_Tmp_946, in_DumpData_1, in_DumpCount_1);
    return;
}



procedure {:LoopProcedure} I8xLogError_loop_L20(in_i_20: int, in_Tmp_942: int, in_errorLogEntry_4: int, in_Tmp_945: int, in_Tmp_946: int, in_DumpData_1: int, in_DumpCount_1: int) returns (out_i_20: int, out_Tmp_942: int, out_Tmp_945: int, out_Tmp_946: int);



implementation I8xPutBytePolled#0_loop_L44(in_response_2: int, in_status_4: int, in_AckDeviceType: int) returns (out_status_4: int)
{

  entry:
    out_status_4 := in_status_4;
    goto L44, exit;

  exit:
    return;

  L44:
    call {:si_unique_call 2185} out_status_4 := I8xGetBytePolled(in_AckDeviceType, in_response_2);
    goto anon43_Then;

  anon43_Then:
    assume {:partition} out_status_4 == 0;
    assume {:nonnull} in_response_2 != 0;
    assume in_response_2 > 0;
    goto anon44_Else;

  anon44_Else:
    assume {:nonnull} in_response_2 != 0;
    assume in_response_2 > 0;
    goto anon46_Then;

  anon46_Then:
    goto anon46_Then_dummy;

  anon46_Then_dummy:
    call {:si_unique_call 2186} {:si_old_unique_call 1} out_status_4 := I8xPutBytePolled#0_loop_L44(in_response_2, out_status_4, in_AckDeviceType);
    return;
}



procedure {:LoopProcedure} I8xPutBytePolled#0_loop_L44(in_response_2: int, in_status_4: int, in_AckDeviceType: int) returns (out_status_4: int);
  modifies alloc;
  free ensures out_status_4 == -1073741643 || out_status_4 == 0 || out_status_4 == in_status_4;



implementation I8xPutBytePolled#0_loop_L20(in_i_4: int, in_sdv_45: int, in_Tmp_79: int) returns (out_i_4: int, out_sdv_45: int, out_Tmp_79: int)
{

  entry:
    out_i_4, out_sdv_45, out_Tmp_79 := in_i_4, in_sdv_45, in_Tmp_79;
    goto L20, exit;

  exit:
    return;

  L20:
    out_Tmp_79 := out_i_4;
    out_i_4 := out_i_4 + 1;
    goto anon48_Else;

  anon48_Else:
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:IndirectCall} true;
    call {:si_unique_call 2187} out_sdv_45 := corral_nondet();
    goto L25;

  L25:
    goto anon38_Else;

  anon38_Else:
    assume {:partition} BAND(out_sdv_45, 2) != 0;
    goto anon38_Else_dummy;

  anon38_Else_dummy:
    havoc out_i_4;
    return;

  anon37_Then:
    assume {:IndirectCall} true;
    call {:si_unique_call 2188} out_sdv_45 := corral_nondet();
    goto L25;
}



procedure {:LoopProcedure} I8xPutBytePolled#0_loop_L20(in_i_4: int, in_sdv_45: int, in_Tmp_79: int) returns (out_i_4: int, out_sdv_45: int, out_Tmp_79: int);
  free ensures out_Tmp_79 == in_i_4 || out_Tmp_79 == in_Tmp_79;



implementation I8xPutBytePolled#0_loop_L17(in_i_4: int, in_j: int, in_keepTrying: int, in_sdv_45: int, in_response_2: int, in_commandAddress_1: int, in_Tmp_79: int, in_dataAddress_1: int, in_status_4: int, in_PortType_1: int, in_WaitForAcknowledge: int, in_AckDeviceType: int) returns (out_i_4: int, out_j: int, out_keepTrying: int, out_sdv_45: int, out_Tmp_79: int, out_status_4: int)
{

  entry:
    out_i_4, out_j, out_keepTrying, out_sdv_45, out_Tmp_79, out_status_4 := in_i_4, in_j, in_keepTrying, in_sdv_45, in_Tmp_79, in_status_4;
    goto L17, exit;

  exit:
    return;

  L17:
    goto anon34_Else;

  anon34_Else:
    out_i_4 := 0;
    goto L20;

  L20:
    call {:si_unique_call 2192} out_i_4, out_sdv_45, out_Tmp_79 := I8xPutBytePolled#0_loop_L20(out_i_4, out_sdv_45, out_Tmp_79);
    goto L20_last;

  L20_last:
    out_Tmp_79 := out_i_4;
    out_i_4 := out_i_4 + 1;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:IndirectCall} true;
    call {:si_unique_call 2193} out_sdv_45 := corral_nondet();
    goto L25;

  L25:
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} BAND(out_sdv_45, 2) != 0;
    assume false;
    return;

  anon38_Then:
    assume {:partition} BAND(out_sdv_45, 2) == 0;
    goto L21;

  L21:
    goto anon36_Then;

  anon36_Then:
    call {:si_unique_call 2191} I8xDrainOutputBuffer(in_dataAddress_1, in_commandAddress_1);
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} in_PortType_1 == 1;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:IndirectCall} true;
    goto L41;

  L41:
    goto anon42_Else;

  anon42_Else:
    assume {:partition} in_WaitForAcknowledge != 0;
    out_keepTrying := 0;
    goto L44;

  L44:
    call {:si_unique_call 2189} out_status_4 := I8xPutBytePolled#0_loop_L44(in_response_2, out_status_4, in_AckDeviceType);
    goto L44_last;

  L44_last:
    call {:si_unique_call 2190} out_status_4 := I8xGetBytePolled(in_AckDeviceType, in_response_2);
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} out_status_4 != 0;
    goto L50;

  L50:
    goto anon45_Else;

  anon45_Else:
    assume {:partition} out_keepTrying != 0;
    out_j := out_j + 1;
    goto anon45_Else_dummy;

  anon45_Else_dummy:
    call {:si_unique_call 2195} {:si_old_unique_call 1} out_i_4, out_j, out_keepTrying, out_sdv_45, out_Tmp_79, out_status_4 := I8xPutBytePolled#0_loop_L17(out_i_4, out_j, out_keepTrying, out_sdv_45, in_response_2, in_commandAddress_1, out_Tmp_79, in_dataAddress_1, out_status_4, in_PortType_1, in_WaitForAcknowledge, in_AckDeviceType);
    return;

  anon43_Then:
    assume {:partition} out_status_4 == 0;
    assume {:nonnull} in_response_2 != 0;
    assume in_response_2 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:nonnull} in_response_2 != 0;
    assume in_response_2 > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    goto anon47_Then;

  anon47_Then:
    assume {:partition} in_AckDeviceType != 2;
    goto L56;

  L56:
    out_keepTrying := 1;
    goto L50;

  anon46_Then:
    assume false;
    return;

  anon44_Then:
    goto L50;

  anon41_Then:
    assume {:IndirectCall} true;
    goto L41;

  anon39_Then:
    assume {:partition} in_PortType_1 != 1;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:IndirectCall} true;
    goto L41;

  anon40_Then:
    assume {:IndirectCall} true;
    goto L41;

  anon37_Then:
    assume {:IndirectCall} true;
    call {:si_unique_call 2194} out_sdv_45 := corral_nondet();
    goto L25;

  anon48_Then:
    goto L21;
}



procedure {:LoopProcedure} I8xPutBytePolled#0_loop_L17(in_i_4: int, in_j: int, in_keepTrying: int, in_sdv_45: int, in_response_2: int, in_commandAddress_1: int, in_Tmp_79: int, in_dataAddress_1: int, in_status_4: int, in_PortType_1: int, in_WaitForAcknowledge: int, in_AckDeviceType: int) returns (out_i_4: int, out_j: int, out_keepTrying: int, out_sdv_45: int, out_Tmp_79: int, out_status_4: int);
  modifies alloc;
  free ensures out_keepTrying == 0 || out_keepTrying == 1 || out_keepTrying == in_keepTrying;
  free ensures out_status_4 == -1073741643 || out_status_4 == 0 || out_status_4 == in_status_4;



implementation I8xPutBytePolled#1_loop_L44(in_response_2: int, in_status_4: int, in_AckDeviceType: int) returns (out_status_4: int)
{

  entry:
    out_status_4 := in_status_4;
    goto L44, exit;

  exit:
    return;

  L44:
    call {:si_unique_call 2196} out_status_4 := I8xGetBytePolled(in_AckDeviceType, in_response_2);
    goto anon43_Then;

  anon43_Then:
    assume {:partition} out_status_4 == 0;
    assume {:nonnull} in_response_2 != 0;
    assume in_response_2 > 0;
    goto anon44_Else;

  anon44_Else:
    assume {:nonnull} in_response_2 != 0;
    assume in_response_2 > 0;
    goto anon46_Then;

  anon46_Then:
    goto anon46_Then_dummy;

  anon46_Then_dummy:
    call {:si_unique_call 2197} {:si_old_unique_call 1} out_status_4 := I8xPutBytePolled#1_loop_L44(in_response_2, out_status_4, in_AckDeviceType);
    return;
}



procedure {:LoopProcedure} I8xPutBytePolled#1_loop_L44(in_response_2: int, in_status_4: int, in_AckDeviceType: int) returns (out_status_4: int);
  modifies alloc;
  free ensures out_status_4 == -1073741643 || out_status_4 == 0 || out_status_4 == in_status_4;



implementation I8xPutBytePolled#1_loop_L20(in_i_4: int, in_sdv_45: int, in_Tmp_79: int) returns (out_i_4: int, out_sdv_45: int, out_Tmp_79: int)
{

  entry:
    out_i_4, out_sdv_45, out_Tmp_79 := in_i_4, in_sdv_45, in_Tmp_79;
    goto L20, exit;

  exit:
    return;

  L20:
    out_Tmp_79 := out_i_4;
    out_i_4 := out_i_4 + 1;
    goto anon48_Else;

  anon48_Else:
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:IndirectCall} true;
    call {:si_unique_call 2198} out_sdv_45 := corral_nondet();
    goto L25;

  L25:
    goto anon38_Else;

  anon38_Else:
    assume {:partition} BAND(out_sdv_45, 2) != 0;
    goto anon38_Else_dummy;

  anon38_Else_dummy:
    havoc out_i_4;
    return;

  anon37_Then:
    assume {:IndirectCall} true;
    call {:si_unique_call 2199} out_sdv_45 := corral_nondet();
    goto L25;
}



procedure {:LoopProcedure} I8xPutBytePolled#1_loop_L20(in_i_4: int, in_sdv_45: int, in_Tmp_79: int) returns (out_i_4: int, out_sdv_45: int, out_Tmp_79: int);
  free ensures out_Tmp_79 == in_i_4 || out_Tmp_79 == in_Tmp_79;



implementation I8xPutBytePolled#1_loop_L17(in_i_4: int, in_j: int, in_keepTrying: int, in_sdv_45: int, in_response_2: int, in_commandAddress_1: int, in_Tmp_79: int, in_dataAddress_1: int, in_status_4: int, in_PortType_1: int, in_WaitForAcknowledge: int, in_AckDeviceType: int, in_vslice_dummy_var_234: int) returns (out_i_4: int, out_j: int, out_keepTrying: int, out_sdv_45: int, out_Tmp_79: int, out_status_4: int, out_vslice_dummy_var_234: int)
{

  entry:
    out_i_4, out_j, out_keepTrying, out_sdv_45, out_Tmp_79, out_status_4, out_vslice_dummy_var_234 := in_i_4, in_j, in_keepTrying, in_sdv_45, in_Tmp_79, in_status_4, in_vslice_dummy_var_234;
    goto L17, exit;

  exit:
    return;

  L17:
    goto anon34_Else;

  anon34_Else:
    out_i_4 := 0;
    goto L20;

  L20:
    call {:si_unique_call 2203} out_i_4, out_sdv_45, out_Tmp_79 := I8xPutBytePolled#1_loop_L20(out_i_4, out_sdv_45, out_Tmp_79);
    goto L20_last;

  L20_last:
    out_Tmp_79 := out_i_4;
    out_i_4 := out_i_4 + 1;
    goto anon48_Then, anon48_Else;

  anon48_Else:
    goto anon37_Then, anon37_Else;

  anon37_Else:
    assume {:IndirectCall} true;
    call {:si_unique_call 2204} out_sdv_45 := corral_nondet();
    goto L25;

  L25:
    goto anon38_Then, anon38_Else;

  anon38_Else:
    assume {:partition} BAND(out_sdv_45, 2) != 0;
    assume false;
    return;

  anon38_Then:
    assume {:partition} BAND(out_sdv_45, 2) == 0;
    goto L21;

  L21:
    goto anon36_Then;

  anon36_Then:
    call {:si_unique_call 2202} I8xDrainOutputBuffer(in_dataAddress_1, in_commandAddress_1);
    goto anon39_Then, anon39_Else;

  anon39_Else:
    assume {:partition} in_PortType_1 == 1;
    goto anon41_Then, anon41_Else;

  anon41_Else:
    assume {:IndirectCall} true;
    goto L41;

  L41:
    goto anon42_Else;

  anon42_Else:
    assume {:partition} in_WaitForAcknowledge != 0;
    out_keepTrying := 0;
    goto L44;

  L44:
    call {:si_unique_call 2200} out_status_4 := I8xPutBytePolled#1_loop_L44(in_response_2, out_status_4, in_AckDeviceType);
    goto L44_last;

  L44_last:
    call {:si_unique_call 2201} out_status_4 := I8xGetBytePolled(in_AckDeviceType, in_response_2);
    goto anon43_Then, anon43_Else;

  anon43_Else:
    assume {:partition} out_status_4 != 0;
    goto L50;

  L50:
    goto anon45_Else;

  anon45_Else:
    assume {:partition} out_keepTrying != 0;
    out_j := out_j + 1;
    goto anon45_Else_dummy;

  anon45_Else_dummy:
    call {:si_unique_call 2207} {:si_old_unique_call 1} out_i_4, out_j, out_keepTrying, out_sdv_45, out_Tmp_79, out_status_4, out_vslice_dummy_var_234 := I8xPutBytePolled#1_loop_L17(out_i_4, out_j, out_keepTrying, out_sdv_45, in_response_2, in_commandAddress_1, out_Tmp_79, in_dataAddress_1, out_status_4, in_PortType_1, in_WaitForAcknowledge, in_AckDeviceType, out_vslice_dummy_var_234);
    return;

  anon43_Then:
    assume {:partition} out_status_4 == 0;
    assume {:nonnull} in_response_2 != 0;
    assume in_response_2 > 0;
    goto anon44_Then, anon44_Else;

  anon44_Else:
    assume {:nonnull} in_response_2 != 0;
    assume in_response_2 > 0;
    goto anon46_Then, anon46_Else;

  anon46_Else:
    goto anon47_Then, anon47_Else;

  anon47_Else:
    assume {:partition} in_AckDeviceType == 2;
    call {:si_unique_call 2206} out_vslice_dummy_var_234 := I8xPutBytePolled#0(1, 0, 3, 212);
    goto L56;

  L56:
    out_keepTrying := 1;
    goto L50;

  anon47_Then:
    assume {:partition} in_AckDeviceType != 2;
    goto L56;

  anon46_Then:
    assume false;
    return;

  anon44_Then:
    goto L50;

  anon41_Then:
    assume {:IndirectCall} true;
    goto L41;

  anon39_Then:
    assume {:partition} in_PortType_1 != 1;
    goto anon40_Then, anon40_Else;

  anon40_Else:
    assume {:IndirectCall} true;
    goto L41;

  anon40_Then:
    assume {:IndirectCall} true;
    goto L41;

  anon37_Then:
    assume {:IndirectCall} true;
    call {:si_unique_call 2205} out_sdv_45 := corral_nondet();
    goto L25;

  anon48_Then:
    goto L21;
}



procedure {:LoopProcedure} I8xPutBytePolled#1_loop_L17(in_i_4: int, in_j: int, in_keepTrying: int, in_sdv_45: int, in_response_2: int, in_commandAddress_1: int, in_Tmp_79: int, in_dataAddress_1: int, in_status_4: int, in_PortType_1: int, in_WaitForAcknowledge: int, in_AckDeviceType: int, in_vslice_dummy_var_234: int) returns (out_i_4: int, out_j: int, out_keepTrying: int, out_sdv_45: int, out_Tmp_79: int, out_status_4: int, out_vslice_dummy_var_234: int);
  modifies alloc;
  free ensures out_keepTrying == 0 || out_keepTrying == 1 || out_keepTrying == in_keepTrying;
  free ensures out_status_4 == -1073741643 || out_status_4 == 0 || out_status_4 == in_status_4;



procedure fakeMain() returns (Tmp_708: int, dup_assertVar: bool);
  modifies alloc, SLAM_guard_S_0, forward_state, s, yogi_error, Mem_T.CompletionRoutine__IO_STACK_LOCATION;



implementation {:entrypoint} fakeMain() returns (Tmp_708: int, dup_assertVar: bool)
{

  start:
    call Tmp_708, dup_assertVar := main();
    assume {:OldAssert} !dup_assertVar;
    return;
}


